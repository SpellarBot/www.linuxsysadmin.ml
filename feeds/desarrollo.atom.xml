<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linux Sysadmin - Desarrollo</title><link href="https://www.linuxsysadmin.ml/" rel="alternate"></link><link href="https://www.linuxsysadmin.ml/feeds/desarrollo.atom.xml" rel="self"></link><id>https://www.linuxsysadmin.ml/</id><updated>2018-12-10T10:00:00+01:00</updated><entry><title>Enviando mensajes a slack desde python usando webhooks</title><link href="https://www.linuxsysadmin.ml/2018/12/enviando-mensajes-a-slack-desde-python-usando-webhooks.html" rel="alternate"></link><published>2018-12-10T10:00:00+01:00</published><updated>2018-12-10T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-12-10:/2018/12/enviando-mensajes-a-slack-desde-python-usando-webhooks.html</id><summary type="html">&lt;p&gt;Cuando hablamos de equipos distribuidos por diferentes puntos geográficos, se necesitan herramientas de comunicación adecuadas; en nuestro equipo utilizamos &lt;strong&gt;Slack&lt;/strong&gt;. Con el auge de palabras como &lt;strong&gt;chatops&lt;/strong&gt; y otras tendencias, se hace muy interesante que nuestros sistemas puedan notificar mensajes en la misma herramienta que todo el equipo está mirando …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando hablamos de equipos distribuidos por diferentes puntos geográficos, se necesitan herramientas de comunicación adecuadas; en nuestro equipo utilizamos &lt;strong&gt;Slack&lt;/strong&gt;. Con el auge de palabras como &lt;strong&gt;chatops&lt;/strong&gt; y otras tendencias, se hace muy interesante que nuestros sistemas puedan notificar mensajes en la misma herramienta que todo el equipo está mirando.&lt;/p&gt;
&lt;p&gt;En el caso concreto de &lt;strong&gt;Slack&lt;/strong&gt;, podemos encontrar muchos añadidos en forma de "Apps"; estas nos van a dar muchas herramientas de gran utilidad, y una de las que más me gusta es la de &lt;strong&gt;webhooks&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los &lt;strong&gt;webhooks&lt;/strong&gt; son URLs a las que podemos mandar mensajes con una forma concreta, para que acaben mostrándose en el canal conveniente de &lt;strong&gt;Slack&lt;/strong&gt;, de una forma sencilla.&lt;/p&gt;
&lt;p&gt;Seguramente ya existen librerías que hagan esa funcionalidad, pero en este artículo se va a mostrar la petición mediante el uso directo de HTTP, para ver lo sencillo que es y no ensuciar los entornos con librerías "no principales" para nuestro servicio.&lt;/p&gt;
&lt;p&gt;El único requisito que necesitamos en &lt;strong&gt;Slack&lt;/strong&gt; es el de activar la aplicación &lt;strong&gt;Incoming webhooks&lt;/strong&gt;, que se puede encontrar siguiendo el panel de conversaciones, en el lateral izquierdo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aplicaciones -&amp;gt; WebHooks entrantes -&amp;gt; Añadir configuración&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El resultado es que nos va a dar una &lt;strong&gt;URL de Webhook&lt;/strong&gt;, que es algo del estilo &lt;a href="https://hooks.slack.com/services/XXX/YYY/ZZZ"&gt;https://hooks.slack.com/services/XXX/YYY/ZZZ&lt;/a&gt;; no necesitamos nada más.&lt;/p&gt;
&lt;p&gt;Para la parte de envío, solo se necesita hacer una petición POST al &lt;strong&gt;webhook&lt;/strong&gt;, con un mensaje muy concreto. Más información &lt;a href="https://api.slack.com/incoming-webhooks"&gt;en la documentación&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; no puede ser más sencillo; solo he usado la librería &lt;strong&gt;requests&lt;/strong&gt; para aumentar la legibilidad del código, aunque la &lt;strong&gt;httplib&lt;/strong&gt; también serviría y está en la librería estándar de &lt;strong&gt;python&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$ cat requirements.txt
&lt;span class="nv"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.20.1
&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$ cat send_slack_message.py
&lt;span class="c1"&gt;#!/usr/bin/env python3&lt;/span&gt;

import requests
import json

&lt;span class="nv"&gt;SLACK_WEBHOOK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://hooks.slack.com/services/XXX/YYY/ZZZ&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SLACK_CHANNEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#notificaciones&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SLACK_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Server Atlantis&amp;#39;&lt;/span&gt;

def send_slack_message&lt;span class="o"&gt;(&lt;/span&gt;text&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;channel&amp;#39;&lt;/span&gt;: SLACK_CHANNEL,
        &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: SLACK_USERNAME,
        &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;: text,
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.post&lt;span class="o"&gt;(&lt;/span&gt;SLACK_WEBHOOK, &lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;json.dumps&lt;span class="o"&gt;(&lt;/span&gt;payload&lt;span class="o"&gt;))&lt;/span&gt;

send_slack_message&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo hace falta que alguien o algo lance el &lt;em&gt;script&lt;/em&gt;, que posiblemente acabará siendo parametrizado para un uso más útil... De momento lo haremos a mano, solo para verificar que funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$ ./send_slack_message.py
&lt;span class="o"&gt;(&lt;/span&gt;.env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/slack_webhook$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos nuestro nuevo mensaje en el canal de grupo "#notificaciones", que es el que indicamos cuando creamos el &lt;strong&gt;webhook&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Personalmente utilizo esto para tener informes de funcionamiento periódicos en un &lt;strong&gt;cron&lt;/strong&gt;, o alguna monitorización temporal especial para seguir algún &lt;em&gt;bug&lt;/em&gt;.&lt;/p&gt;</content><category term="python"></category><category term="slack"></category><category term="webhooks"></category></entry><entry><title>Geolocalizando flotas de vehículos con MongoDB</title><link href="https://www.linuxsysadmin.ml/2018/11/geolocalizando-flotas-de-vehiculos-con-mongodb.html" rel="alternate"></link><published>2018-11-26T10:00:00+01:00</published><updated>2018-11-26T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-11-26:/2018/11/geolocalizando-flotas-de-vehiculos-con-mongodb.html</id><summary type="html">&lt;p&gt;Soy un aficionado a las películas bélicas, especialmente las referentes a la Segunda Guerra Mundial. Una de las imágenes más impactantes es cuando salen los centros de mando, donde los generales tienen una mesa con un mapa y la disposición de sus fuerzas, que se actualizan cuando llegan los mensajeros …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soy un aficionado a las películas bélicas, especialmente las referentes a la Segunda Guerra Mundial. Una de las imágenes más impactantes es cuando salen los centros de mando, donde los generales tienen una mesa con un mapa y la disposición de sus fuerzas, que se actualizan cuando llegan los mensajeros.&lt;/p&gt;
&lt;p&gt;Trasladando el problema fuera del ambiente bélico, y adaptando a las tecnologías actuales, veríamos que esta imagen es una bonita aproximación para un sistema de geolocalización:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una base de datos para guardar la posición y tamaño de tus unidades&lt;/li&gt;
&lt;li&gt;Un &lt;em&gt;feed&lt;/em&gt; periódico de actualizaciones, por ejemplo vía REST&lt;/li&gt;
&lt;li&gt;Y por supuesto con una encriptación SSL, que rebaja a un broma la criptografía del momento&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por supuesto, hoy en día no tenemos un conflicto bélico tan grande como para justificar este sistema, pero algunos clientes están interesados en geolocalizar flotas de vehículos, o en poner sus instalaciones en un mapa, con vistas a darse a conocer.&lt;/p&gt;
&lt;p&gt;Dependiendo de si el punto de referencia es móvil o no, y de si los puntos a geolocalizar se mueven o no, damos pie a una variedad muy interesante de problemas que podemos resolver:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un sistema de control de flotas de camiones, taxis o barcos&lt;/li&gt;
&lt;li&gt;Una aplicación turística para nuestro móvil&lt;/li&gt;
&lt;li&gt;Recordatorio de sitios en donde hemos aparcado el coche o guardado objetos&lt;/li&gt;
&lt;li&gt;Seguimiento de personas u objetivos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para no alargar innecesariamente, vamos a suponer que estamos haciendo un control de flotas de vehículos; será más fácil hacerse a la idea de esta manera.&lt;/p&gt;
&lt;p&gt;Trabajar con un modelo de geolocalización plano es fácil, pero no práctico; además, muchos motores de datos nos ofrecen el modelo esférico de forma fácil. Hay varias bases de datos que trabajan bien con modelos de geolocalización esféricos, como por ejemplo &lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;Redis&lt;/strong&gt; o &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Personalmente soy un apasionado de las bases de datos &lt;strong&gt;NoSQL&lt;/strong&gt;, así que me limito a considerar &lt;strong&gt;Redis&lt;/strong&gt; y &lt;strong&gt;MongoDB&lt;/strong&gt;. He descartado &lt;strong&gt;Redis&lt;/strong&gt; por el gran conocimiento de &lt;strong&gt;MongoDB&lt;/strong&gt; del que dispongo, y por una letra pequeña del comando &lt;strong&gt;Redis&lt;/strong&gt; &lt;a href="https://redis.io/commands/geoadd"&gt;GEOADD&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valid latitudes are from -85.05112878 to 85.05112878 degrees.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¿Y que pasa si trabajamos cerca de los polos? Mejor vamos a lo seguro y seguimos con &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Centrándonos en el problema con MongoDB&lt;/h2&gt;
&lt;p&gt;Dicen que &lt;strong&gt;MongoDB&lt;/strong&gt; es una base de datos &lt;em&gt;schemaless&lt;/em&gt;. Pocas aplicaciones tienen esto: herencia, versiones distintas de documentos, ... Una aplicación decente va a tener un &lt;em&gt;schema&lt;/em&gt; más o menos fijo y si tratamos de geolocalización, más todavía.&lt;/p&gt;
&lt;p&gt;El modelo esférico &lt;strong&gt;MongoDB&lt;/strong&gt; exije el uso de un estándar de documentos para los &lt;a href="https://docs.mongodb.com/manual/reference/geojson/"&gt;objetos GeoJSON&lt;/a&gt;. Me gustan especialmente los de tipo &lt;strong&gt;Point&lt;/strong&gt; (aunque es mi opinión personal).&lt;/p&gt;
&lt;p&gt;De esta forma, podemos construir nuestros documentos con un campo tipo &lt;strong&gt;Point&lt;/strong&gt; para determinar su posición. Consultar la posición de un vehículo desde un centro de mando, o buscar un taxi disponible a una distancia aceptable desde el punto en donde tengamos al solicitante, se vuelve un problema trivial. Ya de paso, podemos calcular la distancia al vehículo por el mismo precio.&lt;/p&gt;
&lt;h3&gt;Guardando un documento posicional&lt;/h3&gt;
&lt;p&gt;Un documento con un campo "posición" solo necesita que dicha "posición" se guarde como un &lt;strong&gt;Point&lt;/strong&gt;. Sin embargo, para poder lanzar consultas geoespaciales, se necesita un índice especial: el índice &lt;code&gt;2dphere&lt;/code&gt; (más información &lt;a href="https://docs.mongodb.com/manual/core/2dsphere/"&gt;aquí&lt;/a&gt;). Por supuesto, este índice puede ser compuesto con otros campos.&lt;/p&gt;
&lt;p&gt;Como ejemplo de inserción podemos poner el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_vehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vehicles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_index&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pymongo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GEOSPHERE&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;coordinates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vehicles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: La operación &lt;code&gt;create_index&lt;/code&gt; reemplaza la anterior &lt;code&gt;ensure_index&lt;/code&gt;, y por lo tanto, no va a hacer nada si el índice ya existiera.&lt;/p&gt;
&lt;p&gt;Un posible &lt;em&gt;update&lt;/em&gt; debería respetar la forma del &lt;strong&gt;Point&lt;/strong&gt; presente en el campo "location", pero el índice ya estaría presente.&lt;/p&gt;
&lt;h3&gt;Consultando documentos cercanos con su distancia&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; nos ofrece una serie de &lt;a href="https://docs.mongodb.com/manual/geospatial-queries/#geospatial-query-operators"&gt;operadores de geolocalización&lt;/a&gt;. Básicamente se nos permite buscar puntos cercanos, puntos dentro de cierta área, e incluso polígonos que intersectan con otros. Aplicando al mundo de los puntos, solo aplican las dos primeras.&lt;/p&gt;
&lt;p&gt;Buscar objetos en una cierta área es muy interesante para limitar resultados a "zonas visibles", especialmente para confeccionar mapas. La operación de cercanía no es tan útil; nos da objetos cercanos ordenados por cercanía, pero no nos proporciona la distancia a la que están.&lt;/p&gt;
&lt;p&gt;Esto casi nos obliga a utilizar el &lt;em&gt;aggregation framework&lt;/em&gt; para realizar el mismo trabajo. Nuestras queries se vuelven un poco más complejas, pero nos proporciona la distancia de los objetos al punto de referencia.&lt;/p&gt;
&lt;p&gt;Por ejemplo, para buscar un taxi disponible, podríamos hacer algo como lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;coordinates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;$geoNear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;available&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;near&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;distanceField&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;distanceMultiplier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;spherical&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso buscamos taxis con disponibilidad, por cercanía al punto &lt;code&gt;point&lt;/code&gt; y guardando la distancia en el campo &lt;code&gt;dist&lt;/code&gt;, con un multiplicador de 0,001 que, básicamente, lo pasa a kilometros.&lt;/p&gt;
&lt;p&gt;Estos son los campos más útiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt; &amp;rarr; El primer filtro que se realiza; solo se van a considerar los documentos que cumplan con esta &lt;em&gt;query&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;near&lt;/code&gt; &amp;rarr; El punto de referencia, del que buscamos documentos cercanos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minDistance&lt;/code&gt; &amp;rarr; La distancia mínima a la que tiene que estar un punto (opcional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxDistance&lt;/code&gt; &amp;rarr; La distancia máxima a la que tiene que estar un punto (opcional)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distanceField&lt;/code&gt; &amp;rarr; La respuesta va a incluir este campo adicional, con la distancia calculada&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distanceMultiplier&lt;/code&gt; &amp;rarr; Normalmente, la distancia calculada es en metros, y podemos multiplicar por una constante para sacar un valor más útil&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y con esto tenemos las herramientas necesarias para construir nuestra siguiente gran aplicación.&lt;/p&gt;</content><category term="geolocalización"></category><category term="mongodb"></category><category term="python"></category></entry><entry><title>Verificando peticiones JSON con jsonschema</title><link href="https://www.linuxsysadmin.ml/2018/11/verificando-peticiones-json-con-jsonschema.html" rel="alternate"></link><published>2018-11-05T10:00:00+01:00</published><updated>2018-11-05T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-11-05:/2018/11/verificando-peticiones-json-con-jsonschema.html</id><summary type="html">&lt;p&gt;A medida que las empresas confían más y más en las APIs REST, los datos que viajan en formato JSON ha incrementado notablemente. Con este incremento, los errores por mensajes mal formados también se ha incrementado; esto nos obliga a validar los mensajes, no solamente de sintaxis, sino de semántica …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A medida que las empresas confían más y más en las APIs REST, los datos que viajan en formato JSON ha incrementado notablemente. Con este incremento, los errores por mensajes mal formados también se ha incrementado; esto nos obliga a validar los mensajes, no solamente de sintaxis, sino de semántica.&lt;/p&gt;
&lt;p&gt;Y es que no podemos permitirnos que nuestros procesos fallen porque alguien ha enviado un &lt;em&gt;payload&lt;/em&gt; que no es JSON, pero tampoco podemos dejar de filtrar aquellos mensages que, aun siendo JSON válidos, no cumplen con las especificaciones necesarias para cumplir el contrato de nuestras APIs.&lt;/p&gt;
&lt;p&gt;Investigando un poco, parece ser que ya hay una especificación formal para validar mensajes JSON de acuerdo a un &lt;em&gt;schema&lt;/em&gt;; mas información &lt;a href="https://json-schema.org/"&gt;aquí&lt;/a&gt;. Como no podía ser menos, &lt;strong&gt;python&lt;/strong&gt; incluye varias implementaciones de un validador; concretamente nos vamos a centrar en &lt;strong&gt;jsonschema&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Exponiendo el problema&lt;/h2&gt;
&lt;p&gt;Supongamos que queremos consumir el mensaje de un &lt;em&gt;endpoint&lt;/em&gt; de &lt;em&gt;login&lt;/em&gt;, en donde esperamos un JSON tipo "object" con dos campos de texto, el "user" y el "password". Como ejemplo, me limitaré a sacarlos por pantalla:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ cat run.py
&lt;span class="c1"&gt;#!/usr/bin/env python3&lt;/span&gt;

import sys
import json

&lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.load&lt;span class="o"&gt;(&lt;/span&gt;sys.stdin&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;payload&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; payload.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; payload.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%s / %s&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;user, password&lt;span class="o"&gt;))&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para probar este &lt;em&gt;script&lt;/em&gt;, vamos a poner un conjunto de posibles entradas con variedad de posibles problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ cat inputs/no_json
hello world
gerard@atlantis:~/workspace$ cat inputs/string_json
&amp;quot;lorem ipsum&amp;quot;
gerard@atlantis:~/workspace$ cat inputs/bad_dict_json
{&amp;quot;user&amp;quot;: true}
gerard@atlantis:~/workspace$ cat inputs/good_dict_json
{&amp;quot;user&amp;quot;: &amp;quot;gerard&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;s3cr3t&amp;quot;}
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El primer ejemplo es el más evidente; el mensaje no cumple con la sintaxis JSON, así que ni lo podeemos leer. De hecho, no necesitamos un &lt;em&gt;schema&lt;/em&gt; para descartarlo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ ./run.py &amp;lt; inputs/no_json
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;./run.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;6&lt;/span&gt;, in &amp;lt;module&amp;gt;
    &lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.load&lt;span class="o"&gt;(&lt;/span&gt;sys.stdin&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.5/json/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;268&lt;/span&gt;, in load
    &lt;span class="nv"&gt;parse_constant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;parse_constant, &lt;span class="nv"&gt;object_pairs_hook&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;object_pairs_hook, **kw&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.5/json/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;319&lt;/span&gt;, in loads
    &lt;span class="k"&gt;return&lt;/span&gt; _default_decoder.decode&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.5/json/decoder.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;339&lt;/span&gt;, in decode
    obj, &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; self.raw_decode&lt;span class="o"&gt;(&lt;/span&gt;s, &lt;span class="nv"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;_w&lt;span class="o"&gt;(&lt;/span&gt;s, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.end&lt;span class="o"&gt;())&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.5/json/decoder.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;357&lt;/span&gt;, in raw_decode
    raise JSONDecodeError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expecting value&amp;quot;&lt;/span&gt;, s, err.value&lt;span class="o"&gt;)&lt;/span&gt; from None
json.decoder.JSONDecodeError: Expecting value: line &lt;span class="m"&gt;1&lt;/span&gt; column &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;char &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El segundo ejemplo es un JSON válido como tal, pero no cumple con nuestros requisitos de campos. Aunque podemos leerlo, no es un diccionario, y por lo tanto no podemos sacar los campos necesarios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ ./run.py &amp;lt; inputs/string_json
lorem ipsum
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;./run.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;9&lt;/span&gt;, in &amp;lt;module&amp;gt;
    &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; payload.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
AttributeError: &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt; object has no attribute &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El tercer caso es un JSON válido, un objeto, pero no incluye el campo "password", con lo que no nos vale. Además, el campo "user" no es una cadena de texto, y puede que eso sea un problema en el futuro. Hay que remarcar que no nos supone un problema en este momento, pero eventualmente lo será.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ ./run.py &amp;lt; inputs/bad_dict_json
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: True&lt;span class="o"&gt;}&lt;/span&gt;
True / None
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente tenemos un ejemplo bueno, que funciona y que cumpliría con nuestras expectativas. Este es el único caso que deberíamos dar por bueno.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace$ ./run.py &amp;lt; inputs/good_dict_json
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard / s3cr3t
gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Jsonschema al rescate&lt;/h2&gt;
&lt;p&gt;Una de las librerías que implementan la validación de un &lt;em&gt;schema&lt;/em&gt; JSON es, como su nombre indica, &lt;strong&gt;jsonschema&lt;/strong&gt;. No viene en la librería estándar, así que lo instalamos (cosa que he hecho en un &lt;em&gt;virtualenv&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ pip install jsonschema
Collecting jsonschema
  Downloading https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl
Installing collected packages: jsonschema
Successfully installed jsonschema-2.6.0
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La más importante de todas las funciones de &lt;strong&gt;jsonschema&lt;/strong&gt; es &lt;code&gt;validate()&lt;/code&gt; que es una función que recibe el mensaje y el &lt;em&gt;schema&lt;/em&gt; y puede acabar en una excepción (si el mensaje no cumple con el &lt;em&gt;schema&lt;/em&gt;) o normalmente (si el mensaje cumple con el &lt;em&gt;schema&lt;/em&gt;). La documentación completa está &lt;a href="https://python-jsonschema.readthedocs.io/en/latest/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nuestro &lt;em&gt;script&lt;/em&gt; solo necesita declarar el &lt;em&gt;schema&lt;/em&gt; e invocar la función; con un simple bloque &lt;code&gt;try/except&lt;/code&gt; sabremos si la sintaxis y la semántica del mensaje son válidas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ cat run_schema.py
&lt;span class="c1"&gt;#!/usr/bin/env python3&lt;/span&gt;

import sys
import json
import jsonschema

&lt;span class="nv"&gt;login_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;additionalProperties&amp;#39;&lt;/span&gt;: False,
&lt;span class="o"&gt;}&lt;/span&gt;

def check_json_schema&lt;span class="o"&gt;(&lt;/span&gt;input, schema&lt;span class="o"&gt;)&lt;/span&gt;:
    try:
        &lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; json.loads&lt;span class="o"&gt;(&lt;/span&gt;input&lt;span class="o"&gt;)&lt;/span&gt;
        jsonschema.validate&lt;span class="o"&gt;(&lt;/span&gt;payload, schema&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; True
    except &lt;span class="o"&gt;(&lt;/span&gt;json.decoder.JSONDecodeError, jsonschema.exceptions.ValidationError&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="k"&gt;return&lt;/span&gt; False

&lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.stdin.read&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; check_json_schema&lt;span class="o"&gt;(&lt;/span&gt;input, login_schema&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; payload.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; payload.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%s / %s&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;user, password&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;:
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Efectivamente, solo el caso bueno nos permitiría seguir, ya que los demás no tienen sentido para nuestro caso de uso. La excepción &lt;code&gt;ValidationError&lt;/code&gt; incluye los detalles de lo que falló.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ ./run_schema.py &amp;lt; inputs/no_json
ERROR
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ ./run_schema.py &amp;lt; inputs/string_json
ERROR
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ ./run_schema.py &amp;lt; inputs/bad_dict_json
ERROR
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ ./run.py &amp;lt; inputs/good_dict_json
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard / s3cr3t
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uso en APIs&lt;/h2&gt;
&lt;p&gt;No es muy habitual procesar ficheros JSON en un &lt;em&gt;script&lt;/em&gt;, pero si hacemos una API, podemos esperar entradas de todo tipo. El estándar REST nos invita a responder un "400 Bad Request" cuando la petición no es la que se espera, y vamos a abusar de ello.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$ cat app.py
import falcon
import jsonschema

&lt;span class="nv"&gt;login_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;required&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;additionalProperties&amp;#39;&lt;/span&gt;: False,
&lt;span class="o"&gt;}&lt;/span&gt;

def check_json_schema&lt;span class="o"&gt;(&lt;/span&gt;payload, schema&lt;span class="o"&gt;)&lt;/span&gt;:
    try:
        jsonschema.validate&lt;span class="o"&gt;(&lt;/span&gt;payload, schema&lt;span class="o"&gt;)&lt;/span&gt;
    except jsonschema.exceptions.ValidationError:
        raise falcon.HTTPBadRequest&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bad JSON schema&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

class LoginResource:
    def on_post&lt;span class="o"&gt;(&lt;/span&gt;self, req, resp&lt;span class="o"&gt;)&lt;/span&gt;:
        check_json_schema&lt;span class="o"&gt;(&lt;/span&gt;req.media, login_schema&lt;span class="o"&gt;)&lt;/span&gt;
        resp.media &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;logged&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
app.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;, LoginResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Servimos nuestra API de ejemplo y probamos algunas entradas, solo para verificar que todo funciona:&lt;/p&gt;
&lt;p&gt;El primer ejemplo, es un objecto al que le faltan campos, así que lo rechazamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ curl -i -H &lt;span class="s2"&gt;&amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt; -X POST http://localhost:8000/login/ --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;user&amp;quot;: &amp;quot;gerard&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
HTTP/1.1 &lt;span class="m"&gt;400&lt;/span&gt; Bad Request
...
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Bad JSON schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El segundo ejemplo es un objecto con los campos correctos, pero uno de ellos es numérico, así que lo rechazamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gerard&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;atlantis&lt;/span&gt;&lt;span class="o"&gt;:~$&lt;/span&gt; &lt;span class="nt"&gt;curl&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; &lt;span class="nt"&gt;POST&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;user&amp;quot;: &amp;quot;gerard&amp;quot;, &amp;quot;password&amp;quot;: 123}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;400&lt;/span&gt; &lt;span class="nt"&gt;Bad&lt;/span&gt; &lt;span class="nt"&gt;Request&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;title&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Bad&lt;/span&gt; &lt;span class="err"&gt;JSON&lt;/span&gt; &lt;span class="err"&gt;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;gerard&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;atlantis&lt;/span&gt;&lt;span class="o"&gt;:~$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El tercer ejemplo, aunque es correcto, incluye un campo de más. El validador lo rechaza en virtud de la propiedad &lt;code&gt;additionalProperties: false&lt;/code&gt;. Esto es una preferencia personal y os la podéis saltar, ignorando los campos extras.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ curl -i -H &lt;span class="s2"&gt;&amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt; -X POST http://localhost:8000/login/ --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;user&amp;quot;: &amp;quot;gerard&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;other&amp;quot;: &amp;quot;field&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
HTTP/1.1 &lt;span class="m"&gt;400&lt;/span&gt; Bad Request
...
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Bad JSON schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente le ponemos un caso correcto, y vemos que funciona como es debido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~$ curl -i -H &lt;span class="s2"&gt;&amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt; -X POST http://localhost:8000/login/ --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;user&amp;quot;: &amp;quot;gerard&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;123&amp;quot;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
...
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;logged&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: El &lt;em&gt;framework&lt;/em&gt; &lt;strong&gt;falcon&lt;/strong&gt; ya dispone de un decorador &lt;code&gt;falcon.media.validators.jsonschema&lt;/code&gt; que hace lo mismo. He optado por describir el caso general, por ser más útil en otras situaciones.&lt;/p&gt;</content><category term="JSON"></category><category term="python"></category><category term="jsonschema"></category></entry><entry><title>Trucos simples de CSS para que tu página se vea aceptable</title><link href="https://www.linuxsysadmin.ml/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable.html" rel="alternate"></link><published>2018-10-16T10:00:00+02:00</published><updated>2018-10-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-10-16:/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable.html</id><summary type="html">&lt;p&gt;Todos estamos hartos de ver páginas web con distracciones por todos lados: anuncios, &lt;em&gt;popups&lt;/em&gt;, menús desplegables y horribles &lt;em&gt;scripts&lt;/em&gt; de &lt;em&gt;javascript&lt;/em&gt;. Eso hace que el contenido no llegue al usuario final y por lo tanto, no se queden con ganas de volver. Eso no significa tener una página HTML básica …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Todos estamos hartos de ver páginas web con distracciones por todos lados: anuncios, &lt;em&gt;popups&lt;/em&gt;, menús desplegables y horribles &lt;em&gt;scripts&lt;/em&gt; de &lt;em&gt;javascript&lt;/em&gt;. Eso hace que el contenido no llegue al usuario final y por lo tanto, no se queden con ganas de volver. Eso no significa tener una página HTML básica.&lt;/p&gt;
&lt;p&gt;Para aquellas páginas que estén más interesadas en ser leídas que en aportar beneficios, no se necesita nada de esto; la simplicidad en estos casos es un plus: no se necesita prácticamente nada más que títulos, párrafos e imágenes.&lt;/p&gt;
&lt;p&gt;Todos sabemos que una página web que solo use &lt;em&gt;tags&lt;/em&gt; de HTML, no es atractiva visualmente, pero está libre de distracciones completamente. Podemos ver &lt;a href="/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable/css_basic_skeleton.html"&gt;un ejemplo&lt;/a&gt; de este tipo de páginas.&lt;/p&gt;
&lt;p&gt;A partir de este esqueleto, se puede complicar el diseño tanto como queramos, hasta llegar a la ilegibilidad. Sin embargo, hay un punto medio que se puede conseguir con pocos conocimientos de CSS y, aún así, dar sensación de profesionalidad y de simpleza buscada adrede. Para los impacientes, podemos ver el resultado &lt;a href="/2018/10/trucos-simples-de-css-para-que-tu-pagina-se-vea-aceptable/css_basic_styled.html"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Centrar el contenido&lt;/h2&gt;
&lt;p&gt;Lo primero que se nota es una sensación de agobio: nos faltan márgenes a ambos lados del texto. Podemos limitar el contenido a un ancho máximo, de forma que se vea espacio en las pantallas grandes, pero no se desperdicie en pantallas más pequeñas. Luego podemos dejar qu se calcule el margen de forma automática.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cambiar la fuente del texto&lt;/h2&gt;
&lt;p&gt;La fuente por defecto que llevan los navegadores es poco agradable a la vista; con cambiar la fuente es suficiente. Podemos poner una fuente propia, una de &lt;strong&gt;Google Fonts&lt;/strong&gt; o simplemente usar una família para que el navegador utilice la que le venga en gana.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Añadir un toque de color&lt;/h2&gt;
&lt;p&gt;Este punto es conflictivo; con elegancia le puede dar a la página mejor aspecto visual, pero rápidamente nos puede cegar o distraer. Personalmente opino que un color pálido le da un punto de color, sin quitarle importancia al contenido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#EFE&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Subrayar los títulos&lt;/h2&gt;
&lt;p&gt;Es fácil que los títulos se camuflen entre el contenido, y por eso los queremos remarcar. El uso de &lt;code&gt;text-decoration: underline&lt;/code&gt; no basta: se puede confundir con un enlace. A mí me gustan los subrayados que van de una punta a la otra de la página, y esto se puede simular con el borde inferior del título.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="mh"&gt;#000&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Estilizar los párrafos&lt;/h2&gt;
&lt;p&gt;El estilo básico de los párrafos tiene, a mi parecer, dos fallos: los párrafos con "sierras" laterales me distraen y prefiero justificarlos, y el escaso espacio entre líneas los hace ilegibles. Podemos corregir ambos con reglas simples de CSS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Centrar las imágenes&lt;/h2&gt;
&lt;p&gt;Los elementos de imágenes son interpretados como elementos &lt;em&gt;inline&lt;/em&gt;, y se pueden poner de forma consecutiva en un párrafo o título. Para mí esto no tiene sentido y evita que se puedan centrar. Las imágenes deberían estar solas, para que se lleven el protagonismo para el que las hemos puesto. Un pegote de imágenes no es bonito.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Otros elementos&lt;/h2&gt;
&lt;p&gt;La clave para no complicar más el diseño es no estilizar aquello que no necesitemos. Sin embargo, algunos tipos de contenido pueden necesitar otros tipos de elementos HTML, como las listas, citaciones o código; seguro que váis a querer estilizar enlaces, cursivas y negritas.&lt;/p&gt;
&lt;p&gt;El único consejo que os puedo dar es el de no recargar: quitar el subrayado o el cambio de color en un enlace es aceptable; cambiar los círculos de las listas por cuadrados es aceptable; poner puntos personalizados con imágenes propias y parpadeantes, no lo es.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usad la cabeza.&lt;/strong&gt;&lt;/p&gt;</content><category term="CSS"></category><category term="básico"></category></entry><entry><title>Explorando los tokens JWT</title><link href="https://www.linuxsysadmin.ml/2018/07/explorando-los-tokens-jwt.html" rel="alternate"></link><published>2018-07-16T09:00:00+02:00</published><updated>2018-07-16T09:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2018-07-16:/2018/07/explorando-los-tokens-jwt.html</id><summary type="html">&lt;p&gt;Hace mucho tiempo que me fascinan las APIs REST; sin embargo siempre he pasado de sistemas de autenticación en mis proyectos personales. Cuando me puse en serio a investigar sobre este tema, descubrí la autenticación basada en &lt;em&gt;tokens&lt;/em&gt;, y especialmente, los &lt;strong&gt;JSON Web Tokens&lt;/strong&gt;, que es lo que explico hoy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hace mucho tiempo que me fascinan las APIs REST; sin embargo siempre he pasado de sistemas de autenticación en mis proyectos personales. Cuando me puse en serio a investigar sobre este tema, descubrí la autenticación basada en &lt;em&gt;tokens&lt;/em&gt;, y especialmente, los &lt;strong&gt;JSON Web Tokens&lt;/strong&gt;, que es lo que explico hoy.&lt;/p&gt;
&lt;p&gt;Cuando leemos las buenas prácticas de los servicios REST, una de las máximas es que &lt;strong&gt;no hay estado&lt;/strong&gt;; eso significa que no hay peticiones a medias, ni sesiones ni nada: todo lo necesario para completar una llamada está en la misma petición.&lt;/p&gt;
&lt;p&gt;Tradicionalmente, hemos pasado el usuario y la contraseña de algún modo en las cabeceras, evitando a terceros mediante el uso de HTTPS. Este método requiere la validación de las credenciales en cada petición, y supone un estrés innecesario a la base de datos.&lt;/p&gt;
&lt;p&gt;Este panorama cambia cuando aparece una nueva filosofía: hacer &lt;em&gt;login&lt;/em&gt; una vez y expedir un &lt;em&gt;token&lt;/em&gt; con toda la información necesaria para futuras peticiones, probablemente con validez temporal.&lt;/p&gt;
&lt;p&gt;Los &lt;a href="https://jwt.io/"&gt;JSON Web Tokens&lt;/a&gt; funcionan de esta manera, aunque no intentan encriptar ningún dato; se limitan a la verificación de que la firma del mensaje es válida.&lt;/p&gt;
&lt;h2&gt;Forma de un token JWT&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;token&lt;/em&gt; JWT tiene la forma &lt;code&gt;xxxxx.yyyyy.zzzzz&lt;/code&gt;, con 3 partes separadas por puntos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una cabecera, que es una especificación del tipo de &lt;em&gt;token&lt;/em&gt; y un base64 del algoritmo de &lt;em&gt;hash&lt;/em&gt; usado.&lt;/li&gt;
&lt;li&gt;Un payload, que es la información arbitraria que cargamos en el momento de crear el &lt;em&gt;token&lt;/em&gt; y está en base64; algunos campos tienen significado especial.&lt;/li&gt;
&lt;li&gt;Una firma, que es un &lt;em&gt;hash&lt;/em&gt; del mensaje con una clave del servidor, que sirve para que el servidor pueda verificarla como suya.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos un ejemplo, con el siguiente token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoiMTUyOTQwMzc5NSJ9.07VsjI6OFGjMwYTmzE9g8qoPpXJYAB5DuGiIROOY4HM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: La forma habitual de obtener este &lt;em&gt;token&lt;/em&gt; es mediante una operación de &lt;em&gt;login&lt;/em&gt;, y normalmente tiene una fecha de expiración, que en JWT es el campo &lt;code&gt;exp&lt;/code&gt;, como un &lt;em&gt;unix timestamp&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/jwttest$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 -d&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;HS256&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;typ&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/workspace/jwttest$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoiMTUyOTQwMzc5NSJ9&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; base64 -d&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;gerard&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1529403795&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cualquiera (salvo uso de HTTPS) puede ver la información contenida en el &lt;em&gt;token&lt;/em&gt;. Sin embargo, para verificar la firma se necesita saber la clave con la que se cifró. De esta forma, un servidor puede expedir un &lt;em&gt;token&lt;/em&gt; con información, pero gracias a la firma puede verificar que el &lt;em&gt;token&lt;/em&gt; que le devuelven es el que expedió y no ha sido modificado por un tercero.&lt;/p&gt;
&lt;p&gt;Como punto a favor, el estándar JWT permite firmar con una sola clave, o usando un par de claves RSA, la privada para cifrar y la pública para desencriptar. Esto hace que nuestros auditores de seguridad se queden tranquilos, aunque como veremos, solo tiene utilidad real en algunos casos.&lt;/p&gt;
&lt;h2&gt;Creando un token con una clave simétrica&lt;/h2&gt;
&lt;p&gt;Este es el caso de uso más simple: un solo servicio genera y consume el &lt;em&gt;token&lt;/em&gt;. En este tipo de casos nos importa poco que se encripte y se desencripte con la misma clave, así que vamos a lo simple.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JWT de clave simétrica" src="https://www.linuxsysadmin.ml/images/JWT_Symmetric_Key.png"&gt;&lt;/p&gt;
&lt;p&gt;Como lo vamos a hacer en &lt;strong&gt;python&lt;/strong&gt;, vamos a necesitar una librería que siga este estándar, por ejemplo, &lt;code&gt;PyJWT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ pip freeze
...
&lt;span class="nv"&gt;PyJWT&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.4
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a utilizar un &lt;em&gt;script&lt;/em&gt; para generar el &lt;em&gt;token&lt;/em&gt; y otro para validarlo, que son estos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ cat simple_encode.py
import jwt
import datetime
import sys

&lt;span class="nv"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nv"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: USER,
    &lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;: datetime.datetime.utcnow&lt;span class="o"&gt;()&lt;/span&gt; + datetime.timedelta&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

print jwt.encode&lt;span class="o"&gt;(&lt;/span&gt;payload, KEY, &lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ cat simple_decode.py
import jwt
import datetime
import sys

&lt;span class="nv"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

print jwt.decode&lt;span class="o"&gt;(&lt;/span&gt;TOKEN, KEY, &lt;span class="nv"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HS256&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En algún punto, expedimos un &lt;em&gt;token&lt;/em&gt; con un &lt;em&gt;secret&lt;/em&gt; dado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_encode.py secret gerard
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si lo intentamos verificar con el mismo &lt;em&gt;secret&lt;/em&gt;, no hay problema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py secret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
&lt;span class="o"&gt;{&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;: u&lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;, u&lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1529405554&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Un &lt;em&gt;secret&lt;/em&gt; que no corresponde nos da un error, indicando que no es el &lt;em&gt;secret&lt;/em&gt; con el que ciframos y desciframos, seguramente porque nos han dado el cambiazo, y por lo tanto, rechazamos el &lt;em&gt;token&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py badsecret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
...
jwt.exceptions.InvalidSignatureError: Signature verification failed
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si dejamos pasar el tiempo de expiración, el &lt;em&gt;token&lt;/em&gt; también pasa a ser inválido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ python simple_decode.py secret eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiZ2VyYXJkIiwiZXhwIjoxNTI5NDA1NTU0fQ.3KNRsiIEcOvxN5b8Tgv_5qd8_58nA91fCkPxmnNr9F0
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
...
jwt.exceptions.ExpiredSignatureError: Signature has expired
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma podemos estar seguros que no se ha generado un &lt;em&gt;token&lt;/em&gt; por un tercero, y que el que dimos no ha sido modificado.&lt;/p&gt;
&lt;h2&gt;Creando un token con una clave asimétrica&lt;/h2&gt;
&lt;p&gt;Se trata de un caso un poco más complicado: un servicio genera el &lt;em&gt;token&lt;/em&gt; y otros lo consumen. En estos casos conviene que solo uno pueda cifrar, y todos puedan verificarlo; de esta forma, una API comprometida no expone el algoritmo de encriptación y evitamos suplantaciones.&lt;/p&gt;
&lt;p&gt;Este caso se utiliza en esquemas de &lt;em&gt;single sign on&lt;/em&gt;, en donde un servicio de autenticación genera el &lt;em&gt;token&lt;/em&gt;, indicando a qué aplicaciones tiene acceso un usuario. La responsabilidad de verificar el permiso recae en cada aplicación individual.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JWT de clave asimétrica" src="https://www.linuxsysadmin.ml/images/JWT_Single_Sign_On.png"&gt;&lt;/p&gt;
&lt;p&gt;Vamos a asegurarnos que tenemos las librerías &lt;strong&gt;python&lt;/strong&gt; necesarias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ pip freeze
...
&lt;span class="nv"&gt;PyJWT&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6.4
&lt;span class="nv"&gt;cryptography&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.2
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;También vamos a necesitar el par de claves RSA:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ openssl genrsa -out private.pem &lt;span class="m"&gt;1024&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;1024&lt;/span&gt; bit long modulus
...........................++++++
...........................++++++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x010001&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$ openssl rsa -in private.pem -pubout -out public.pem
writing RSA key
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/workspace/jwttest$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que la clave privada se queda en el servidor de autenticación, de forma que &lt;strong&gt;puede cifrar&lt;/strong&gt;. La parte publica es para todas las aplicaciones que necesiten &lt;strong&gt;verificar&lt;/strong&gt; el &lt;em&gt;token&lt;/em&gt;. De esta forma solo una puede expedir &lt;em&gt;tokens&lt;/em&gt;, y por lo tanto, es el único punto de &lt;em&gt;hacking&lt;/em&gt; del sistema distribuído.&lt;/p&gt;
&lt;p&gt;En el servidor de autenticación haríamos algo así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_new_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EXPIRE_SECONDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;permissions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JWT_PRIVATE_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mientras que si el usuario facilita un &lt;em&gt;token&lt;/em&gt; a una aplicación, esta hará algo como:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JWT_PUBLIC_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RS256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decoded&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma se puede validar el &lt;em&gt;token&lt;/em&gt;, que sea correcto, no se haya modificado, no esté expirado y con la seguridad que solo lo pudo generar el servidor de autenticación. No hace falta para nada ir a la base de datos, o pedir una verificación al creador del &lt;em&gt;token&lt;/em&gt;. Lo único que no verifica este método es si el &lt;em&gt;payload&lt;/em&gt; incluye permisos para  el uso del método de la API solicitado.&lt;/p&gt;</content><category term="JWT"></category><category term="token"></category><category term="api"></category><category term="REST"></category><category term="autenticación"></category></entry><entry><title>Usando extensiones en Flask</title><link href="https://www.linuxsysadmin.ml/2017/12/usando-extensiones-en-flask.html" rel="alternate"></link><published>2017-12-18T10:00:00+01:00</published><updated>2017-12-18T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-18:/2017/12/usando-extensiones-en-flask.html</id><summary type="html">&lt;p&gt;Muchos de los &lt;em&gt;microframeworks&lt;/em&gt; que existen en &lt;strong&gt;python&lt;/strong&gt; no ofrecen ninguna ayuda con las tareas más simples que toda aplicación acaba implementando; eso nos hace decantarnos casi siempre por una opción más pesada de &lt;em&gt;framework&lt;/em&gt;, como por ejemplo, &lt;strong&gt;Django&lt;/strong&gt;. Sin embargo, gracias a los &lt;strong&gt;blueprints&lt;/strong&gt; de &lt;strong&gt;Flask&lt;/strong&gt;, esto es innecesario …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchos de los &lt;em&gt;microframeworks&lt;/em&gt; que existen en &lt;strong&gt;python&lt;/strong&gt; no ofrecen ninguna ayuda con las tareas más simples que toda aplicación acaba implementando; eso nos hace decantarnos casi siempre por una opción más pesada de &lt;em&gt;framework&lt;/em&gt;, como por ejemplo, &lt;strong&gt;Django&lt;/strong&gt;. Sin embargo, gracias a los &lt;strong&gt;blueprints&lt;/strong&gt; de &lt;strong&gt;Flask&lt;/strong&gt;, esto es innecesario.&lt;/p&gt;
&lt;p&gt;Ya vimos en &lt;a href="https://www.linuxsysadmin.ml/2017/12/creciendo-con-flask-los-blueprints.html"&gt;otro artículo&lt;/a&gt; que este &lt;em&gt;framework&lt;/em&gt; tiene una funcionalidad llamada &lt;strong&gt;blueprints&lt;/strong&gt;, que nos permiten encapsular un subconjunto de rutas, vistas y contenido estático para mantenibilidad y para su uso en otros proyectos.&lt;/p&gt;
&lt;p&gt;Este mismo modelo de desarrollo ha permitido que muchas personas desarrollen sus &lt;strong&gt;blueprints&lt;/strong&gt; reusables y, en alguno de los casos, ofrecerlos a cualquiera que los pueda necesitar. Son especialmente interesantes las extensiones oficiales que se ofrecen con &lt;strong&gt;Flask&lt;/strong&gt;, que podemos encontrar en &lt;a href="http://flask.pocoo.org/extensions/"&gt;la página de extensiones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hay una lista interesante de extensiones, tanto en la página oficial, como por otros lugares de internet; cualquiera puede ofrecer extensiones. A pesar de ello, hay extensiones de plena confianza que van a servir de base para casi cualquier proyecto que deseemos empezar.&lt;/p&gt;
&lt;p&gt;En mi caso, mis favoritas son &lt;strong&gt;flask-mongoengine&lt;/strong&gt; y &lt;strong&gt;flask-admin&lt;/strong&gt; y suelen ser motivo suficiente para empezar cada nuevo proyecto en &lt;strong&gt;Flask&lt;/strong&gt;. Vamos a intentar introducir el uso de extensiones con estos dos ejemplos.&lt;/p&gt;
&lt;h2&gt;Un proyecto vacío&lt;/h2&gt;
&lt;p&gt;Todas las modificaciones que se van a ir haciendo, se basan en una aplicación básica vacía. Siguiendo nuestra metodología, vamos a utilizar &lt;em&gt;virtualenv&lt;/em&gt;, vamos recoger las dependencias en un fichero &lt;em&gt;requirements.txt&lt;/em&gt; y vamos a disponer de un servidor de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat requirements.txt
&lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.2
Flask-Admin&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.5.0
flask-mongoengine&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.9.3
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat server.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1234567890&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
flask run --host &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sobra decir que tenemos un servidor de &lt;strong&gt;mongodb&lt;/strong&gt; en alguna parte, dispuesto a ser utilizado por nuestra capa de datos. En este caso concreto, el servidor corre en local.&lt;/p&gt;
&lt;h2&gt;Definiendo el modelo con flask-mongoengine&lt;/h2&gt;
&lt;p&gt;Esta extensión no añade demasiado valor en sí misma, pero se integra magníficamente con &lt;strong&gt;Flask&lt;/strong&gt;. En esencia se trata de un &lt;strong&gt;blueprint&lt;/strong&gt; que utiliza la misma configuración que nuestra aplicación y se conecta al servidor de acuerdo a esta configuración.&lt;/p&gt;
&lt;p&gt;Vamos a definir nuestros modelos como lo haríamos en &lt;strong&gt;mongoengine&lt;/strong&gt;, salvo que los tipos declarados en &lt;strong&gt;mongoengine&lt;/strong&gt; también lo están dentro del &lt;strong&gt;blueprint&lt;/strong&gt; que hemos creado. Con un modelo pequeño de demostración nos vale:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat models.py
from flask_mongoengine import MongoEngine

&lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MongoEngine&lt;span class="o"&gt;()&lt;/span&gt;


class User&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Product&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos a recurrir a la clase principal (que es la que declara el objeto &lt;em&gt;app&lt;/em&gt;) y vamos a importar el &lt;strong&gt;blueprint&lt;/strong&gt;, para registrarlo posteriormente. Como añadido, vamos a sacar la URL de &lt;strong&gt;mongodb&lt;/strong&gt; de una variable de entorno, porque la idea es usar esta aplicación en un contenedor en el futuro; de momento, esta variable queda declarada en el fichero &lt;em&gt;server.sh&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask
from models import db
import os

&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_SETTINGS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;: MONGODB_URL&lt;span class="o"&gt;}&lt;/span&gt;
db.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los modelos definidos con &lt;strong&gt;flask-mongoengine&lt;/strong&gt; disponen de un &lt;em&gt;QuerySet&lt;/em&gt; modificado, que nos permitirá hacer paginación o lanzar automáticamente un error 404 si no se encuentra un elemento, pero eso ya queda como deberes para el lector.&lt;/p&gt;
&lt;h2&gt;Una interfaz de administración gratuita con flask-admin&lt;/h2&gt;
&lt;p&gt;Esta extensión trabaja más que la anterior, pero en cierta manera, depende de ella. Se trata de un &lt;strong&gt;blueprint&lt;/strong&gt; que crea un interfaz de administración en base a los modelos y de unas clases &lt;em&gt;ModelView&lt;/em&gt; que son capaces de analizar los mismos y crear automáticamente las listas y formularios necesarios.&lt;/p&gt;
&lt;p&gt;La idea es la misma: creamos el &lt;strong&gt;blueprint&lt;/strong&gt; y registramos el objeto &lt;em&gt;ModelView&lt;/em&gt; para cada objeto que deseemos en el panel de administración. El objeto básico &lt;em&gt;ModelView&lt;/em&gt; suele ser suficiente para la mayoría de casos, pero en otros vamos a querer personalizar lo que se ve, lo que se puede hacer, y los filtros disponibles.&lt;/p&gt;
&lt;p&gt;Esto lo dejamos para el lector, y nos vamos a centrar en como se haría. Para ello, imaginemos que queremos ocultar el campo &lt;em&gt;password&lt;/em&gt; en la gestión de usuarios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat models.py
from flask_mongoengine import MongoEngine

&lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MongoEngine&lt;span class="o"&gt;()&lt;/span&gt;


class User&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Product&lt;span class="o"&gt;(&lt;/span&gt;db.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; db.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;products&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat admin.py
from flask_admin import Admin
from flask_admin.contrib.mongoengine import ModelView
from models import User, Product


class HidePasswordModelView&lt;span class="o"&gt;(&lt;/span&gt;ModelView&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;column_exclude_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;,&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Admin&lt;span class="o"&gt;()&lt;/span&gt;
admin.add_view&lt;span class="o"&gt;(&lt;/span&gt;HidePasswordModelView&lt;span class="o"&gt;(&lt;/span&gt;User&lt;span class="o"&gt;))&lt;/span&gt;
admin.add_view&lt;span class="o"&gt;(&lt;/span&gt;ModelView&lt;span class="o"&gt;(&lt;/span&gt;Product&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda importar el &lt;strong&gt;blueprint&lt;/strong&gt; y registrarlo en nuestra aplicación; esto se consigue en el fichero &lt;em&gt;app.py&lt;/em&gt;. Cabe decir que esta extensión requiere de una configuración &lt;code&gt;SECRET_KEY&lt;/code&gt; para encriptar las &lt;em&gt;cookies&lt;/em&gt; de &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$ cat app.py
from flask import Flask
from models import db
from admin import admin
import os

&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;MONGODB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_URL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; SECRET_KEY
app.config&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONGODB_SETTINGS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;: MONGODB_URL&lt;span class="o"&gt;}&lt;/span&gt;
db.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
admin.init_app&lt;span class="o"&gt;(&lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/flask-extensions$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y sin especificar ningún parámetro extra, nuestro panel de administración se va a encontrar por defecto en &lt;a href="http://localhost:8080/admin/"&gt;http://localhost:8080/admin/&lt;/a&gt;. Esto se puede modificar al registrar el &lt;strong&gt;blueprint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: El panel de administración solo sirve para administrar. No tiene autenticación integrada y queda como responsabilidad del usuario decidir que hacer. Se puede desactivar antes de ir a producción, se puede limitar el acceso mediante autenticación básica o certificados, e incluso se puede poner una extensión de autenticación como &lt;strong&gt;flask-login&lt;/strong&gt; o &lt;strong&gt;flask-auth&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;En resumen&lt;/h2&gt;
&lt;p&gt;Con esto tenemos un interesante esqueleto sobre el que crear en un tiempo mínimo cualquier aplicación que nos propongamos. Para acelerar la inicialización de un nuevo proyecto, he creado esta base como un repositorio de &lt;strong&gt;GitHub&lt;/strong&gt;, que podéis clonar en &lt;a href="https://github.com/Sirtea/flask-skel"&gt;https://github.com/Sirtea/flask-skel&lt;/a&gt;.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category><category term="extensiones"></category></entry><entry><title>Creciendo con Flask: los blueprints</title><link href="https://www.linuxsysadmin.ml/2017/12/creciendo-con-flask-los-blueprints.html" rel="alternate"></link><published>2017-12-11T10:00:00+01:00</published><updated>2017-12-11T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-11:/2017/12/creciendo-con-flask-los-blueprints.html</id><summary type="html">&lt;p&gt;Ya estuvimos hablando del &lt;em&gt;microframework&lt;/em&gt; &lt;strong&gt;Flask&lt;/strong&gt;, pero no profundizamos en su funcionalidad más avanzada: los &lt;strong&gt;blueprints&lt;/strong&gt;, que son una agrupación de vistas, plantillas y contenido estático similar a las aplicaciones de &lt;strong&gt;django&lt;/strong&gt;. Solamente por esta funcionalidad queda justificado el uso de este &lt;em&gt;framework&lt;/em&gt; para proyectos de tamaños medio o grande …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya estuvimos hablando del &lt;em&gt;microframework&lt;/em&gt; &lt;strong&gt;Flask&lt;/strong&gt;, pero no profundizamos en su funcionalidad más avanzada: los &lt;strong&gt;blueprints&lt;/strong&gt;, que son una agrupación de vistas, plantillas y contenido estático similar a las aplicaciones de &lt;strong&gt;django&lt;/strong&gt;. Solamente por esta funcionalidad queda justificado el uso de este &lt;em&gt;framework&lt;/em&gt; para proyectos de tamaños medio o grande.&lt;/p&gt;
&lt;p&gt;Lo primero que tenemos que ver es la necesidad de utilizar &lt;strong&gt;blueprints&lt;/strong&gt;. A medida que nuestra aplicación crece, el código lo hace también. Esto suele hacer código fuente grande e inmantenible. Invariablemente, veremos que nuestra aplicación es una amalgama de partes.&lt;/p&gt;
&lt;p&gt;En este momento, nos va a interesar trocear en partes aquel fichero con todas nuestras vistas. Y la herramienta para hacer esto son los &lt;strong&gt;blueprints&lt;/strong&gt;, ya sea para partir la aplicación &lt;em&gt;a posteriori&lt;/em&gt; o queremos empezar haciéndolo bien desde el principio.&lt;/p&gt;
&lt;h2&gt;Divide y vencerás&lt;/h2&gt;
&lt;p&gt;Os pongo un pequeño ejemplo, con este programa de gestión de hoteles:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Programa modular" src="https://www.linuxsysadmin.ml/images/programa_modular.gif"&gt;&lt;/p&gt;
&lt;p&gt;¿Verdad que parece grande y descorazonador? &lt;strong&gt;¡Divide y vencerás!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Si lo troceamos adecuadamente, tenemos varios problemas menores, e incluso podemos poner a trabajar en ellos a un equipo grande, por separado. Incluso podemos añadir más módulos en un futuro; quien sabe, incluso podemos hacerlo genérico suficiente para que los hoteles activen solamente las partes que más falta les hagan.&lt;/p&gt;
&lt;p&gt;Ese es el modelo de negocio de SAP...&lt;/p&gt;
&lt;h2&gt;Un caso de uso de ejemplo&lt;/h2&gt;
&lt;p&gt;Supongamos que una empresa nos paga para hacer una web corporativa, con, de momento, las siguientes opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una página principal para actuar como su &lt;em&gt;landing page&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Algunas páginas menores, como por ejemplo el apartado legal o la presentación de la empresa, con contenido fijo&lt;/li&gt;
&lt;li&gt;Un boletín informativo con sus últimas noticias, a modo de rueda de prensa y con una maquetación diferente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y cual es nuestra estratégia? &lt;strong&gt;¡Divide y vencerás!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hagamos nuestra aplicación, a base de estas mismas 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una vista normal para la &lt;em&gt;landing page&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Un &lt;strong&gt;blueprint&lt;/strong&gt; para las páginas menores&lt;/li&gt;
&lt;li&gt;Un &lt;strong&gt;blueprint&lt;/strong&gt; para las noticias&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementación&lt;/h2&gt;
&lt;p&gt;Vamos a empezar con una aplicación vacía, solo con la página principal. A partir de ahí vamos a registrar las páginas menores y, finalmente, el módulo de notícias.&lt;/p&gt;
&lt;p&gt;Para simplificar, no vamos a gestionar la capa de persistencia ni un panel de administración; esto queda como ejercicio al lector. Si os interesa mucho, y como veremos en un artículo posterior, podemos utilizar un &lt;strong&gt;blueprint&lt;/strong&gt; prefabricado para ello.&lt;/p&gt;
&lt;h3&gt;La página principal&lt;/h3&gt;
&lt;p&gt;Vamos a evitar el uso de &lt;strong&gt;blueprints&lt;/strong&gt;, solo para demostrar que es posible mezclar vistas normales con &lt;strong&gt;blueprints&lt;/strong&gt;. No hay ningún misterio en esto: una vista, una plantilla y un estilo.&lt;/p&gt;
&lt;p&gt;Así quedaría nuestro proyecto con el primero de los puntos solucionados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;2&lt;/span&gt; directories, &lt;span class="m"&gt;6&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La vista solo renderiza la plantilla que nos interesa, aunque hay la complejidad añadida de que utiliza herencia.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente tenemos las plantillas y algún &lt;em&gt;asset&lt;/em&gt; estático.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/layout.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/static/style.css&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/main.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Main page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat static/style.css
html &lt;span class="o"&gt;{&lt;/span&gt; background-color: cyan &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Las páginas secundarias&lt;/h3&gt;
&lt;p&gt;Vamos a crear una carpeta para contener los recursos del &lt;strong&gt;blueprint&lt;/strong&gt;. Como el &lt;strong&gt;blueprint&lt;/strong&gt; debe ser importado y registrado por la aplicación, vamos a convertirlo en un módulo de &lt;strong&gt;python&lt;/strong&gt; añadiendo un fichero &lt;em&gt;__init__.py&lt;/em&gt;, que de paso servirá para contener el código del &lt;strong&gt;blueprint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nótese la aparición de la nueva carpeta &lt;em&gt;pages/&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── pages
│   ├── templates
│   │   ├── about.html
│   │   └── legal.html
│   └── __init__.py
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;4&lt;/span&gt; directories, &lt;span class="m"&gt;9&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El funcionamiento es el mismo: regitramos vistas que renderizan plantillas y poco más. La parte interesante es que estas vistas se encapsulan en un objeto &lt;em&gt;Blueprint&lt;/em&gt; que luego será registrado en la aplicación base.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/__init__.py
from flask import Blueprint, render_template

&lt;span class="nv"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Blueprint&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;, __name__, &lt;span class="nv"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@pages.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/about&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def about_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@pages.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/legal&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def legal_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;legal.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/templates/about.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat pages/templates/legal.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Legal page&amp;lt;/h1&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con esto tenemos el &lt;strong&gt;blueprint&lt;/strong&gt;, que va a haber que registrar en nuestra aplicación para que esta añada sus rutas a una ruta base, que en este caso, no está declarada. Esto hará que se registren en &lt;em&gt;/&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template
from pages import pages

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;pages&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma tendremos dos nuevas URLs en la aplicación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://localhost:8080/about"&gt;http://localhost:8080/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://localhost:8080/legal"&gt;http://localhost:8080/legal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es interesante ver que hay dos nuevas plantillas en el &lt;strong&gt;blueprint&lt;/strong&gt;, pero la plantilla base y la hoja de estilos siguen siendo las de la aplicación principal. Los ficheros del &lt;strong&gt;blueprint&lt;/strong&gt; tienen preferencia sobre el resto, pero no los eclipsan; los anteriores quedan disponibles por si no se sobreescribieran.&lt;/p&gt;
&lt;h3&gt;El módulo de notícias&lt;/h3&gt;
&lt;p&gt;Este módulo es prácticamente igual al anterior, con dos sutiles diferencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usaremos otra plantilla base y otra hoja de estilos&lt;/li&gt;
&lt;li&gt;Nuestras rutas van a ir prefijadas por &lt;em&gt;/news/&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La primera parte es tan simple como poner los nuevos ficheros para que no utilice los originales como plan B. La segunda se consigue declarando las rutas sin el prefijo y montando el &lt;strong&gt;blueprint&lt;/strong&gt; con un prefijo en la aplicación original. Esto nos da cierta capacidad de recolocar un conjunto de URLs.&lt;/p&gt;
&lt;p&gt;De nuevo, hacemos aparecer una carpeta nueva. Como las dos carpetas &lt;em&gt;templates/&lt;/em&gt; se "fusionan" a ojos del cargador, me he visto obligado a esconder el segundo &lt;em&gt;layout.html&lt;/em&gt; en una carpeta, para evitar colisiones de nombres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ tree
.
├── news
│   ├── static
│   │   └── style.css
│   ├── templates
│   │   └── news
│   │       ├── latest.html
│   │       └── layout.html
│   └── __init__.py
├── pages
│   ├── templates
│   │   ├── about.html
│   │   └── legal.html
│   └── __init__.py
├── static
│   └── style.css
├── templates
│   ├── layout.html
│   └── main.html
├── app.py
├── requirements.txt
└── server.sh

&lt;span class="m"&gt;8&lt;/span&gt; directories, &lt;span class="m"&gt;13&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La aplicación ya es repetitiva; se pone solamente por tener el ejemplo completo. Es importante ver que se ha utilizado el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;url_for&lt;/strong&gt; para no calcular el &lt;em&gt;path&lt;/em&gt; del fichero de estilos. Pido perdón por la chapuza de no usar una base de datos, y poner las noticias en el código.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/__init__.py
from flask import Blueprint, render_template

&lt;span class="nv"&gt;news&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Blueprint&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;, __name__, &lt;span class="nv"&gt;template_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

@news.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/latest&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def latest_news&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;news&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lorem&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;ipsum&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;news/latest.html&amp;#39;&lt;/span&gt;, **data&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/templates/news/layout.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ url_for(&amp;#39;.static&amp;#39;, filename=&amp;#39;style.css&amp;#39;) }}&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;p&amp;gt;&amp;lt;small&amp;gt;News app&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/templates/news/latest.html
&lt;span class="o"&gt;{&lt;/span&gt;% extends &lt;span class="s2"&gt;&amp;quot;news/layout.html&amp;quot;&lt;/span&gt; %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;% block content %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;h1&amp;gt;Latest news&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% &lt;span class="k"&gt;for&lt;/span&gt; new in news %&lt;span class="o"&gt;}&lt;/span&gt;
        &amp;lt;li&amp;gt;&lt;span class="o"&gt;{{&lt;/span&gt; new &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/li&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endfor %&lt;span class="o"&gt;}&lt;/span&gt;
    &amp;lt;/ul&amp;gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endblock %&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat news/static/style.css
html &lt;span class="o"&gt;{&lt;/span&gt; background-color: red &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El punto interesante es que quremos mapear el &lt;strong&gt;blueprint&lt;/strong&gt;. Eso significa que la URL &lt;em&gt;/latest&lt;/em&gt; del &lt;strong&gt;blueprint&lt;/strong&gt; tiene que utilizar un prefijo, para que lo veamos en &lt;em&gt;/news/latest&lt;/em&gt;. Es ahora, en el momento de registrar el &lt;strong&gt;blueprint&lt;/strong&gt;, cuando podemos especificar que todas sus URLs cuelguen de un prefijo adicional.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template
from pages import pages
from news import news

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def main_page&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main.html&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;pages&lt;span class="o"&gt;)&lt;/span&gt;
app.register_blueprint&lt;span class="o"&gt;(&lt;/span&gt;news, &lt;span class="nv"&gt;url_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/news&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reflexiones&lt;/h2&gt;
&lt;p&gt;¿Os habéis fijado lo fácil que seria adoptar el módulo de noticias para otra aplicación?&lt;/p&gt;
&lt;p&gt;Solo necesitamos tener un repositorio de &lt;strong&gt;blueprints&lt;/strong&gt; listo para ser usado en proyectos nuevos. Si se piensan bien nuestros &lt;strong&gt;blueprints&lt;/strong&gt; serán &lt;strong&gt;reusables&lt;/strong&gt;. Algunos de ellos incluso se podrían convertir en &lt;strong&gt;extensiones&lt;/strong&gt;, pero eso es otra historia.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category><category term="blueprints"></category></entry><entry><title>Otro microframework en python: Flask</title><link href="https://www.linuxsysadmin.ml/2017/12/otro-microframework-en-python-flask.html" rel="alternate"></link><published>2017-12-04T10:00:00+01:00</published><updated>2017-12-04T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-12-04:/2017/12/otro-microframework-en-python-flask.html</id><summary type="html">&lt;p&gt;Cuando queremos hacer una nueva aplicación web podemos usar un &lt;em&gt;framework&lt;/em&gt; completo como &lt;strong&gt;django&lt;/strong&gt; o uno minimalista como &lt;strong&gt;bottle&lt;/strong&gt;. Entre ambos existe una amplia variedad de &lt;em&gt;frameworks&lt;/em&gt; que nos pueden aportar variedad y algunas de las funcionalidades más demandadas. En esta categoria podemos encontrar un &lt;em&gt;microframework&lt;/em&gt; muy interesante llamado &lt;strong&gt;Flask …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cuando queremos hacer una nueva aplicación web podemos usar un &lt;em&gt;framework&lt;/em&gt; completo como &lt;strong&gt;django&lt;/strong&gt; o uno minimalista como &lt;strong&gt;bottle&lt;/strong&gt;. Entre ambos existe una amplia variedad de &lt;em&gt;frameworks&lt;/em&gt; que nos pueden aportar variedad y algunas de las funcionalidades más demandadas. En esta categoria podemos encontrar un &lt;em&gt;microframework&lt;/em&gt; muy interesante llamado &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De hecho, este &lt;em&gt;framework&lt;/em&gt; es enormemente similar a &lt;a href="https://www.linuxsysadmin.ml/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html"&gt;otro que ya vimos&lt;/a&gt;. Lo único que impide que ambos &lt;em&gt;frameworks&lt;/em&gt; se fusionen es un choque ideológico entre ambos autores, y su forma de afrontar la distribución del código fuente; mientras que el autor de &lt;strong&gt;bottle&lt;/strong&gt; mantiene la idea del fichero único, el de &lt;strong&gt;flask&lt;/strong&gt; cree firmemente en la necesidad de separar las capas dependiendo de su función.&lt;/p&gt;
&lt;p&gt;De esta forma, &lt;strong&gt;flask&lt;/strong&gt; es solo la unión de 3 grandes librerías del mismo autor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flask&lt;/strong&gt;: una librería que funciona como pegamento entre todas las demás&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;werkzeug&lt;/strong&gt;: posiblemente la mejor librería para tratar con el protocolo &lt;strong&gt;WSGI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jinja2&lt;/strong&gt;: el mejor motor de plantillas existente para &lt;strong&gt;python&lt;/strong&gt;, muy parecido al de &lt;strong&gt;django&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este &lt;em&gt;framework&lt;/em&gt; no trabaja con ninguna capa de datos, dándonos la libertad para elegir la que más nos guste, y dándonos libertad para usar cualquier servicio de datos, sea SQL, NoSQL, u otros, incluso ninguno.&lt;/p&gt;
&lt;p&gt;Sin embargo, lo que realmente hace grande a este &lt;em&gt;framework&lt;/em&gt; son los &lt;strong&gt;blueprints&lt;/strong&gt;, que lo hacen extensible hasta límites insospechados, pero eso lo vermos más adelante. No nos olvidemos de mencionar la &lt;a href="http://flask.pocoo.org/docs/"&gt;magnífica documentación&lt;/a&gt; y estaremos trasteando con el &lt;em&gt;framework&lt;/em&gt; en menos de 2 horas.&lt;/p&gt;
&lt;p&gt;Y si he conseguido picar tu curiosidad, te recomiendo encarecidamente leerte el libre &lt;em&gt;online&lt;/em&gt; &lt;a href="https://exploreflask.com/en/latest/"&gt;Explore Flask&lt;/a&gt; que es muy interesante y algo más completo que este artículo.&lt;/p&gt;
&lt;h2&gt;Objetos y métodos básicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flask&lt;/strong&gt;: Objeto principal del &lt;em&gt;framework&lt;/em&gt;, es una forma de aglutinar el &lt;em&gt;callable wsgi&lt;/em&gt; con un conjunto de rutas. Nuestra aplicación va a ser una instancia de este objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request&lt;/strong&gt;: Objeto que nos permite acceder a los datos referentes a la petición que nos han hecho. Incluye los parámetros GET, las cookies y cabeceras, entre otras cosas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;response&lt;/strong&gt;: Objeto que nos permite modificar nuestras respuestas, añadiendo cabeceras, códigos de estado, cookies y otros conceptos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render_template&lt;/strong&gt;: Método que inyecta nuestro contexto a una plantilla y nos devuelve la respuesta ya formada, lista para devolverla.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: Helper que nos permite devolver una redirección a otra URL en nuestro código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: Helper que nos permite devolver estado de error desde nuestro controlador.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Una aplicación vacía&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta para contener nuestro proyecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects$ mkdir myapp
gerard@atlantis:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; myapp/
gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo las buenas prácticas, vamos a trabajar con virtualenv, que nos servirá para poner nuestras librerías, que de momento se limitan al &lt;em&gt;framework&lt;/em&gt;. En adelante, es posible poner librerías para acceder a una base de datos, nuevos motores de plantillas y librerías más específicas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/myapp$ virtualenv .venv
New python executable in /home/gerard/projects/myapp/.venv/bin/python
Installing setuptools, pip, wheel...done.
gerard@atlantis:~/projects/myapp$ . .venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ pip install flask
...
Installing collected packages: itsdangerous, click, Werkzeug, MarkupSafe, Jinja2, flask
Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 click-6.7 flask-0.12.2 itsdangerous-0.24
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como queremos poder reproducir nuestro entorno usaremos pip freeze para guardar las dependencias, en vista a poderlas instalar en un futuro entorno real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ pip freeze &amp;gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo mínimo para ejecutar una aplicación &lt;em&gt;WSGI compilant&lt;/em&gt; es un servidor WSGI y la aplicación misma. Una aplicación construida con &lt;strong&gt;flask&lt;/strong&gt; es básicamente una instancia del objeto &lt;em&gt;Flask&lt;/em&gt;, a la que iremos registrando rutas. De momento la dejamos vacía, lo que nos va a responder siempre un error 404.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un entorno real, el servidor a usar sería otro, por ejemplo &lt;strong&gt;apache&lt;/strong&gt;, &lt;strong&gt;uwsgi&lt;/strong&gt; o &lt;strong&gt;gunicorn&lt;/strong&gt;, pero para desarrollar, podemos aprovecharnos del servidor integrado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ &lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py flask run
 * Serving Flask app &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;
 * Forcing debug mode on
 * Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: &lt;span class="m"&gt;579&lt;/span&gt;-205-006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para nuestra comodidad futura, vamos a poner el comando en un script, en el que podemos definir nuestras propias variables de entorno o aquellas que queramos aplicar estando en nuestro entorno de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat server.sh
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py &lt;span class="se"&gt;\&lt;/span&gt;
flask run --host &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0 --port &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ chmod &lt;span class="m"&gt;755&lt;/span&gt; server.sh
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ ./server.sh
 * Serving Flask app &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;
 * Forcing debug mode on
 * Running on http://0.0.0.0:8080/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: &lt;span class="m"&gt;579&lt;/span&gt;-205-006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos dirigirnos a http://localhost:8080/ para comprobar un bonito error 404.&lt;/p&gt;
&lt;h2&gt;Registrando rutas a controladores&lt;/h2&gt;
&lt;p&gt;La idea es muy simple: se registran rutas a funciones que devuelven la respuesta resultado. Hay varias formas de añadir rutas a nuestra aplicación, pero la que más me gusta es el decorador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, todas las peticiones GET a / van a devolver una página HTML con el contenido retornado. El código de retorno es un 200 y el &lt;em&gt;content-type&lt;/em&gt; es &lt;em&gt;text/html&lt;/em&gt; por defecto, aunque se puede cambiar con el objeto &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Usando plantillas y segmentos de URL&lt;/h2&gt;
&lt;p&gt;No es una buena práctica poner en el controlador la respuesta HTML. Para eso, &lt;strong&gt;flask&lt;/strong&gt; nos ofrece el motor de plantillas &lt;strong&gt;jinja2&lt;/strong&gt;. También nos permite capturar parte de la URL como parámetros; veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat app.py
from flask import Flask, render_template

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Flask&lt;span class="o"&gt;(&lt;/span&gt;__name__&lt;span class="o"&gt;)&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; render_template&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.html&amp;#39;&lt;/span&gt;, **data&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$ cat templates/hello.html
&amp;lt;p&amp;gt;Hola &lt;span class="o"&gt;{{&lt;/span&gt; nombre &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@atlantis:~/projects/myapp$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y de esta forma, todas las URLs de la forma &lt;em&gt;/hello/nombre&lt;/em&gt; capturará el segmento como &lt;em&gt;name&lt;/em&gt; y lo va a pasar a la funcion &lt;em&gt;render_template&lt;/em&gt; que hará lo que tenga que hacer con ella, que en este caso es pintarla.&lt;/p&gt;
&lt;p&gt;Algunas aplicaciones no necesitan plantillas HTML. Por ejemplo una API solo necesitaría convertir una expresión python en su equivalente JSON, mediante una función adecuada, que podemos ver como un motor de plantillas.&lt;/p&gt;
&lt;h2&gt;Blueprints&lt;/h2&gt;
&lt;p&gt;Las aplicaciones web tienden a crecer mucho, especialmente si planificamos funcionalidades de acuerdo a algún método ágil. En estos casos podemos contar con los &lt;strong&gt;blueprints&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Básicamente, un &lt;strong&gt;blueprint&lt;/strong&gt; es una manera de organizar tu aplicación en trozos, más pequeños y reusables. Como toda otra aplicación &lt;strong&gt;Flask&lt;/strong&gt;, es una colección de vistas, plantillas y otros elementos estáticos. A pesar de esto, un &lt;strong&gt;blueprint&lt;/strong&gt; no es una aplicación en sí misma, y debe ser registrado en una aplicación de verdad antes de que se pueda usar.&lt;/p&gt;
&lt;p&gt;La razón principal por la que deberíamos utilizar &lt;strong&gt;blueprints&lt;/strong&gt; es la de desacoplar nuestra aplicación en componentes más pequeños y reusables, encargándose cada uno de uno solo de los aspectos de la aplicación. Esto los hace mantenibles y más fáciles de &lt;em&gt;debuguear&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En la práctica, los &lt;strong&gt;blueprints&lt;/strong&gt; han derivado en &lt;em&gt;extensiones&lt;/em&gt; genéricas que nos permiten trabajar con módulos preparados para sacarnos el trabajo duro de encima. Mis favoritos son &lt;strong&gt;Flask-Admin&lt;/strong&gt; y &lt;strong&gt;Flask-Mongoengine&lt;/strong&gt;, pero eso queda para otro artículo.&lt;/p&gt;</content><category term="python"></category><category term="framework"></category><category term="microframework"></category><category term="flask"></category></entry><entry><title>Un ODM para mongodb en python: mongoengine</title><link href="https://www.linuxsysadmin.ml/2017/11/un-odm-para-mongodb-en-python-mongoengine.html" rel="alternate"></link><published>2017-11-27T10:00:00+01:00</published><updated>2017-11-27T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-27:/2017/11/un-odm-para-mongodb-en-python-mongoengine.html</id><summary type="html">&lt;p&gt;Aquellos que hemos usado &lt;strong&gt;mongodb&lt;/strong&gt; desde &lt;strong&gt;python&lt;/strong&gt;, ya conocemos las virtudes de &lt;strong&gt;pymongo&lt;/strong&gt;. Sin embargo, este lenguaje es orientado a objetos, y trabajar con ellos hace nuestro código más simple y más legible. &lt;strong&gt;Mongoengine&lt;/strong&gt; es un ODM, una librería que se encarga de convertir objetos en documentos &lt;strong&gt;mongodb&lt;/strong&gt; y viceversa …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aquellos que hemos usado &lt;strong&gt;mongodb&lt;/strong&gt; desde &lt;strong&gt;python&lt;/strong&gt;, ya conocemos las virtudes de &lt;strong&gt;pymongo&lt;/strong&gt;. Sin embargo, este lenguaje es orientado a objetos, y trabajar con ellos hace nuestro código más simple y más legible. &lt;strong&gt;Mongoengine&lt;/strong&gt; es un ODM, una librería que se encarga de convertir objetos en documentos &lt;strong&gt;mongodb&lt;/strong&gt; y viceversa.&lt;/p&gt;
&lt;p&gt;ODM son las siglas para &lt;em&gt;object to document mapper&lt;/em&gt;, y es el equivalente a un ORM (&lt;em&gt;object to relational mapper&lt;/em&gt;). La diferencia entre ambos conceptos es que los datos van a parar a la base de datos como un documento en contraposición a una base de datos relacional.&lt;/p&gt;
&lt;p&gt;El objetivo de la librería es convertir nuestros modelos en objetos de &lt;strong&gt;python&lt;/strong&gt; de forma declarativa. Toda la magia del acceso a la base de datos se hace de forma automática.&lt;/p&gt;
&lt;p&gt;Este ODM está realmente bien hecho; soporta tipos de campos, herencia de clases, referencias a otros documentos e incluso listas en sus campos. Todo ello creando los índices necesarios para los accesos habituales, y la posibilidad de declarar otros índices que creamos necesarios.&lt;/p&gt;
&lt;h2&gt;Declaración de los modelos&lt;/h2&gt;
&lt;p&gt;Veamos un ejemplo, con un subconjunto de los datos de un &lt;em&gt;blog&lt;/em&gt; estándar. Para ello, el primer paso es declarar nuestros modelos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat models.py 
import mongoengine


def connect&lt;span class="o"&gt;(&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;:
    mongoengine.connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;url&lt;span class="o"&gt;)&lt;/span&gt;


class Author&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;authors&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;


class Page&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.Document&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.StringField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;allow_inheritance&amp;#39;&lt;/span&gt;: True&lt;span class="o"&gt;}&lt;/span&gt;


class Post&lt;span class="o"&gt;(&lt;/span&gt;Page&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.ReferenceField&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Author&amp;#39;&lt;/span&gt;,
        &lt;span class="nv"&gt;reverse_delete_rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mongoengine.CASCADE
    &lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.DateTimeField&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mongoengine.ListField&lt;span class="o"&gt;(&lt;/span&gt;mongoengine.StringField&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Habéis visto algunas de las funcionalidades más interesantes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subclases mediante terminología &lt;strong&gt;python&lt;/strong&gt; habitual.&lt;/li&gt;
&lt;li&gt;Varios tipos de datos para los campos.&lt;/li&gt;
&lt;li&gt;Referencias a otros objetos que se cargan de forma &lt;em&gt;lazy&lt;/em&gt;, es decir, cuando se accede al campo se lanza una nueva consulta.&lt;/li&gt;
&lt;li&gt;Reglas de tratamiento automático de referencias para objetos eliminados.&lt;/li&gt;
&lt;li&gt;Campos tipo lista, con tipología de los elementos de la misma. En el ejemplo son campos tipo &lt;code&gt;StringField&lt;/code&gt; pero podrían ser cualquiera, como por ejemplo &lt;code&gt;ReferenceField&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Uso de nuestros modelos&lt;/h2&gt;
&lt;p&gt;Para crear nuestros objetos, basta hacerlo como se haría en &lt;strong&gt;python&lt;/strong&gt; normal. Solo hay que tener en cuenta que los cambios no acabarán en la base de datos hasta que invoquemos el método &lt;code&gt;save&lt;/code&gt; del objeto tipo &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat carga.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from models import Author, Page, Post, connect
from datetime import datetime

connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

Page&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;About&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Author&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gerard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
Post&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lorem ipsum&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a,
     &lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;datetime.utcnow&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;.save&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ ./carga.py 
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y el resultado es un esquema de base de datos bastante limpio, y sin ningún tipo de &lt;em&gt;overhead&lt;/em&gt;. Solo hay que cargar con un campo adicional para diferenciar el tipo de objeto en el caso de herencia.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use &lt;span class="nb"&gt;test&lt;/span&gt;
switched to db &lt;span class="nb"&gt;test&lt;/span&gt;
&amp;gt; show collections
authors
pages
&amp;gt; db.authors.find&lt;span class="o"&gt;()&lt;/span&gt;.pretty&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ed00&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Gerard&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; db.pages.find&lt;span class="o"&gt;()&lt;/span&gt;.pretty&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ecff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;_cls&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Page&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;About&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;blah&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bc093f961b0aa6ed01&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;_cls&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Page.Post&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;lorem ipsum&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;59b1a4bb093f961b0aa6ed00&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;date&amp;quot;&lt;/span&gt; : ISODate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2017-09-07T19:57:47.993Z&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consultar los objetos de la base de datos requiere encontrarlos primero, con el método &lt;code&gt;Document.objects&lt;/code&gt;. Esto nos puede traer un cursor de objetos o podemos invocar el método &lt;code&gt;first&lt;/code&gt; para traer uno solo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ cat consulta.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from models import Author, Post, connect

connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb://localhost:27017/test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Author.objects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gerard&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.first&lt;span class="o"&gt;()&lt;/span&gt;
print &lt;span class="s1"&gt;&amp;#39;Author:&amp;#39;&lt;/span&gt;, a.name
&lt;span class="k"&gt;for&lt;/span&gt; post in Post.objects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;* Post:&amp;#39;&lt;/span&gt;, post.title
    print &lt;span class="s1"&gt;&amp;#39;  Tags:&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;post.tags&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que buscamos un autor por su nombre, asumiendo que el primero nos vale. Una vez tenemos el autor podemos encontrar sus posts y escribir algunos datos en la salida estándar.&lt;/p&gt;
&lt;p&gt;Ejecutamos y vemos que el resultado es el esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ ./consulta.py 
Author: Gerard
* Post: Hello world
  Tags: hello, world
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/mongoengine$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para modificar los objetos, tenemos que consultarlos, modificar el objeto e invocar de nuevo el método &lt;code&gt;save&lt;/code&gt;. De la misma manera, para borrarlo necesitamos el objeto en &lt;strong&gt;python&lt;/strong&gt; e invocar a continuación el método &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Sin duda esta librería es una gran ayuda para hacer un gran desarrollo. Estoy seguro que va a servirme para mi siguiente proyecto personal.&lt;/p&gt;
&lt;p&gt;Hay muchas más cosas que se pueden hacer con este ODM; simplemente tenemos que ahondar en &lt;a href="http://docs.mongoengine.org/apireference.html"&gt;la documentación&lt;/a&gt;.&lt;/p&gt;</content><category term="python"></category><category term="mongodb"></category><category term="mongoengine"></category><category term="odm"></category></entry><entry><title>Ejecutando procesos desde python con popen</title><link href="https://www.linuxsysadmin.ml/2017/11/ejecutando-procesos-desde-python-con-popen.html" rel="alternate"></link><published>2017-11-20T10:00:00+01:00</published><updated>2017-11-20T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-11-20:/2017/11/ejecutando-procesos-desde-python-con-popen.html</id><summary type="html">&lt;p&gt;Algunas veces nos interesa lanzar comandos &lt;em&gt;bash&lt;/em&gt;, pero necesitamos de la potencia de &lt;em&gt;python&lt;/em&gt; para &lt;em&gt;parsear&lt;/em&gt; la salida. En otras ocasiones queremos lanzar los comandos &lt;em&gt;bash&lt;/em&gt; directamente desde &lt;em&gt;python&lt;/em&gt; porque se hace desde una aplicación web. En estos casos nos viene muy bien el módulo &lt;em&gt;subprocess&lt;/em&gt; que nos lo permite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Algunas veces nos interesa lanzar comandos &lt;em&gt;bash&lt;/em&gt;, pero necesitamos de la potencia de &lt;em&gt;python&lt;/em&gt; para &lt;em&gt;parsear&lt;/em&gt; la salida. En otras ocasiones queremos lanzar los comandos &lt;em&gt;bash&lt;/em&gt; directamente desde &lt;em&gt;python&lt;/em&gt; porque se hace desde una aplicación web. En estos casos nos viene muy bien el módulo &lt;em&gt;subprocess&lt;/em&gt; que nos lo permite.&lt;/p&gt;
&lt;p&gt;Aunque no quiero dar detalles porque la idea es todavia una prueba de concepto, en mi caso concreto se trataba de hacer una herramienta web muy simple para lanzar &lt;em&gt;backups&lt;/em&gt; y &lt;em&gt;restores&lt;/em&gt; sobre &lt;strong&gt;mongodb&lt;/strong&gt;, usando los comandos &lt;em&gt;mongodump&lt;/em&gt; y &lt;em&gt;mongorestore&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo he decidido poner dos ejemplos muy simplificados, de forma que no nos distraigan de lo que relamente es importante; uno es sobre como lanzar comandos y recoger resultados, mientras que el otro es un poco más avanzado y nos permite concatenar varios comandos como haríamos en &lt;em&gt;bash&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Un ejemplo simple&lt;/h2&gt;
&lt;p&gt;Supongamos que queremos graficar la carga del sistema, tal como nos las da el comando &lt;em&gt;uptime&lt;/em&gt;. Para ello tenemos que &lt;em&gt;parsear&lt;/em&gt; y convertir en números los tres valores que el comando nos da. Por ello tenemos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ cat uptimes.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from subprocess import Popen, PIPE, STDOUT

&lt;span class="nv"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uptime&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE, &lt;span class="nv"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;STDOUT&lt;span class="o"&gt;)&lt;/span&gt;
out, &lt;span class="nv"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; proc.communicate&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; out.rstrip&lt;span class="o"&gt;()&lt;/span&gt;.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load average: &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; uptimes.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;uptimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;e.replace&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; e in uptimes&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1 minute&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;5 minutes&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;15 minutes&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in xrange&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;Last %s: %s&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;times&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;, uptimes&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;])&lt;/span&gt;
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La parte importante se limita a dos líneas, que son las que crean la variable &lt;code&gt;proc&lt;/code&gt; y la siguiente. Se ejecuta el comando especificado en el &lt;em&gt;array&lt;/em&gt; del primer parámetro de &lt;code&gt;Popen&lt;/code&gt;, sin indicar entrada estándar (no hay por defecto), redirigiendo la salida de error a la salida estándar, y dejando esta como &lt;code&gt;PIPE&lt;/code&gt; la convertimos en un &lt;em&gt;stream&lt;/em&gt;, que luego podemos enchufar a otro proceso o recoger con el método &lt;code&gt;communicate()&lt;/code&gt;, que es el caso.&lt;/p&gt;
&lt;p&gt;El resto es un mero ejercicio de &lt;em&gt;parsing&lt;/em&gt;; con algunas funciones básicas de la clase &lt;em&gt;string&lt;/em&gt; (&lt;em&gt;strip&lt;/em&gt;, &lt;em&gt;split&lt;/em&gt; y &lt;em&gt;replace&lt;/em&gt;) y algunos &lt;em&gt;castings&lt;/em&gt; a &lt;em&gt;float&lt;/em&gt;, tenemos lo que nos interesa. La parte de graficar queda como ejercicio para el lector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ ./uptimes.py
Last &lt;span class="m"&gt;1&lt;/span&gt; minute: &lt;span class="m"&gt;0&lt;/span&gt;.28
Last &lt;span class="m"&gt;5&lt;/span&gt; minutes: &lt;span class="m"&gt;0&lt;/span&gt;.09
Last &lt;span class="m"&gt;15&lt;/span&gt; minutes: &lt;span class="m"&gt;0&lt;/span&gt;.03
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y podemos ver que tenemos la respuesta esperada con los valores pelados, y listos para disponer de ellos como queramos.&lt;/p&gt;
&lt;h2&gt;Un ejemplo concatenando varios procesos&lt;/h2&gt;
&lt;p&gt;Este ejemplo es posiblemente uno de los más inútiles que puedo mostrar. Simplemente se trata de hacer algo como &lt;code&gt;seq 1 100 | grep 3 | grep 5&lt;/code&gt;. No es muy útil, pero nos va a ilustrar sobre como se hacen este tipo de cosntrucciones &lt;em&gt;bash&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El truco consiste en hacer 3 procesos, para cada uno de los comandos, usando los &lt;em&gt;streams&lt;/em&gt; declarados con &lt;code&gt;PIPE&lt;/code&gt; para enchufarlos a la entrada estándar del siguiente comando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;p1&lt;/strong&gt; ejecutará el &lt;code&gt;seq 1 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p2&lt;/strong&gt; ejecutará un &lt;code&gt;grep 3&lt;/code&gt; sobre la entrada estándar, que será la salida estándar de &lt;strong&gt;p1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;p3&lt;/strong&gt; ejecutará un &lt;code&gt;grep 5&lt;/code&gt; sobre la entrada estándar, que será la salida estándar de &lt;strong&gt;p2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y así queda nuestro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ cat seq.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from subprocess import Popen, PIPE

&lt;span class="nv"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;p1.stdout, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Popen&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="nv"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;p2.stdout, &lt;span class="nv"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PIPE&lt;span class="o"&gt;)&lt;/span&gt;
p1.stdout.close&lt;span class="o"&gt;()&lt;/span&gt;
p2.stdout.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; p3.communicate&lt;span class="o"&gt;()[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;.strip&lt;span class="o"&gt;()&lt;/span&gt;

print out
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cabe indicar que el método &lt;code&gt;communicate()&lt;/code&gt; se llama solamente en el último comando de la cadena, para esperar que acabe y recoger así su salida estándar y su salida de error, que en este caso, desechamos.&lt;/p&gt;
&lt;p&gt;Solo queda comentar que los &lt;em&gt;streams&lt;/em&gt; de salida de &lt;strong&gt;p1&lt;/strong&gt; y de &lt;strong&gt;p2&lt;/strong&gt; se cierran después de enchufarlos a &lt;strong&gt;p3&lt;/strong&gt;, tal como sugiere la documentación, para evitar problemas en caso de que &lt;strong&gt;p3&lt;/strong&gt; acabe antes que &lt;strong&gt;p2&lt;/strong&gt;, o este acabe antes que &lt;strong&gt;p1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A partir de aquí, solo nos queda comprobar que el resultado es el mismo, tanto en &lt;em&gt;bash&lt;/em&gt;, como en &lt;em&gt;python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/popen$ seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="m"&gt;53&lt;/span&gt;
gerard@atlantis:~/projects/popen$ ./seq.py
&lt;span class="m"&gt;35&lt;/span&gt;
&lt;span class="m"&gt;53&lt;/span&gt;
gerard@atlantis:~/projects/popen$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ampliamos nuestra &lt;em&gt;toolbox&lt;/em&gt; de recursos, de forma que podamos encarar futuros retos con nuevas opciones.&lt;/p&gt;</content><category term="python"></category><category term="subprocess"></category><category term="popen"></category></entry><entry><title>Los context managers de python</title><link href="https://www.linuxsysadmin.ml/2017/10/los-context-managers-de-python.html" rel="alternate"></link><published>2017-10-16T10:00:00+02:00</published><updated>2017-10-16T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-10-16:/2017/10/los-context-managers-de-python.html</id><summary type="html">&lt;p&gt;Muchas veces nos pasa que necesitamos un objeto de esos que luego necesitan algún tipo de limpieza cuando ya no se necesitan. Cualquier programador avanzado os puede contar lo fácil que es olvidarse de la destrucción del mismo, y de las veces que lo ha hecho, él u otras personas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Muchas veces nos pasa que necesitamos un objeto de esos que luego necesitan algún tipo de limpieza cuando ya no se necesitan. Cualquier programador avanzado os puede contar lo fácil que es olvidarse de la destrucción del mismo, y de las veces que lo ha hecho, él u otras personas.&lt;/p&gt;
&lt;p&gt;Por suerte, &lt;strong&gt;python&lt;/strong&gt; nos ofrece una forma de crear objetos con el &lt;em&gt;keyword with&lt;/em&gt;, que nos asegura que el mismo lenguaje de programación llamará a los métodos de creación y destrucción del objeto. Este mecanismo se llama &lt;em&gt;context manager&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo simple de un &lt;em&gt;context manager&lt;/em&gt; muy común y disponible en la biblioteca estándar de &lt;strong&gt;python&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat example.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

with open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;greeting.txt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; as f:
    print f.read&lt;span class="o"&gt;()&lt;/span&gt;
gerard@sirius:~/contextmanagers$ cat greeting.txt 
Hello world
gerard@sirius:~/contextmanagers$ ./example.py 
Hello world

gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La idea es que la función &lt;code&gt;open()&lt;/code&gt; va a inicializar y devolver un &lt;em&gt;file descriptor&lt;/em&gt; que vamos a recoger como &lt;code&gt;f&lt;/code&gt; gracias al &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;as&lt;/code&gt;. Cuando salgamos del bloque &lt;code&gt;with&lt;/code&gt;, se va a llamar a una función que se va a encargar de cerrar el fichero a nivel de sistema operativo.&lt;/p&gt;
&lt;h2&gt;Creando un context manager&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;context manager&lt;/em&gt; no es otra cosa que un objeto que tiene dos métodos: &lt;code&gt;__enter__()&lt;/code&gt; y &lt;code&gt;__exit__()&lt;/code&gt;. El método &lt;code&gt;__enter__()&lt;/code&gt; es el que inicializa el objeto a devolver (el que recogemos con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;as&lt;/code&gt;) y lo devuelve, aunque es opcional devolver algo. El método &lt;code&gt;__exit__()&lt;/code&gt; es el que se llama automáticamente cuando acaba el bloque &lt;code&gt;with&lt;/code&gt;, y se encargaría de destruir el objeto devuelto.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo para generar el marcado HTML de una forma programática:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat html_v1.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

class Tag&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:

    def __init__&lt;span class="o"&gt;(&lt;/span&gt;self, tag&lt;span class="o"&gt;)&lt;/span&gt;:
        self.tag &lt;span class="o"&gt;=&lt;/span&gt; tag

    def __enter__&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;&amp;lt;%s&amp;gt;&amp;#39;&lt;/span&gt; % self.tag

    def __exit__&lt;span class="o"&gt;(&lt;/span&gt;self, *args&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;&amp;lt;/%s&amp;gt;&amp;#39;&lt;/span&gt; % self.tag

with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;Lorem ipsum&amp;#39;&lt;/span&gt;
    with Tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;et dolor sit amet&amp;#39;&lt;/span&gt;
gerard@sirius:~/contextmanagers$ ./html_v1.py 
&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;
Lorem ipsum
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
et dolor sit amet
&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este ejemplo no es muy útil, pero queda claro como y cuando se llaman los creadores y destructores. Es interesante que no devolvemos ninguna variable en el método &lt;code&gt;__enter__()&lt;/code&gt;, y que por lo tanto, la cláusula &lt;code&gt;with&lt;/code&gt; no recoge nada con un &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Una versión todavía más simple&lt;/h2&gt;
&lt;p&gt;Crear el objeto que va a actuar como &lt;em&gt;context manager&lt;/em&gt; es interesante, pero también un montón de líneas en nuestro código. Si queremos simplificar nuestro &lt;em&gt;context manager&lt;/em&gt;, podemos encontrar la solución en la biblioteca estándar de &lt;strong&gt;python&lt;/strong&gt;, en el módulo &lt;em&gt;contextlib&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De esta forma, el ejemplo anterior queda reducido a uno similar, que es el que sigue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/contextmanagers$ cat html_v2.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from contextlib import contextmanager

@contextmanager
def tag&lt;span class="o"&gt;(&lt;/span&gt;tag&lt;span class="o"&gt;)&lt;/span&gt;:
    print &lt;span class="s1"&gt;&amp;#39;&amp;lt;%s&amp;gt;&amp;#39;&lt;/span&gt; % tag
    yield
    print &lt;span class="s1"&gt;&amp;#39;&amp;lt;/%s&amp;gt;&amp;#39;&lt;/span&gt; % tag

with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
    with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;Lorem ipsum&amp;#39;&lt;/span&gt;
    with tag&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:
        print &lt;span class="s1"&gt;&amp;#39;et dolor sit amet&amp;#39;&lt;/span&gt;
gerard@sirius:~/contextmanagers$ ./html_v2.py 
&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;
Lorem ipsum
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
et dolor sit amet
&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
gerard@sirius:~/contextmanagers$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E·n este caso es todavía más simple de entender: tenemos la inicialización, devolvemos la variable o nada con el &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;yield&lt;/code&gt; y finalmente tenemos el código de finalización.&lt;/p&gt;</content><category term="python"></category><category term="context manager"></category></entry><entry><title>Escribiendo servicios web con python y falcon</title><link href="https://www.linuxsysadmin.ml/2017/09/escribiendo-servicios-web-con-python-y-falcon.html" rel="alternate"></link><published>2017-09-19T17:00:00+02:00</published><updated>2017-09-19T17:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-19:/2017/09/escribiendo-servicios-web-con-python-y-falcon.html</id><summary type="html">&lt;p&gt;El otro día me vi leyendo artículos sobre arquitecturas basadas en servicios web, especialmente centrados en patrones REST y codificados en JSON. No es la primera vez que hago algo con &lt;em&gt;frameworks&lt;/em&gt; no específicos, pero tras buscar un poco por internet, descubrí un &lt;em&gt;framework&lt;/em&gt; específico para servicios REST llamado &lt;strong&gt;falcon …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me vi leyendo artículos sobre arquitecturas basadas en servicios web, especialmente centrados en patrones REST y codificados en JSON. No es la primera vez que hago algo con &lt;em&gt;frameworks&lt;/em&gt; no específicos, pero tras buscar un poco por internet, descubrí un &lt;em&gt;framework&lt;/em&gt; específico para servicios REST llamado &lt;strong&gt;falcon&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Se trata de u &lt;em&gt;microframework&lt;/em&gt; de diseño simplista, ligero, rápido y sin ninguna magia. Eso nos lleva al punto que me enamoró: no toma ninguna decisión y no obliga a usar ninguna capa de persistencia ni ningún motor de plantillas o serializado.&lt;/p&gt;
&lt;p&gt;Desde el punto de vista de rendimiento, está pensado para volar; no incluye nada que no sea específico de servicios web y sabe sacar provecho del &lt;em&gt;hardware&lt;/em&gt; moderno, permitiendo miles de peticiones por segundo en un &lt;em&gt;hardware&lt;/em&gt; modesto.&lt;/p&gt;
&lt;h2&gt;Una aplicación básica&lt;/h2&gt;
&lt;p&gt;De forma similar a otros &lt;em&gt;frameworks&lt;/em&gt; &lt;strong&gt;python&lt;/strong&gt;, nuestra API es una instancia de un objeto que se dedica a despachar rutas a controladores (aunque aquí los llaman &lt;em&gt;resources&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A diferencia de otros &lt;em&gt;frameworks&lt;/em&gt;, sin embargo, el registro de &lt;em&gt;resources&lt;/em&gt; a rutas es explícita, invocando el método &lt;code&gt;add_route&lt;/code&gt; en el objeto API, que es la aplicación que debemos servir.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;resources&lt;/em&gt; registrados en las rutas son simplemente objetos que definen los métodos &lt;code&gt;on_get&lt;/code&gt;, &lt;code&gt;on_post&lt;/code&gt; y hermanos, que se van a invocar dependiendo de verbo HTTP que nos sea solicitado, con un objeto tipo &lt;em&gt;request&lt;/em&gt; y uno tipo &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat requirements.txt 
&lt;span class="nv"&gt;falcon&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.2.0
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat server.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

from wsgiref.simple_server import make_server
from app import api

&lt;span class="nv"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;span class="nv"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; make_server&lt;span class="o"&gt;(&lt;/span&gt;host, port, api&lt;span class="o"&gt;)&lt;/span&gt;
try:
    print &lt;span class="s1"&gt;&amp;#39;Serving on %s:%s...&amp;#39;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;host, port&lt;span class="o"&gt;)&lt;/span&gt;
    server.serve_forever&lt;span class="o"&gt;()&lt;/span&gt;
except KeyboardInterrupt:
    print &lt;span class="s1"&gt;&amp;#39;\nBye!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos el servidor de pruebas arriba expuesto para que sirva nuestra API simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ ./server.py 
Serving on &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8000...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solo nos falta hacer alguna petición para ver como funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ curl -i http://localhost:8000/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
content-type: application/json&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;UTF-8

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@sirius:~$ curl -siX POST http://localhost:8000/ &lt;span class="p"&gt;|&lt;/span&gt; head -1
HTTP/1.0 &lt;span class="m"&gt;405&lt;/span&gt; Method Not Allowed
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto tenemos una API simple. Lo normal es que los datos salgan de algún tipo de base de datos, pero &lt;strong&gt;falcon&lt;/strong&gt; no ofrece soporte para ninguna, con lo que deberíamos usar lo que más nos convenga, por ejemplo &lt;strong&gt;mongodb&lt;/strong&gt; con &lt;strong&gt;mongoengine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En caso de querer extraer parámetros de la url, podemos registrar la ruta con una URL de la forma &lt;code&gt;/hello/{name}&lt;/code&gt;. De esta forma, nuestra función recibiría un parámetro &lt;code&gt;name&lt;/code&gt; con el contenido de ese segmento de URL, además de los objetos &lt;em&gt;request&lt;/em&gt; y &lt;em&gt;response&lt;/em&gt;. Un  ejemplo a continuación:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res, name&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello %s&amp;#39;&lt;/span&gt; % name,
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/{name}&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hooks&lt;/h2&gt;
&lt;p&gt;Otra funcionalidad muy interesante son los &lt;em&gt;hooks&lt;/em&gt;, que son métodos con la forma &lt;code&gt;func(req, resp, resource, params)&lt;/code&gt; que se llaman antes o después de atender la función del &lt;em&gt;resource&lt;/em&gt; y nos permiten hacer varias cosas; desde añadir código hasta condicionar un método concreto.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVISO&lt;/strong&gt;: Los &lt;em&gt;hooks&lt;/em&gt; registrados con &lt;code&gt;falcon.after&lt;/code&gt; no disponen del parámetro &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo, para evitar el código de serialización en cada método:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ cat app.py 
import falcon
import json


def serialize&lt;span class="o"&gt;(&lt;/span&gt;req, res, resource&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;if&lt;/span&gt; req.client_accepts_json:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; json.dumps&lt;span class="o"&gt;(&lt;/span&gt;res.body&lt;span class="o"&gt;)&lt;/span&gt;


class HelloResource&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;:
    @falcon.after&lt;span class="o"&gt;(&lt;/span&gt;serialize&lt;span class="o"&gt;)&lt;/span&gt;
    def on_get&lt;span class="o"&gt;(&lt;/span&gt;self, req, res, name&lt;span class="o"&gt;)&lt;/span&gt;:
        res.body &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Hello %s&amp;#39;&lt;/span&gt; % name,
        &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; falcon.API&lt;span class="o"&gt;()&lt;/span&gt;
api.add_route&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/{name}&amp;#39;&lt;/span&gt;, HelloResource&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/webservice$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda decir que estos &lt;em&gt;hooks&lt;/em&gt; se pueden registrar a nivel de método o de &lt;em&gt;resource&lt;/em&gt; (aplicaría a todos los métodos del &lt;em&gt;resource&lt;/em&gt;). En caso de querer que aplique a toda la aplicación habría que escribir un &lt;em&gt;middleware&lt;/em&gt; apropiado.&lt;/p&gt;</content><category term="falcon"></category><category term="REST"></category><category term="microframework"></category><category term="framework"></category><category term="python"></category></entry><entry><title>Introducción a los decoradores de python</title><link href="https://www.linuxsysadmin.ml/2017/09/introduccion-a-los-decoradores-de-python.html" rel="alternate"></link><published>2017-09-04T10:00:00+02:00</published><updated>2017-09-04T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-09-04:/2017/09/introduccion-a-los-decoradores-de-python.html</id><summary type="html">&lt;p&gt;Mucha gente no sabe de lo que hablamos cuando nos referimos a &lt;em&gt;decoradores&lt;/em&gt; en contexto de programación &lt;em&gt;python&lt;/em&gt;. No es un concepto demasiado complejo, pero nos puede servir para simplificar bastante nuestro código. Sin embargo, hay que admitir que es un concepto difícil si intentamos estudiarlo sin ninguna ayuda externa …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mucha gente no sabe de lo que hablamos cuando nos referimos a &lt;em&gt;decoradores&lt;/em&gt; en contexto de programación &lt;em&gt;python&lt;/em&gt;. No es un concepto demasiado complejo, pero nos puede servir para simplificar bastante nuestro código. Sin embargo, hay que admitir que es un concepto difícil si intentamos estudiarlo sin ninguna ayuda externa.&lt;/p&gt;
&lt;p&gt;Los decoradores no son otra cosa que &lt;strong&gt;azúcar sintáctico&lt;/strong&gt;. En realidad solo son funciones que aceptan una función origen por parámetro. Cuando llamemos a la función origen, en realidad estaremos llamando a la funcíon que devolvió la función decorador.&lt;/p&gt;
&lt;p&gt;Esto nos da varias posibilidades, como por ejemplo hacer cosas antes y después de declarar una función, o la posibilidad de suplantarla por completo, en vistas a añadir cosas a cada llamada, o a condicionar su ejecución. A continuación veremos algunos ejemplos:&lt;/p&gt;
&lt;h2&gt;El decorador simple&lt;/h2&gt;
&lt;p&gt;Vemos un primer &lt;em&gt;script&lt;/em&gt; hecho en &lt;em&gt;python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Decorating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@simple_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La línea que empieza con &lt;code&gt;@&lt;/code&gt; está &lt;strong&gt;decorando&lt;/strong&gt; la función a la que precede. En este caso, &lt;code&gt;simple_decorator&lt;/code&gt; es un decorador; esto es una función que acepta una función a la que decora.&lt;/p&gt;
&lt;p&gt;El script mencionado arriba es exactamente el mismo que el siguiente, en donde la aplicación del decorador es explícita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Decorating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos el &lt;em&gt;script&lt;/em&gt; y vemos como se comporta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./simple.py
Decorating &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; myfunc at 0x7f3433328668&amp;gt;
Hello world!
Hello world!
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La función se decora una sola vez, en tiempo de declaración; ejecutar varias veces la función no hace repetir el código de la función decoradora. De la misma forma, una llamada a &lt;code&gt;myfunc()&lt;/code&gt; ejecuta la misma función, porque es la función que devolvió el decorador.&lt;/p&gt;
&lt;h2&gt;Decoradores parametrizados&lt;/h2&gt;
&lt;p&gt;El ejemplo anterior era solo un ejemplo. En el mundo real nos puede interesar tener un decorador que sea parametrizable, cambiando sus parámetros para adaptarse a las necesidades.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Registering function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home page&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# same as: home_page = register_route(&amp;#39;/&amp;#39;)(home_page)&lt;/span&gt;

&lt;span class="nd"&gt;@register_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;admin_panel&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin panel&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# same as: admin_panel = register_route(&amp;#39;/admin&amp;#39;)(admin_panel)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;admin_panel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vemos que las funciones están decoradas por la misma función, pero esta viene parametrizada. No os dejéis engañar; la expresión entera es un decorador, haciendo que &lt;code&gt;register_route('/')&lt;/code&gt; devuelva la función con la que vamos a decorar la función final.&lt;/p&gt;
&lt;p&gt;El decorador en sí mismo es &lt;code&gt;wrapper&lt;/code&gt;, pero en este caso tenemos la ventaja de que el decorador tiene visibilidad a las variables y parámetros de &lt;code&gt;register_route&lt;/code&gt;, que tiene la obligación de devolver el decorador, que como ya sabemos es una función que acepta a otra por parámetro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./parametrized.py
Registering &lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; home_page at 0x7f2c07d79758&amp;gt; to /
Registering &lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;&lt;span class="k"&gt;function&lt;/span&gt; admin_panel at 0x7f2c07d797d0&amp;gt; to /admin
admin panel
home page
home page
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es interesante recalcar que las decoraciones se hacen en tiempo de declaración de la función, y luego podemos observar las llamadas que hacemos a las mismas. Otra observación es que el código del decorador ve, no solamente la función decorada &lt;code&gt;func&lt;/code&gt;, sino también los parámetros de la funcion &lt;code&gt;register_route&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esta construcción es típica de algunos &lt;em&gt;frameworks&lt;/em&gt; que usan esta misma forma para crear la tabla de rutas. El reactor del mismo &lt;em&gt;framework&lt;/em&gt; va a ir llamando estas funciones según las peticiones lleguen. como ejemplo, podemos observar el caso del &lt;em&gt;framework&lt;/em&gt; &lt;strong&gt;bottle&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reemplazando la función decorada&lt;/h2&gt;
&lt;p&gt;Hacer cosas en tiempo de declaración de una función puede ayudarnos en muchas ocasiones, pero la verdadera potencia de los decoradores viene cuando podemos interceptar cada llamada a una función, sea para enriquecerla, o para reemplazarla total o parcialmente. Veamos un ejemplo de cada:&lt;/p&gt;
&lt;h3&gt;Enriqueciendo una función&lt;/h3&gt;
&lt;p&gt;Este es un caso claro de &lt;em&gt;man-in-the-middle&lt;/em&gt;. Queremos ejecutar una función que acabe llamando a la original, pero que haga algo más. En este ejemplo, queremos cronometrar nuestras funciones. Para ello hacemos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;measure_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Execution time:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seconds&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@measure_time&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Start&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;End&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con el decorador &lt;code&gt;measure_time&lt;/code&gt;, conseguimos que &lt;code&gt;myfunc()&lt;/code&gt; quede reemplazada por la función &lt;code&gt;wrapper()&lt;/code&gt;, que va a guardar el valor inicial del cronómetro, va a llamar a nuestra función original, y finalmente va a escribir en pantalla la diferencia en el cronómetro.&lt;/p&gt;
&lt;p&gt;Fijaos que el decorador &lt;code&gt;measure_time&lt;/code&gt; no devuelve nunca la función original &lt;code&gt;func&lt;/code&gt;; en cambio declara y devuelve otra que será la función suplantante. Nuevamente, esta función &lt;code&gt;wrapper&lt;/code&gt; tiene visibilidad por los parámetros de decorador, concretamente de &lt;code&gt;func&lt;/code&gt;, que nos interesa conocer porque es la función original a la que queremos llamar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./count_time.py
Start
End
Execution time: &lt;span class="m"&gt;3&lt;/span&gt;.01089406013 seconds
Start
End
Execution time: &lt;span class="m"&gt;3&lt;/span&gt;.00343680382 seconds
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Haciendo dos llamadas podemos comprobar que la función &lt;code&gt;wrapper&lt;/code&gt; es llamada cada vez que invocamos a &lt;code&gt;myfunc&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Reemplazando parcial o totalmente otra función&lt;/h3&gt;
&lt;p&gt;Hay situaciones en las que no interesa hacer el comportamiento habitual. Por ejemplo, podemos restringir ciertas funciones a usuarios validados en nuestra web, o limitarlos por cualquier otro criterio. Vamos a suponer que solo queremos que el usuario &lt;em&gt;root&lt;/em&gt; pueda llegar a ejecutar una función:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;root_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You need root access to do this&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@root_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Access granted&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como en el caso anterior, la función original es reemplazada por &lt;code&gt;wrapper&lt;/code&gt;; la diferencia es que en vez de enriquecerla, va a llamar a la función original solo si se cumple cierto criterio, que en este caso es ejecutar como &lt;em&gt;root&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./no_access.py
You need root access to &lt;span class="k"&gt;do&lt;/span&gt; this
gerard@atlantis:~/projects/decorators$ sudo ./no_access.py
Access granted
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Muchos &lt;em&gt;frameworks&lt;/em&gt; web usan este truco para permitir ejecutar ciertas vistas a usuarios seleccionados.&lt;/p&gt;
&lt;h2&gt;Parámetros y reemplazo de funciones a la vez&lt;/h2&gt;
&lt;p&gt;También es posible utilizar la técnica del reemplazo con un decorador parametrizado, aunque este caso se complica; solo hay que tener en cuenta que necesitamos 3 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una para los parámetros&lt;/li&gt;
&lt;li&gt;El decorador en sí mismo&lt;/li&gt;
&lt;li&gt;La funcion suplantante&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos hacer un decorador para cachear resultados varios segundos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cache_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper1&lt;/span&gt;

&lt;span class="nd"&gt;@cache_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complex_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Started complex_math with n = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;complex_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ended complex_math with n = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; with result = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso tenemos las 3 funciones citadas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función parametrizada (&lt;code&gt;cache_result&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La función decoradora (&lt;code&gt;wrapper1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La función suplantante (&lt;code&gt;wrapper2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada vez que llamemos a la función &lt;code&gt;complex_math&lt;/code&gt;, en realidad vamos a estar llamando a la función &lt;code&gt;wrapper2&lt;/code&gt;, que va a poder acceder a los parámetros de las otras 2, siendo &lt;code&gt;func&lt;/code&gt; la función original decorada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./big_math.py
&lt;span class="m"&gt;13&lt;/span&gt;:32:45 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:48 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:51 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:51 Started complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:32:54 Ended complex_math with &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; with &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo queda verificar que el decorador hace realmente lo que deseábamos: &lt;em&gt;cachear&lt;/em&gt; la primera llamada con &lt;code&gt;n = 3&lt;/code&gt;, de forma que la segunda no tarda los 3 segundos de &lt;em&gt;delay&lt;/em&gt;. La tercera con la misma entrada se recalcula porque el tiempo de &lt;em&gt;cache&lt;/em&gt; se ha pasado mientras se hacía la llamanda con &lt;code&gt;n = 5&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Siendo correctos con la firma de la función&lt;/h2&gt;
&lt;p&gt;Cuando reemplazamos la función original por otra, no engañamos a nadie. Por ejemplo, en un caso simple como el siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Toda ls información referente a la firma de la función sale de acuerdo a la nueva función.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./no_wrap.py
wrapper
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este cambio de firma puede suponer un problema en algún momento futuro. Para eso, la librería estándar nos ofrece una forma de copiar la firma de la función a la función suplantante: un decorador llamado &lt;code&gt;wraps&lt;/code&gt; en el paquete &lt;code&gt;functools&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Con este pequeño añadido nos evitamos el problema, ya que este se encarga de copiar el nombre de la función, los &lt;em&gt;docstrings&lt;/em&gt;, la lista de argumentos y otras propiedades desde la función decorada a la función suplantante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@atlantis:~/projects/decorators$ ./wrap.py
myfunc
gerard@atlantis:~/projects/decorators$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parece una tontería, pero puede evitarnos muchos problemas difíciles de diagnosticar en un futuro no muy lejano.&lt;/p&gt;</content><category term="python"></category><category term="decorador"></category></entry><entry><title>Desarrollando aplicaciones web con python y bottle</title><link href="https://www.linuxsysadmin.ml/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html" rel="alternate"></link><published>2017-05-15T10:00:00+02:00</published><updated>2017-05-15T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-05-15:/2017/05/desarrollando-aplicaciones-web-con-python-y-bottle.html</id><summary type="html">&lt;p&gt;Ya sabéis que me gusta mucho el lenguaje &lt;strong&gt;python&lt;/strong&gt;. Muchos de mis ejemplos y algunas aplicaciones simples no merecen el uso de un &lt;em&gt;framework&lt;/em&gt; tan grande como pueda ser &lt;strong&gt;django&lt;/strong&gt;. Para estos casos me encantan los &lt;em&gt;microframeworks&lt;/em&gt;, y aunque hay varias alternativas disponibles, me gusta especialmente un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ya sabéis que me gusta mucho el lenguaje &lt;strong&gt;python&lt;/strong&gt;. Muchos de mis ejemplos y algunas aplicaciones simples no merecen el uso de un &lt;em&gt;framework&lt;/em&gt; tan grande como pueda ser &lt;strong&gt;django&lt;/strong&gt;. Para estos casos me encantan los &lt;em&gt;microframeworks&lt;/em&gt;, y aunque hay varias alternativas disponibles, me gusta especialmente un &lt;em&gt;microframework&lt;/em&gt; llamado &lt;strong&gt;bottle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una de las mejores características de este &lt;em&gt;framework&lt;/em&gt; es que no es complejo. Ponerse a hacer algo cuesta un tiempo de aprendizaje tendiendo a cero, y &lt;a href="https://bottlepy.org/docs/dev/"&gt;la documentación&lt;/a&gt; es excelente. Solamente nos oculta la complejidad del protocolo &lt;strong&gt;WSGI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Otro punto a favor es la sencillez y simplicidad. No tiene dependencias con ninguna base de datos, motor de plantillas (aunque lleva un motor de plantillas mínimo) o &lt;em&gt;middleware&lt;/em&gt; externo. No añade nada que no tenga una especificación formal, y evita protocolos propios (por ejemplo, sesiones), en favor de especificaciones aceptadas (por ejemplo, &lt;em&gt;cookies&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;Objetos y métodos básicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bottle&lt;/strong&gt;: Objeto principal del &lt;em&gt;framework&lt;/em&gt;, es una forma de aglutinar el &lt;em&gt;callable wsgi&lt;/em&gt; con un conjunto de rutas. Nuestra aplicación va a ser una instancia de este objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request&lt;/strong&gt;: Objeto nos permite acceder a los datos referentes a la petición que nos han hecho. Incluye los parámetros GET, las &lt;em&gt;cookies&lt;/em&gt; y cabeceras, entre otras cosas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;response&lt;/strong&gt;: Objeto que nos permite modificar nuestras repuestas, añadiendo cabeceras, códigos de estado, &lt;em&gt;cookies&lt;/em&gt; y otros conceptos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt;: Método que inyecta nuestro contexto a una plantilla y nos devuelve la respuesta ya formada, lista para devolverla.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;view&lt;/strong&gt;: Lo mismo que el método &lt;strong&gt;template&lt;/strong&gt;, pero en versión decorador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: &lt;em&gt;Helper&lt;/em&gt; que nos permite devolver una redirección a otra URL en nuestro código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: &lt;em&gt;Helper&lt;/em&gt; que nos permite devolver estado de error desde nuestro controlador.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Una aplicación vacía&lt;/h2&gt;
&lt;p&gt;Vamos a crear una carpeta para contener nuestro proyecto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects$ mkdir myapp
gerard@aldebaran:~/projects$ &lt;span class="nb"&gt;cd&lt;/span&gt; myapp/
gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Siguiendo las buenas prácticas, vamos a trabajar con &lt;strong&gt;virtualenv&lt;/strong&gt;, que nos servirá para poner nuestras librerías, que de momento se limitan al &lt;em&gt;framework&lt;/em&gt;. En adelante, es posible poner librerías para acceder a una base de datos, nuevos motores de plantillas y librerías más específicas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~/projects/myapp$ virtualenv .venv
New python executable in /home/gerard/projects/myapp/.venv/bin/python
Installing setuptools, pip, wheel...done.
gerard@aldebaran:~/projects/myapp$ . .venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ pip install bottle
Collecting bottle
Installing collected packages: bottle
Successfully installed bottle-0.12.13
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como queremos poder reproducir nuestro entorno usaremos &lt;em&gt;pip freeze&lt;/em&gt; para guardar las dependencias, en vista a poderlas instalar en un futuro entorno real.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ pip freeze &amp;gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo mínimo para ejecutar una aplicación &lt;em&gt;WSGI compilant&lt;/em&gt; es un servidor &lt;em&gt;WSGI&lt;/em&gt; y la aplicación misma. Una aplicación construida con &lt;strong&gt;bottle&lt;/strong&gt; es básicamente una instancia del objeto &lt;em&gt;Bottle&lt;/em&gt;, a la que iremos registrando rutas. De momento la dejamos vacía, lo que nos va a responder siempre un error 404.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un entorno real, el servidor a usar sería otro, por ejemplo &lt;strong&gt;apache&lt;/strong&gt;, &lt;strong&gt;uwsgi&lt;/strong&gt; o &lt;strong&gt;gunicorn&lt;/strong&gt;, pero para desarrollar, podemos aprovecharnos del servidor integrado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ python -m bottle --debug --reload app:app
Bottle v0.12.13 server starting up &lt;span class="o"&gt;(&lt;/span&gt;using WSGIRefServer&lt;span class="o"&gt;())&lt;/span&gt;...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para nuestra comodidad futura, vamos a poner el comando en un &lt;em&gt;script&lt;/em&gt;, en el que podemos definir nuestras propias variables de entorno o aquellas que queramos aplicar estando en nuestro entorno de desarrollo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat server.sh 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
python -m bottle --debug --reload app:app
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ chmod a+x server.sh 
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ ./server.sh 
Bottle v0.12.13 server starting up &lt;span class="o"&gt;(&lt;/span&gt;using WSGIRefServer&lt;span class="o"&gt;())&lt;/span&gt;...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya podemos dirigirnos a &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt; para comprobar un bonito error 404.&lt;/p&gt;
&lt;h2&gt;Registrando rutas a controladores&lt;/h2&gt;
&lt;p&gt;La idea es muy simple: se registran rutas a funciones que devuelven la respuesta resultado. Hay varias formas de añadir rutas a nuestra aplicación, pero la que más me gusta es el decorador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De esta forma, todas las peticiones GET a / van a devolver una página HTML con el contenido retornado. El código de retorno es un 200 y el &lt;em&gt;content-type&lt;/em&gt; es &lt;em&gt;text/html&lt;/em&gt; por defecto, aunque se puede cambiar con el objeto &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Usando plantillas y segmentos de URL&lt;/h2&gt;
&lt;p&gt;No es una buena práctica poner en el controlador la respuesta HTML. Para eso, &lt;strong&gt;bottle&lt;/strong&gt; nos ofrece un motor de plantillas propio, y la facilidad de trabajar con otros. También nos permite capturar parte de la URL como parámetros; veamos un ejemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle, view

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
@view&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat views/hello.tpl 
&amp;lt;p&amp;gt;Hola &lt;span class="o"&gt;{{&lt;/span&gt; nombre &lt;span class="o"&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En este caso, todo lo que siga a &lt;em&gt;/hello/&lt;/em&gt; en la URL se pasará a la función controlador, como una variable local &lt;em&gt;name&lt;/em&gt;. Nuestra función devuelve un contexto, para que el decorador &lt;em&gt;view&lt;/em&gt; pueda pintar la plantilla &lt;em&gt;hello&lt;/em&gt;, que se encuentra en &lt;em&gt;views/hello.tpl&lt;/em&gt;. Las variables disponibles para la plantilla son las claves del diccionario, que van a valer lo que pongamos como valores en el mismo diccionario.&lt;/p&gt;
&lt;p&gt;En el caso de hacer una petición a &lt;em&gt;/hello/gerard&lt;/em&gt;, la variable local &lt;em&gt;name&lt;/em&gt; va a valer "gerard" y la plantilla va a disponer de una variable &lt;em&gt;nombre&lt;/em&gt; que vale también "gerard".&lt;/p&gt;
&lt;p&gt;Algunas aplicaciones no necesitan plantillas HTML. Por ejemplo una API solo necesitaría convertir una expresión &lt;em&gt;python&lt;/em&gt; en su equivalente JSON, mediante una función adecuada, que podemos ver como un motor de plantillas.&lt;/p&gt;
&lt;h2&gt;Modelos y respuestas distintas&lt;/h2&gt;
&lt;p&gt;No hay ninguna capa de acceso a datos en &lt;strong&gt;bottle&lt;/strong&gt;. Si se necesita acceder a datos, se debe usar alguna librería auxiliar; personalmente me encanta &lt;a href="http://mongoengine.org/"&gt;mongoengine&lt;/a&gt; y &lt;a href="http://docs.peewee-orm.com/en/latest/"&gt;peewee&lt;/a&gt;. Otra opción es implementar un patrón &lt;a href="https://es.wikipedia.org/wiki/Data_Access_Object"&gt;Data Access Object&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aún así, las buenas prácticas incitan a separar el modelo de los controladores, y eso lo podéis hacer fácilmente relegando las funciones u objetos de datos en un módulo aparte.&lt;/p&gt;
&lt;p&gt;Vamos a hacer una ruta para devolver objetos en forma de API con JSON (REST, por supuesto). Así también podemos ver como indicar un &lt;em&gt;content-type&lt;/em&gt; distinto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat app.py 
from bottle import Bottle, view, abort, response
from json import dumps
from models import get_product

&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Bottle&lt;span class="o"&gt;()&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def home&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
@view&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def hello&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;: name,
    &lt;span class="o"&gt;}&lt;/span&gt;

@app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/products/&amp;lt;id&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
def api_get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;
    response.content_type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; product is not None:
        &lt;span class="k"&gt;return&lt;/span&gt; dumps&lt;span class="o"&gt;(&lt;/span&gt;product&lt;span class="o"&gt;)&lt;/span&gt;
    response.status &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ cat models.py 
&lt;span class="nv"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Apple&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Orange&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;.8,
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Pear&amp;#39;&lt;/span&gt;,
        &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.2,
    &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;

def get_product&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; products.get&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; product is not None:
        &lt;span class="k"&gt;return&lt;/span&gt; product.copy&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; None
&lt;span class="o"&gt;(&lt;/span&gt;.venv&lt;span class="o"&gt;)&lt;/span&gt; gerard@aldebaran:~/projects/myapp$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto solo nos queda probar las respuestas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ curl -i http://localhost:8080/products/1
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
Content-Type: application/json

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;.0, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~$ curl -i http://localhost:8080/products/2
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...  
Content-Type: application/json

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;0&lt;/span&gt;.8, &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Orange&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
gerard@aldebaran:~$ curl -i http://localhost:8080/products/22
HTTP/1.0 &lt;span class="m"&gt;404&lt;/span&gt; Not Found
...  
Content-Type: application/json

gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Siguiendo la documentación y usando librerías varias, se puede tener algo simple en muy poco tiempo. Dada la naturaleza del desarrollo web, los controladores se pueden ir añadiendo a medida que se necesiten. Eso nos da tiempo a descubrir las infinitas posibilidades de este &lt;em&gt;microframework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Algunas de las operaciones habituales (sesiones, capa de acceso a datos, autenticaciones varias, conectores a terceros, ...) no vienen. Aquellos con más vista de futuro probablemente vais a hacer código para evitar estos pequeños inconvenientes, pero si no lo queréis, &lt;em&gt;python&lt;/em&gt; os ofrece muchas más soluciones para vuestro uso y disfrute. Los que disfrutáis con la belleza de lo simple, sed bienvenidos.&lt;/p&gt;</content><category term="python"></category><category term="microframework"></category><category term="framework"></category><category term="bottle"></category></entry><entry><title>Escribiendo un servidor DNS en python con twisted</title><link href="https://www.linuxsysadmin.ml/2017/02/escribiendo-un-servidor-dns-en-python-con-twisted.html" rel="alternate"></link><published>2017-02-13T00:00:00+01:00</published><updated>2017-02-13T00:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-02-13:/2017/02/escribiendo-un-servidor-dns-en-python-con-twisted.html</id><summary type="html">&lt;p&gt;El otro día tuvimos una caída del centro de datos de desarrollo. Inmediatamente después vimos que teníamos afectación en el entorno de producción, ya que lanzaba peticiones al &lt;strong&gt;DNS&lt;/strong&gt; de desarrollo. Sin saber claramente porque pasaba, hice un servidor &lt;strong&gt;DNS&lt;/strong&gt; en &lt;strong&gt;python&lt;/strong&gt;, para ver que tipos de peticiones se lanzaban …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día tuvimos una caída del centro de datos de desarrollo. Inmediatamente después vimos que teníamos afectación en el entorno de producción, ya que lanzaba peticiones al &lt;strong&gt;DNS&lt;/strong&gt; de desarrollo. Sin saber claramente porque pasaba, hice un servidor &lt;strong&gt;DNS&lt;/strong&gt; en &lt;strong&gt;python&lt;/strong&gt;, para ver que tipos de peticiones se lanzaban.&lt;/p&gt;
&lt;p&gt;Para hacerlo, utilicé una librería magnífica llamada &lt;strong&gt;twisted&lt;/strong&gt;, que hace la mayoría del trabajo. Aunque su documentación es bastante escasa, tirando de ejemplos pude sacar algo interesante en poco tiempo.&lt;/p&gt;
&lt;h2&gt;Un servidor chivato&lt;/h2&gt;
&lt;p&gt;Cambiamos el fichero &lt;em&gt;/etc/resolv&lt;/em&gt; de nuestro servidor de producción, para añadirle su propia dirección IP, en la que ejecutamos el siguiente &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.names&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DomainError&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSServerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSDatagramProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenUDP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenTCP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si os interesa trabajar con &lt;em&gt;virtualenv&lt;/em&gt;, aquí os dejo el &lt;em&gt;requirements.txt&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/dns$ cat requirements.txt 
&lt;span class="nv"&gt;Twisted&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;.3.2
zope.interface&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.2.0
gerard@sirius:~/projects/dns$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Es el resultado de ejecutar &lt;em&gt;pip install twisted&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Comprobamos lo que pasa cuando el servidor recibe peticiones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; nowhere.com

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.9.5-9+deb8u6-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; nowhere.com
&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; servers found&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NXDOMAIN, id: &lt;span class="m"&gt;42644&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr ra&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;0&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;nowhere.com.           IN  A

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;1&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1#10053&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Wed Aug &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:29:38 CEST &lt;span class="m"&gt;2016&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;29&lt;/span&gt;

gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y en el otro terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/dns$ ./env/bin/python dns.py 
&amp;lt;Query nowhere.com A IN&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este &lt;em&gt;script&lt;/em&gt; implementa un servidor que no es capaz de encontrar el dominio, pero registra la petición recibida. Con el tipo de peticiones nos dimos cuenta de que había algo mal configurado en el entorno de producción.&lt;/p&gt;
&lt;h2&gt;Añadiendo resolución de peticiones&lt;/h2&gt;
&lt;p&gt;La librería &lt;strong&gt;twisted&lt;/strong&gt; ofrece clases para entender las peticiones y para formular las respuestas. Eso nos da una &lt;em&gt;toolbox&lt;/em&gt; muy interesante para hacer nuestro propio servidor.&lt;/p&gt;
&lt;p&gt;Supongamos que queremos asociar &lt;em&gt;example.com&lt;/em&gt; a las direcciones &lt;em&gt;1.2.3.4&lt;/em&gt; y &lt;em&gt;1.2.3.5&lt;/em&gt;; adicionalmente asociaremos también el nombre &lt;em&gt;example.my&lt;/em&gt; a la dirección &lt;em&gt;1.2.3.5&lt;/em&gt;. Se podría utilizar una base de datos, pero vamos a no hacerlo para mantener el ejemplo pequeño.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.names&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;

&lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.my&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;name2ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;ip2name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_responses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name2ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Record_A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PTR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;aux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ip2name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Record_PTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_responses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RRHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;authority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;additional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;additional&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSServerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DynamicResolver&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DNSDatagramProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenUDP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listenTCP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10053&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y si ejecutamos este nuevo &lt;em&gt;script&lt;/em&gt; y le lanzamos peticiones, vemos que funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short example.com
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short example.my
&lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short nowhere.com
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.4
example.com.
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.5
example.com.
example.my.
gerard@sirius:~$ dig @localhost -p &lt;span class="m"&gt;10053&lt;/span&gt; +short -x &lt;span class="m"&gt;1&lt;/span&gt;.2.3.6
gerard@sirius:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aunque ya hay servidores &lt;strong&gt;DNS&lt;/strong&gt; magníficos, podemos levantar uno con &lt;strong&gt;python&lt;/strong&gt; de forma fácil, rápida y sencilla.&lt;/p&gt;</content><category term="python"></category><category term="dns"></category><category term="twisted"></category></entry><entry><title>Usando SSH en nuestros scripts python mediante paramiko</title><link href="https://www.linuxsysadmin.ml/2017/01/usando-ssh-en-nuestros-scripts-python-mediante-paramiko.html" rel="alternate"></link><published>2017-01-23T10:00:00+01:00</published><updated>2017-01-23T10:00:00+01:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2017-01-23:/2017/01/usando-ssh-en-nuestros-scripts-python-mediante-paramiko.html</id><summary type="html">&lt;p&gt;Es muy útil lanzar comandos &lt;strong&gt;SSH&lt;/strong&gt; desde un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, los &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt; se vuelve ilegibles rápidamente, y no nos ofrece el poderío de la librería &lt;strong&gt;python&lt;/strong&gt;. No es de extrañar que herramientas como &lt;strong&gt;ansible&lt;/strong&gt; o &lt;strong&gt;fabric&lt;/strong&gt; estén escritas en &lt;strong&gt;python&lt;/strong&gt;, usando una librería llamada &lt;strong&gt;paramiko …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Es muy útil lanzar comandos &lt;strong&gt;SSH&lt;/strong&gt; desde un &lt;em&gt;script&lt;/em&gt; de &lt;strong&gt;bash&lt;/strong&gt;. Sin embargo, los &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;bash&lt;/strong&gt; se vuelve ilegibles rápidamente, y no nos ofrece el poderío de la librería &lt;strong&gt;python&lt;/strong&gt;. No es de extrañar que herramientas como &lt;strong&gt;ansible&lt;/strong&gt; o &lt;strong&gt;fabric&lt;/strong&gt; estén escritas en &lt;strong&gt;python&lt;/strong&gt;, usando una librería llamada &lt;strong&gt;paramiko&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una vez en el terreno de &lt;strong&gt;python&lt;/strong&gt;, disponemos de todas las opciones que tenemos habitualmente en el lenguaje, como por ejemplo, el módulo de expresiones regulares para &lt;em&gt;parsear&lt;/em&gt; la salida. Estos &lt;em&gt;scripts&lt;/em&gt; quedan muy pequeños, legibles y limpios.&lt;/p&gt;
&lt;p&gt;En este artículo vamos a explicar como instalar y usar &lt;strong&gt;paramiko&lt;/strong&gt;, con un ejemplo simple. El resto quedará a la imaginación de los lectores.&lt;/p&gt;
&lt;h2&gt;Instalando la librería en un virtualenv&lt;/h2&gt;
&lt;p&gt;Vamos a hacernos con el control de &lt;em&gt;root&lt;/em&gt;, de forma interactiva o mediante &lt;strong&gt;sudo&lt;/strong&gt; para instalar las herramientas básicas para utilizar &lt;em&gt;virtualenvs&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install python-virtualenv  
...
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como adelanto, el comando &lt;strong&gt;pip&lt;/strong&gt; se va a ir quejando porque no dispone de un compilador y de ciertas librerías para construir las librerías de las que &lt;strong&gt;paramiko&lt;/strong&gt; depende. Podéis ir instalando estas librerías a medida que las vaya pidiendo, o por comodidad, las instalamos ahora de golpe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@desktop:~# apt-get install gcc python-dev libssl-dev libffi-dev
...  
root@desktop:~# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ya con las dependencias cumplidas, volvemos a utilizar un usuario sin privilegios, por seguridad. Vamos a crear un &lt;em&gt;virtualenv&lt;/em&gt; en una localización arbitraria.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~/ssl$ virtualenv env
Running virtualenv with interpreter /usr/bin/python2
New python executable in env/bin/python2
Also creating executable in env/bin/python
Installing setuptools, pip...done.
gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el &lt;em&gt;virtualenv&lt;/em&gt;, para asegurar que la instalación de &lt;strong&gt;paramiko&lt;/strong&gt; se hace en el mismo, y así no ensuciamos el sistema con nuestras librerías propias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@desktop:~/ssl$ . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalar la librería es tan fácil como utilizar &lt;strong&gt;pip&lt;/strong&gt; o &lt;strong&gt;easy_install&lt;/strong&gt; para instalarla. Como &lt;strong&gt;pip&lt;/strong&gt; es el futuro de las herramientas &lt;strong&gt;python&lt;/strong&gt;, vamos con este comando. Este se va a bajar todos los paquetes y va a construir las librerías auxiliares; es un proceso con mucha salida, pero tarda poco.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ pip install paramiko
...  
Successfully installed paramiko pyasn1 cryptography idna six setuptools enum34 ipaddress cffi pycparser
Cleaning up...
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de aquí, solo queda hacer un script que satisfaga nuestras necesidades.&lt;/p&gt;
&lt;h2&gt;Un script de ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que tenemos un servidor llamado &lt;em&gt;server&lt;/em&gt;, con un usuario &lt;em&gt;gerard&lt;/em&gt; con permiso para hacer &lt;strong&gt;sudo&lt;/strong&gt;. Vamos a lanzar tres comandos por &lt;strong&gt;SSH&lt;/strong&gt;, que nos van a indicar su &lt;em&gt;hostname&lt;/em&gt; y el usuario con el que ejecutamos los comandos, con y sin &lt;strong&gt;sudo&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Siguiendo &lt;a href="http://docs.paramiko.org/en/2.1/"&gt;la documentación&lt;/a&gt;, rápidamente sacamos un &lt;em&gt;script&lt;/em&gt; mínimo. Para poder reutilizarlo en futuras aventuras, vamos a separar la lógica de ejecutar un comando del resto, mediante una función.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ cat test.py 
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import paramiko

def execute_command&lt;span class="o"&gt;(&lt;/span&gt;command, host, user, password, &lt;span class="nv"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;False&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; paramiko.SSHClient&lt;span class="o"&gt;()&lt;/span&gt;
    client.set_missing_host_key_policy&lt;span class="o"&gt;(&lt;/span&gt;paramiko.AutoAddPolicy&lt;span class="o"&gt;())&lt;/span&gt;
    client.connect&lt;span class="o"&gt;(&lt;/span&gt;host, &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;user, &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password, &lt;span class="nv"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; sudo:
        stdin, stdout, &lt;span class="nv"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.exec_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo -S &amp;#39;&lt;/span&gt; + &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        stdin.write&lt;span class="o"&gt;(&lt;/span&gt;password + &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;:
        stdin, stdout, &lt;span class="nv"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; client.exec_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; stdout.read&lt;span class="o"&gt;()&lt;/span&gt;
    client.close&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; output

&lt;span class="nv"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;172.17.0.2&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gerard&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;

print &lt;span class="s1"&gt;&amp;#39;Remote hostname:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD&lt;span class="o"&gt;)&lt;/span&gt;,
print &lt;span class="s1"&gt;&amp;#39;Remote user:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD&lt;span class="o"&gt;)&lt;/span&gt;,
print &lt;span class="s1"&gt;&amp;#39;Remote user after sudo:&amp;#39;&lt;/span&gt;, execute_command&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;whoami&amp;#39;&lt;/span&gt;, HOST, USER, PASSWORD, &lt;span class="nv"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solo nos queda ejecutar para comprobar que funciona como debe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ ./test.py 
Remote hostname: server
Remote user: gerard
Remote user after sudo: root
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;gerard@desktop:~/ssl$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En un &lt;em&gt;script&lt;/em&gt; real, posiblemente habríamos sacado información mas útil, y habríamos &lt;em&gt;parseado&lt;/em&gt; la salida para no mostrar nada que no nos aporte valor. De momento, nos basta con obtener la salida y mostrarla.&lt;/p&gt;</content><category term="ssh"></category><category term="python"></category><category term="paramiko"></category><category term="script"></category></entry><entry><title>Python como una calculadora estadística</title><link href="https://www.linuxsysadmin.ml/2016/10/python-como-una-calculadora-estadistica.html" rel="alternate"></link><published>2016-10-17T08:00:00+02:00</published><updated>2016-10-17T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-10-17:/2016/10/python-como-una-calculadora-estadistica.html</id><summary type="html">&lt;p&gt;El otro día me encontraba en mi trabajo con otra petición muy especial: se necesitaba un &lt;em&gt;check&lt;/em&gt; para &lt;strong&gt;Nagios&lt;/strong&gt; que contara las apariciones de cierto tipo de errores en un fichero de &lt;em&gt;log&lt;/em&gt;. Ese &lt;em&gt;check&lt;/em&gt; debía saltar en función de cuán alejado estaba el valor de las últimas 100 muestras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día me encontraba en mi trabajo con otra petición muy especial: se necesitaba un &lt;em&gt;check&lt;/em&gt; para &lt;strong&gt;Nagios&lt;/strong&gt; que contara las apariciones de cierto tipo de errores en un fichero de &lt;em&gt;log&lt;/em&gt;. Ese &lt;em&gt;check&lt;/em&gt; debía saltar en función de cuán alejado estaba el valor de las últimas 100 muestras.&lt;/p&gt;
&lt;p&gt;Guardar una muestra de valores en un fichero no supone ningún problema en &lt;strong&gt;Linux&lt;/strong&gt;. Sin embargo, hacer cálculos estadísticos en &lt;strong&gt;bash&lt;/strong&gt; es un suicidio. Eso nos obligaba a utilizar un lenguaje mas elaborado, pero existente en todas las máquinas: &lt;strong&gt;python&lt;/strong&gt;. Sin embargo, el módulo &lt;strong&gt;numpy&lt;/strong&gt; no estaba en todas las máquinas interesadas; instalarlo no era una opción. Así que me tocó programarlo a mí.&lt;/p&gt;
&lt;p&gt;Desempolvando mis apuntes de estadística en forma de &lt;a href="https://en.wikipedia.org/wiki/Standard_deviation"&gt;Wikipedia&lt;/a&gt;, tenemos lo siguiente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a finite set of numbers, the standard deviation is found by taking the square root of the average of the squared deviations of the values from their average value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para los matemáticos, también hay la fórmula, aunque para mi, con el ejemplo me vale.&lt;/p&gt;
&lt;h2&gt;Un caso concreto&lt;/h2&gt;
&lt;p&gt;Tenemos el conjunto de valores del ejemplo: 2, 4, 4, 4, 5, 5, 7, 9. Vamos a necesitar su valor medio, que es 5 (la suma de los valores entre el número de valores).&lt;/p&gt;
&lt;p&gt;Obtenemos un nuevo conjunto de desviaciones de los valores respecto a la media: (2-5), (4-5), (4-5), (4-5), (5-5), (5-5), (7-5), (9-5). Para resumir, queda -3, -1, -1, -1, 0, 0, 2, 4.&lt;/p&gt;
&lt;p&gt;El siguiente paso es obtener los cuadrados de las desviaciones anteriores: 9, 1, 1, 1, 0, 0, 4, 16.&lt;/p&gt;
&lt;p&gt;De ese conjunto se saca la media y ya tenemos el cuadrado desviación estándar: (9+1+1+1+0+0+4+16)/8 = 32/8 = 4.&lt;/p&gt;
&lt;p&gt;Finalmente hacemos la raíz cuadrada y obtenemos la desviación estándar: 2.&lt;/p&gt;
&lt;h2&gt;Un script que calcule por nosotros&lt;/h2&gt;
&lt;p&gt;Vamos a simplificar el proceso anterior simplificando el proceso con 3 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;li&gt;Cuadrado de la desviación de un valor concreto&lt;/li&gt;
&lt;li&gt;Raíz cuadrada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La media se utiliza al principio para calcular las desviaciones, y al final, para hacer la media de las desviaciones cuadradas. La otra función va a ser una que nos dé la desviación de un valor al cuadrado, dado su media y el valor mismo.&lt;/p&gt;
&lt;p&gt;Con estas funciones es muy fácil de escribir un código legible, que vamos a guardar en un fichero &lt;em&gt;some_math.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;variance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Average:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StDev:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y solamente nos queda comprobar que funciona, previa concesión de permisos de ejecución.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@aldebaran:~$ ./some_math.py 
Average: 5.0
StDev: 2.0
gerard@aldebaran:~$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Elegante y efectivo...&lt;/p&gt;</content><category term="linux"></category><category term="python"></category><category term="media"></category><category term="desviación estándar"></category></entry><entry><title>Escribiendo bots para Telegram</title><link href="https://www.linuxsysadmin.ml/2016/08/escribiendo-bots-para-telegram.html" rel="alternate"></link><published>2016-08-08T10:00:00+02:00</published><updated>2016-08-08T10:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-08-08:/2016/08/escribiendo-bots-para-telegram.html</id><summary type="html">&lt;p&gt;Aunque no está muy extendido, &lt;strong&gt;Telegram&lt;/strong&gt; es un magnífico cliente de mensajería instantánea. Tiene varios puntos a favor, como por ejemplo seguridad, rapidez y su condición de &lt;em&gt;libre&lt;/em&gt;. Lo que no se conoce tanto es que dispone de una &lt;em&gt;API&lt;/em&gt; para crear &lt;em&gt;bots&lt;/em&gt; que pueden responder automáticamente a sus usuarios …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aunque no está muy extendido, &lt;strong&gt;Telegram&lt;/strong&gt; es un magnífico cliente de mensajería instantánea. Tiene varios puntos a favor, como por ejemplo seguridad, rapidez y su condición de &lt;em&gt;libre&lt;/em&gt;. Lo que no se conoce tanto es que dispone de una &lt;em&gt;API&lt;/em&gt; para crear &lt;em&gt;bots&lt;/em&gt; que pueden responder automáticamente a sus usuarios.&lt;/p&gt;
&lt;p&gt;La variedad de usos que se dan mediante estos &lt;em&gt;bots&lt;/em&gt; es muy variada. Personalmente he visto juegos, asistentes virtuales e incluso lo he usado para tener a mano las alarmas de un entorno de producción.&lt;/p&gt;
&lt;h2&gt;El token&lt;/h2&gt;
&lt;p&gt;Nuestro &lt;em&gt;bot&lt;/em&gt; es un ente propio, que tiene un &lt;em&gt;token&lt;/em&gt; de autenticación, de forma que solamente el que posea el &lt;em&gt;token&lt;/em&gt; pude responder como si fuera el &lt;em&gt;bot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir el &lt;em&gt;token&lt;/em&gt; tenemos que iniciar una conversación con &lt;strong&gt;@BotFather&lt;/strong&gt;, que es el &lt;em&gt;bot&lt;/em&gt; que gobierna al resto. La interfaz es muy simple, y vale la pena de explorar; de momento me limito a resumir los comandos necesarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iniciamos una conversación con &lt;strong&gt;BotFather&lt;/strong&gt; mediante el comando &lt;em&gt;/start&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Le indicamos que queremos un nuevo &lt;em&gt;bot&lt;/em&gt; mediante el comando &lt;em&gt;/newbot&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Le damos un nombre y un &lt;em&gt;username&lt;/em&gt;, tal como nos lo pide.&lt;/li&gt;
&lt;li&gt;El último paso es anotar el &lt;em&gt;token&lt;/em&gt; que nos ofrece &lt;strong&gt;BotFather&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es todo lo que necesitamos para empezar a responder mensajes. Las conversaciones con el &lt;em&gt;bot&lt;/em&gt; se pueden iniciar buscando al &lt;em&gt;bot&lt;/em&gt; por su nombre o su &lt;em&gt;username&lt;/em&gt;. Obviamente, no tenemos nada todavía que responda a los &lt;em&gt;chats&lt;/em&gt; que se hagan a este nuevo &lt;em&gt;bot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay dos formas de responder a este &lt;em&gt;bot&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lo podemos configurar para que llame directamente a un &lt;em&gt;endpoint&lt;/em&gt; protegido con &lt;em&gt;HTTPS&lt;/em&gt; (requiere un certificado válido no autofirmado).&lt;/li&gt;
&lt;li&gt;Podemos tener un programa preguntando por nuevos mensajes periódicamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como no tengo un servidor &lt;em&gt;HTTPS&lt;/em&gt; con certificado adecuado, vamos a ir por la segunda opción.&lt;/p&gt;
&lt;h2&gt;El script de respuesta&lt;/h2&gt;
&lt;p&gt;Vamos a escribir el &lt;em&gt;script&lt;/em&gt; en &lt;strong&gt;python&lt;/strong&gt; por su simplicidad y facilidad. Realmente se podría hacer con cualquier lenguaje, ya que se trata de hacer peticiones web a la &lt;em&gt;API&lt;/em&gt; e interpretarlas.&lt;/p&gt;
&lt;p&gt;Empezaremos por instalar una librería que nos va a facilitar bastante entender las peticiones y crear las respuestas. Lo vamos a hacer en un &lt;em&gt;virtualenv&lt;/em&gt; por limpieza.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gerard@sirius:~/projects/telebot$ virtualenv env
New python executable in /home/gerard/projects/telebot/env/bin/python
Installing setuptools, pip, wheel...done.
gerard@sirius:~/projects/telebot$ . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/telebot$ pip install python-telegram-bot
Collecting python-telegram-bot
  Downloading python_telegram_bot-4.3.3-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;122kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 122kB 471kB/s 
Collecting certifi &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading certifi-2016.2.28-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;366kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 368kB 514kB/s 
Collecting urllib3&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10 &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading urllib3-1.16-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;98kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 102kB 901kB/s 
Collecting future&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.15.2 &lt;span class="o"&gt;(&lt;/span&gt;from python-telegram-bot&lt;span class="o"&gt;)&lt;/span&gt;
Installing collected packages: certifi, urllib3, future, python-telegram-bot
Successfully installed certifi-2016.2.28 future-0.15.2 python-telegram-bot-4.3.3 urllib3-1.16
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; gerard@sirius:~/projects/telebot$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Realmente no hay mucho misterio; siguiendo la documentación se saca rápidamente un &lt;em&gt;script&lt;/em&gt;, al que llamaremos &lt;em&gt;run.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;telegram&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;190363978:AAG0bHpIbidczVYUPhW9UwrwG3n5s54XSlE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UPPER &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;chat_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chat_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*Response*: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parse_mode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUpdates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUpdates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;process_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; es relativamente fácil de entender, así que solo os dejo algunas reflexiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;em&gt;token&lt;/em&gt; usado en &lt;em&gt;telegram.Bot()&lt;/em&gt; es el que nos dio el &lt;strong&gt;BotFather&lt;/strong&gt; (ha sido destruido, así que no penséis en vandalizar).&lt;/li&gt;
&lt;li&gt;Los &lt;em&gt;update_id&lt;/em&gt; son secuenciales; sin embargo, varias lecturas a la &lt;em&gt;API&lt;/em&gt; nos vuelven a traer todos los mensajes. La forma de que no nos los vuelva a dar es especificando un parámetro &lt;em&gt;offset&lt;/em&gt; (aunque en la primera iteración no lo tenemos).&lt;/li&gt;
&lt;li&gt;Se ha decidido por procesar cada &lt;em&gt;update&lt;/em&gt; en una función aparte, ya que cada &lt;em&gt;bot&lt;/em&gt; hará algo diferente con ellos.&lt;/li&gt;
&lt;li&gt;Este &lt;em&gt;bot&lt;/em&gt; de prueba solo va a devolvernos el mensaje que le pasemos en mayúsculas, y solo si este empieza por "UPPER". El resto devuelve "unknown".&lt;/li&gt;
&lt;li&gt;Las respuestas pueden contener lenguaje &lt;em&gt;wiki&lt;/em&gt;, en este caso, &lt;strong&gt;markdown&lt;/strong&gt;; pueden también definir teclados a medida con las respuestas posibles.&lt;/li&gt;
&lt;li&gt;Las respuestas conocen a su receptor mediante el campo &lt;em&gt;chat_id&lt;/em&gt;. Este campo se puede ver como un indicador de sesión, si vuestro &lt;em&gt;bot&lt;/em&gt; mantiene el estado de un "jugador" concreto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La verdad es que es bastante simple la interfaz de la &lt;em&gt;API&lt;/em&gt;.  Con un poco de imaginación y una base de datos, es muy posible hacer un juego conversacional, sea con campos en la base de datos, o mediante una máquina de estados simple. Me quedo con esa idea para el futuro.&lt;/p&gt;</content><category term="telegram"></category><category term="bots"></category><category term="python"></category></entry><entry><title>Consultando una base de datos Oracle en python</title><link href="https://www.linuxsysadmin.ml/2016/04/consultando-una-base-de-datos-oracle-en-python.html" rel="alternate"></link><published>2016-04-18T08:00:00+02:00</published><updated>2016-04-18T08:00:00+02:00</updated><author><name>Gerard</name></author><id>tag:www.linuxsysadmin.ml,2016-04-18:/2016/04/consultando-una-base-de-datos-oracle-en-python.html</id><summary type="html">&lt;p&gt;El otro día estuve optimizando unos &lt;em&gt;scripts&lt;/em&gt; hechos en &lt;em&gt;bash&lt;/em&gt; que había hecho otro. Como resultado del lenguaje usado era un caos de comandos, muchos de ellos para limpiar la salida y darle la forma adecuada. Los reescribí en &lt;em&gt;python&lt;/em&gt; usando la librería &lt;strong&gt;cx_Oracle&lt;/strong&gt;, que compilé en un fichero &lt;em&gt;wheel …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;El otro día estuve optimizando unos &lt;em&gt;scripts&lt;/em&gt; hechos en &lt;em&gt;bash&lt;/em&gt; que había hecho otro. Como resultado del lenguaje usado era un caos de comandos, muchos de ellos para limpiar la salida y darle la forma adecuada. Los reescribí en &lt;em&gt;python&lt;/em&gt; usando la librería &lt;strong&gt;cx_Oracle&lt;/strong&gt;, que compilé en un fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El mayor problema al que te enfrentas si intentas instalar una librería &lt;em&gt;python&lt;/em&gt; que no está en la librería estándar, es que debes usar el gestor de paquetes, previo uso del usuario &lt;strong&gt;root&lt;/strong&gt;. Y eso no siempre es posible.&lt;/p&gt;
&lt;p&gt;Así que para hacer una instalación en mi carpeta personal, me decanté por crear un &lt;strong&gt;virtualenv&lt;/strong&gt; en donde se iba a instalar una &lt;em&gt;wheel&lt;/em&gt; precompilada en una máquina similar. Lo documento para tenerlo a mano.&lt;/p&gt;
&lt;p&gt;Voy a explicar dos procedimientos: el primero es como instalar el &lt;em&gt;package&lt;/em&gt; en una máquina que tenga herramientas de compilación y como empaquetarlo en un fichero &lt;em&gt;wheel&lt;/em&gt;; el segundo consiste en instalar la &lt;em&gt;wheel&lt;/em&gt; localmente en la máquina que la va a usar, a modo de &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para seguir esta guía, necesitamos una máquina con &lt;strong&gt;Linux&lt;/strong&gt; cualquiera, que en mi caso ha sido una &lt;strong&gt;Debian Jessie&lt;/strong&gt;. Estos son los paquetes necesarios como requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unzip&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;libaio1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la máquina en donde se vaya a crear la &lt;em&gt;wheel&lt;/em&gt;, también serán necesarios los siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python-dev&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicionalmente, se necesita descargar el &lt;a href="https://www.oracle.com/downloads/index.html"&gt;Oracle instant client&lt;/a&gt;, concretamente el &lt;strong&gt;basic&lt;/strong&gt; y, en caso de la construcción de la &lt;em&gt;wheel&lt;/em&gt;, también el &lt;strong&gt;sdk&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# ls -1
instantclient-basic-linux-12.1.0.2.0.zip
instantclient-sdk-linux-12.1.0.2.0.zip
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Construyendo el fichero wheel&lt;/h2&gt;
&lt;p&gt;El primer paso consiste en descomprimir el &lt;em&gt;instant client&lt;/em&gt; de Oracle, necesario para cualquier programa que intente conectarse a sus bases de datos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# unzip instantclient-basic-linux-12.1.0.2.0.zip
Archive:  instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle:~# unzip instantclient-sdk-linux-12.1.0.2.0.zip
Archive:  instantclient-sdk-linux-12.1.0.2.0.zip
   creating: instantclient_12_1/sdk/
   creating: instantclient_12_1/sdk/include/
  inflating: instantclient_12_1/sdk/include/oratypes.h
  inflating: instantclient_12_1/sdk/include/occi.h
  inflating: instantclient_12_1/sdk/include/ocikpr.h
  inflating: instantclient_12_1/sdk/include/odci.h
  inflating: instantclient_12_1/sdk/include/xa.h
  inflating: instantclient_12_1/sdk/include/ldap.h
  inflating: instantclient_12_1/sdk/include/oci.h
  inflating: instantclient_12_1/sdk/include/ocidfn.h
  inflating: instantclient_12_1/sdk/include/oci1.h
  inflating: instantclient_12_1/sdk/include/ort.h
  inflating: instantclient_12_1/sdk/include/ociextp.h
  inflating: instantclient_12_1/sdk/include/occiAQ.h
  inflating: instantclient_12_1/sdk/include/ori.h
  inflating: instantclient_12_1/sdk/include/nzerror.h
  inflating: instantclient_12_1/sdk/include/ocixmldb.h
  inflating: instantclient_12_1/sdk/include/ocidef.h
  inflating: instantclient_12_1/sdk/include/occiControl.h
  inflating: instantclient_12_1/sdk/include/ocidem.h
  inflating: instantclient_12_1/sdk/include/nzt.h
  inflating: instantclient_12_1/sdk/include/orid.h
  inflating: instantclient_12_1/sdk/include/ociap.h
  inflating: instantclient_12_1/sdk/include/orl.h
  inflating: instantclient_12_1/sdk/include/ocixstream.h
  inflating: instantclient_12_1/sdk/include/occiObjects.h
  inflating: instantclient_12_1/sdk/include/oci8dp.h
  inflating: instantclient_12_1/sdk/include/oro.h
  inflating: instantclient_12_1/sdk/include/occiCommon.h
  inflating: instantclient_12_1/sdk/include/ociapr.h
  inflating: instantclient_12_1/sdk/include/occiData.h
   creating: instantclient_12_1/sdk/admin/
  inflating: instantclient_12_1/sdk/admin/oraaccess.xsd
 extracting: instantclient_12_1/sdk/ottclasses.zip
   creating: instantclient_12_1/sdk/demo/
  inflating: instantclient_12_1/sdk/demo/occidemo.sql
  inflating: instantclient_12_1/sdk/demo/oraaccess.xml
  inflating: instantclient_12_1/sdk/demo/occiobj.cpp
  inflating: instantclient_12_1/sdk/demo/occidemod.sql
  inflating: instantclient_12_1/sdk/demo/occidml.cpp
  inflating: instantclient_12_1/sdk/demo/occiobj.typ
  inflating: instantclient_12_1/sdk/demo/setuporamysql.sh
  inflating: instantclient_12_1/sdk/demo/cdemo81.c
  inflating: instantclient_12_1/sdk/demo/demo.mk
  inflating: instantclient_12_1/sdk/ott
  inflating: instantclient_12_1/sdk/SDK_README
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para que el sistema sepa donde lo hemos descomprimido, hay que definir la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ORACLE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/instantclient_12_1/
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La compilación de las librerías contenidas en el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; tiene un error y busca una librería llamada &lt;em&gt;libclntsh.so&lt;/em&gt;, que no se llama así en el &lt;em&gt;runtime&lt;/em&gt;. Se puede evitar el problema copiando la librería con el nuevo nombre, o mediante un enlace simbólico.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# &lt;span class="nb"&gt;cd&lt;/span&gt; instantclient_12_1/
root@oracle:~/instantclient_12_1# ln -s libclntsh.so.12.1 libclntsh.so
root@oracle:~/instantclient_12_1# &lt;span class="nb"&gt;cd&lt;/span&gt; ..
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y con esto ya podemos empezar. Creamos un &lt;strong&gt;virtualenv&lt;/strong&gt; que nos va a servir como plataforma de construcción del fichero &lt;em&gt;wheel&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# virtualenv env
New python executable in /root/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se activa el entorno virtual y se instala la librería mediante &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle:~# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip install cx_Oracle
Collecting cx-Oracle
  Using cached cx_Oracle-5.2.1.tar.gz
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: cx-Oracle
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; cx-Oracle ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/1f/38/66/b37c50906777b231a241ee02134f0ae018615519af43566269
Successfully built cx-Oracle
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos verificar si funciona cargando el módulo, y por ejemplo, preguntando la versión del mismo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: libclntsh.so.12.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este es un mal resultado; nos indica que no se encuentra un fichero &lt;em&gt;.so&lt;/em&gt;. Este fichero está en &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;, pero el sistema intenta buscar en &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt;. Con modificar esta variable de entorno funciona.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ORACLE_HOME&lt;/span&gt;:&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otro error es que se queje de que no encuentra &lt;em&gt;libaio.so&lt;/em&gt;. Esto indica que os habéis saltado los requisitos y necesitáis instalarlos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: libaio.so.1: cannot open shared object file: No such file or directory
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# apt-get install libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes NUEVOS:
  libaio1
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;1&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;9&lt;/span&gt;.634 B de archivos.
Se utilizarán &lt;span class="m"&gt;13&lt;/span&gt;,3 kB de espacio de disco adicional después de esta operación.
...
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente obtenemos un resultado correcto, que nos indica que tenemos instalada la librería en nuestro entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos aprovechar esta compilación para máquinas con el mismo tipo de procesador y con la misma versión de &lt;strong&gt;python&lt;/strong&gt;, creando un fichero &lt;em&gt;wheel&lt;/em&gt; con la librería ya compilada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~# pip wheel cx_Oracle
Collecting cx-Oracle
  Saved ./cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Skipping cx-Oracle, due to already being wheel.
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y ese es el fichero que vamos a distribuir a los entornos de producción donde necesitemos crear &lt;em&gt;scripts&lt;/em&gt; en &lt;strong&gt;python&lt;/strong&gt; que se conecten a Oracle.&lt;/p&gt;
&lt;h2&gt;Instalando en otras máquinas&lt;/h2&gt;
&lt;p&gt;Vamos a suponer que nos interesa poner el &lt;em&gt;runtime&lt;/em&gt; de Oracle y la carpeta con nuestros &lt;em&gt;scripts&lt;/em&gt; en &lt;em&gt;/opt/&lt;/em&gt;. De hecho, nada impide que se haga en una carpeta personal, en la que tengamos privilegios completos.&lt;/p&gt;
&lt;p&gt;También vamos a necesitar un &lt;em&gt;instant client&lt;/em&gt; para poder funcionar, aunque esta vez no se necesitan enlaces simbólicos ni declarar la variable de entorno &lt;strong&gt;ORACLE_HOME&lt;/strong&gt;. Lo descargamos en su localización deseada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# unzip /root/instantclient-basic-linux-12.1.0.2.0.zip
Archive:  /root/instantclient-basic-linux-12.1.0.2.0.zip
  inflating: instantclient_12_1/adrci
  inflating: instantclient_12_1/BASIC_README
  inflating: instantclient_12_1/genezi
  inflating: instantclient_12_1/libclntshcore.so.12.1
  inflating: instantclient_12_1/libclntsh.so.12.1
  inflating: instantclient_12_1/libnnz12.so
  inflating: instantclient_12_1/libocci.so.12.1
  inflating: instantclient_12_1/libociei.so
  inflating: instantclient_12_1/libocijdbc12.so
  inflating: instantclient_12_1/libons.so
  inflating: instantclient_12_1/liboramysql12.so
  inflating: instantclient_12_1/ojdbc6.jar
  inflating: instantclient_12_1/ojdbc7.jar
  inflating: instantclient_12_1/uidrvci
  inflating: instantclient_12_1/xstreams.jar
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las dependencias deberían estar ya instaladas, pero en mi caso no lo estaban. Las instalamos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# apt-get install python libaio1
Leyendo lista de paquetes... Hecho
Creando árbol de dependencias
Leyendo la información de estado... Hecho
Se instalarán los siguientes paquetes extras:
  file libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python-minimal python2.7 python2.7-minimal
Paquetes sugeridos:
  python-doc python-tk python2.7-doc binutils binfmt-support
Se instalarán los siguientes paquetes NUEVOS:
  file libaio1 libexpat1 libffi6 libmagic1 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 mime-support
  python python-minimal python2.7 python2.7-minimal
&lt;span class="m"&gt;0&lt;/span&gt; actualizados, &lt;span class="m"&gt;14&lt;/span&gt; nuevos se instalarán, &lt;span class="m"&gt;0&lt;/span&gt; para eliminar y &lt;span class="m"&gt;0&lt;/span&gt; no actualizados.
Se necesita descargar &lt;span class="m"&gt;5&lt;/span&gt;.020 kB de archivos.
Se utilizarán &lt;span class="m"&gt;21&lt;/span&gt;,3 MB de espacio de disco adicional después de esta operación.
¿Desea continuar? &lt;span class="o"&gt;[&lt;/span&gt;S/n&lt;span class="o"&gt;]&lt;/span&gt; s
...  
root@oracle2:/opt#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creamos la carpeta que va a contener el entorno virtual y los &lt;em&gt;scripts&lt;/em&gt;, y creamos en ella el entorno virtual.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt# mkdir scripts
root@oracle2:/opt# &lt;span class="nb"&gt;cd&lt;/span&gt; scripts/
root@oracle2:/opt/scripts# virtualenv env
New python executable in /opt/scripts/env/bin/python
Installing setuptools, pip, wheel...done.
root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activamos el entorno virtual y le instalamos el fichero &lt;em&gt;wheel&lt;/em&gt;, que habremos copiado en algún sitio. Este fichero es local a la máquina, y no se consulta el repositorio de &lt;strong&gt;python&lt;/strong&gt; remoto para nada. De hecho, un &lt;em&gt;wheel&lt;/em&gt; es un fichero &lt;em&gt;.zip&lt;/em&gt; normal, que se descomprime en la carpeta adecuada del &lt;strong&gt;virtualenv&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@oracle2:/opt/scripts# . env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# pip install /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Processing /root/cx_Oracle-5.2.1-cp27-cp27mu-linux_i686.whl
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-5.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probamos que funcione; es importante definir la variable de entorno &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; para que encuentre el &lt;em&gt;runtime&lt;/em&gt; de Oracle. Es muy útil ponerlo en el fichero &lt;em&gt;~/.bashrc&lt;/em&gt; para que se cargue solo al abrir el &lt;em&gt;shell&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opcionalmente, podemos reducir la cantidad de librerías que conforman el &lt;em&gt;instant client&lt;/em&gt;, ya que solo se necesitan 4, y reduce su tamaño de forma dramática.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
169M    /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos ver que el &lt;em&gt;package&lt;/em&gt; &lt;strong&gt;cx_Oracle&lt;/strong&gt; es un fichero &lt;em&gt;.so&lt;/em&gt; y que este requiere de los otros 4 en el &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(env) root@oracle2:/opt/scripts# find env/ -name &amp;quot;*.so&amp;quot;
env/lib/python2.7/site-packages/cx_Oracle.so
(env) root@oracle2:/opt/scripts# ldd env/lib/python2.7/site-packages/cx_Oracle.so | grep instant
        libclntsh.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntsh.so.12.1 (0xb5387000)
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4d9d000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4d69000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4a90000)
(env) root@oracle2:/opt/scripts# ldd /opt/instantclient_12_1/lib{clntsh,nnz,ons}* | grep instant
/opt/instantclient_12_1/libclntshcore.so.12.1:
/opt/instantclient_12_1/libclntsh.so.12.1:
        libnnz12.so =&amp;gt; /opt/instantclient_12_1/libnnz12.so (0xb4f8c000)
        libons.so =&amp;gt; /opt/instantclient_12_1/libons.so (0xb4f58000)
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb4aec000)
/opt/instantclient_12_1/libnnz12.so:
        libclntshcore.so.12.1 =&amp;gt; /opt/instantclient_12_1/libclntshcore.so.12.1 (0xb7115000)
/opt/instantclient_12_1/libons.so:
(env) root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo que significa que debería ser seguro eliminar el resto. Así que lo hacemos. Guardad una copia de seguridad antes de eliminar nada.&lt;/p&gt;
&lt;p&gt;Tras eliminar lo que no nos sirve, la carpeta queda así:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# tree /opt/instantclient_12_1/
/opt/instantclient_12_1/
├── libclntshcore.so.12.1
├── libclntsh.so.12.1
├── libnnz12.so
└── libons.so

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# du -sh /opt/instantclient_12_1/
55M     /opt/instantclient_12_1/
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No está nada mal; hemos pasado de 169mb a 55mb. Comprobamos que sigue funcionando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# python -c &lt;span class="s2"&gt;&amp;quot;import cx_Oracle; print cx_Oracle.version&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;.2.1
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y parece correcto.&lt;/p&gt;
&lt;h2&gt;Uso del package cx_Oracle&lt;/h2&gt;
&lt;p&gt;En este punto hay que seguir la documentación del módulo, que no es muy diferente de otras bases de datos; &lt;strong&gt;cx_Oracle&lt;/strong&gt; sigue la misma especificación para todos los módulos de bases de datos.&lt;/p&gt;
&lt;p&gt;La idea es que se crea un objeto &lt;strong&gt;conexión&lt;/strong&gt;, del que se saca un &lt;strong&gt;cursor&lt;/strong&gt; para cada consulta que queramos ejecutar, y que se itera para obtener las &lt;strong&gt;filas&lt;/strong&gt;. Pongamos un ejemplo simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# cat list_fruits.py
&lt;span class="c1"&gt;#!/usr/bin/env python&lt;/span&gt;

import cx_Oracle

&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_host&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_port&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_sid&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;SERVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_service_name&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nobody&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;

&lt;span class="nv"&gt;dsn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.makedsn&lt;span class="o"&gt;(&lt;/span&gt;HOST, PORT, SID, SERVICE&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; cx_Oracle.connect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER, &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PASSWORD, &lt;span class="nv"&gt;dsn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dsn&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;select name, price from fruits&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; connection.cursor&lt;span class="o"&gt;()&lt;/span&gt;
cursor.execute&lt;span class="o"&gt;(&lt;/span&gt;query&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; row in cursor:
    print &lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;row&lt;span class="o"&gt;)&lt;/span&gt;
cursor.close&lt;span class="o"&gt;()&lt;/span&gt;

connection.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ejecutamos como cualquier otro &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts# ./list_fruits.py
Apple&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.99
Orange&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.89
Pear&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.19
&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; root@oracle2:/opt/scripts#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y obtenemos los datos deseados, con la facilidad que nos aporta &lt;strong&gt;python&lt;/strong&gt; para dar formato fácil a la salida de nuestros &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="debian"></category><category term="jessie"></category><category term="python"></category><category term="oracle"></category><category term="script"></category><category term="virtualenv"></category><category term="wheel"></category></entry></feed>